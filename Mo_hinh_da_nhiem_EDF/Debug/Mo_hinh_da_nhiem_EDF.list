
Mo_hinh_da_nhiem_EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b944  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800ba58  0800ba58  0000ca58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfa8  0800bfa8  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfa8  0800bfa8  0000cfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfb0  0800bfb0  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfb0  0800bfb0  0000cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfb4  0800bfb4  0000cfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800bfb8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004044  200001e8  0800c1a0  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000422c  0800c1a0  0000d22c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ceba  00000000  00000000  0000d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004023  00000000  00000000  0002a0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  0002e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013af  00000000  00000000  0002fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a980  00000000  00000000  00030def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ceaf  00000000  00000000  0004b76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099bed  00000000  00000000  0006861e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010220b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ce8  00000000  00000000  00102250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00109f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba3c 	.word	0x0800ba3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ba3c 	.word	0x0800ba3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <I2C_LCD_ExpanderWrite+0x60>)
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	785a      	ldrb	r2, [r3, #1]
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	490f      	ldr	r1, [pc, #60]	@ (8000fa8 <I2C_LCD_ExpanderWrite+0x64>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	3304      	adds	r3, #4
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	490b      	ldr	r1, [pc, #44]	@ (8000fa8 <I2C_LCD_ExpanderWrite+0x64>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	3308      	adds	r3, #8
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	f107 020f 	add.w	r2, r7, #15
 8000f92:	2364      	movs	r3, #100	@ 0x64
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	f002 f914 	bl	80031c4 <HAL_I2C_Master_Transmit>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	0800bb5c 	.word	0x0800bb5c

08000fac <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffbb 	bl	8000f44 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <I2C_LCD_EnPulse+0x78>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b12      	ldr	r3, [pc, #72]	@ (8001024 <I2C_LCD_EnPulse+0x78>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d8f7      	bhi.n	8000fda <I2C_LCD_EnPulse+0x2e>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffa4 	bl	8000f44 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <I2C_LCD_EnPulse+0x78>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	2332      	movs	r3, #50	@ 0x32
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <I2C_LCD_EnPulse+0x78>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <I2C_LCD_EnPulse+0x5c>
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200002a8 	.word	0x200002a8

08001028 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8001038:	79ba      	ldrb	r2, [r7, #6]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff80 	bl	8000f44 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8001044:	79ba      	ldrb	r2, [r7, #6]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffae 	bl	8000fac <I2C_LCD_EnPulse>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	460b      	mov	r3, r1
 8001064:	71bb      	strb	r3, [r7, #6]
 8001066:	4613      	mov	r3, r2
 8001068:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 800106a:	79bb      	ldrb	r3, [r7, #6]
 800106c:	f023 030f 	bic.w	r3, r3, #15
 8001070:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8001072:	79bb      	ldrb	r3, [r7, #6]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	797b      	ldrb	r3, [r7, #5]
 800107c:	4313      	orrs	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ffcf 	bl	8001028 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800108a:	7bba      	ldrb	r2, [r7, #14]
 800108c:	797b      	ldrb	r3, [r7, #5]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2da      	uxtb	r2, r3
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffc6 	bl	8001028 <I2C_LCD_Write4Bits>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	4613      	mov	r3, r2
 80010b2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80010b4:	79b9      	ldrb	r1, [r7, #6]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2200      	movs	r2, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ffcc 	bl	8001058 <I2C_LCD_Send>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80010d8:	79b9      	ldrb	r1, [r7, #6]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2201      	movs	r2, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ffba 	bl	8001058 <I2C_LCD_Send>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80010f6:	bf00      	nop
 80010f8:	f001 fad8 	bl	80026ac <HAL_GetTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b31      	cmp	r3, #49	@ 0x31
 8001100:	d9fa      	bls.n	80010f8 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2130      	movs	r1, #48	@ 0x30
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffcc 	bl	80010a4 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001110:	e011      	b.n	8001136 <I2C_LCD_Init+0x4a>
 8001112:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <I2C_LCD_Init+0x100>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b32      	ldr	r3, [pc, #200]	@ (80011ec <I2C_LCD_Init+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <I2C_LCD_Init+0x34>
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001132:	3301      	adds	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	2b04      	cmp	r3, #4
 800113a:	d9ea      	bls.n	8001112 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2130      	movs	r1, #48	@ 0x30
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ffaf 	bl	80010a4 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
 800114a:	e011      	b.n	8001170 <I2C_LCD_Init+0x84>
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <I2C_LCD_Init+0x100>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <I2C_LCD_Init+0x100>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	429a      	cmp	r2, r3
 8001168:	d8f7      	bhi.n	800115a <I2C_LCD_Init+0x6e>
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	3301      	adds	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d9ea      	bls.n	800114c <I2C_LCD_Init+0x60>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2130      	movs	r1, #48	@ 0x30
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff92 	bl	80010a4 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <I2C_LCD_Init+0x100>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	2396      	movs	r3, #150	@ 0x96
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <I2C_LCD_Init+0x100>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <I2C_LCD_Init+0xa0>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2102      	movs	r1, #2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff7f 	bl	80010a4 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2128      	movs	r1, #40	@ 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff7a 	bl	80010a4 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	210c      	movs	r1, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff75 	bl	80010a4 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2106      	movs	r1, #6
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff70 	bl	80010a4 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <I2C_LCD_Init+0x104>)
 80011c8:	2104      	movs	r1, #4
 80011ca:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <I2C_LCD_Init+0x104>)
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	2208      	movs	r2, #8
 80011d8:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f809 	bl	80011f4 <I2C_LCD_Clear>
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	@ 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200002a8 	.word	0x200002a8
 80011f0:	20000204 	.word	0x20000204

080011f4 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff4e 	bl	80010a4 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e011      	b.n	8001232 <I2C_LCD_Clear+0x3e>
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <I2C_LCD_Clear+0x50>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <I2C_LCD_Clear+0x50>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <I2C_LCD_Clear+0x28>
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d9ea      	bls.n	800120e <I2C_LCD_Clear+0x1a>
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200002a8 	.word	0x200002a8

08001248 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	460b      	mov	r3, r1
 8001254:	71bb      	strb	r3, [r7, #6]
 8001256:	4613      	mov	r3, r2
 8001258:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <I2C_LCD_SetCursor+0x7c>)
 800125c:	f107 0408 	add.w	r4, r7, #8
 8001260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	4917      	ldr	r1, [pc, #92]	@ (80012c8 <I2C_LCD_SetCursor+0x80>)
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	330a      	adds	r3, #10
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	797a      	ldrb	r2, [r7, #5]
 800127a:	429a      	cmp	r2, r3
 800127c:	d90a      	bls.n	8001294 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	4911      	ldr	r1, [pc, #68]	@ (80012c8 <I2C_LCD_SetCursor+0x80>)
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	330a      	adds	r3, #10
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8001294:	797b      	ldrb	r3, [r7, #5]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	3318      	adds	r3, #24
 800129a:	443b      	add	r3, r7
 800129c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	4413      	add	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fef4 	bl	80010a4 <I2C_LCD_Cmd>
}
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}
 80012c4:	0800ba58 	.word	0x0800ba58
 80012c8:	0800bb5c 	.word	0x0800bb5c

080012cc <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 80012d8:	e008      	b.n	80012ec <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	603a      	str	r2, [r7, #0]
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff feee 	bl	80010c8 <I2C_LCD_Data>
    while (*Str)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f2      	bne.n	80012da <I2C_LCD_WriteString+0xe>
    }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <DelayMicro+0x34>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <DelayMicro+0x38>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	0ddb      	lsrs	r3, r3, #23
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 800131c:	bf00      	nop
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1fa      	bne.n	800131e <DelayMicro+0x1e>
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	20000010 	.word	0x20000010
 8001338:	ee9bfab5 	.word	0xee9bfab5

0800133c <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 800134e:	2104      	movs	r1, #4
 8001350:	480e      	ldr	r0, [pc, #56]	@ (800138c <dht22_init+0x50>)
 8001352:	f001 fcef 	bl	8002d34 <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 8001356:	2304      	movs	r3, #4
 8001358:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800135a:	2311      	movs	r3, #17
 800135c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 8001366:	463b      	mov	r3, r7
 8001368:	4619      	mov	r1, r3
 800136a:	4808      	ldr	r0, [pc, #32]	@ (800138c <dht22_init+0x50>)
 800136c:	f001 fb5e 	bl	8002a2c <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 8001370:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001374:	f001 f9a4 	bl	80026c0 <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	2104      	movs	r1, #4
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <dht22_init+0x50>)
 800137e:	f001 fdac 	bl	8002eda <HAL_GPIO_WritePin>

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40010800 	.word	0x40010800

08001390 <DHT22_Get_Temp>:

uint8_t DHT22_Get_Temp(float *Temp)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16;
	uint8_t i, j = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	4854      	ldr	r0, [pc, #336]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 80013a2:	f001 fd9a 	bl	8002eda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	2104      	movs	r1, #4
 80013aa:	4852      	ldr	r0, [pc, #328]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 80013ac:	f001 fd95 	bl	8002eda <HAL_GPIO_WritePin>
	DelayMicro(2000);
 80013b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013b4:	f7ff ffa4 	bl	8001300 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2104      	movs	r1, #4
 80013bc:	484d      	ldr	r0, [pc, #308]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 80013be:	f001 fd8c 	bl	8002eda <HAL_GPIO_WritePin>
	DelayMicro(1200);
 80013c2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80013c6:	f7ff ff9b 	bl	8001300 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);	
 80013ca:	2201      	movs	r2, #1
 80013cc:	2104      	movs	r1, #4
 80013ce:	4849      	ldr	r0, [pc, #292]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 80013d0:	f001 fd83 	bl	8002eda <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40 	
 80013d4:	2027      	movs	r0, #39	@ 0x27
 80013d6:	f7ff ff93 	bl	8001300 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 80013da:	2104      	movs	r1, #4
 80013dc:	4845      	ldr	r0, [pc, #276]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 80013de:	f001 fd65 	bl	8002eac <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d101      	bne.n	80013ec <DHT22_Get_Temp+0x5c>
	{
		return 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e07e      	b.n	80014ea <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 80013ec:	2050      	movs	r0, #80	@ 0x50
 80013ee:	f7ff ff87 	bl	8001300 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 80013f2:	2104      	movs	r1, #4
 80013f4:	483f      	ldr	r0, [pc, #252]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 80013f6:	f001 fd59 	bl	8002eac <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <DHT22_Get_Temp+0x74>
	{
		return 0;
 8001400:	2300      	movs	r3, #0
 8001402:	e072      	b.n	80014ea <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 8001404:	2050      	movs	r0, #80	@ 0x50
 8001406:	f7ff ff7b 	bl	8001300 <DelayMicro>

	for (j=0; j<5; j++)
 800140a:	2300      	movs	r3, #0
 800140c:	757b      	strb	r3, [r7, #21]
 800140e:	e040      	b.n	8001492 <DHT22_Get_Temp+0x102>
	{
		dataArray[j]=0;
 8001410:	7d7b      	ldrb	r3, [r7, #21]
 8001412:	3318      	adds	r3, #24
 8001414:	443b      	add	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	75bb      	strb	r3, [r7, #22]
 8001420:	e031      	b.n	8001486 <DHT22_Get_Temp+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);	
 8001422:	bf00      	nop
 8001424:	2104      	movs	r1, #4
 8001426:	4833      	ldr	r0, [pc, #204]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 8001428:	f001 fd40 	bl	8002eac <HAL_GPIO_ReadPin>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f8      	beq.n	8001424 <DHT22_Get_Temp+0x94>
			DelayMicro(30);
 8001432:	201e      	movs	r0, #30
 8001434:	f7ff ff64 	bl	8001300 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 8001438:	2104      	movs	r1, #4
 800143a:	482e      	ldr	r0, [pc, #184]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 800143c:	f001 fd36 	bl	8002eac <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d014      	beq.n	8001470 <DHT22_Get_Temp+0xe0>
				dataArray[j] |= (1<<(7-i));
 8001446:	7d7b      	ldrb	r3, [r7, #21]
 8001448:	3318      	adds	r3, #24
 800144a:	443b      	add	r3, r7
 800144c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001450:	b25a      	sxtb	r2, r3
 8001452:	7dbb      	ldrb	r3, [r7, #22]
 8001454:	f1c3 0307 	rsb	r3, r3, #7
 8001458:	2101      	movs	r1, #1
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b25a      	sxtb	r2, r3
 8001464:	7d7b      	ldrb	r3, [r7, #21]
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	3318      	adds	r3, #24
 800146a:	443b      	add	r3, r7
 800146c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);				
 8001470:	bf00      	nop
 8001472:	2104      	movs	r1, #4
 8001474:	481f      	ldr	r0, [pc, #124]	@ (80014f4 <DHT22_Get_Temp+0x164>)
 8001476:	f001 fd19 	bl	8002eac <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d0f8      	beq.n	8001472 <DHT22_Get_Temp+0xe2>
		for(i=0; i<8; i++)
 8001480:	7dbb      	ldrb	r3, [r7, #22]
 8001482:	3301      	adds	r3, #1
 8001484:	75bb      	strb	r3, [r7, #22]
 8001486:	7dbb      	ldrb	r3, [r7, #22]
 8001488:	2b07      	cmp	r3, #7
 800148a:	d9ca      	bls.n	8001422 <DHT22_Get_Temp+0x92>
	for (j=0; j<5; j++)
 800148c:	7d7b      	ldrb	r3, [r7, #21]
 800148e:	3301      	adds	r3, #1
 8001490:	757b      	strb	r3, [r7, #21]
 8001492:	7d7b      	ldrb	r3, [r7, #21]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d9bb      	bls.n	8001410 <DHT22_Get_Temp+0x80>
		}
	}
	myChecksum = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 800149c:	2300      	movs	r3, #0
 800149e:	753b      	strb	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <DHT22_Get_Temp+0x128>
	{
		myChecksum += dataArray[k];
 80014a2:	7d3b      	ldrb	r3, [r7, #20]
 80014a4:	3318      	adds	r3, #24
 80014a6:	443b      	add	r3, r7
 80014a8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	4413      	add	r3, r2
 80014b0:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	753b      	strb	r3, [r7, #20]
 80014b8:	7d3b      	ldrb	r3, [r7, #20]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d9f1      	bls.n	80014a2 <DHT22_Get_Temp+0x112>
	}
		Temp16 = (dataArray[2] <<8) | dataArray[3];
 80014be:	7bbb      	ldrb	r3, [r7, #14]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	827b      	strh	r3, [r7, #18]

		*Temp = Temp16/10.0f;
 80014ce:	8a7b      	ldrh	r3, [r7, #18]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb93 	bl	8000bfc <__aeabi_i2f>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4907      	ldr	r1, [pc, #28]	@ (80014f8 <DHT22_Get_Temp+0x168>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc96 	bl	8000e0c <__aeabi_fdiv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	601a      	str	r2, [r3, #0]
		return 1;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40010800 	.word	0x40010800
 80014f8:	41200000 	.word	0x41200000

080014fc <DHT22_Get_Humidity>:
uint8_t DHT22_Get_Humidity(float *Humidity)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Humid16;
	uint8_t i, j = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2104      	movs	r1, #4
 800150c:	4854      	ldr	r0, [pc, #336]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 800150e:	f001 fce4 	bl	8002eda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2104      	movs	r1, #4
 8001516:	4852      	ldr	r0, [pc, #328]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 8001518:	f001 fcdf 	bl	8002eda <HAL_GPIO_WritePin>
	DelayMicro(2000);
 800151c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001520:	f7ff feee 	bl	8001300 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2104      	movs	r1, #4
 8001528:	484d      	ldr	r0, [pc, #308]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 800152a:	f001 fcd6 	bl	8002eda <HAL_GPIO_WritePin>
	DelayMicro(1200);
 800152e:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001532:	f7ff fee5 	bl	8001300 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2104      	movs	r1, #4
 800153a:	4849      	ldr	r0, [pc, #292]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 800153c:	f001 fccd 	bl	8002eda <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40
 8001540:	2027      	movs	r0, #39	@ 0x27
 8001542:	f7ff fedd 	bl	8001300 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 8001546:	2104      	movs	r1, #4
 8001548:	4845      	ldr	r0, [pc, #276]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 800154a:	f001 fcaf 	bl	8002eac <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <DHT22_Get_Humidity+0x5c>
	{
		return 0;
 8001554:	2300      	movs	r3, #0
 8001556:	e07e      	b.n	8001656 <DHT22_Get_Humidity+0x15a>
	}
	DelayMicro(80);
 8001558:	2050      	movs	r0, #80	@ 0x50
 800155a:	f7ff fed1 	bl	8001300 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 800155e:	2104      	movs	r1, #4
 8001560:	483f      	ldr	r0, [pc, #252]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 8001562:	f001 fca3 	bl	8002eac <HAL_GPIO_ReadPin>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <DHT22_Get_Humidity+0x74>
	{
		return 0;
 800156c:	2300      	movs	r3, #0
 800156e:	e072      	b.n	8001656 <DHT22_Get_Humidity+0x15a>
	}
	DelayMicro(80);
 8001570:	2050      	movs	r0, #80	@ 0x50
 8001572:	f7ff fec5 	bl	8001300 <DelayMicro>

	for (j=0; j<5; j++)
 8001576:	2300      	movs	r3, #0
 8001578:	757b      	strb	r3, [r7, #21]
 800157a:	e040      	b.n	80015fe <DHT22_Get_Humidity+0x102>
	{
		dataArray[j]=0;
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	3318      	adds	r3, #24
 8001580:	443b      	add	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 8001588:	2300      	movs	r3, #0
 800158a:	75bb      	strb	r3, [r7, #22]
 800158c:	e031      	b.n	80015f2 <DHT22_Get_Humidity+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);
 800158e:	bf00      	nop
 8001590:	2104      	movs	r1, #4
 8001592:	4833      	ldr	r0, [pc, #204]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 8001594:	f001 fc8a 	bl	8002eac <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f8      	beq.n	8001590 <DHT22_Get_Humidity+0x94>
			DelayMicro(30);
 800159e:	201e      	movs	r0, #30
 80015a0:	f7ff feae 	bl	8001300 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 80015a4:	2104      	movs	r1, #4
 80015a6:	482e      	ldr	r0, [pc, #184]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 80015a8:	f001 fc80 	bl	8002eac <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d014      	beq.n	80015dc <DHT22_Get_Humidity+0xe0>
				dataArray[j] |= (1<<(7-i));
 80015b2:	7d7b      	ldrb	r3, [r7, #21]
 80015b4:	3318      	adds	r3, #24
 80015b6:	443b      	add	r3, r7
 80015b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	7dbb      	ldrb	r3, [r7, #22]
 80015c0:	f1c3 0307 	rsb	r3, r3, #7
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b25a      	sxtb	r2, r3
 80015d0:	7d7b      	ldrb	r3, [r7, #21]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	3318      	adds	r3, #24
 80015d6:	443b      	add	r3, r7
 80015d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);
 80015dc:	bf00      	nop
 80015de:	2104      	movs	r1, #4
 80015e0:	481f      	ldr	r0, [pc, #124]	@ (8001660 <DHT22_Get_Humidity+0x164>)
 80015e2:	f001 fc63 	bl	8002eac <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d0f8      	beq.n	80015de <DHT22_Get_Humidity+0xe2>
		for(i=0; i<8; i++)
 80015ec:	7dbb      	ldrb	r3, [r7, #22]
 80015ee:	3301      	adds	r3, #1
 80015f0:	75bb      	strb	r3, [r7, #22]
 80015f2:	7dbb      	ldrb	r3, [r7, #22]
 80015f4:	2b07      	cmp	r3, #7
 80015f6:	d9ca      	bls.n	800158e <DHT22_Get_Humidity+0x92>
	for (j=0; j<5; j++)
 80015f8:	7d7b      	ldrb	r3, [r7, #21]
 80015fa:	3301      	adds	r3, #1
 80015fc:	757b      	strb	r3, [r7, #21]
 80015fe:	7d7b      	ldrb	r3, [r7, #21]
 8001600:	2b04      	cmp	r3, #4
 8001602:	d9bb      	bls.n	800157c <DHT22_Get_Humidity+0x80>
		}
	}
	myChecksum = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 8001608:	2300      	movs	r3, #0
 800160a:	753b      	strb	r3, [r7, #20]
 800160c:	e00a      	b.n	8001624 <DHT22_Get_Humidity+0x128>
	{
		myChecksum += dataArray[k];
 800160e:	7d3b      	ldrb	r3, [r7, #20]
 8001610:	3318      	adds	r3, #24
 8001612:	443b      	add	r3, r7
 8001614:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	4413      	add	r3, r2
 800161c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 800161e:	7d3b      	ldrb	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	753b      	strb	r3, [r7, #20]
 8001624:	7d3b      	ldrb	r3, [r7, #20]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d9f1      	bls.n	800160e <DHT22_Get_Humidity+0x112>
	}

		Humid16 = (dataArray[0] <<8) | dataArray[1];
 800162a:	7b3b      	ldrb	r3, [r7, #12]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21b      	sxth	r3, r3
 8001638:	827b      	strh	r3, [r7, #18]
		
		*Humidity = Humid16/10.0f;
 800163a:	8a7b      	ldrh	r3, [r7, #18]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fadd 	bl	8000bfc <__aeabi_i2f>
 8001642:	4603      	mov	r3, r0
 8001644:	4907      	ldr	r1, [pc, #28]	@ (8001664 <DHT22_Get_Humidity+0x168>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fbe0 	bl	8000e0c <__aeabi_fdiv>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]
		return 1;
 8001654:	2301      	movs	r3, #1
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010800 	.word	0x40010800
 8001664:	41200000 	.word	0x41200000

08001668 <HCSR04_Init>:

// Hàm tạo xung tín hiệu
static void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

// Khởi tạo cảm biến HCSR04
void HCSR04_Init(TIM_HandleTypeDef *timer) {
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    htim = timer;  // Gán con trỏ timer
 8001670:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <HCSR04_Init+0x18>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20000208 	.word	0x20000208

08001684 <Delay_us>:

// Hàm delay micro giây
void Delay_us(uint16_t us) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	80fb      	strh	r3, [r7, #6]
    htim->Instance->CNT = 0;
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <Delay_us+0x40>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(htim);
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <Delay_us+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fd79 	bl	8004194 <HAL_TIM_Base_Start>
    while (htim->Instance->CNT < us);
 80016a2:	bf00      	nop
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <Delay_us+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3f8      	bcc.n	80016a4 <Delay_us+0x20>
    HAL_TIM_Base_Stop(htim);
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <Delay_us+0x40>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fdb6 	bl	8004228 <HAL_TIM_Base_Stop>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000208 	.word	0x20000208

080016c8 <pulseGPIO>:

// Hàm tạo xung tín hiệu cho chân Trigger
static void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f001 fbfd 	bl	8002eda <HAL_GPIO_WritePin>
    Delay_us(10);  // Tạo xung 10 micro giây
 80016e0:	200a      	movs	r0, #10
 80016e2:	f7ff ffcf 	bl	8001684 <Delay_us>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f001 fbf4 	bl	8002eda <HAL_GPIO_WritePin>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HCSR04_Start>:

// Bắt đầu đo khoảng cách
void HCSR04_Start(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    if (hc04_state == HCSR04_IDLE_STATE) {
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HCSR04_Start+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HCSR04_Start+0x1c>
        pulseGPIO(GPIOA, GPIO_PIN_8);  // Trigger trên chân PA8
 8001708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800170c:	4804      	ldr	r0, [pc, #16]	@ (8001720 <HCSR04_Start+0x24>)
 800170e:	f7ff ffdb 	bl	80016c8 <pulseGPIO>
        hc04_state = HCSR04_WAIT_RISING_STATE;
 8001712:	4b02      	ldr	r3, [pc, #8]	@ (800171c <HCSR04_Start+0x20>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
    }
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000206 	.word	0x20000206
 8001720:	40010800 	.word	0x40010800

08001724 <HCSR04_Handle>:

// Xử lý trạng thái hoàn thành đo
void HCSR04_Handle(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    if (hc04_state == HCSR04_COMPLETE_STATE) {
 8001728:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HCSR04_Handle+0x40>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b03      	cmp	r3, #3
 800172e:	d117      	bne.n	8001760 <HCSR04_Handle+0x3c>
        hcsr04_distance = 0.017f * htim->Instance->CNT;  // Tính khoảng cách
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HCSR04_Handle+0x44>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fa5b 	bl	8000bf4 <__aeabi_ui2f>
 800173e:	4603      	mov	r3, r0
 8001740:	490a      	ldr	r1, [pc, #40]	@ (800176c <HCSR04_Handle+0x48>)
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff faae 	bl	8000ca4 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <HCSR04_Handle+0x4c>)
 800174e:	601a      	str	r2, [r3, #0]
        HCSR04_Complete_Callback(hcsr04_distance);
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HCSR04_Handle+0x4c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f853 	bl	8001800 <HCSR04_Complete_Callback>
        hc04_state = HCSR04_IDLE_STATE;
 800175a:	4b02      	ldr	r3, [pc, #8]	@ (8001764 <HCSR04_Handle+0x40>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
    }
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000206 	.word	0x20000206
 8001768:	20000208 	.word	0x20000208
 800176c:	3c8b4396 	.word	0x3c8b4396
 8001770:	20000000 	.word	0x20000000

08001774 <HAL_GPIO_EXTI_Callback>:

// Callback EXTI khi xảy ra ngắt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
    switch (hc04_state) {
 800177e:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d002      	beq.n	800178c <HAL_GPIO_EXTI_Callback+0x18>
 8001786:	2b02      	cmp	r3, #2
 8001788:	d01a      	beq.n	80017c0 <HAL_GPIO_EXTI_Callback+0x4c>
                hc04_state = HCSR04_IDLE_STATE;
            }
            break;

        default:
            break;
 800178a:	e02e      	b.n	80017ea <HAL_GPIO_EXTI_Callback+0x76>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 800178c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001790:	4819      	ldr	r0, [pc, #100]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001792:	f001 fb8b 	bl	8002eac <HAL_GPIO_ReadPin>
 8001796:	4603      	mov	r3, r0
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10d      	bne.n	80017b8 <HAL_GPIO_EXTI_Callback+0x44>
                htim->Instance->CNT = 0;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x88>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	@ 0x24
                hc04_state = HCSRO4_WAIT_FALLING_STATE;
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
                HAL_TIM_Base_Start(htim);
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x88>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 fcef 	bl	8004194 <HAL_TIM_Base_Start>
            break;
 80017b6:	e018      	b.n	80017ea <HAL_GPIO_EXTI_Callback+0x76>
                hc04_state = HCSR04_IDLE_STATE;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
            break;
 80017be:	e014      	b.n	80017ea <HAL_GPIO_EXTI_Callback+0x76>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80017c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017c4:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x84>)
 80017c6:	f001 fb71 	bl	8002eac <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d108      	bne.n	80017e2 <HAL_GPIO_EXTI_Callback+0x6e>
                HAL_TIM_Base_Stop(htim);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_GPIO_EXTI_Callback+0x88>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fd27 	bl	8004228 <HAL_TIM_Base_Stop>
                hc04_state = HCSR04_COMPLETE_STATE;
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80017dc:	2203      	movs	r2, #3
 80017de:	701a      	strb	r2, [r3, #0]
            break;
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_EXTI_Callback+0x74>
                hc04_state = HCSR04_IDLE_STATE;
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
            break;
 80017e8:	bf00      	nop
    }
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000206 	.word	0x20000206
 80017f8:	40010c00 	.word	0x40010c00
 80017fc:	20000208 	.word	0x20000208

08001800 <HCSR04_Complete_Callback>:

// Callback khi đo xong khoảng cách
__weak void HCSR04_Complete_Callback(float measured_hcsr04_distance) {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    // Hàm này được định nghĩa lại trong user file
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <EDF_Scheduler>:
void Function_Get_Temp(void *argument);
void Function_Get_Humidity(void *argument);
void Function_LCD_UART(void *argument);

/* USER CODE BEGIN PFP */
void EDF_Scheduler(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
    static uint32_t last_exec_time_distance = 0;
    static uint32_t last_exec_time_temp = 0;
    static uint32_t last_exec_time_humidity = 0;
    uint32_t current_time = HAL_GetTick();  // Get the current system time
 800181a:	f000 ff47 	bl	80026ac <HAL_GetTick>
 800181e:	60f8      	str	r0, [r7, #12]

    // Task periods for EDF
    const uint32_t Get_Distance_period = T_Distance;  // Period (ms)
 8001820:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <EDF_Scheduler+0x104>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60bb      	str	r3, [r7, #8]
    const uint32_t Get_Temp_period = T_Temp;      // Period (ms)
 8001826:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <EDF_Scheduler+0x108>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	607b      	str	r3, [r7, #4]
    const uint32_t Get_Humidity_period = Get_Temp_period;  // Period (ms)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]

    // EDF Scheduling logic
    // Ví dụ thay đổi mức ưu tiên trong EDF scheduler
    if (current_time - last_exec_time_distance >= Get_Distance_period) {
 8001830:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <EDF_Scheduler+0x10c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	429a      	cmp	r2, r3
 800183c:	d81d      	bhi.n	800187a <EDF_Scheduler+0x66>
    	printf("d->1\n");
 800183e:	4839      	ldr	r0, [pc, #228]	@ (8001924 <EDF_Scheduler+0x110>)
 8001840:	f007 ff68 	bl	8009714 <puts>
        osThreadFlagsSet(Get_DistanceHandle, 0x01);
 8001844:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <EDF_Scheduler+0x114>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f004 f812 	bl	8005874 <osThreadFlagsSet>
        osThreadSetPriority(Get_DistanceHandle, osPriorityHigh);  // Thay đổi mức ưu tiên của task
 8001850:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <EDF_Scheduler+0x114>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2128      	movs	r1, #40	@ 0x28
 8001856:	4618      	mov	r0, r3
 8001858:	f003 ffe2 	bl	8005820 <osThreadSetPriority>
        osThreadSetPriority(Get_HumidityHandle, osPriorityNormal);
 800185c:	4b33      	ldr	r3, [pc, #204]	@ (800192c <EDF_Scheduler+0x118>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2118      	movs	r1, #24
 8001862:	4618      	mov	r0, r3
 8001864:	f003 ffdc 	bl	8005820 <osThreadSetPriority>
        osThreadSetPriority(Get_TempHandle, osPriorityNormal);
 8001868:	4b31      	ldr	r3, [pc, #196]	@ (8001930 <EDF_Scheduler+0x11c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2118      	movs	r1, #24
 800186e:	4618      	mov	r0, r3
 8001870:	f003 ffd6 	bl	8005820 <osThreadSetPriority>
        last_exec_time_distance = current_time;
 8001874:	4a2a      	ldr	r2, [pc, #168]	@ (8001920 <EDF_Scheduler+0x10c>)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6013      	str	r3, [r2, #0]
    }
    if (current_time - last_exec_time_temp >= Get_Temp_period) {
 800187a:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <EDF_Scheduler+0x120>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	429a      	cmp	r2, r3
 8001886:	d81d      	bhi.n	80018c4 <EDF_Scheduler+0xb0>
    	printf("t->1\n");
 8001888:	482b      	ldr	r0, [pc, #172]	@ (8001938 <EDF_Scheduler+0x124>)
 800188a:	f007 ff43 	bl	8009714 <puts>
        osThreadFlagsSet(Get_TempHandle, 0x01);
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <EDF_Scheduler+0x11c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2101      	movs	r1, #1
 8001894:	4618      	mov	r0, r3
 8001896:	f003 ffed 	bl	8005874 <osThreadFlagsSet>
        osThreadSetPriority(Get_TempHandle, osPriorityHigh);  // Thay đổi mức ưu tiên của task
 800189a:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <EDF_Scheduler+0x11c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2128      	movs	r1, #40	@ 0x28
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 ffbd 	bl	8005820 <osThreadSetPriority>
        osThreadSetPriority(Get_DistanceHandle, osPriorityNormal);
 80018a6:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <EDF_Scheduler+0x114>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2118      	movs	r1, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 ffb7 	bl	8005820 <osThreadSetPriority>
        osThreadSetPriority(Get_HumidityHandle, osPriorityNormal);
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <EDF_Scheduler+0x118>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2118      	movs	r1, #24
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 ffb1 	bl	8005820 <osThreadSetPriority>
        last_exec_time_temp = current_time;
 80018be:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <EDF_Scheduler+0x120>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6013      	str	r3, [r2, #0]
    }
    if (current_time - last_exec_time_humidity >= Get_Humidity_period) {
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <EDF_Scheduler+0x128>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d81d      	bhi.n	800190e <EDF_Scheduler+0xfa>
    	printf("h->1\n");
 80018d2:	481b      	ldr	r0, [pc, #108]	@ (8001940 <EDF_Scheduler+0x12c>)
 80018d4:	f007 ff1e 	bl	8009714 <puts>
        osThreadFlagsSet(Get_HumidityHandle, 0x01);
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <EDF_Scheduler+0x118>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 ffc8 	bl	8005874 <osThreadFlagsSet>
        osThreadSetPriority(Get_HumidityHandle, osPriorityHigh);  // Thay đổi mức ưu tiên của task
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <EDF_Scheduler+0x118>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2128      	movs	r1, #40	@ 0x28
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 ff98 	bl	8005820 <osThreadSetPriority>
        osThreadSetPriority(Get_DistanceHandle, osPriorityNormal);
 80018f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <EDF_Scheduler+0x114>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2118      	movs	r1, #24
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 ff92 	bl	8005820 <osThreadSetPriority>
        osThreadSetPriority(Get_TempHandle, osPriorityNormal);
 80018fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <EDF_Scheduler+0x11c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2118      	movs	r1, #24
 8001902:	4618      	mov	r0, r3
 8001904:	f003 ff8c 	bl	8005820 <osThreadSetPriority>
        last_exec_time_humidity = current_time;
 8001908:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <EDF_Scheduler+0x128>)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6013      	str	r3, [r2, #0]
    }

}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000004 	.word	0x20000004
 800191c:	20000008 	.word	0x20000008
 8001920:	200003bc 	.word	0x200003bc
 8001924:	0800baac 	.word	0x0800baac
 8001928:	20000380 	.word	0x20000380
 800192c:	20000388 	.word	0x20000388
 8001930:	20000384 	.word	0x20000384
 8001934:	200003c0 	.word	0x200003c0
 8001938:	0800bab4 	.word	0x0800bab4
 800193c:	200003c4 	.word	0x200003c4
 8001940:	0800babc 	.word	0x0800babc

08001944 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);  // Transmit char via UART
 800194c:	1d39      	adds	r1, r7, #4
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	2201      	movs	r2, #1
 8001954:	4803      	ldr	r0, [pc, #12]	@ (8001964 <__io_putchar+0x20>)
 8001956:	f003 f87f 	bl	8004a58 <HAL_UART_Transmit>
    return ch;
 800195a:	687b      	ldr	r3, [r7, #4]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000338 	.word	0x20000338

08001968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196c:	f000 fe76 	bl	800265c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001970:	f000 f868 	bl	8001a44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001974:	f000 fa04 	bl	8001d80 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001978:	f000 f9d8 	bl	8001d2c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800197c:	f000 f8a8 	bl	8001ad0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001980:	f000 f8d4 	bl	8001b2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001984:	f000 f922 	bl	8001bcc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001988:	f000 f980 	bl	8001c8c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("start\n");
 800198c:	481d      	ldr	r0, [pc, #116]	@ (8001a04 <main+0x9c>)
 800198e:	f007 fec1 	bl	8009714 <puts>
  HCSR04_Init(&htim1);
 8001992:	481d      	ldr	r0, [pc, #116]	@ (8001a08 <main+0xa0>)
 8001994:	f7ff fe68 	bl	8001668 <HCSR04_Init>
  dht22_init();
 8001998:	f7ff fcd0 	bl	800133c <dht22_init>
  I2C_LCD_Init(MyI2C_LCD);
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fba5 	bl	80010ec <I2C_LCD_Init>
  EDF_Scheduler();
 80019a2:	f7ff ff37 	bl	8001814 <EDF_Scheduler>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019a6:	f003 fe61 	bl	800566c <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &LCDQueue_attributes);
 80019aa:	4a18      	ldr	r2, [pc, #96]	@ (8001a0c <main+0xa4>)
 80019ac:	2102      	movs	r1, #2
 80019ae:	2010      	movs	r0, #16
 80019b0:	f004 f84a 	bl	8005a48 <osMessageQueueNew>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a16      	ldr	r2, [pc, #88]	@ (8001a10 <main+0xa8>)
 80019b8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Get_Distance */
  Get_DistanceHandle = osThreadNew(Function_Get_Distance, NULL, &Get_Distance_attributes);
 80019ba:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <main+0xac>)
 80019bc:	2100      	movs	r1, #0
 80019be:	4816      	ldr	r0, [pc, #88]	@ (8001a18 <main+0xb0>)
 80019c0:	f003 fe9c 	bl	80056fc <osThreadNew>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <main+0xb4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* creation of Get_Temp */
  Get_TempHandle = osThreadNew(Function_Get_Temp, NULL, &Get_Temp_attributes);
 80019ca:	4a15      	ldr	r2, [pc, #84]	@ (8001a20 <main+0xb8>)
 80019cc:	2100      	movs	r1, #0
 80019ce:	4815      	ldr	r0, [pc, #84]	@ (8001a24 <main+0xbc>)
 80019d0:	f003 fe94 	bl	80056fc <osThreadNew>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <main+0xc0>)
 80019d8:	6013      	str	r3, [r2, #0]

  /* creation of Get_Humidity */
  Get_HumidityHandle = osThreadNew(Function_Get_Humidity, NULL, &Get_Humidity_attributes);
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <main+0xc4>)
 80019dc:	2100      	movs	r1, #0
 80019de:	4814      	ldr	r0, [pc, #80]	@ (8001a30 <main+0xc8>)
 80019e0:	f003 fe8c 	bl	80056fc <osThreadNew>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a13      	ldr	r2, [pc, #76]	@ (8001a34 <main+0xcc>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* creation of LCD_UART */
  LCD_UARTHandle = osThreadNew(Function_LCD_UART, NULL, &LCD_UART_attributes);
 80019ea:	4a13      	ldr	r2, [pc, #76]	@ (8001a38 <main+0xd0>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	4813      	ldr	r0, [pc, #76]	@ (8001a3c <main+0xd4>)
 80019f0:	f003 fe84 	bl	80056fc <osThreadNew>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <main+0xd8>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019fa:	f003 fe59 	bl	80056b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 80019fe:	bf00      	nop
 8001a00:	e7fd      	b.n	80019fe <main+0x96>
 8001a02:	bf00      	nop
 8001a04:	0800bac4 	.word	0x0800bac4
 8001a08:	20000260 	.word	0x20000260
 8001a0c:	0800bbf8 	.word	0x0800bbf8
 8001a10:	20000390 	.word	0x20000390
 8001a14:	0800bb68 	.word	0x0800bb68
 8001a18:	08001e49 	.word	0x08001e49
 8001a1c:	20000380 	.word	0x20000380
 8001a20:	0800bb8c 	.word	0x0800bb8c
 8001a24:	08001ea9 	.word	0x08001ea9
 8001a28:	20000384 	.word	0x20000384
 8001a2c:	0800bbb0 	.word	0x0800bbb0
 8001a30:	08001f01 	.word	0x08001f01
 8001a34:	20000388 	.word	0x20000388
 8001a38:	0800bbd4 	.word	0x0800bbd4
 8001a3c:	08001f59 	.word	0x08001f59
 8001a40:	2000038c 	.word	0x2000038c

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b090      	sub	sp, #64	@ 0x40
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0318 	add.w	r3, r7, #24
 8001a4e:	2228      	movs	r2, #40	@ 0x28
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f007 ff5e 	bl	8009914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a74:	2301      	movs	r3, #1
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a82:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 0318 	add.w	r3, r7, #24
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fef1 	bl	8003874 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a98:	f000 fb17 	bl	80020ca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f95e 	bl	8003d78 <HAL_RCC_ClockConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ac2:	f000 fb02 	bl	80020ca <Error_Handler>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3740      	adds	r7, #64	@ 0x40
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001ad6:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <MX_I2C1_Init+0x54>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001adc:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <MX_I2C1_Init+0x58>)
 8001ade:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001aee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001af2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b00:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <MX_I2C1_Init+0x50>)
 8001b0e:	f001 fa15 	bl	8002f3c <HAL_I2C_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b18:	f000 fad7 	bl	80020ca <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000020c 	.word	0x2000020c
 8001b24:	40005400 	.word	0x40005400
 8001b28:	000186a0 	.word	0x000186a0

08001b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc8 <MX_TIM1_Init+0x9c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b50:	223f      	movs	r2, #63	@ 0x3f
 8001b52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 29999;
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b5c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001b60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b74:	4813      	ldr	r0, [pc, #76]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b76:	f002 fabd 	bl	80040f4 <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b80:	f000 faa3 	bl	80020ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001b92:	f002 fcb1 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b9c:	f000 fa95 	bl	80020ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <MX_TIM1_Init+0x98>)
 8001bae:	f002 fe93 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bb8:	f000 fa87 	bl	80020ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000260 	.word	0x20000260
 8001bc8:	40012c00 	.word	0x40012c00

08001bcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <MX_TIM3_Init+0xb4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c80 <MX_TIM3_Init+0xb4>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <MX_TIM3_Init+0xb4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c04:	4a20      	ldr	r2, [pc, #128]	@ (8001c88 <MX_TIM3_Init+0xbc>)
 8001c06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c0a:	2247      	movs	r2, #71	@ 0x47
 8001c0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b18      	ldr	r3, [pc, #96]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c28:	4816      	ldr	r0, [pc, #88]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c2a:	f002 fa63 	bl	80040f4 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001c34:	f000 fa49 	bl	80020ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c3e:	f107 0310 	add.w	r3, r7, #16
 8001c42:	4619      	mov	r1, r3
 8001c44:	480f      	ldr	r0, [pc, #60]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c46:	f002 fc57 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c50:	f000 fa3b 	bl	80020ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	4619      	mov	r1, r3
 8001c62:	4808      	ldr	r0, [pc, #32]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c64:	f002 fe38 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001c6e:	f000 fa2c 	bl	80020ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start(&htim3);
 8001c72:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <MX_TIM3_Init+0xb8>)
 8001c74:	f002 fa8e 	bl	8004194 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	200002a8 	.word	0x200002a8
 8001c88:	40000400 	.word	0x40000400

08001c8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c92:	f107 0308 	add.w	r3, r7, #8
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001caa:	4a1f      	ldr	r2, [pc, #124]	@ (8001d28 <MX_TIM4_Init+0x9c>)
 8001cac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cce:	4815      	ldr	r0, [pc, #84]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001cd0:	f002 fa10 	bl	80040f4 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001cda:	f000 f9f6 	bl	80020ca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001cec:	f002 fc04 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001cf6:	f000 f9e8 	bl	80020ca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001d08:	f002 fde6 	bl	80048d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d12:	f000 f9da 	bl	80020ca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);  // Kích hoạt ngắt Timer 4
 8001d16:	4803      	ldr	r0, [pc, #12]	@ (8001d24 <MX_TIM4_Init+0x98>)
 8001d18:	f002 faac 	bl	8004274 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200002f0 	.word	0x200002f0
 8001d28:	40000800 	.word	0x40000800

08001d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <MX_USART3_UART_Init+0x50>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d64:	f002 fe28 	bl	80049b8 <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d6e:	f000 f9ac 	bl	80020ca <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000338 	.word	0x20000338
 8001d7c:	40004800 	.word	0x40004800

08001d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	4b28      	ldr	r3, [pc, #160]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a27      	ldr	r2, [pc, #156]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <MX_GPIO_Init+0xb8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001de2:	4816      	ldr	r0, [pc, #88]	@ (8001e3c <MX_GPIO_Init+0xbc>)
 8001de4:	f001 f879 	bl	8002eda <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 8001de8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480e      	ldr	r0, [pc, #56]	@ (8001e3c <MX_GPIO_Init+0xbc>)
 8001e02:	f000 fe13 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_GPIO_Init+0xc0>)
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480a      	ldr	r0, [pc, #40]	@ (8001e44 <MX_GPIO_Init+0xc4>)
 8001e1c:	f000 fe06 	bl	8002a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2105      	movs	r1, #5
 8001e24:	2028      	movs	r0, #40	@ 0x28
 8001e26:	f000 fd24 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e2a:	2028      	movs	r0, #40	@ 0x28
 8001e2c:	f000 fd3d 	bl	80028aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e30:	bf00      	nop
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	10310000 	.word	0x10310000
 8001e44:	40010c00 	.word	0x40010c00

08001e48 <Function_Get_Distance>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Function_Get_Distance */
void Function_Get_Distance(void *argument)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	while(1){
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);  // Wait for the EDF scheduler signal
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295
 8001e54:	2100      	movs	r1, #0
 8001e56:	2001      	movs	r0, #1
 8001e58:	f003 fd5a 	bl	8005910 <osThreadFlagsWait>
		printf("test_d\n");
 8001e5c:	480e      	ldr	r0, [pc, #56]	@ (8001e98 <Function_Get_Distance+0x50>)
 8001e5e:	f007 fc59 	bl	8009714 <puts>

		uint16_t id=1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	81fb      	strh	r3, [r7, #14]
		if (hc04_state == HCSR04_IDLE_STATE) {
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <Function_Get_Distance+0x54>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <Function_Get_Distance+0x40>
			HCSR04_Start();
 8001e6e:	f7ff fc45 	bl	80016fc <HCSR04_Start>
			HCSR04_Handle();
 8001e72:	f7ff fc57 	bl	8001724 <HCSR04_Handle>
			// Send the result to the LCD queue
			osMessageQueuePut(LCDQueueHandle, &id, 0, osWaitForever);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <Function_Get_Distance+0x58>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	f107 010e 	add.w	r1, r7, #14
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	2200      	movs	r2, #0
 8001e84:	f003 fe54 	bl	8005b30 <osMessageQueuePut>
		}
		EDF_Scheduler();
 8001e88:	f7ff fcc4 	bl	8001814 <EDF_Scheduler>
		osDelay(T_Distance);
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <Function_Get_Distance+0x5c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fdbe 	bl	8005a12 <osDelay>
	while(1){
 8001e96:	e7db      	b.n	8001e50 <Function_Get_Distance+0x8>
 8001e98:	0800bacc 	.word	0x0800bacc
 8001e9c:	20000206 	.word	0x20000206
 8001ea0:	20000390 	.word	0x20000390
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <Function_Get_Temp>:
}

/* USER CODE BEGIN Header_Function_Get_Temp */
/* USER CODE END Header_Function_Get_Temp */
void Function_Get_Temp(void *argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function_Get_Temp */
	while(1){
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);  // Wait for the EDF scheduler signal
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f003 fd2a 	bl	8005910 <osThreadFlagsWait>
		printf("test_t\n");
 8001ebc:	480c      	ldr	r0, [pc, #48]	@ (8001ef0 <Function_Get_Temp+0x48>)
 8001ebe:	f007 fc29 	bl	8009714 <puts>

		uint16_t id=2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	81fb      	strh	r3, [r7, #14]
		DHT22_Get_Temp(&T);
 8001ec6:	480b      	ldr	r0, [pc, #44]	@ (8001ef4 <Function_Get_Temp+0x4c>)
 8001ec8:	f7ff fa62 	bl	8001390 <DHT22_Get_Temp>


		// Send the result to the LCD queue
		osMessageQueuePut(LCDQueueHandle, &id, 0, osWaitForever);
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <Function_Get_Temp+0x50>)
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	f107 010e 	add.w	r1, r7, #14
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f003 fe29 	bl	8005b30 <osMessageQueuePut>
		EDF_Scheduler();
 8001ede:	f7ff fc99 	bl	8001814 <EDF_Scheduler>
		osDelay(T_Temp);
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <Function_Get_Temp+0x54>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 fd93 	bl	8005a12 <osDelay>
	while(1){
 8001eec:	bf00      	nop
 8001eee:	e7df      	b.n	8001eb0 <Function_Get_Temp+0x8>
 8001ef0:	0800bad4 	.word	0x0800bad4
 8001ef4:	200003b4 	.word	0x200003b4
 8001ef8:	20000390 	.word	0x20000390
 8001efc:	20000008 	.word	0x20000008

08001f00 <Function_Get_Humidity>:
}

/* USER CODE BEGIN Header_Function_Get_Humidity */
/* USER CODE END Header_Function_Get_Humidity */
void Function_Get_Humidity(void *argument)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function_Get_Humidity */

	while(1){
		osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);  // Wait for the EDF scheduler signal
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f003 fcfe 	bl	8005910 <osThreadFlagsWait>
		printf("test_h\n");
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <Function_Get_Humidity+0x48>)
 8001f16:	f007 fbfd 	bl	8009714 <puts>
		DHT22_Get_Humidity(&H);
 8001f1a:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <Function_Get_Humidity+0x4c>)
 8001f1c:	f7ff faee 	bl	80014fc <DHT22_Get_Humidity>
		uint16_t id=3;
 8001f20:	2303      	movs	r3, #3
 8001f22:	81fb      	strh	r3, [r7, #14]
		// Send the result to the LCD queue
		osMessageQueuePut(LCDQueueHandle, &id, 0, osWaitForever);
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <Function_Get_Humidity+0x50>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	f107 010e 	add.w	r1, r7, #14
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	2200      	movs	r2, #0
 8001f32:	f003 fdfd 	bl	8005b30 <osMessageQueuePut>
		EDF_Scheduler();
 8001f36:	f7ff fc6d 	bl	8001814 <EDF_Scheduler>
		osDelay(T_Humidity);
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <Function_Get_Humidity+0x54>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fd67 	bl	8005a12 <osDelay>
	while(1){
 8001f44:	bf00      	nop
 8001f46:	e7df      	b.n	8001f08 <Function_Get_Humidity+0x8>
 8001f48:	0800badc 	.word	0x0800badc
 8001f4c:	200003b8 	.word	0x200003b8
 8001f50:	20000390 	.word	0x20000390
 8001f54:	2000000c 	.word	0x2000000c

08001f58 <Function_LCD_UART>:
}

/* USER CODE BEGIN Header_Function_LCD_UART */
/* USER CODE END Header_Function_LCD_UART */
void Function_LCD_UART(void *argument)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	uint16_t received_id;

    while (1) {
        // Check if data is available in the queue

        if (osMessageQueueGet(LCDQueueHandle, &received_id, NULL, osWaitForever) == osOK) {
 8001f60:	4b42      	ldr	r3, [pc, #264]	@ (800206c <Function_LCD_UART+0x114>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	f107 010e 	add.w	r1, r7, #14
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f003 fe3f 	bl	8005bf0 <osMessageQueueGet>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d174      	bne.n	8002062 <Function_LCD_UART+0x10a>
        	printf("LCD-%d\n",received_id);
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	483c      	ldr	r0, [pc, #240]	@ (8002070 <Function_LCD_UART+0x118>)
 8001f7e:	f007 fb61 	bl	8009644 <iprintf>

      	  // Kiểm tra giá trị dữ liệu và thực hiện hành động tương ứng
      	  switch (received_id) {
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d04a      	beq.n	800201e <Function_LCD_UART+0xc6>
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	dc6a      	bgt.n	8002062 <Function_LCD_UART+0x10a>
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d002      	beq.n	8001f96 <Function_LCD_UART+0x3e>
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d022      	beq.n	8001fda <Function_LCD_UART+0x82>
 8001f94:	e065      	b.n	8002062 <Function_LCD_UART+0x10a>
      		  case 1:
      			printf("LCD111\n");
 8001f96:	4837      	ldr	r0, [pc, #220]	@ (8002074 <Function_LCD_UART+0x11c>)
 8001f98:	f007 fbbc 	bl	8009714 <puts>
					sprintf(buf1,"D = %.1f cm", hcsr04_distance);
 8001f9c:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <Function_LCD_UART+0x120>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa41 	bl	8000428 <__aeabi_f2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4934      	ldr	r1, [pc, #208]	@ (800207c <Function_LCD_UART+0x124>)
 8001fac:	4834      	ldr	r0, [pc, #208]	@ (8002080 <Function_LCD_UART+0x128>)
 8001fae:	f007 fbb9 	bl	8009724 <siprintf>
					I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff f946 	bl	8001248 <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(MyI2C_LCD, buf1);
 8001fbc:	4930      	ldr	r1, [pc, #192]	@ (8002080 <Function_LCD_UART+0x128>)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7ff f984 	bl	80012cc <I2C_LCD_WriteString>
					printf("D = %.1f\r\n",hcsr04_distance);
 8001fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <Function_LCD_UART+0x120>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa2d 	bl	8000428 <__aeabi_f2d>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	482c      	ldr	r0, [pc, #176]	@ (8002084 <Function_LCD_UART+0x12c>)
 8001fd4:	f007 fb36 	bl	8009644 <iprintf>
					break;
 8001fd8:	e043      	b.n	8002062 <Function_LCD_UART+0x10a>

      		  case 2:
      			printf("LCD222\n");
 8001fda:	482b      	ldr	r0, [pc, #172]	@ (8002088 <Function_LCD_UART+0x130>)
 8001fdc:	f007 fb9a 	bl	8009714 <puts>
					sprintf(buf2,"T=%.1f", T);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800208c <Function_LCD_UART+0x134>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa1f 	bl	8000428 <__aeabi_f2d>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4928      	ldr	r1, [pc, #160]	@ (8002090 <Function_LCD_UART+0x138>)
 8001ff0:	4828      	ldr	r0, [pc, #160]	@ (8002094 <Function_LCD_UART+0x13c>)
 8001ff2:	f007 fb97 	bl	8009724 <siprintf>
					I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff f924 	bl	8001248 <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(MyI2C_LCD, buf2);
 8002000:	4924      	ldr	r1, [pc, #144]	@ (8002094 <Function_LCD_UART+0x13c>)
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff f962 	bl	80012cc <I2C_LCD_WriteString>
					printf("T = %.1f\r\n",T);
 8002008:	4b20      	ldr	r3, [pc, #128]	@ (800208c <Function_LCD_UART+0x134>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa0b 	bl	8000428 <__aeabi_f2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4820      	ldr	r0, [pc, #128]	@ (8002098 <Function_LCD_UART+0x140>)
 8002018:	f007 fb14 	bl	8009644 <iprintf>
					break;
 800201c:	e021      	b.n	8002062 <Function_LCD_UART+0x10a>

      		  case 3:
      			printf("LCD333\n");
 800201e:	481f      	ldr	r0, [pc, #124]	@ (800209c <Function_LCD_UART+0x144>)
 8002020:	f007 fb78 	bl	8009714 <puts>
					sprintf(buf2,"H=%.1f", H);
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <Function_LCD_UART+0x148>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f9fd 	bl	8000428 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	491c      	ldr	r1, [pc, #112]	@ (80020a4 <Function_LCD_UART+0x14c>)
 8002034:	4817      	ldr	r0, [pc, #92]	@ (8002094 <Function_LCD_UART+0x13c>)
 8002036:	f007 fb75 	bl	8009724 <siprintf>
					I2C_LCD_SetCursor(MyI2C_LCD, 7, 1);
 800203a:	2201      	movs	r2, #1
 800203c:	2107      	movs	r1, #7
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff f902 	bl	8001248 <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(MyI2C_LCD, buf2);
 8002044:	4913      	ldr	r1, [pc, #76]	@ (8002094 <Function_LCD_UART+0x13c>)
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff f940 	bl	80012cc <I2C_LCD_WriteString>
					printf("H = %.1f\r\n",H);
 800204c:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <Function_LCD_UART+0x148>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe f9e9 	bl	8000428 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4813      	ldr	r0, [pc, #76]	@ (80020a8 <Function_LCD_UART+0x150>)
 800205c:	f007 faf2 	bl	8009644 <iprintf>
					break;
 8002060:	bf00      	nop
      	  }
        }
        osDelay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f003 fcd5 	bl	8005a12 <osDelay>
        if (osMessageQueueGet(LCDQueueHandle, &received_id, NULL, osWaitForever) == osOK) {
 8002068:	e77a      	b.n	8001f60 <Function_LCD_UART+0x8>
 800206a:	bf00      	nop
 800206c:	20000390 	.word	0x20000390
 8002070:	0800bae4 	.word	0x0800bae4
 8002074:	0800baec 	.word	0x0800baec
 8002078:	20000000 	.word	0x20000000
 800207c:	0800baf4 	.word	0x0800baf4
 8002080:	20000394 	.word	0x20000394
 8002084:	0800bb00 	.word	0x0800bb00
 8002088:	0800bb0c 	.word	0x0800bb0c
 800208c:	200003b4 	.word	0x200003b4
 8002090:	0800bb14 	.word	0x0800bb14
 8002094:	200003a4 	.word	0x200003a4
 8002098:	0800bb1c 	.word	0x0800bb1c
 800209c:	0800bb28 	.word	0x0800bb28
 80020a0:	200003b8 	.word	0x200003b8
 80020a4:	0800bb30 	.word	0x0800bb30
 80020a8:	0800bb38 	.word	0x0800bb38

080020ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020bc:	d101      	bne.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020be:	f000 fae3 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
//      EDF_Scheduler(); // Gọi hàm EDF Scheduler mỗi khi Timer 4 tạo ngắt
  }
  /* USER CODE END Callback 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_MspInit+0x68>)
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <HAL_MspInit+0x68>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6193      	str	r3, [r2, #24]
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_MspInit+0x68>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_MspInit+0x68>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_MspInit+0x68>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <HAL_MspInit+0x68>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	210f      	movs	r1, #15
 8002112:	f06f 0001 	mvn.w	r0, #1
 8002116:	f000 fbac 	bl	8002872 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_MspInit+0x6c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_MspInit+0x6c>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000

08002148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a15      	ldr	r2, [pc, #84]	@ (80021b8 <HAL_I2C_MspInit+0x70>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d123      	bne.n	80021b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002168:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <HAL_I2C_MspInit+0x74>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <HAL_I2C_MspInit+0x74>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_I2C_MspInit+0x74>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002180:	23c0      	movs	r3, #192	@ 0xc0
 8002182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002184:	2312      	movs	r3, #18
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	480b      	ldr	r0, [pc, #44]	@ (80021c0 <HAL_I2C_MspInit+0x78>)
 8002194:	f000 fc4a 	bl	8002a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_I2C_MspInit+0x74>)
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <HAL_I2C_MspInit+0x74>)
 800219e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021a2:	61d3      	str	r3, [r2, #28]
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_I2C_MspInit+0x74>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80021b0:	bf00      	nop
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40005400 	.word	0x40005400
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010c00 	.word	0x40010c00

080021c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002250 <HAL_TIM_Base_MspInit+0x8c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10c      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	4a1e      	ldr	r2, [pc, #120]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 80021dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021e0:	6193      	str	r3, [r2, #24]
 80021e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021ee:	e02a      	b.n	8002246 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a18      	ldr	r2, [pc, #96]	@ (8002258 <HAL_TIM_Base_MspInit+0x94>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10c      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021fa:	4b16      	ldr	r3, [pc, #88]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
}
 8002212:	e018      	b.n	8002246 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a10      	ldr	r2, [pc, #64]	@ (800225c <HAL_TIM_Base_MspInit+0x98>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d113      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800221e:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a0c      	ldr	r2, [pc, #48]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_TIM_Base_MspInit+0x90>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2105      	movs	r1, #5
 800223a:	201e      	movs	r0, #30
 800223c:	f000 fb19 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002240:	201e      	movs	r0, #30
 8002242:	f000 fb32 	bl	80028aa <HAL_NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800

08002260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <HAL_UART_MspInit+0x9c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d139      	bne.n	80022f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_UART_MspInit+0xa0>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a1e      	ldr	r2, [pc, #120]	@ (8002300 <HAL_UART_MspInit+0xa0>)
 8002286:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <HAL_UART_MspInit+0xa0>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_UART_MspInit+0xa0>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <HAL_UART_MspInit+0xa0>)
 800229e:	f043 0308 	orr.w	r3, r3, #8
 80022a2:	6193      	str	r3, [r2, #24]
 80022a4:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <HAL_UART_MspInit+0xa0>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4619      	mov	r1, r3
 80022c4:	480f      	ldr	r0, [pc, #60]	@ (8002304 <HAL_UART_MspInit+0xa4>)
 80022c6:	f000 fbb1 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4619      	mov	r1, r3
 80022de:	4809      	ldr	r0, [pc, #36]	@ (8002304 <HAL_UART_MspInit+0xa4>)
 80022e0:	f000 fba4 	bl	8002a2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2105      	movs	r1, #5
 80022e8:	2027      	movs	r0, #39	@ 0x27
 80022ea:	f000 fac2 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022ee:	2027      	movs	r0, #39	@ 0x27
 80022f0:	f000 fadb 	bl	80028aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40004800 	.word	0x40004800
 8002300:	40021000 	.word	0x40021000
 8002304:	40010c00 	.word	0x40010c00

08002308 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08e      	sub	sp, #56	@ 0x38
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800231e:	4b34      	ldr	r3, [pc, #208]	@ (80023f0 <HAL_InitTick+0xe8>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a33      	ldr	r2, [pc, #204]	@ (80023f0 <HAL_InitTick+0xe8>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <HAL_InitTick+0xe8>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002336:	f107 0210 	add.w	r2, r7, #16
 800233a:	f107 0314 	add.w	r3, r7, #20
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f001 fe89 	bl	8004058 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d103      	bne.n	8002358 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002350:	f001 fe5a 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8002354:	6378      	str	r0, [r7, #52]	@ 0x34
 8002356:	e004      	b.n	8002362 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002358:	f001 fe56 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 800235c:	4603      	mov	r3, r0
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002364:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <HAL_InitTick+0xec>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9b      	lsrs	r3, r3, #18
 800236c:	3b01      	subs	r3, #1
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002370:	4b21      	ldr	r3, [pc, #132]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002376:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <HAL_InitTick+0xf0>)
 800237a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800237e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002380:	4a1d      	ldr	r2, [pc, #116]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002384:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002386:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b1a      	ldr	r3, [pc, #104]	@ (80023f8 <HAL_InitTick+0xf0>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_InitTick+0xf0>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002398:	4817      	ldr	r0, [pc, #92]	@ (80023f8 <HAL_InitTick+0xf0>)
 800239a:	f001 feab 	bl	80040f4 <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11b      	bne.n	80023e4 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80023ac:	4812      	ldr	r0, [pc, #72]	@ (80023f8 <HAL_InitTick+0xf0>)
 80023ae:	f001 ff61 	bl	8004274 <HAL_TIM_Base_Start_IT>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023c0:	201c      	movs	r0, #28
 80023c2:	f000 fa72 	bl	80028aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d808      	bhi.n	80023de <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023cc:	2200      	movs	r2, #0
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	201c      	movs	r0, #28
 80023d2:	f000 fa4e 	bl	8002872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023d6:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <HAL_InitTick+0xf4>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e002      	b.n	80023e4 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3738      	adds	r7, #56	@ 0x38
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	431bde83 	.word	0x431bde83
 80023f8:	200003c8 	.word	0x200003c8
 80023fc:	20000014 	.word	0x20000014

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <NMI_Handler+0x4>

08002408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <MemManage_Handler+0x4>

08002418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241c:	bf00      	nop
 800241e:	e7fd      	b.n	800241c <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <UsageFault_Handler+0x4>

08002428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002438:	4802      	ldr	r0, [pc, #8]	@ (8002444 <TIM2_IRQHandler+0x10>)
 800243a:	f001 ff6d 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200003c8 	.word	0x200003c8

08002448 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <TIM4_IRQHandler+0x10>)
 800244e:	f001 ff63 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002f0 	.word	0x200002f0

0800245c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <USART3_IRQHandler+0x10>)
 8002462:	f002 fb85 	bl	8004b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000338 	.word	0x20000338

08002470 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002474:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002478:	f000 fd48 	bl	8002f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}

08002480 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return 1;
 8002484:	2301      	movs	r3, #1
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <_kill>:

int _kill(int pid, int sig)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002498:	f007 fae4 	bl	8009a64 <__errno>
 800249c:	4603      	mov	r3, r0
 800249e:	2216      	movs	r2, #22
 80024a0:	601a      	str	r2, [r3, #0]
  return -1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_exit>:

void _exit (int status)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024b6:	f04f 31ff 	mov.w	r1, #4294967295
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffe7 	bl	800248e <_kill>
  while (1) {}    /* Make sure we hang here */
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <_exit+0x12>

080024c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	e00a      	b.n	80024ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024d6:	f3af 8000 	nop.w
 80024da:	4601      	mov	r1, r0
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	60ba      	str	r2, [r7, #8]
 80024e2:	b2ca      	uxtb	r2, r1
 80024e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	dbf0      	blt.n	80024d6 <_read+0x12>
  }

  return len;
 80024f4:	687b      	ldr	r3, [r7, #4]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e009      	b.n	8002524 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	60ba      	str	r2, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fa13 	bl	8001944 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	dbf1      	blt.n	8002510 <_write+0x12>
  }
  return len;
 800252c:	687b      	ldr	r3, [r7, #4]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_close>:

int _close(int file)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800255c:	605a      	str	r2, [r3, #4]
  return 0;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <_isatty>:

int _isatty(int file)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f007 fa4c 	bl	8009a64 <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20005000 	.word	0x20005000
 80025f8:	00000400 	.word	0x00000400
 80025fc:	20000410 	.word	0x20000410
 8002600:	20004230 	.word	0x20004230

08002604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002610:	f7ff fff8 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002614:	480b      	ldr	r0, [pc, #44]	@ (8002644 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002616:	490c      	ldr	r1, [pc, #48]	@ (8002648 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002618:	4a0c      	ldr	r2, [pc, #48]	@ (800264c <LoopFillZerobss+0x16>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800261c:	e002      	b.n	8002624 <LoopCopyDataInit>

0800261e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002622:	3304      	adds	r3, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002628:	d3f9      	bcc.n	800261e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262a:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800262c:	4c09      	ldr	r4, [pc, #36]	@ (8002654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002630:	e001      	b.n	8002636 <LoopFillZerobss>

08002632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002634:	3204      	adds	r2, #4

08002636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002638:	d3fb      	bcc.n	8002632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800263a:	f007 fa19 	bl	8009a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800263e:	f7ff f993 	bl	8001968 <main>
  bx lr
 8002642:	4770      	bx	lr
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800264c:	0800bfb8 	.word	0x0800bfb8
  ldr r2, =_sbss
 8002650:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002654:	2000422c 	.word	0x2000422c

08002658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC1_2_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002660:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_Init+0x28>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a07      	ldr	r2, [pc, #28]	@ (8002684 <HAL_Init+0x28>)
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266c:	2003      	movs	r0, #3
 800266e:	f000 f8f5 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002672:	200f      	movs	r0, #15
 8002674:	f7ff fe48 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002678:	f7ff fd2e 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_IncTick+0x1c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_IncTick+0x20>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a03      	ldr	r2, [pc, #12]	@ (80026a8 <HAL_IncTick+0x20>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000018 	.word	0x20000018
 80026a8:	20000414 	.word	0x20000414

080026ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b02      	ldr	r3, [pc, #8]	@ (80026bc <HAL_GetTick+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	20000414 	.word	0x20000414

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fff0 	bl	80026ac <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_Delay+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffe0 	bl	80026ac <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000018 	.word	0x20000018

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4906      	ldr	r1, [pc, #24]	@ (80027a0 <__NVIC_EnableIRQ+0x34>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	@ (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	@ 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff4f 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff64 	bl	8002750 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ffb2 	bl	80027f8 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff81 	bl	80027a4 <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff57 	bl	800276c <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e020      	b.n	8002932 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 020e 	bic.w	r2, r2, #14
 80028fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d005      	beq.n	8002960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e051      	b.n	8002a04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020e 	bic.w	r2, r2, #14
 800296e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a22      	ldr	r2, [pc, #136]	@ (8002a10 <HAL_DMA_Abort_IT+0xd4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d029      	beq.n	80029de <HAL_DMA_Abort_IT+0xa2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	@ (8002a14 <HAL_DMA_Abort_IT+0xd8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_Abort_IT+0x9e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_DMA_Abort_IT+0xdc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01a      	beq.n	80029d4 <HAL_DMA_Abort_IT+0x98>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <HAL_DMA_Abort_IT+0xe0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d012      	beq.n	80029ce <HAL_DMA_Abort_IT+0x92>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <HAL_DMA_Abort_IT+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00a      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x8c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_DMA_Abort_IT+0xe8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d102      	bne.n	80029c2 <HAL_DMA_Abort_IT+0x86>
 80029bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80029c0:	e00e      	b.n	80029e0 <HAL_DMA_Abort_IT+0xa4>
 80029c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029c6:	e00b      	b.n	80029e0 <HAL_DMA_Abort_IT+0xa4>
 80029c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029cc:	e008      	b.n	80029e0 <HAL_DMA_Abort_IT+0xa4>
 80029ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d2:	e005      	b.n	80029e0 <HAL_DMA_Abort_IT+0xa4>
 80029d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029d8:	e002      	b.n	80029e0 <HAL_DMA_Abort_IT+0xa4>
 80029da:	2310      	movs	r3, #16
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_Abort_IT+0xa4>
 80029de:	2301      	movs	r3, #1
 80029e0:	4a11      	ldr	r2, [pc, #68]	@ (8002a28 <HAL_DMA_Abort_IT+0xec>)
 80029e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
    } 
  }
  return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40020008 	.word	0x40020008
 8002a14:	4002001c 	.word	0x4002001c
 8002a18:	40020030 	.word	0x40020030
 8002a1c:	40020044 	.word	0x40020044
 8002a20:	40020058 	.word	0x40020058
 8002a24:	4002006c 	.word	0x4002006c
 8002a28:	40020000 	.word	0x40020000

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b08b      	sub	sp, #44	@ 0x2c
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e169      	b.n	8002d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a40:	2201      	movs	r2, #1
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8158 	bne.w	8002d0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a9a      	ldr	r2, [pc, #616]	@ (8002ccc <HAL_GPIO_Init+0x2a0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d05e      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a68:	4a98      	ldr	r2, [pc, #608]	@ (8002ccc <HAL_GPIO_Init+0x2a0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d875      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a6e:	4a98      	ldr	r2, [pc, #608]	@ (8002cd0 <HAL_GPIO_Init+0x2a4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d058      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a74:	4a96      	ldr	r2, [pc, #600]	@ (8002cd0 <HAL_GPIO_Init+0x2a4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d86f      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a7a:	4a96      	ldr	r2, [pc, #600]	@ (8002cd4 <HAL_GPIO_Init+0x2a8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d052      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a80:	4a94      	ldr	r2, [pc, #592]	@ (8002cd4 <HAL_GPIO_Init+0x2a8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d869      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a86:	4a94      	ldr	r2, [pc, #592]	@ (8002cd8 <HAL_GPIO_Init+0x2ac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d04c      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a8c:	4a92      	ldr	r2, [pc, #584]	@ (8002cd8 <HAL_GPIO_Init+0x2ac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d863      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a92:	4a92      	ldr	r2, [pc, #584]	@ (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d046      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a98:	4a90      	ldr	r2, [pc, #576]	@ (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d85d      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d82a      	bhi.n	8002af8 <HAL_GPIO_Init+0xcc>
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d859      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <HAL_GPIO_Init+0x80>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002b27 	.word	0x08002b27
 8002ab0:	08002b01 	.word	0x08002b01
 8002ab4:	08002b13 	.word	0x08002b13
 8002ab8:	08002b55 	.word	0x08002b55
 8002abc:	08002b5b 	.word	0x08002b5b
 8002ac0:	08002b5b 	.word	0x08002b5b
 8002ac4:	08002b5b 	.word	0x08002b5b
 8002ac8:	08002b5b 	.word	0x08002b5b
 8002acc:	08002b5b 	.word	0x08002b5b
 8002ad0:	08002b5b 	.word	0x08002b5b
 8002ad4:	08002b5b 	.word	0x08002b5b
 8002ad8:	08002b5b 	.word	0x08002b5b
 8002adc:	08002b5b 	.word	0x08002b5b
 8002ae0:	08002b5b 	.word	0x08002b5b
 8002ae4:	08002b5b 	.word	0x08002b5b
 8002ae8:	08002b5b 	.word	0x08002b5b
 8002aec:	08002b5b 	.word	0x08002b5b
 8002af0:	08002b09 	.word	0x08002b09
 8002af4:	08002b1d 	.word	0x08002b1d
 8002af8:	4a79      	ldr	r2, [pc, #484]	@ (8002ce0 <HAL_GPIO_Init+0x2b4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002afe:	e02c      	b.n	8002b5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e029      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e024      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	3308      	adds	r3, #8
 8002b18:	623b      	str	r3, [r7, #32]
          break;
 8002b1a:	e01f      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	330c      	adds	r3, #12
 8002b22:	623b      	str	r3, [r7, #32]
          break;
 8002b24:	e01a      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	623b      	str	r3, [r7, #32]
          break;
 8002b32:	e013      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	611a      	str	r2, [r3, #16]
          break;
 8002b46:	e009      	b.n	8002b5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	615a      	str	r2, [r3, #20]
          break;
 8002b52:	e003      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
          break;
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          break;
 8002b5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2bff      	cmp	r3, #255	@ 0xff
 8002b60:	d801      	bhi.n	8002b66 <HAL_GPIO_Init+0x13a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_Init+0x13e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2bff      	cmp	r3, #255	@ 0xff
 8002b70:	d802      	bhi.n	8002b78 <HAL_GPIO_Init+0x14c>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x152>
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	3b08      	subs	r3, #8
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	210f      	movs	r1, #15
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80b1 	beq.w	8002d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc4:	4a48      	ldr	r2, [pc, #288]	@ (8002ce8 <HAL_GPIO_Init+0x2bc>)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a40      	ldr	r2, [pc, #256]	@ (8002cec <HAL_GPIO_Init+0x2c0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_GPIO_Init+0x1ec>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8002cf0 <HAL_GPIO_Init+0x2c4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <HAL_GPIO_Init+0x1e8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8002cf4 <HAL_GPIO_Init+0x2c8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <HAL_GPIO_Init+0x1e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf8 <HAL_GPIO_Init+0x2cc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_GPIO_Init+0x1e0>
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e006      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e004      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	f002 0203 	and.w	r2, r2, #3
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	4093      	lsls	r3, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2a:	492f      	ldr	r1, [pc, #188]	@ (8002ce8 <HAL_GPIO_Init+0x2bc>)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c44:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	492c      	ldr	r1, [pc, #176]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c52:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	4928      	ldr	r1, [pc, #160]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c6c:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	4922      	ldr	r1, [pc, #136]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7a:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	491e      	ldr	r1, [pc, #120]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4918      	ldr	r1, [pc, #96]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ca2:	4b16      	ldr	r3, [pc, #88]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4914      	ldr	r1, [pc, #80]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d021      	beq.n	8002d00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	490e      	ldr	r1, [pc, #56]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e021      	b.n	8002d0e <HAL_GPIO_Init+0x2e2>
 8002cca:	bf00      	nop
 8002ccc:	10320000 	.word	0x10320000
 8002cd0:	10310000 	.word	0x10310000
 8002cd4:	10220000 	.word	0x10220000
 8002cd8:	10210000 	.word	0x10210000
 8002cdc:	10120000 	.word	0x10120000
 8002ce0:	10110000 	.word	0x10110000
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	40010c00 	.word	0x40010c00
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_GPIO_Init+0x304>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	4909      	ldr	r1, [pc, #36]	@ (8002d30 <HAL_GPIO_Init+0x304>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	3301      	adds	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f47f ae8e 	bne.w	8002a40 <HAL_GPIO_Init+0x14>
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	372c      	adds	r7, #44	@ 0x2c
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40010400 	.word	0x40010400

08002d34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	@ 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002d42:	e09a      	b.n	8002e7a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d44:	2201      	movs	r2, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 808d 	beq.w	8002e74 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e94 <HAL_GPIO_DeInit+0x160>)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a46      	ldr	r2, [pc, #280]	@ (8002e98 <HAL_GPIO_DeInit+0x164>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_GPIO_DeInit+0x78>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a45      	ldr	r2, [pc, #276]	@ (8002e9c <HAL_GPIO_DeInit+0x168>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00d      	beq.n	8002da8 <HAL_GPIO_DeInit+0x74>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a44      	ldr	r2, [pc, #272]	@ (8002ea0 <HAL_GPIO_DeInit+0x16c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <HAL_GPIO_DeInit+0x70>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a43      	ldr	r2, [pc, #268]	@ (8002ea4 <HAL_GPIO_DeInit+0x170>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_GPIO_DeInit+0x6c>
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e006      	b.n	8002dae <HAL_GPIO_DeInit+0x7a>
 8002da0:	2304      	movs	r3, #4
 8002da2:	e004      	b.n	8002dae <HAL_GPIO_DeInit+0x7a>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_DeInit+0x7a>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_GPIO_DeInit+0x7a>
 8002dac:	2300      	movs	r3, #0
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	f002 0203 	and.w	r2, r2, #3
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4093      	lsls	r3, r2
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d132      	bne.n	8002e24 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4938      	ldr	r1, [pc, #224]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002dcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	4934      	ldr	r1, [pc, #208]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002dda:	4b33      	ldr	r3, [pc, #204]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	4931      	ldr	r1, [pc, #196]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002de8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	492d      	ldr	r1, [pc, #180]	@ (8002ea8 <HAL_GPIO_DeInit+0x174>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002e06:	4a23      	ldr	r2, [pc, #140]	@ (8002e94 <HAL_GPIO_DeInit+0x160>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	481f      	ldr	r0, [pc, #124]	@ (8002e94 <HAL_GPIO_DeInit+0x160>)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	3302      	adds	r3, #2
 8002e20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2bff      	cmp	r3, #255	@ 0xff
 8002e28:	d801      	bhi.n	8002e2e <HAL_GPIO_DeInit+0xfa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	e001      	b.n	8002e32 <HAL_GPIO_DeInit+0xfe>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2bff      	cmp	r3, #255	@ 0xff
 8002e38:	d802      	bhi.n	8002e40 <HAL_GPIO_DeInit+0x10c>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_DeInit+0x112>
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3b08      	subs	r3, #8
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	210f      	movs	r1, #15
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	401a      	ands	r2, r3
 8002e58:	2104      	movs	r1, #4
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	431a      	orrs	r2, r3
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	3301      	adds	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f47f af5e 	bne.w	8002d44 <HAL_GPIO_DeInit+0x10>
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3724      	adds	r7, #36	@ 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40010000 	.word	0x40010000
 8002e98:	40010800 	.word	0x40010800
 8002e9c:	40010c00 	.word	0x40010c00
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	40010400 	.word	0x40010400

08002eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e001      	b.n	8002ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	807b      	strh	r3, [r7, #2]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eea:	787b      	ldrb	r3, [r7, #1]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ef6:	e003      	b.n	8002f00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	041a      	lsls	r2, r3, #16
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	611a      	str	r2, [r3, #16]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f22:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fc22 	bl	8001774 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e12b      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff f8f0 	bl	8002148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	@ 0x24
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f001 f832 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a81      	ldr	r2, [pc, #516]	@ (80031b0 <HAL_I2C_Init+0x274>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d807      	bhi.n	8002fc0 <HAL_I2C_Init+0x84>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a80      	ldr	r2, [pc, #512]	@ (80031b4 <HAL_I2C_Init+0x278>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e006      	b.n	8002fce <HAL_I2C_Init+0x92>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a7d      	ldr	r2, [pc, #500]	@ (80031b8 <HAL_I2C_Init+0x27c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0e7      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a78      	ldr	r2, [pc, #480]	@ (80031bc <HAL_I2C_Init+0x280>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0c9b      	lsrs	r3, r3, #18
 8002fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a6a      	ldr	r2, [pc, #424]	@ (80031b0 <HAL_I2C_Init+0x274>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d802      	bhi.n	8003010 <HAL_I2C_Init+0xd4>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	e009      	b.n	8003024 <HAL_I2C_Init+0xe8>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	4a69      	ldr	r2, [pc, #420]	@ (80031c0 <HAL_I2C_Init+0x284>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	3301      	adds	r3, #1
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003036:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	495c      	ldr	r1, [pc, #368]	@ (80031b0 <HAL_I2C_Init+0x274>)
 8003040:	428b      	cmp	r3, r1
 8003042:	d819      	bhi.n	8003078 <HAL_I2C_Init+0x13c>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e59      	subs	r1, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003058:	400b      	ands	r3, r1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_I2C_Init+0x138>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e59      	subs	r1, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fbb1 f3f3 	udiv	r3, r1, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	e051      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003074:	2304      	movs	r3, #4
 8003076:	e04f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <HAL_I2C_Init+0x168>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e012      	b.n	80030ca <HAL_I2C_Init+0x18e>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	0099      	lsls	r1, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Init+0x196>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e022      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10e      	bne.n	80030f8 <HAL_I2C_Init+0x1bc>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e58      	subs	r0, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	440b      	add	r3, r1
 80030e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f6:	e00f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6809      	ldr	r1, [r1, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003146:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6911      	ldr	r1, [r2, #16]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68d2      	ldr	r2, [r2, #12]
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	000186a0 	.word	0x000186a0
 80031b4:	001e847f 	.word	0x001e847f
 80031b8:	003d08ff 	.word	0x003d08ff
 80031bc:	431bde83 	.word	0x431bde83
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	460b      	mov	r3, r1
 80031d2:	817b      	strh	r3, [r7, #10]
 80031d4:	4613      	mov	r3, r2
 80031d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7ff fa68 	bl	80026ac <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	f040 80e0 	bne.w	80033ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2319      	movs	r3, #25
 80031f2:	2201      	movs	r2, #1
 80031f4:	4970      	ldr	r1, [pc, #448]	@ (80033b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f964 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	e0d3      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x50>
 8003210:	2302      	movs	r3, #2
 8003212:	e0cc      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d007      	beq.n	800323a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2221      	movs	r2, #33	@ 0x21
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2210      	movs	r2, #16
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	893a      	ldrh	r2, [r7, #8]
 800326a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a50      	ldr	r2, [pc, #320]	@ (80033bc <HAL_I2C_Master_Transmit+0x1f8>)
 800327a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800327c:	8979      	ldrh	r1, [r7, #10]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6a3a      	ldr	r2, [r7, #32]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f89c 	bl	80033c0 <I2C_MasterRequestWrite>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e08d      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032a8:	e066      	b.n	8003378 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa22 	bl	80036f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d107      	bne.n	80032d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06b      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	781a      	ldrb	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b04      	cmp	r3, #4
 8003312:	d11b      	bne.n	800334c <HAL_I2C_Master_Transmit+0x188>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d017      	beq.n	800334c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	6a39      	ldr	r1, [r7, #32]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fa19 	bl	8003788 <I2C_WaitOnBTFFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	2b04      	cmp	r3, #4
 8003362:	d107      	bne.n	8003374 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003372:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e01a      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d194      	bne.n	80032aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	00100002 	.word	0x00100002
 80033bc:	ffff0000 	.word	0xffff0000

080033c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	460b      	mov	r3, r1
 80033ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d006      	beq.n	80033ea <I2C_MasterRequestWrite+0x2a>
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d003      	beq.n	80033ea <I2C_MasterRequestWrite+0x2a>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033e8:	d108      	bne.n	80033fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e00b      	b.n	8003414 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	2b12      	cmp	r3, #18
 8003402:	d107      	bne.n	8003414 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f84f 	bl	80034c4 <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800343a:	d103      	bne.n	8003444 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003442:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e035      	b.n	80034b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003450:	d108      	bne.n	8003464 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003460:	611a      	str	r2, [r3, #16]
 8003462:	e01b      	b.n	800349c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	11db      	asrs	r3, r3, #7
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0306 	and.w	r3, r3, #6
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f063 030f 	orn	r3, r3, #15
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	490e      	ldr	r1, [pc, #56]	@ (80034bc <I2C_MasterRequestWrite+0xfc>)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f898 	bl	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e010      	b.n	80034b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4907      	ldr	r1, [pc, #28]	@ (80034c0 <I2C_MasterRequestWrite+0x100>)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f888 	bl	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	00010008 	.word	0x00010008
 80034c0:	00010002 	.word	0x00010002

080034c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d4:	e048      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d044      	beq.n	8003568 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034de:	f7ff f8e5 	bl	80026ac <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d139      	bne.n	8003568 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	0c1b      	lsrs	r3, r3, #16
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10d      	bne.n	800351a <I2C_WaitOnFlagUntilTimeout+0x56>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	43da      	mvns	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4013      	ands	r3, r2
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf0c      	ite	eq
 8003510:	2301      	moveq	r3, #1
 8003512:	2300      	movne	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	461a      	mov	r2, r3
 8003518:	e00c      	b.n	8003534 <I2C_WaitOnFlagUntilTimeout+0x70>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	43da      	mvns	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	429a      	cmp	r2, r3
 8003538:	d116      	bne.n	8003568 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e023      	b.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d10d      	bne.n	800358e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	43da      	mvns	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	e00c      	b.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	43da      	mvns	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	4013      	ands	r3, r2
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d093      	beq.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c6:	e071      	b.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d6:	d123      	bne.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	f043 0204 	orr.w	r2, r3, #4
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e067      	b.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d041      	beq.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	f7ff f840 	bl	80026ac <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d136      	bne.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10c      	bne.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	43da      	mvns	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4013      	ands	r3, r2
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	e00b      	b.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	43da      	mvns	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	f043 0220 	orr.w	r2, r3, #32
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e021      	b.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10c      	bne.n	80036d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	43da      	mvns	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e00b      	b.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f47f af6d 	bne.w	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003704:	e034      	b.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f886 	bl	8003818 <I2C_IsAcknowledgeFailed>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e034      	b.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d028      	beq.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7fe ffc5 	bl	80026ac <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11d      	bne.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800373e:	2b80      	cmp	r3, #128	@ 0x80
 8003740:	d016      	beq.n	8003770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e007      	b.n	8003780 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377a:	2b80      	cmp	r3, #128	@ 0x80
 800377c:	d1c3      	bne.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003794:	e034      	b.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f83e 	bl	8003818 <I2C_IsAcknowledgeFailed>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e034      	b.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d028      	beq.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7fe ff7d 	bl	80026ac <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d11d      	bne.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d016      	beq.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e007      	b.n	8003810 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b04      	cmp	r3, #4
 800380c:	d1c3      	bne.n	8003796 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382e:	d11b      	bne.n	8003868 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003838:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e272      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8087 	beq.w	80039a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003894:	4b92      	ldr	r3, [pc, #584]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b04      	cmp	r3, #4
 800389e:	d00c      	beq.n	80038ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038a0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d112      	bne.n	80038d2 <HAL_RCC_OscConfig+0x5e>
 80038ac:	4b8c      	ldr	r3, [pc, #560]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b8:	d10b      	bne.n	80038d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ba:	4b89      	ldr	r3, [pc, #548]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d06c      	beq.n	80039a0 <HAL_RCC_OscConfig+0x12c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d168      	bne.n	80039a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e24c      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038da:	d106      	bne.n	80038ea <HAL_RCC_OscConfig+0x76>
 80038dc:	4b80      	ldr	r3, [pc, #512]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e02e      	b.n	8003948 <HAL_RCC_OscConfig+0xd4>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7a      	ldr	r2, [pc, #488]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b78      	ldr	r3, [pc, #480]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a77      	ldr	r2, [pc, #476]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003904:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e01d      	b.n	8003948 <HAL_RCC_OscConfig+0xd4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0xbc>
 8003916:	4b72      	ldr	r3, [pc, #456]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a71      	ldr	r2, [pc, #452]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6e      	ldr	r2, [pc, #440]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0xd4>
 8003930:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a6a      	ldr	r2, [pc, #424]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b68      	ldr	r3, [pc, #416]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a67      	ldr	r2, [pc, #412]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003946:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d013      	beq.n	8003978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe feac 	bl	80026ac <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fe fea8 	bl	80026ac <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	@ 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e200      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0f0      	beq.n	8003958 <HAL_RCC_OscConfig+0xe4>
 8003976:	e014      	b.n	80039a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fe fe98 	bl	80026ac <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fe fe94 	bl	80026ac <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1ec      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	4b53      	ldr	r3, [pc, #332]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x10c>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ae:	4b4c      	ldr	r3, [pc, #304]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00b      	beq.n	80039d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ba:	4b49      	ldr	r3, [pc, #292]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d11c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x18c>
 80039c6:	4b46      	ldr	r3, [pc, #280]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d116      	bne.n	8003a00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	4b43      	ldr	r3, [pc, #268]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_RCC_OscConfig+0x176>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e1c0      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4939      	ldr	r1, [pc, #228]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	e03a      	b.n	8003a76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a08:	4b36      	ldr	r3, [pc, #216]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fe4d 	bl	80026ac <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a16:	f7fe fe49 	bl	80026ac <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e1a1      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a34:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4927      	ldr	r1, [pc, #156]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]
 8003a48:	e015      	b.n	8003a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a4a:	4b26      	ldr	r3, [pc, #152]	@ (8003ae4 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe fe2c 	bl	80026ac <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fe fe28 	bl	80026ac <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e180      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d03a      	beq.n	8003af8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d019      	beq.n	8003abe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fe fe0c 	bl	80026ac <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fe fe08 	bl	80026ac <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e160      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f000 fafe 	bl	80040b8 <RCC_Delay>
 8003abc:	e01c      	b.n	8003af8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003abe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <HAL_RCC_OscConfig+0x274>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7fe fdf2 	bl	80026ac <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aca:	e00f      	b.n	8003aec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fe fdee 	bl	80026ac <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d908      	bls.n	8003aec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e146      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	42420000 	.word	0x42420000
 8003ae8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	4b92      	ldr	r3, [pc, #584]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e9      	bne.n	8003acc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a6 	beq.w	8003c52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b8b      	ldr	r3, [pc, #556]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	4b88      	ldr	r3, [pc, #544]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4a87      	ldr	r2, [pc, #540]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b20:	61d3      	str	r3, [r2, #28]
 8003b22:	4b85      	ldr	r3, [pc, #532]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b32:	4b82      	ldr	r3, [pc, #520]	@ (8003d3c <HAL_RCC_OscConfig+0x4c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d118      	bne.n	8003b70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d3c <HAL_RCC_OscConfig+0x4c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7e      	ldr	r2, [pc, #504]	@ (8003d3c <HAL_RCC_OscConfig+0x4c8>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4a:	f7fe fdaf 	bl	80026ac <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b52:	f7fe fdab 	bl	80026ac <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b64      	cmp	r3, #100	@ 0x64
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e103      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b64:	4b75      	ldr	r3, [pc, #468]	@ (8003d3c <HAL_RCC_OscConfig+0x4c8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d106      	bne.n	8003b86 <HAL_RCC_OscConfig+0x312>
 8003b78:	4b6f      	ldr	r3, [pc, #444]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	e02d      	b.n	8003be2 <HAL_RCC_OscConfig+0x36e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x334>
 8003b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a69      	ldr	r2, [pc, #420]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	4b67      	ldr	r3, [pc, #412]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a66      	ldr	r2, [pc, #408]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	6213      	str	r3, [r2, #32]
 8003ba6:	e01c      	b.n	8003be2 <HAL_RCC_OscConfig+0x36e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d10c      	bne.n	8003bca <HAL_RCC_OscConfig+0x356>
 8003bb0:	4b61      	ldr	r3, [pc, #388]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4a60      	ldr	r2, [pc, #384]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	f043 0304 	orr.w	r3, r3, #4
 8003bba:	6213      	str	r3, [r2, #32]
 8003bbc:	4b5e      	ldr	r3, [pc, #376]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	e00b      	b.n	8003be2 <HAL_RCC_OscConfig+0x36e>
 8003bca:	4b5b      	ldr	r3, [pc, #364]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a5a      	ldr	r2, [pc, #360]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6213      	str	r3, [r2, #32]
 8003bd6:	4b58      	ldr	r3, [pc, #352]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a57      	ldr	r2, [pc, #348]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d015      	beq.n	8003c16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fe fd5f 	bl	80026ac <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fe fd5b 	bl	80026ac <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0b1      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	4b4b      	ldr	r3, [pc, #300]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ee      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x37e>
 8003c14:	e014      	b.n	8003c40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7fe fd49 	bl	80026ac <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fe fd45 	bl	80026ac <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e09b      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	4b40      	ldr	r3, [pc, #256]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4b3c      	ldr	r3, [pc, #240]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8087 	beq.w	8003d6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5c:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d061      	beq.n	8003d2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d146      	bne.n	8003cfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c70:	4b33      	ldr	r3, [pc, #204]	@ (8003d40 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe fd19 	bl	80026ac <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe fd15 	bl	80026ac <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e06d      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c90:	4b29      	ldr	r3, [pc, #164]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca4:	d108      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ca6:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4921      	ldr	r1, [pc, #132]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a19      	ldr	r1, [r3, #32]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	491b      	ldr	r1, [pc, #108]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <HAL_RCC_OscConfig+0x4cc>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fe fce9 	bl	80026ac <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fe fce5 	bl	80026ac <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e03d      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cf0:	4b11      	ldr	r3, [pc, #68]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x46a>
 8003cfc:	e035      	b.n	8003d6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <HAL_RCC_OscConfig+0x4cc>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe fcd2 	bl	80026ac <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fe fcce 	bl	80026ac <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e026      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x498>
 8003d2a:	e01e      	b.n	8003d6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e019      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d44:	4b0b      	ldr	r3, [pc, #44]	@ (8003d74 <HAL_RCC_OscConfig+0x500>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0d0      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d910      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b67      	ldr	r3, [pc, #412]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4965      	ldr	r1, [pc, #404]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b63      	ldr	r3, [pc, #396]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd4:	4b59      	ldr	r3, [pc, #356]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a58      	ldr	r2, [pc, #352]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dec:	4b53      	ldr	r3, [pc, #332]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a52      	ldr	r2, [pc, #328]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003df6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b50      	ldr	r3, [pc, #320]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	494d      	ldr	r1, [pc, #308]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d040      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b47      	ldr	r3, [pc, #284]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d115      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	4b41      	ldr	r3, [pc, #260]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e073      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b3d      	ldr	r3, [pc, #244]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06b      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4936      	ldr	r1, [pc, #216]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e68:	f7fe fc20 	bl	80026ac <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fe fc1c 	bl	80026ac <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e053      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b2d      	ldr	r3, [pc, #180]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e98:	4b27      	ldr	r3, [pc, #156]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d210      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b24      	ldr	r3, [pc, #144]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 0207 	bic.w	r2, r3, #7
 8003eae:	4922      	ldr	r1, [pc, #136]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e032      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4916      	ldr	r1, [pc, #88]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ef2:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	490e      	ldr	r1, [pc, #56]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f06:	f000 f821 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	490a      	ldr	r1, [pc, #40]	@ (8003f40 <HAL_RCC_ClockConfig+0x1c8>)
 8003f18:	5ccb      	ldrb	r3, [r1, r3]
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a09      	ldr	r2, [pc, #36]	@ (8003f44 <HAL_RCC_ClockConfig+0x1cc>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f22:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <HAL_RCC_ClockConfig+0x1d0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe f9ee 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40022000 	.word	0x40022000
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	0800bc10 	.word	0x0800bc10
 8003f44:	20000010 	.word	0x20000010
 8003f48:	20000014 	.word	0x20000014

08003f4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	2300      	movs	r3, #0
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f66:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d002      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x30>
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x36>
 8003f7a:	e027      	b.n	8003fcc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f7c:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7e:	613b      	str	r3, [r7, #16]
      break;
 8003f80:	e027      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	0c9b      	lsrs	r3, r3, #18
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f8c:	5cd3      	ldrb	r3, [r2, r3]
 8003f8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d010      	beq.n	8003fbc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f9a:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	0c5b      	lsrs	r3, r3, #17
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fa6:	5cd3      	ldrb	r3, [r2, r3]
 8003fa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fae:	fb03 f202 	mul.w	r2, r3, r2
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e004      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fc0:	fb02 f303 	mul.w	r3, r2, r3
 8003fc4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	613b      	str	r3, [r7, #16]
      break;
 8003fca:	e002      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fcc:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fce:	613b      	str	r3, [r7, #16]
      break;
 8003fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fd2:	693b      	ldr	r3, [r7, #16]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	007a1200 	.word	0x007a1200
 8003fe8:	0800bc28 	.word	0x0800bc28
 8003fec:	0800bc38 	.word	0x0800bc38
 8003ff0:	003d0900 	.word	0x003d0900

08003ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff8:	4b02      	ldr	r3, [pc, #8]	@ (8004004 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	20000010 	.word	0x20000010

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800400c:	f7ff fff2 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4903      	ldr	r1, [pc, #12]	@ (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000
 800402c:	0800bc20 	.word	0x0800bc20

08004030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004034:	f7ff ffde 	bl	8003ff4 <HAL_RCC_GetHCLKFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	0adb      	lsrs	r3, r3, #11
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4903      	ldr	r1, [pc, #12]	@ (8004054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	0800bc20 	.word	0x0800bc20

08004058 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	220f      	movs	r2, #15
 8004066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004068:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <HAL_RCC_GetClockConfig+0x58>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 0203 	and.w	r2, r3, #3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004074:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <HAL_RCC_GetClockConfig+0x58>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004080:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_GetClockConfig+0x58>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800408c:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RCC_GetClockConfig+0x58>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	08db      	lsrs	r3, r3, #3
 8004092:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_RCC_GetClockConfig+0x5c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40022000 	.word	0x40022000

080040b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040c0:	4b0a      	ldr	r3, [pc, #40]	@ (80040ec <RCC_Delay+0x34>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <RCC_Delay+0x38>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	0a5b      	lsrs	r3, r3, #9
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040d4:	bf00      	nop
  }
  while (Delay --);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1e5a      	subs	r2, r3, #1
 80040da:	60fa      	str	r2, [r7, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f9      	bne.n	80040d4 <RCC_Delay+0x1c>
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	20000010 	.word	0x20000010
 80040f0:	10624dd3 	.word	0x10624dd3

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e041      	b.n	800418a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fe f852 	bl	80021c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 facc 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a18      	ldr	r2, [pc, #96]	@ (800421c <HAL_TIM_Base_Start+0x88>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_TIM_Base_Start+0x48>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c6:	d009      	beq.n	80041dc <HAL_TIM_Base_Start+0x48>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <HAL_TIM_Base_Start+0x8c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_TIM_Base_Start+0x48>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <HAL_TIM_Base_Start+0x90>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d111      	bne.n	8004200 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d010      	beq.n	8004210 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fe:	e007      	b.n	8004210 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800

08004228 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	f241 1311 	movw	r3, #4369	@ 0x1111
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10f      	bne.n	8004260 <HAL_TIM_Base_Stop+0x38>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a1a      	ldr	r2, [r3, #32]
 8004246:	f240 4344 	movw	r3, #1092	@ 0x444
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <HAL_TIM_Base_Stop+0x38>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr

08004274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e03a      	b.n	8004302 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a18      	ldr	r2, [pc, #96]	@ (800430c <HAL_TIM_Base_Start_IT+0x98>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b6:	d009      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a14      	ldr	r2, [pc, #80]	@ (8004310 <HAL_TIM_Base_Start_IT+0x9c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x58>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <HAL_TIM_Base_Start_IT+0xa0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d111      	bne.n	80042f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d010      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	e007      	b.n	8004300 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	40012c00 	.word	0x40012c00
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d020      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f998 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f98b 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f99a 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d020      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0204 	mvn.w	r2, #4
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f972 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f965 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f974 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d020      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d01b      	beq.n	8004414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0208 	mvn.w	r2, #8
 80043e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2204      	movs	r2, #4
 80043ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f94c 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 8004400:	e005      	b.n	800440e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f93f 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f94e 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0210 	mvn.w	r2, #16
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2208      	movs	r2, #8
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f926 	bl	8004698 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f919 	bl	8004686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f928 	bl	80046aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0201 	mvn.w	r2, #1
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fe14 	bl	80020ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa7f 	bl	80049a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00c      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d007      	beq.n	80044cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f8f8 	bl	80046bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0220 	mvn.w	r2, #32
 80044e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fa52 	bl	8004994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIM_ConfigClockSource+0x1c>
 8004510:	2302      	movs	r3, #2
 8004512:	e0b4      	b.n	800467e <HAL_TIM_ConfigClockSource+0x186>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800453a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454c:	d03e      	beq.n	80045cc <HAL_TIM_ConfigClockSource+0xd4>
 800454e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004552:	f200 8087 	bhi.w	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	f000 8086 	beq.w	800466a <HAL_TIM_ConfigClockSource+0x172>
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004562:	d87f      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004564:	2b70      	cmp	r3, #112	@ 0x70
 8004566:	d01a      	beq.n	800459e <HAL_TIM_ConfigClockSource+0xa6>
 8004568:	2b70      	cmp	r3, #112	@ 0x70
 800456a:	d87b      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 800456c:	2b60      	cmp	r3, #96	@ 0x60
 800456e:	d050      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x11a>
 8004570:	2b60      	cmp	r3, #96	@ 0x60
 8004572:	d877      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004574:	2b50      	cmp	r3, #80	@ 0x50
 8004576:	d03c      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004578:	2b50      	cmp	r3, #80	@ 0x50
 800457a:	d873      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 800457c:	2b40      	cmp	r3, #64	@ 0x40
 800457e:	d058      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x13a>
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d86f      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b30      	cmp	r3, #48	@ 0x30
 8004586:	d064      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 8004588:	2b30      	cmp	r3, #48	@ 0x30
 800458a:	d86b      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b20      	cmp	r3, #32
 800458e:	d060      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 8004590:	2b20      	cmp	r3, #32
 8004592:	d867      	bhi.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05c      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 8004598:	2b10      	cmp	r3, #16
 800459a:	d05a      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x15a>
 800459c:	e062      	b.n	8004664 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ae:	f000 f974 	bl	800489a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	609a      	str	r2, [r3, #8]
      break;
 80045ca:	e04f      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045dc:	f000 f95d 	bl	800489a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ee:	609a      	str	r2, [r3, #8]
      break;
 80045f0:	e03c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	461a      	mov	r2, r3
 8004600:	f000 f8d4 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2150      	movs	r1, #80	@ 0x50
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f92b 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8004610:	e02c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800461e:	461a      	mov	r2, r3
 8004620:	f000 f8f2 	bl	8004808 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2160      	movs	r1, #96	@ 0x60
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f91b 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8004630:	e01c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f8b4 	bl	80047ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f90b 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8004650:	e00c      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f000 f902 	bl	8004866 <TIM_ITRx_SetConfig>
      break;
 8004662:	e003      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	e000      	b.n	800466c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800466a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr

08004698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
	...

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a2c      	ldr	r2, [pc, #176]	@ (80047a4 <TIM_Base_SetConfig+0xd4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0x30>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a2b      	ldr	r2, [pc, #172]	@ (80047a8 <TIM_Base_SetConfig+0xd8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a22      	ldr	r2, [pc, #136]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1f      	ldr	r2, [pc, #124]	@ (80047a4 <TIM_Base_SetConfig+0xd4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1e      	ldr	r2, [pc, #120]	@ (80047a8 <TIM_Base_SetConfig+0xd8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0d      	ldr	r2, [pc, #52]	@ (80047a0 <TIM_Base_SetConfig+0xd0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
  }
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800

080047ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 030a 	bic.w	r3, r3, #10
 80047e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0210 	bic.w	r2, r3, #16
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	031b      	lsls	r3, r3, #12
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004844:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	f043 0307 	orr.w	r3, r3, #7
 8004888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800489a:	b480      	push	{r7}
 800489c:	b087      	sub	sp, #28
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	021a      	lsls	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	431a      	orrs	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e046      	b.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a16      	ldr	r2, [pc, #88]	@ (8004988 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00e      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800493c:	d009      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a12      	ldr	r2, [pc, #72]	@ (800498c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a10      	ldr	r2, [pc, #64]	@ (8004990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10c      	bne.n	800496c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	4313      	orrs	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800

08004994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e042      	b.n	8004a50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd fc3e 	bl	8002260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2224      	movs	r2, #36	@ 0x24
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fd63 	bl	80054c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	@ 0x28
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d175      	bne.n	8004b64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_UART_Transmit+0x2c>
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e06e      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2221      	movs	r2, #33	@ 0x21
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a96:	f7fd fe09 	bl	80026ac <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_UART_Transmit+0x6c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e003      	b.n	8004acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004acc:	e02e      	b.n	8004b2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2180      	movs	r1, #128	@ 0x80
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fb01 	bl	80050e0 <UART_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e03a      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e007      	b.n	8004b1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1cb      	bne.n	8004ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2140      	movs	r1, #64	@ 0x40
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 facd 	bl	80050e0 <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e006      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b0ba      	sub	sp, #232	@ 0xe8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x66>
 8004bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fbbc 	bl	800534c <UART_Receive_IT>
      return;
 8004bd4:	e25b      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80de 	beq.w	8004d9c <HAL_UART_IRQHandler+0x22c>
 8004be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80d1 	beq.w	8004d9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_UART_IRQHandler+0xae>
 8004c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <HAL_UART_IRQHandler+0xd2>
 8004c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c3a:	f043 0202 	orr.w	r2, r3, #2
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_UART_IRQHandler+0xf6>
 8004c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <HAL_UART_IRQHandler+0x126>
 8004c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	f043 0208 	orr.w	r2, r3, #8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 81f2 	beq.w	8005084 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_UART_IRQHandler+0x14e>
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fb47 	bl	800534c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_UART_IRQHandler+0x17a>
 8004ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d04f      	beq.n	8004d8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fa51 	bl	8005192 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d041      	beq.n	8004d82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3314      	adds	r3, #20
 8004d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3314      	adds	r3, #20
 8004d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1d9      	bne.n	8004cfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d013      	beq.n	8004d7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d56:	4a7e      	ldr	r2, [pc, #504]	@ (8004f50 <HAL_UART_IRQHandler+0x3e0>)
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fd fdec 	bl	800293c <HAL_DMA_Abort_IT>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d016      	beq.n	8004d98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	e00e      	b.n	8004d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f99c 	bl	80050b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d80:	e00a      	b.n	8004d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f998 	bl	80050b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	e006      	b.n	8004d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f994 	bl	80050b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d96:	e175      	b.n	8005084 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	bf00      	nop
    return;
 8004d9a:	e173      	b.n	8005084 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	f040 814f 	bne.w	8005044 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 8148 	beq.w	8005044 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8141 	beq.w	8005044 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	60bb      	str	r3, [r7, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80b6 	beq.w	8004f54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004df4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8145 	beq.w	8005088 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e06:	429a      	cmp	r2, r3
 8004e08:	f080 813e 	bcs.w	8005088 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	f000 8088 	beq.w	8004f30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004e4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004e58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1d9      	bne.n	8004e20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e1      	bne.n	8004e6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eb2:	e853 3f00 	ldrex	r3, [r3]
 8004eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3314      	adds	r3, #20
 8004ec8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ecc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ece:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ed2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e3      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f00:	f023 0310 	bic.w	r3, r3, #16
 8004f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	330c      	adds	r3, #12
 8004f0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e3      	bne.n	8004eee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd fccb 	bl	80028c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f8bf 	bl	80050ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f4c:	e09c      	b.n	8005088 <HAL_UART_IRQHandler+0x518>
 8004f4e:	bf00      	nop
 8004f50:	08005257 	.word	0x08005257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 808e 	beq.w	800508c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8089 	beq.w	800508c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004fa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e3      	bne.n	8004f7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004fd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e3      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	60fb      	str	r3, [r7, #12]
   return(result);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0310 	bic.w	r3, r3, #16
 800500e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800501c:	61fa      	str	r2, [r7, #28]
 800501e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	69b9      	ldr	r1, [r7, #24]
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	617b      	str	r3, [r7, #20]
   return(result);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f844 	bl	80050ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005042:	e023      	b.n	800508c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <HAL_UART_IRQHandler+0x4f4>
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f90e 	bl	800527e <UART_Transmit_IT>
    return;
 8005062:	e014      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <HAL_UART_IRQHandler+0x51e>
 8005070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f94d 	bl	800531c <UART_EndTransmit_IT>
    return;
 8005082:	e004      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
    return;
 8005084:	bf00      	nop
 8005086:	e002      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
      return;
 8005088:	bf00      	nop
 800508a:	e000      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
      return;
 800508c:	bf00      	nop
  }
}
 800508e:	37e8      	adds	r7, #232	@ 0xe8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f0:	e03b      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d037      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fd fad7 	bl	80026ac <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <UART_WaitOnFlagUntilTimeout+0x30>
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e03a      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d023      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b80      	cmp	r3, #128	@ 0x80
 8005126:	d020      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b40      	cmp	r3, #64	@ 0x40
 800512c:	d01d      	beq.n	800516a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b08      	cmp	r3, #8
 800513a:	d116      	bne.n	800516a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f81d 	bl	8005192 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2208      	movs	r2, #8
 800515c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e00f      	b.n	800518a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4013      	ands	r3, r2
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	bf0c      	ite	eq
 800517a:	2301      	moveq	r3, #1
 800517c:	2300      	movne	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	429a      	cmp	r2, r3
 8005186:	d0b4      	beq.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005192:	b480      	push	{r7}
 8005194:	b095      	sub	sp, #84	@ 0x54
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051c2:	e841 2300 	strex	r3, r2, [r1]
 80051c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1e5      	bne.n	800519a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3314      	adds	r3, #20
 80051d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	e853 3f00 	ldrex	r3, [r3]
 80051dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3314      	adds	r3, #20
 80051ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e5      	bne.n	80051ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005206:	2b01      	cmp	r3, #1
 8005208:	d119      	bne.n	800523e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	60bb      	str	r3, [r7, #8]
   return(result);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	647b      	str	r3, [r7, #68]	@ 0x44
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800522a:	61ba      	str	r2, [r7, #24]
 800522c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6979      	ldr	r1, [r7, #20]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	613b      	str	r3, [r7, #16]
   return(result);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800524c:	bf00      	nop
 800524e:	3754      	adds	r7, #84	@ 0x54
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr

08005256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ff21 	bl	80050b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b21      	cmp	r3, #33	@ 0x21
 8005290:	d13e      	bne.n	8005310 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529a:	d114      	bne.n	80052c6 <UART_Transmit_IT+0x48>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d110      	bne.n	80052c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]
 80052c4:	e008      	b.n	80052d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	1c59      	adds	r1, r3, #1
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6211      	str	r1, [r2, #32]
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	4619      	mov	r1, r3
 80052e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10f      	bne.n	800530c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800530a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005332:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff fea9 	bl	8005094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08c      	sub	sp, #48	@ 0x30
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b22      	cmp	r3, #34	@ 0x22
 800535e:	f040 80ae 	bne.w	80054be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800536a:	d117      	bne.n	800539c <UART_Receive_IT+0x50>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d113      	bne.n	800539c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	b29a      	uxth	r2, r3
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	1c9a      	adds	r2, r3, #2
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	629a      	str	r2, [r3, #40]	@ 0x28
 800539a:	e026      	b.n	80053ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ae:	d007      	beq.n	80053c0 <UART_Receive_IT+0x74>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <UART_Receive_IT+0x82>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e008      	b.n	80053e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4619      	mov	r1, r3
 80053f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d15d      	bne.n	80054ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0220 	bic.w	r2, r2, #32
 800540c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800541c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005440:	2b01      	cmp	r3, #1
 8005442:	d135      	bne.n	80054b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	613b      	str	r3, [r7, #16]
   return(result);
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f023 0310 	bic.w	r3, r3, #16
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	330c      	adds	r3, #12
 8005468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546a:	623a      	str	r2, [r7, #32]
 800546c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	69f9      	ldr	r1, [r7, #28]
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	61bb      	str	r3, [r7, #24]
   return(result);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e5      	bne.n	800544a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b10      	cmp	r3, #16
 800548a:	d10a      	bne.n	80054a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fe0e 	bl	80050ca <HAL_UARTEx_RxEventCallback>
 80054ae:	e002      	b.n	80054b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fdf8 	bl	80050a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e002      	b.n	80054c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	e000      	b.n	80054c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054be:	2302      	movs	r3, #2
  }
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3730      	adds	r7, #48	@ 0x30
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005502:	f023 030c 	bic.w	r3, r3, #12
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	68b9      	ldr	r1, [r7, #8]
 800550c:	430b      	orrs	r3, r1
 800550e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2c      	ldr	r2, [pc, #176]	@ (80055dc <UART_SetConfig+0x114>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005530:	f7fe fd7e 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	e002      	b.n	800553e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005538:	f7fe fd66 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 800553c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	009a      	lsls	r2, r3, #2
 8005548:	441a      	add	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	fbb2 f3f3 	udiv	r3, r2, r3
 8005554:	4a22      	ldr	r2, [pc, #136]	@ (80055e0 <UART_SetConfig+0x118>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	0119      	lsls	r1, r3, #4
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	009a      	lsls	r2, r3, #2
 8005568:	441a      	add	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	fbb2 f2f3 	udiv	r2, r2, r3
 8005574:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <UART_SetConfig+0x118>)
 8005576:	fba3 0302 	umull	r0, r3, r3, r2
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	2064      	movs	r0, #100	@ 0x64
 800557e:	fb00 f303 	mul.w	r3, r0, r3
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	3332      	adds	r3, #50	@ 0x32
 8005588:	4a15      	ldr	r2, [pc, #84]	@ (80055e0 <UART_SetConfig+0x118>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005594:	4419      	add	r1, r3
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009a      	lsls	r2, r3, #2
 80055a0:	441a      	add	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ac:	4b0c      	ldr	r3, [pc, #48]	@ (80055e0 <UART_SetConfig+0x118>)
 80055ae:	fba3 0302 	umull	r0, r3, r3, r2
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	2064      	movs	r0, #100	@ 0x64
 80055b6:	fb00 f303 	mul.w	r3, r0, r3
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	3332      	adds	r3, #50	@ 0x32
 80055c0:	4a07      	ldr	r2, [pc, #28]	@ (80055e0 <UART_SetConfig+0x118>)
 80055c2:	fba2 2303 	umull	r2, r3, r2, r3
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	440a      	add	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055d4:	bf00      	nop
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40013800 	.word	0x40013800
 80055e0:	51eb851f 	.word	0x51eb851f

080055e4 <__NVIC_SetPriority>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	6039      	str	r1, [r7, #0]
 80055ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db0a      	blt.n	800560e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	490c      	ldr	r1, [pc, #48]	@ (8005630 <__NVIC_SetPriority+0x4c>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	0112      	lsls	r2, r2, #4
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	440b      	add	r3, r1
 8005608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800560c:	e00a      	b.n	8005624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4908      	ldr	r1, [pc, #32]	@ (8005634 <__NVIC_SetPriority+0x50>)
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	3b04      	subs	r3, #4
 800561c:	0112      	lsls	r2, r2, #4
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	440b      	add	r3, r1
 8005622:	761a      	strb	r2, [r3, #24]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000e100 	.word	0xe000e100
 8005634:	e000ed00 	.word	0xe000ed00

08005638 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800563c:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <SysTick_Handler+0x1c>)
 800563e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005640:	f002 f8be 	bl	80077c0 <xTaskGetSchedulerState>
 8005644:	4603      	mov	r3, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	d001      	beq.n	800564e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800564a:	f003 f86d 	bl	8008728 <xPortSysTickHandler>
  }
}
 800564e:	bf00      	nop
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	e000e010 	.word	0xe000e010

08005658 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800565c:	2100      	movs	r1, #0
 800565e:	f06f 0004 	mvn.w	r0, #4
 8005662:	f7ff ffbf 	bl	80055e4 <__NVIC_SetPriority>
#endif
}
 8005666:	bf00      	nop
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005672:	f3ef 8305 	mrs	r3, IPSR
 8005676:	603b      	str	r3, [r7, #0]
  return(result);
 8005678:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800567e:	f06f 0305 	mvn.w	r3, #5
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	e00c      	b.n	80056a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005686:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <osKernelInitialize+0x40>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800568e:	4b07      	ldr	r3, [pc, #28]	@ (80056ac <osKernelInitialize+0x40>)
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005694:	2300      	movs	r3, #0
 8005696:	607b      	str	r3, [r7, #4]
 8005698:	e002      	b.n	80056a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295
 800569e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056a0:	687b      	ldr	r3, [r7, #4]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	20000418 	.word	0x20000418

080056b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b6:	f3ef 8305 	mrs	r3, IPSR
 80056ba:	603b      	str	r3, [r7, #0]
  return(result);
 80056bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80056c2:	f06f 0305 	mvn.w	r3, #5
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	e010      	b.n	80056ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056ca:	4b0b      	ldr	r3, [pc, #44]	@ (80056f8 <osKernelStart+0x48>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d109      	bne.n	80056e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056d2:	f7ff ffc1 	bl	8005658 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056d6:	4b08      	ldr	r3, [pc, #32]	@ (80056f8 <osKernelStart+0x48>)
 80056d8:	2202      	movs	r2, #2
 80056da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056dc:	f001 fc10 	bl	8006f00 <vTaskStartScheduler>
      stat = osOK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	e002      	b.n	80056ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056ec:	687b      	ldr	r3, [r7, #4]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000418 	.word	0x20000418

080056fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08e      	sub	sp, #56	@ 0x38
 8005700:	af04      	add	r7, sp, #16
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800570c:	f3ef 8305 	mrs	r3, IPSR
 8005710:	617b      	str	r3, [r7, #20]
  return(result);
 8005712:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005714:	2b00      	cmp	r3, #0
 8005716:	d17e      	bne.n	8005816 <osThreadNew+0x11a>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d07b      	beq.n	8005816 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800571e:	2380      	movs	r3, #128	@ 0x80
 8005720:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005722:	2318      	movs	r3, #24
 8005724:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d045      	beq.n	80057c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <osThreadNew+0x48>
        name = attr->name;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <osThreadNew+0x6e>
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2b38      	cmp	r3, #56	@ 0x38
 800575c:	d805      	bhi.n	800576a <osThreadNew+0x6e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <osThreadNew+0x72>
        return (NULL);
 800576a:	2300      	movs	r3, #0
 800576c:	e054      	b.n	8005818 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <osThreadNew+0xa8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2ba7      	cmp	r3, #167	@ 0xa7
 800578c:	d90a      	bls.n	80057a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <osThreadNew+0xa8>
        mem = 1;
 800579e:	2301      	movs	r3, #1
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e010      	b.n	80057c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10c      	bne.n	80057c6 <osThreadNew+0xca>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d108      	bne.n	80057c6 <osThreadNew+0xca>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <osThreadNew+0xca>
          mem = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	e001      	b.n	80057c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d110      	bne.n	80057ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057d4:	9202      	str	r2, [sp, #8]
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6a3a      	ldr	r2, [r7, #32]
 80057e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f001 f8fa 	bl	80069dc <xTaskCreateStatic>
 80057e8:	4603      	mov	r3, r0
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	e013      	b.n	8005816 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d110      	bne.n	8005816 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	f107 0310 	add.w	r3, r7, #16
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f001 f948 	bl	8006a9c <xTaskCreate>
 800580c:	4603      	mov	r3, r0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d001      	beq.n	8005816 <osThreadNew+0x11a>
            hTask = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005816:	693b      	ldr	r3, [r7, #16]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	@ 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800582e:	f3ef 8305 	mrs	r3, IPSR
 8005832:	60fb      	str	r3, [r7, #12]
  return(result);
 8005834:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <osThreadSetPriority+0x22>
    stat = osErrorISR;
 800583a:	f06f 0305 	mvn.w	r3, #5
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e013      	b.n	800586a <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d005      	beq.n	8005854 <osThreadSetPriority+0x34>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	dd02      	ble.n	8005854 <osThreadSetPriority+0x34>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b38      	cmp	r3, #56	@ 0x38
 8005852:	dd03      	ble.n	800585c <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8005854:	f06f 0303 	mvn.w	r3, #3
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e006      	b.n	800586a <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	4619      	mov	r1, r3
 8005864:	6938      	ldr	r0, [r7, #16]
 8005866:	f001 faad 	bl	8006dc4 <vTaskPrioritySet>
  }

  return (stat);
 800586a:	697b      	ldr	r3, [r7, #20]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <osThreadFlagsSet+0x1a>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	da03      	bge.n	8005896 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800588e:	f06f 0303 	mvn.w	r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	e035      	b.n	8005902 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800589c:	f3ef 8305 	mrs	r3, IPSR
 80058a0:	613b      	str	r3, [r7, #16]
  return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01f      	beq.n	80058e8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80058ac:	f107 0308 	add.w	r3, r7, #8
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	2300      	movs	r3, #0
 80058b4:	2201      	movs	r2, #1
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6978      	ldr	r0, [r7, #20]
 80058ba:	f002 f931 	bl	8007b20 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	2200      	movs	r2, #0
 80058c4:	9200      	str	r2, [sp, #0]
 80058c6:	2200      	movs	r2, #0
 80058c8:	2100      	movs	r1, #0
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	f002 f928 	bl	8007b20 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d015      	beq.n	8005902 <osThreadFlagsSet+0x8e>
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <osThreadFlagsSet+0x98>)
 80058d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	e00c      	b.n	8005902 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80058e8:	2300      	movs	r3, #0
 80058ea:	2201      	movs	r2, #1
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6978      	ldr	r0, [r7, #20]
 80058f0:	f002 f854 	bl	800799c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80058f4:	f107 030c 	add.w	r3, r7, #12
 80058f8:	2200      	movs	r2, #0
 80058fa:	2100      	movs	r1, #0
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f002 f84d 	bl	800799c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005902:	68fb      	ldr	r3, [r7, #12]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	@ 0x30
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591c:	f3ef 8305 	mrs	r3, IPSR
 8005920:	617b      	str	r3, [r7, #20]
  return(result);
 8005922:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005928:	f06f 0305 	mvn.w	r3, #5
 800592c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592e:	e06b      	b.n	8005a08 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	da03      	bge.n	800593e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005936:	f06f 0303 	mvn.w	r3, #3
 800593a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800593c:	e064      	b.n	8005a08 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594c:	e001      	b.n	8005952 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800595a:	f001 fbed 	bl	8007138 <xTaskGetTickCount>
 800595e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005960:	f107 0210 	add.w	r2, r7, #16
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005968:	2000      	movs	r0, #0
 800596a:	f001 ffb7 	bl	80078dc <xTaskNotifyWait>
 800596e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d137      	bne.n	80059e6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4013      	ands	r3, r2
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005982:	4313      	orrs	r3, r2
 8005984:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00c      	beq.n	80059aa <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005994:	4013      	ands	r3, r2
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	429a      	cmp	r2, r3
 800599a:	d032      	beq.n	8005a02 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10f      	bne.n	80059c2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80059a2:	f06f 0302 	mvn.w	r3, #2
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80059a8:	e02e      	b.n	8005a08 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d128      	bne.n	8005a06 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d103      	bne.n	80059c2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80059ba:	f06f 0302 	mvn.w	r3, #2
 80059be:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 80059c0:	e022      	b.n	8005a08 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80059c2:	f001 fbb9 	bl	8007138 <xTaskGetTickCount>
 80059c6:	4602      	mov	r2, r0
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d902      	bls.n	80059dc <osThreadFlagsWait+0xcc>
          tout  = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059da:	e00e      	b.n	80059fa <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80059dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e4:	e009      	b.n	80059fa <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80059ec:	f06f 0302 	mvn.w	r3, #2
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f2:	e002      	b.n	80059fa <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80059f4:	f06f 0301 	mvn.w	r3, #1
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1af      	bne.n	8005960 <osThreadFlagsWait+0x50>
 8005a00:	e002      	b.n	8005a08 <osThreadFlagsWait+0xf8>
            break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <osThreadFlagsWait+0xf8>
            break;
 8005a06:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3730      	adds	r7, #48	@ 0x30
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1a:	f3ef 8305 	mrs	r3, IPSR
 8005a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <osDelay+0x1c>
    stat = osErrorISR;
 8005a26:	f06f 0305 	mvn.w	r3, #5
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e007      	b.n	8005a3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 f98d 	bl	8006d58 <vTaskDelay>
    }
  }

  return (stat);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	@ 0x28
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a58:	f3ef 8305 	mrs	r3, IPSR
 8005a5c:	613b      	str	r3, [r7, #16]
  return(result);
 8005a5e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d15f      	bne.n	8005b24 <osMessageQueueNew+0xdc>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d05c      	beq.n	8005b24 <osMessageQueueNew+0xdc>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d059      	beq.n	8005b24 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a70:	f04f 33ff 	mov.w	r3, #4294967295
 8005a74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d029      	beq.n	8005ad0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d012      	beq.n	8005aaa <osMessageQueueNew+0x62>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a8a:	d90e      	bls.n	8005aaa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <osMessageQueueNew+0x62>
        mem = 1;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e014      	b.n	8005ad4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d110      	bne.n	8005ad4 <osMessageQueueNew+0x8c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10c      	bne.n	8005ad4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d108      	bne.n	8005ad4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <osMessageQueueNew+0x8c>
          mem = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	e001      	b.n	8005ad4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d10b      	bne.n	8005af2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	9100      	str	r1, [sp, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fa2b 	bl	8005f44 <xQueueGenericCreateStatic>
 8005aee:	61f8      	str	r0, [r7, #28]
 8005af0:	e008      	b.n	8005b04 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005af8:	2200      	movs	r2, #0
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fa9e 	bl	800603e <xQueueGenericCreate>
 8005b02:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00c      	beq.n	8005b24 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e001      	b.n	8005b1c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	69f8      	ldr	r0, [r7, #28]
 8005b20:	f000 ff00 	bl	8006924 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b24:	69fb      	ldr	r3, [r7, #28]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b48:	f3ef 8305 	mrs	r3, IPSR
 8005b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b4e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d028      	beq.n	8005ba6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <osMessageQueuePut+0x36>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <osMessageQueuePut+0x36>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b66:	f06f 0303 	mvn.w	r3, #3
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e038      	b.n	8005be0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b72:	f107 0210 	add.w	r2, r7, #16
 8005b76:	2300      	movs	r3, #0
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	69b8      	ldr	r0, [r7, #24]
 8005b7c:	f000 fbc0 	bl	8006300 <xQueueGenericSendFromISR>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d003      	beq.n	8005b8e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b86:	f06f 0302 	mvn.w	r3, #2
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e028      	b.n	8005be0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d025      	beq.n	8005be0 <osMessageQueuePut+0xb0>
 8005b94:	4b15      	ldr	r3, [pc, #84]	@ (8005bec <osMessageQueuePut+0xbc>)
 8005b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	e01c      	b.n	8005be0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <osMessageQueuePut+0x82>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005bb2:	f06f 0303 	mvn.w	r3, #3
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e012      	b.n	8005be0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005bba:	2300      	movs	r3, #0
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	69b8      	ldr	r0, [r7, #24]
 8005bc2:	f000 fa9b 	bl	80060fc <xQueueGenericSend>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d009      	beq.n	8005be0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005bd2:	f06f 0301 	mvn.w	r3, #1
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e002      	b.n	8005be0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005bda:	f06f 0302 	mvn.w	r3, #2
 8005bde:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005be0:	69fb      	ldr	r3, [r7, #28]
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	e000ed04 	.word	0xe000ed04

08005bf0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c06:	f3ef 8305 	mrs	r3, IPSR
 8005c0a:	617b      	str	r3, [r7, #20]
  return(result);
 8005c0c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d028      	beq.n	8005c64 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <osMessageQueueGet+0x34>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <osMessageQueueGet+0x34>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c24:	f06f 0303 	mvn.w	r3, #3
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e037      	b.n	8005c9c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c30:	f107 0310 	add.w	r3, r7, #16
 8005c34:	461a      	mov	r2, r3
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	69b8      	ldr	r0, [r7, #24]
 8005c3a:	f000 fce1 	bl	8006600 <xQueueReceiveFromISR>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d003      	beq.n	8005c4c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005c44:	f06f 0302 	mvn.w	r3, #2
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	e027      	b.n	8005c9c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d024      	beq.n	8005c9c <osMessageQueueGet+0xac>
 8005c52:	4b15      	ldr	r3, [pc, #84]	@ (8005ca8 <osMessageQueueGet+0xb8>)
 8005c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	e01b      	b.n	8005c9c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <osMessageQueueGet+0x80>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d103      	bne.n	8005c78 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c70:	f06f 0303 	mvn.w	r3, #3
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	e011      	b.n	8005c9c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	69b8      	ldr	r0, [r7, #24]
 8005c7e:	f000 fbdd 	bl	800643c <xQueueReceive>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d009      	beq.n	8005c9c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c8e:	f06f 0301 	mvn.w	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	e002      	b.n	8005c9c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c96:	f06f 0302 	mvn.w	r3, #2
 8005c9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a06      	ldr	r2, [pc, #24]	@ (8005cd4 <vApplicationGetIdleTaskMemory+0x28>)
 8005cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4a05      	ldr	r2, [pc, #20]	@ (8005cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2280      	movs	r2, #128	@ 0x80
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	2000041c 	.word	0x2000041c
 8005cd8:	200004c4 	.word	0x200004c4

08005cdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a07      	ldr	r2, [pc, #28]	@ (8005d08 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4a06      	ldr	r2, [pc, #24]	@ (8005d0c <vApplicationGetTimerTaskMemory+0x30>)
 8005cf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cfa:	601a      	str	r2, [r3, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	200006c4 	.word	0x200006c4
 8005d0c:	2000076c 	.word	0x2000076c

08005d10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f103 0208 	add.w	r2, r3, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f103 0208 	add.w	r2, r3, #8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f103 0208 	add.w	r2, r3, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
}
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d103      	bne.n	8005dcc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e00c      	b.n	8005de6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e002      	b.n	8005dda <vListInsert+0x2e>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d2f6      	bcs.n	8005dd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	601a      	str	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6892      	ldr	r2, [r2, #8]
 8005e32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6852      	ldr	r2, [r2, #4]
 8005e3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d103      	bne.n	8005e50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
	...

08005e70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	e7fd      	b.n	8005e98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e9c:	f002 fbc6 	bl	800862c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	68f9      	ldr	r1, [r7, #12]
 8005ed0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	441a      	add	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	22ff      	movs	r2, #255	@ 0xff
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	22ff      	movs	r2, #255	@ 0xff
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d114      	bne.n	8005f1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d01a      	beq.n	8005f30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3310      	adds	r3, #16
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fa98 	bl	8007434 <xTaskRemoveFromEventList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d012      	beq.n	8005f30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f40 <xQueueGenericReset+0xd0>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	e009      	b.n	8005f30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3310      	adds	r3, #16
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fef5 	bl	8005d10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3324      	adds	r3, #36	@ 0x24
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff fef0 	bl	8005d10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f30:	f002 fbac 	bl	800868c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f34:	2301      	movs	r3, #1
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	e000ed04 	.word	0xe000ed04

08005f44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08e      	sub	sp, #56	@ 0x38
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10b      	bne.n	8005f70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <xQueueGenericCreateStatic+0x56>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <xQueueGenericCreateStatic+0x5a>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueGenericCreateStatic+0x5c>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10b      	bne.n	8005fbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	623b      	str	r3, [r7, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	bf00      	nop
 8005fba:	e7fd      	b.n	8005fb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <xQueueGenericCreateStatic+0x84>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <xQueueGenericCreateStatic+0x88>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e000      	b.n	8005fce <xQueueGenericCreateStatic+0x8a>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	61fb      	str	r3, [r7, #28]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fea:	2350      	movs	r3, #80	@ 0x50
 8005fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b50      	cmp	r3, #80	@ 0x50
 8005ff2:	d00b      	beq.n	800600c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	61bb      	str	r3, [r7, #24]
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	e7fd      	b.n	8006008 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800600c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00d      	beq.n	8006034 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006020:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f840 	bl	80060b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006036:	4618      	mov	r0, r3
 8006038:	3730      	adds	r7, #48	@ 0x30
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800603e:	b580      	push	{r7, lr}
 8006040:	b08a      	sub	sp, #40	@ 0x28
 8006042:	af02      	add	r7, sp, #8
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	4613      	mov	r3, r2
 800604a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10b      	bne.n	800606a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	613b      	str	r3, [r7, #16]
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	e7fd      	b.n	8006066 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	fb02 f303 	mul.w	r3, r2, r3
 8006072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	3350      	adds	r3, #80	@ 0x50
 8006078:	4618      	mov	r0, r3
 800607a:	f002 fbd9 	bl	8008830 <pvPortMalloc>
 800607e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	3350      	adds	r3, #80	@ 0x50
 800608e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006098:	79fa      	ldrb	r2, [r7, #7]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4613      	mov	r3, r2
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f805 	bl	80060b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060aa:	69bb      	ldr	r3, [r7, #24]
	}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060e2:	2101      	movs	r1, #1
 80060e4:	69b8      	ldr	r0, [r7, #24]
 80060e6:	f7ff fec3 	bl	8005e70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	78fa      	ldrb	r2, [r7, #3]
 80060ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060f2:	bf00      	nop
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08e      	sub	sp, #56	@ 0x38
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800610a:	2300      	movs	r3, #0
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <xQueueGenericSend+0x34>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <xQueueGenericSend+0x42>
 8006136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <xQueueGenericSend+0x46>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueGenericSend+0x48>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <xQueueGenericSend+0x64>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b02      	cmp	r3, #2
 8006164:	d103      	bne.n	800616e <xQueueGenericSend+0x72>
 8006166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <xQueueGenericSend+0x76>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <xQueueGenericSend+0x78>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <xQueueGenericSend+0x94>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	623b      	str	r3, [r7, #32]
}
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006190:	f001 fb16 	bl	80077c0 <xTaskGetSchedulerState>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <xQueueGenericSend+0xa4>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <xQueueGenericSend+0xa8>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <xQueueGenericSend+0xaa>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10b      	bne.n	80061c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	61fb      	str	r3, [r7, #28]
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	e7fd      	b.n	80061be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061c2:	f002 fa33 	bl	800862c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d302      	bcc.n	80061d8 <xQueueGenericSend+0xdc>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d129      	bne.n	800622c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061de:	f000 fa91 	bl	8006704 <prvCopyDataToQueue>
 80061e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d010      	beq.n	800620e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ee:	3324      	adds	r3, #36	@ 0x24
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 f91f 	bl	8007434 <xTaskRemoveFromEventList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d013      	beq.n	8006224 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061fc:	4b3f      	ldr	r3, [pc, #252]	@ (80062fc <xQueueGenericSend+0x200>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	e00a      	b.n	8006224 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006214:	4b39      	ldr	r3, [pc, #228]	@ (80062fc <xQueueGenericSend+0x200>)
 8006216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006224:	f002 fa32 	bl	800868c <vPortExitCritical>
				return pdPASS;
 8006228:	2301      	movs	r3, #1
 800622a:	e063      	b.n	80062f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006232:	f002 fa2b 	bl	800868c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006236:	2300      	movs	r3, #0
 8006238:	e05c      	b.n	80062f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800623a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006240:	f107 0314 	add.w	r3, r7, #20
 8006244:	4618      	mov	r0, r3
 8006246:	f001 f959 	bl	80074fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800624a:	2301      	movs	r3, #1
 800624c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800624e:	f002 fa1d 	bl	800868c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006252:	f000 fec5 	bl	8006fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006256:	f002 f9e9 	bl	800862c <vPortEnterCritical>
 800625a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006260:	b25b      	sxtb	r3, r3
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d103      	bne.n	8006270 <xQueueGenericSend+0x174>
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006276:	b25b      	sxtb	r3, r3
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d103      	bne.n	8006286 <xQueueGenericSend+0x18a>
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006286:	f002 fa01 	bl	800868c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800628a:	1d3a      	adds	r2, r7, #4
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	4611      	mov	r1, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f001 f948 	bl	8007528 <xTaskCheckForTimeOut>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d124      	bne.n	80062e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800629e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062a0:	f000 fb28 	bl	80068f4 <prvIsQueueFull>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d018      	beq.n	80062dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	3310      	adds	r3, #16
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f86c 	bl	8007390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ba:	f000 fab3 	bl	8006824 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062be:	f000 fe9d 	bl	8006ffc <xTaskResumeAll>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f47f af7c 	bne.w	80061c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062ca:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <xQueueGenericSend+0x200>)
 80062cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	e772      	b.n	80061c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062de:	f000 faa1 	bl	8006824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062e2:	f000 fe8b 	bl	8006ffc <xTaskResumeAll>
 80062e6:	e76c      	b.n	80061c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ea:	f000 fa9b 	bl	8006824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ee:	f000 fe85 	bl	8006ffc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3738      	adds	r7, #56	@ 0x38
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	e000ed04 	.word	0xe000ed04

08006300 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b090      	sub	sp, #64	@ 0x40
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10b      	bne.n	8006330 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d103      	bne.n	800633e <xQueueGenericSendFromISR+0x3e>
 8006336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <xQueueGenericSendFromISR+0x42>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <xQueueGenericSendFromISR+0x44>
 8006342:	2300      	movs	r3, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10b      	bne.n	8006360 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d103      	bne.n	800636e <xQueueGenericSendFromISR+0x6e>
 8006366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d101      	bne.n	8006372 <xQueueGenericSendFromISR+0x72>
 800636e:	2301      	movs	r3, #1
 8006370:	e000      	b.n	8006374 <xQueueGenericSendFromISR+0x74>
 8006372:	2300      	movs	r3, #0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10b      	bne.n	8006390 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	623b      	str	r3, [r7, #32]
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	e7fd      	b.n	800638c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006390:	f002 fa0e 	bl	80087b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006394:	f3ef 8211 	mrs	r2, BASEPRI
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	61fa      	str	r2, [r7, #28]
 80063aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d302      	bcc.n	80063c2 <xQueueGenericSendFromISR+0xc2>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d12f      	bne.n	8006422 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063d8:	f000 f994 	bl	8006704 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d112      	bne.n	800640c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d016      	beq.n	800641c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f0:	3324      	adds	r3, #36	@ 0x24
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 f81e 	bl	8007434 <xTaskRemoveFromEventList>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	e007      	b.n	800641c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800640c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006410:	3301      	adds	r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	b25a      	sxtb	r2, r3
 8006416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800641c:	2301      	movs	r3, #1
 800641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006420:	e001      	b.n	8006426 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006422:	2300      	movs	r3, #0
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006428:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006430:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006434:	4618      	mov	r0, r3
 8006436:	3740      	adds	r7, #64	@ 0x40
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	@ 0x30
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006448:	2300      	movs	r3, #0
 800644a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <xQueueReceive+0x32>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	623b      	str	r3, [r7, #32]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <xQueueReceive+0x40>
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <xQueueReceive+0x44>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <xQueueReceive+0x46>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <xQueueReceive+0x62>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	61fb      	str	r3, [r7, #28]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800649e:	f001 f98f 	bl	80077c0 <xTaskGetSchedulerState>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <xQueueReceive+0x72>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <xQueueReceive+0x76>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <xQueueReceive+0x78>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <xQueueReceive+0x94>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	61bb      	str	r3, [r7, #24]
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	e7fd      	b.n	80064cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064d0:	f002 f8ac 	bl	800862c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01f      	beq.n	8006520 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e4:	f000 f978 	bl	80067d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	1e5a      	subs	r2, r3, #1
 80064ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00f      	beq.n	8006518 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fa:	3310      	adds	r3, #16
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 ff99 	bl	8007434 <xTaskRemoveFromEventList>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d007      	beq.n	8006518 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006508:	4b3c      	ldr	r3, [pc, #240]	@ (80065fc <xQueueReceive+0x1c0>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006518:	f002 f8b8 	bl	800868c <vPortExitCritical>
				return pdPASS;
 800651c:	2301      	movs	r3, #1
 800651e:	e069      	b.n	80065f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d103      	bne.n	800652e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006526:	f002 f8b1 	bl	800868c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800652a:	2300      	movs	r3, #0
 800652c:	e062      	b.n	80065f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800652e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006534:	f107 0310 	add.w	r3, r7, #16
 8006538:	4618      	mov	r0, r3
 800653a:	f000 ffdf 	bl	80074fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800653e:	2301      	movs	r3, #1
 8006540:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006542:	f002 f8a3 	bl	800868c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006546:	f000 fd4b 	bl	8006fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800654a:	f002 f86f 	bl	800862c <vPortEnterCritical>
 800654e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006554:	b25b      	sxtb	r3, r3
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d103      	bne.n	8006564 <xQueueReceive+0x128>
 800655c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800656a:	b25b      	sxtb	r3, r3
 800656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006570:	d103      	bne.n	800657a <xQueueReceive+0x13e>
 8006572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800657a:	f002 f887 	bl	800868c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800657e:	1d3a      	adds	r2, r7, #4
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	4611      	mov	r1, r2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 ffce 	bl	8007528 <xTaskCheckForTimeOut>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d123      	bne.n	80065da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006594:	f000 f998 	bl	80068c8 <prvIsQueueEmpty>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d017      	beq.n	80065ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	3324      	adds	r3, #36	@ 0x24
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4611      	mov	r1, r2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fef2 	bl	8007390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ae:	f000 f939 	bl	8006824 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065b2:	f000 fd23 	bl	8006ffc <xTaskResumeAll>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d189      	bne.n	80064d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065bc:	4b0f      	ldr	r3, [pc, #60]	@ (80065fc <xQueueReceive+0x1c0>)
 80065be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	e780      	b.n	80064d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065d0:	f000 f928 	bl	8006824 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065d4:	f000 fd12 	bl	8006ffc <xTaskResumeAll>
 80065d8:	e77a      	b.n	80064d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065dc:	f000 f922 	bl	8006824 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065e0:	f000 fd0c 	bl	8006ffc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065e6:	f000 f96f 	bl	80068c8 <prvIsQueueEmpty>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f43f af6f 	beq.w	80064d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3730      	adds	r7, #48	@ 0x30
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	e000ed04 	.word	0xe000ed04

08006600 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08e      	sub	sp, #56	@ 0x38
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	623b      	str	r3, [r7, #32]
}
 8006628:	bf00      	nop
 800662a:	bf00      	nop
 800662c:	e7fd      	b.n	800662a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d103      	bne.n	800663c <xQueueReceiveFromISR+0x3c>
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <xQueueReceiveFromISR+0x40>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <xQueueReceiveFromISR+0x42>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61fb      	str	r3, [r7, #28]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800665e:	f002 f8a7 	bl	80087b0 <vPortValidateInterruptPriority>
	__asm volatile
 8006662:	f3ef 8211 	mrs	r2, BASEPRI
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	61ba      	str	r2, [r7, #24]
 8006678:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800667a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800667c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02f      	beq.n	80066ea <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800668a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006698:	f000 f89e 	bl	80067d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669e:	1e5a      	subs	r2, r3, #1
 80066a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80066a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d112      	bne.n	80066d4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d016      	beq.n	80066e4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	3310      	adds	r3, #16
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 feba 	bl	8007434 <xTaskRemoveFromEventList>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00e      	beq.n	80066e4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e007      	b.n	80066e4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066d8:	3301      	adds	r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	b25a      	sxtb	r2, r3
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80066e4:	2301      	movs	r3, #1
 80066e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e8:	e001      	b.n	80066ee <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f383 8811 	msr	BASEPRI, r3
}
 80066f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3738      	adds	r7, #56	@ 0x38
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006718:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10d      	bne.n	800673e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d14d      	bne.n	80067c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f001 f864 	bl	80077fc <xTaskPriorityDisinherit>
 8006734:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	e043      	b.n	80067c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d119      	bne.n	8006778 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6858      	ldr	r0, [r3, #4]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674c:	461a      	mov	r2, r3
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	f003 f9c3 	bl	8009ada <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	429a      	cmp	r2, r3
 800676c:	d32b      	bcc.n	80067c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	e026      	b.n	80067c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68d8      	ldr	r0, [r3, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006780:	461a      	mov	r2, r3
 8006782:	68b9      	ldr	r1, [r7, #8]
 8006784:	f003 f9a9 	bl	8009ada <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006790:	425b      	negs	r3, r3
 8006792:	441a      	add	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d207      	bcs.n	80067b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ac:	425b      	negs	r3, r3
 80067ae:	441a      	add	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d105      	bne.n	80067c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067ce:	697b      	ldr	r3, [r7, #20]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d018      	beq.n	800681c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	441a      	add	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	d303      	bcc.n	800680c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68d9      	ldr	r1, [r3, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006814:	461a      	mov	r2, r3
 8006816:	6838      	ldr	r0, [r7, #0]
 8006818:	f003 f95f 	bl	8009ada <memcpy>
	}
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800682c:	f001 fefe 	bl	800862c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006836:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006838:	e011      	b.n	800685e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d012      	beq.n	8006868 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3324      	adds	r3, #36	@ 0x24
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fdf4 	bl	8007434 <xTaskRemoveFromEventList>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006852:	f000 fecd 	bl	80075f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	3b01      	subs	r3, #1
 800685a:	b2db      	uxtb	r3, r3
 800685c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800685e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dce9      	bgt.n	800683a <prvUnlockQueue+0x16>
 8006866:	e000      	b.n	800686a <prvUnlockQueue+0x46>
					break;
 8006868:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	22ff      	movs	r2, #255	@ 0xff
 800686e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006872:	f001 ff0b 	bl	800868c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006876:	f001 fed9 	bl	800862c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006880:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006882:	e011      	b.n	80068a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d012      	beq.n	80068b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3310      	adds	r3, #16
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fdcf 	bl	8007434 <xTaskRemoveFromEventList>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800689c:	f000 fea8 	bl	80075f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dce9      	bgt.n	8006884 <prvUnlockQueue+0x60>
 80068b0:	e000      	b.n	80068b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	22ff      	movs	r2, #255	@ 0xff
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068bc:	f001 fee6 	bl	800868c <vPortExitCritical>
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068d0:	f001 feac 	bl	800862c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d102      	bne.n	80068e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068dc:	2301      	movs	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e001      	b.n	80068e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068e6:	f001 fed1 	bl	800868c <vPortExitCritical>

	return xReturn;
 80068ea:	68fb      	ldr	r3, [r7, #12]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068fc:	f001 fe96 	bl	800862c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006908:	429a      	cmp	r2, r3
 800690a:	d102      	bne.n	8006912 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e001      	b.n	8006916 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006916:	f001 feb9 	bl	800868c <vPortExitCritical>

	return xReturn;
 800691a:	68fb      	ldr	r3, [r7, #12]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e014      	b.n	800695e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006934:	4a0e      	ldr	r2, [pc, #56]	@ (8006970 <vQueueAddToRegistry+0x4c>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006940:	490b      	ldr	r1, [pc, #44]	@ (8006970 <vQueueAddToRegistry+0x4c>)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800694a:	4a09      	ldr	r2, [pc, #36]	@ (8006970 <vQueueAddToRegistry+0x4c>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	4413      	add	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006956:	e006      	b.n	8006966 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	3301      	adds	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b07      	cmp	r3, #7
 8006962:	d9e7      	bls.n	8006934 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006964:	bf00      	nop
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr
 8006970:	20000b6c 	.word	0x20000b6c

08006974 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006984:	f001 fe52 	bl	800862c <vPortEnterCritical>
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800698e:	b25b      	sxtb	r3, r3
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d103      	bne.n	800699e <vQueueWaitForMessageRestricted+0x2a>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069a4:	b25b      	sxtb	r3, r3
 80069a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069aa:	d103      	bne.n	80069b4 <vQueueWaitForMessageRestricted+0x40>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069b4:	f001 fe6a 	bl	800868c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	3324      	adds	r3, #36	@ 0x24
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fd07 	bl	80073dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069ce:	6978      	ldr	r0, [r7, #20]
 80069d0:	f7ff ff28 	bl	8006824 <prvUnlockQueue>
	}
 80069d4:	bf00      	nop
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	@ 0x38
 80069e0:	af04      	add	r7, sp, #16
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <xTaskCreateStatic+0x2c>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	623b      	str	r3, [r7, #32]
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	61fb      	str	r3, [r7, #28]
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	e7fd      	b.n	8006a22 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a26:	23a8      	movs	r3, #168	@ 0xa8
 8006a28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a2e:	d00b      	beq.n	8006a48 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61bb      	str	r3, [r7, #24]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01e      	beq.n	8006a8e <xTaskCreateStatic+0xb2>
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01b      	beq.n	8006a8e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a5e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a68:	2300      	movs	r3, #0
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	9302      	str	r3, [sp, #8]
 8006a70:	f107 0314 	add.w	r3, r7, #20
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f851 	bl	8006b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a88:	f000 f8f6 	bl	8006c78 <prvAddNewTaskToReadyList>
 8006a8c:	e001      	b.n	8006a92 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a92:	697b      	ldr	r3, [r7, #20]
	}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3728      	adds	r7, #40	@ 0x28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08c      	sub	sp, #48	@ 0x30
 8006aa0:	af04      	add	r7, sp, #16
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 febd 	bl	8008830 <pvPortMalloc>
 8006ab6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00e      	beq.n	8006adc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006abe:	20a8      	movs	r0, #168	@ 0xa8
 8006ac0:	f001 feb6 	bl	8008830 <pvPortMalloc>
 8006ac4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ad2:	e005      	b.n	8006ae0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ad4:	6978      	ldr	r0, [r7, #20]
 8006ad6:	f001 ff79 	bl	80089cc <vPortFree>
 8006ada:	e001      	b.n	8006ae0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d017      	beq.n	8006b16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	2300      	movs	r3, #0
 8006af2:	9303      	str	r3, [sp, #12]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	9302      	str	r3, [sp, #8]
 8006af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f80f 	bl	8006b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b0a:	69f8      	ldr	r0, [r7, #28]
 8006b0c:	f000 f8b4 	bl	8006c78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b10:	2301      	movs	r3, #1
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	e002      	b.n	8006b1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b16:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
	}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	461a      	mov	r2, r3
 8006b40:	21a5      	movs	r1, #165	@ 0xa5
 8006b42:	f002 fee7 	bl	8009914 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b50:	3b01      	subs	r3, #1
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f023 0307 	bic.w	r3, r3, #7
 8006b5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00b      	beq.n	8006b82 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	617b      	str	r3, [r7, #20]
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01f      	beq.n	8006bc8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
 8006b8c:	e012      	b.n	8006bb4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	7819      	ldrb	r1, [r3, #0]
 8006b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3334      	adds	r3, #52	@ 0x34
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d006      	beq.n	8006bbc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d9e9      	bls.n	8006b8e <prvInitialiseNewTask+0x66>
 8006bba:	e000      	b.n	8006bbe <prvInitialiseNewTask+0x96>
			{
				break;
 8006bbc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bc6:	e003      	b.n	8006bd0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd2:	2b37      	cmp	r3, #55	@ 0x37
 8006bd4:	d901      	bls.n	8006bda <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bd6:	2337      	movs	r3, #55	@ 0x37
 8006bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bde:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006be4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff f8ac 	bl	8005d4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	3318      	adds	r3, #24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f8a7 	bl	8005d4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c14:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	3354      	adds	r3, #84	@ 0x54
 8006c2a:	224c      	movs	r2, #76	@ 0x4c
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f002 fe70 	bl	8009914 <memset>
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	4a0d      	ldr	r2, [pc, #52]	@ (8006c6c <prvInitialiseNewTask+0x144>)
 8006c38:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c70 <prvInitialiseNewTask+0x148>)
 8006c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	4a0c      	ldr	r2, [pc, #48]	@ (8006c74 <prvInitialiseNewTask+0x14c>)
 8006c44:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	69b8      	ldr	r0, [r7, #24]
 8006c4c:	f001 fbfa 	bl	8008444 <pxPortInitialiseStack>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c62:	bf00      	nop
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200040e0 	.word	0x200040e0
 8006c70:	20004148 	.word	0x20004148
 8006c74:	200041b0 	.word	0x200041b0

08006c78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c80:	f001 fcd4 	bl	800862c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c84:	4b2d      	ldr	r3, [pc, #180]	@ (8006d3c <prvAddNewTaskToReadyList+0xc4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8006d3c <prvAddNewTaskToReadyList+0xc4>)
 8006c8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c96:	4a2a      	ldr	r2, [pc, #168]	@ (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c9c:	4b27      	ldr	r3, [pc, #156]	@ (8006d3c <prvAddNewTaskToReadyList+0xc4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d110      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca4:	f000 fcc8 	bl	8007638 <prvInitialiseTaskLists>
 8006ca8:	e00d      	b.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006caa:	4b26      	ldr	r3, [pc, #152]	@ (8006d44 <prvAddNewTaskToReadyList+0xcc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cb2:	4b23      	ldr	r3, [pc, #140]	@ (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d802      	bhi.n	8006cc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cc6:	4b20      	ldr	r3, [pc, #128]	@ (8006d48 <prvAddNewTaskToReadyList+0xd0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8006d48 <prvAddNewTaskToReadyList+0xd0>)
 8006cce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d48 <prvAddNewTaskToReadyList+0xd0>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8006d4c <prvAddNewTaskToReadyList+0xd4>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d903      	bls.n	8006cec <prvAddNewTaskToReadyList+0x74>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	4a18      	ldr	r2, [pc, #96]	@ (8006d4c <prvAddNewTaskToReadyList+0xd4>)
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4a15      	ldr	r2, [pc, #84]	@ (8006d50 <prvAddNewTaskToReadyList+0xd8>)
 8006cfa:	441a      	add	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f7ff f82f 	bl	8005d66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d08:	f001 fcc0 	bl	800868c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d44 <prvAddNewTaskToReadyList+0xcc>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00e      	beq.n	8006d32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d14:	4b0a      	ldr	r3, [pc, #40]	@ (8006d40 <prvAddNewTaskToReadyList+0xc8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d207      	bcs.n	8006d32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d22:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <prvAddNewTaskToReadyList+0xdc>)
 8006d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20001080 	.word	0x20001080
 8006d40:	20000bac 	.word	0x20000bac
 8006d44:	2000108c 	.word	0x2000108c
 8006d48:	2000109c 	.word	0x2000109c
 8006d4c:	20001088 	.word	0x20001088
 8006d50:	20000bb0 	.word	0x20000bb0
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d6a:	4b14      	ldr	r3, [pc, #80]	@ (8006dbc <vTaskDelay+0x64>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <vTaskDelay+0x32>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	60bb      	str	r3, [r7, #8]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d8a:	f000 f929 	bl	8006fe0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d8e:	2100      	movs	r1, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 ffab 	bl	8007cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d96:	f000 f931 	bl	8006ffc <xTaskResumeAll>
 8006d9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006da2:	4b07      	ldr	r3, [pc, #28]	@ (8006dc0 <vTaskDelay+0x68>)
 8006da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200010a8 	.word	0x200010a8
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b37      	cmp	r3, #55	@ 0x37
 8006dd6:	d90b      	bls.n	8006df0 <vTaskPrioritySet+0x2c>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	60fb      	str	r3, [r7, #12]
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b37      	cmp	r3, #55	@ 0x37
 8006df4:	d901      	bls.n	8006dfa <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006df6:	2337      	movs	r3, #55	@ 0x37
 8006df8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006dfa:	f001 fc17 	bl	800862c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <vTaskPrioritySet+0x46>
 8006e04:	4b3a      	ldr	r3, [pc, #232]	@ (8006ef0 <vTaskPrioritySet+0x12c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	e000      	b.n	8006e0c <vTaskPrioritySet+0x48>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e12:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d063      	beq.n	8006ee4 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d90d      	bls.n	8006e40 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 8006e24:	4b32      	ldr	r3, [pc, #200]	@ (8006ef0 <vTaskPrioritySet+0x12c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d00f      	beq.n	8006e4e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006e2e:	4b30      	ldr	r3, [pc, #192]	@ (8006ef0 <vTaskPrioritySet+0x12c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d309      	bcc.n	8006e4e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e006      	b.n	8006e4e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006e40:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef0 <vTaskPrioritySet+0x12c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d101      	bne.n	8006e4e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d102      	bne.n	8006e66 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	db04      	blt.n	8006e7e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	6959      	ldr	r1, [r3, #20]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4a19      	ldr	r2, [pc, #100]	@ (8006ef4 <vTaskPrioritySet+0x130>)
 8006e8e:	4413      	add	r3, r2
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d11c      	bne.n	8006ece <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe ffbf 	bl	8005e1c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea2:	4b15      	ldr	r3, [pc, #84]	@ (8006ef8 <vTaskPrioritySet+0x134>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d903      	bls.n	8006eb2 <vTaskPrioritySet+0xee>
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eae:	4a12      	ldr	r2, [pc, #72]	@ (8006ef8 <vTaskPrioritySet+0x134>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8006ef4 <vTaskPrioritySet+0x130>)
 8006ec0:	441a      	add	r2, r3
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4610      	mov	r0, r2
 8006eca:	f7fe ff4c 	bl	8005d66 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8006ed4:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <vTaskPrioritySet+0x138>)
 8006ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006ee4:	f001 fbd2 	bl	800868c <vPortExitCritical>
	}
 8006ee8:	bf00      	nop
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000bac 	.word	0x20000bac
 8006ef4:	20000bb0 	.word	0x20000bb0
 8006ef8:	20001088 	.word	0x20001088
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	@ 0x28
 8006f04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f0e:	463a      	mov	r2, r7
 8006f10:	1d39      	adds	r1, r7, #4
 8006f12:	f107 0308 	add.w	r3, r7, #8
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fec8 	bl	8005cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	9202      	str	r2, [sp, #8]
 8006f24:	9301      	str	r3, [sp, #4]
 8006f26:	2300      	movs	r3, #0
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	460a      	mov	r2, r1
 8006f2e:	4924      	ldr	r1, [pc, #144]	@ (8006fc0 <vTaskStartScheduler+0xc0>)
 8006f30:	4824      	ldr	r0, [pc, #144]	@ (8006fc4 <vTaskStartScheduler+0xc4>)
 8006f32:	f7ff fd53 	bl	80069dc <xTaskCreateStatic>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4a23      	ldr	r2, [pc, #140]	@ (8006fc8 <vTaskStartScheduler+0xc8>)
 8006f3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f3c:	4b22      	ldr	r3, [pc, #136]	@ (8006fc8 <vTaskStartScheduler+0xc8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f44:	2301      	movs	r3, #1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	e001      	b.n	8006f4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d102      	bne.n	8006f5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f54:	f000 ff1e 	bl	8007d94 <xTimerCreateTimerTask>
 8006f58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d11b      	bne.n	8006f98 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	613b      	str	r3, [r7, #16]
}
 8006f72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f74:	4b15      	ldr	r3, [pc, #84]	@ (8006fcc <vTaskStartScheduler+0xcc>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3354      	adds	r3, #84	@ 0x54
 8006f7a:	4a15      	ldr	r2, [pc, #84]	@ (8006fd0 <vTaskStartScheduler+0xd0>)
 8006f7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f7e:	4b15      	ldr	r3, [pc, #84]	@ (8006fd4 <vTaskStartScheduler+0xd4>)
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f86:	4b14      	ldr	r3, [pc, #80]	@ (8006fd8 <vTaskStartScheduler+0xd8>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f8c:	4b13      	ldr	r3, [pc, #76]	@ (8006fdc <vTaskStartScheduler+0xdc>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f92:	f001 fad9 	bl	8008548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f96:	e00f      	b.n	8006fb8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9e:	d10b      	bne.n	8006fb8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	60fb      	str	r3, [r7, #12]
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	e7fd      	b.n	8006fb4 <vTaskStartScheduler+0xb4>
}
 8006fb8:	bf00      	nop
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	0800bb44 	.word	0x0800bb44
 8006fc4:	08007609 	.word	0x08007609
 8006fc8:	200010a4 	.word	0x200010a4
 8006fcc:	20000bac 	.word	0x20000bac
 8006fd0:	2000002c 	.word	0x2000002c
 8006fd4:	200010a0 	.word	0x200010a0
 8006fd8:	2000108c 	.word	0x2000108c
 8006fdc:	20001084 	.word	0x20001084

08006fe0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fe4:	4b04      	ldr	r3, [pc, #16]	@ (8006ff8 <vTaskSuspendAll+0x18>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	4a03      	ldr	r2, [pc, #12]	@ (8006ff8 <vTaskSuspendAll+0x18>)
 8006fec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fee:	bf00      	nop
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	200010a8 	.word	0x200010a8

08006ffc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800700a:	4b42      	ldr	r3, [pc, #264]	@ (8007114 <xTaskResumeAll+0x118>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10b      	bne.n	800702a <xTaskResumeAll+0x2e>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	603b      	str	r3, [r7, #0]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800702a:	f001 faff 	bl	800862c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800702e:	4b39      	ldr	r3, [pc, #228]	@ (8007114 <xTaskResumeAll+0x118>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3b01      	subs	r3, #1
 8007034:	4a37      	ldr	r2, [pc, #220]	@ (8007114 <xTaskResumeAll+0x118>)
 8007036:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007038:	4b36      	ldr	r3, [pc, #216]	@ (8007114 <xTaskResumeAll+0x118>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d162      	bne.n	8007106 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007040:	4b35      	ldr	r3, [pc, #212]	@ (8007118 <xTaskResumeAll+0x11c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d05e      	beq.n	8007106 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007048:	e02f      	b.n	80070aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704a:	4b34      	ldr	r3, [pc, #208]	@ (800711c <xTaskResumeAll+0x120>)
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3318      	adds	r3, #24
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fee0 	bl	8005e1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3304      	adds	r3, #4
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fedb 	bl	8005e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	4b2d      	ldr	r3, [pc, #180]	@ (8007120 <xTaskResumeAll+0x124>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d903      	bls.n	800707a <xTaskResumeAll+0x7e>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	4a2a      	ldr	r2, [pc, #168]	@ (8007120 <xTaskResumeAll+0x124>)
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4a27      	ldr	r2, [pc, #156]	@ (8007124 <xTaskResumeAll+0x128>)
 8007088:	441a      	add	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3304      	adds	r3, #4
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f7fe fe68 	bl	8005d66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709a:	4b23      	ldr	r3, [pc, #140]	@ (8007128 <xTaskResumeAll+0x12c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d302      	bcc.n	80070aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80070a4:	4b21      	ldr	r3, [pc, #132]	@ (800712c <xTaskResumeAll+0x130>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070aa:	4b1c      	ldr	r3, [pc, #112]	@ (800711c <xTaskResumeAll+0x120>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1cb      	bne.n	800704a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070b8:	f000 fb62 	bl	8007780 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007130 <xTaskResumeAll+0x134>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d010      	beq.n	80070ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070c8:	f000 f844 	bl	8007154 <xTaskIncrementTick>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070d2:	4b16      	ldr	r3, [pc, #88]	@ (800712c <xTaskResumeAll+0x130>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3b01      	subs	r3, #1
 80070dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f1      	bne.n	80070c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070e4:	4b12      	ldr	r3, [pc, #72]	@ (8007130 <xTaskResumeAll+0x134>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070ea:	4b10      	ldr	r3, [pc, #64]	@ (800712c <xTaskResumeAll+0x130>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007134 <xTaskResumeAll+0x138>)
 80070f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007106:	f001 fac1 	bl	800868c <vPortExitCritical>

	return xAlreadyYielded;
 800710a:	68bb      	ldr	r3, [r7, #8]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	200010a8 	.word	0x200010a8
 8007118:	20001080 	.word	0x20001080
 800711c:	20001040 	.word	0x20001040
 8007120:	20001088 	.word	0x20001088
 8007124:	20000bb0 	.word	0x20000bb0
 8007128:	20000bac 	.word	0x20000bac
 800712c:	20001094 	.word	0x20001094
 8007130:	20001090 	.word	0x20001090
 8007134:	e000ed04 	.word	0xe000ed04

08007138 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800713e:	4b04      	ldr	r3, [pc, #16]	@ (8007150 <xTaskGetTickCount+0x18>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007144:	687b      	ldr	r3, [r7, #4]
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr
 8007150:	20001084 	.word	0x20001084

08007154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715e:	4b4f      	ldr	r3, [pc, #316]	@ (800729c <xTaskIncrementTick+0x148>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 8090 	bne.w	8007288 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007168:	4b4d      	ldr	r3, [pc, #308]	@ (80072a0 <xTaskIncrementTick+0x14c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007170:	4a4b      	ldr	r2, [pc, #300]	@ (80072a0 <xTaskIncrementTick+0x14c>)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d121      	bne.n	80071c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800717c:	4b49      	ldr	r3, [pc, #292]	@ (80072a4 <xTaskIncrementTick+0x150>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	603b      	str	r3, [r7, #0]
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <xTaskIncrementTick+0x46>
 800719e:	4b41      	ldr	r3, [pc, #260]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	4b40      	ldr	r3, [pc, #256]	@ (80072a8 <xTaskIncrementTick+0x154>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a3e      	ldr	r2, [pc, #248]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	4a3e      	ldr	r2, [pc, #248]	@ (80072a8 <xTaskIncrementTick+0x154>)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	4b3e      	ldr	r3, [pc, #248]	@ (80072ac <xTaskIncrementTick+0x158>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	4a3c      	ldr	r2, [pc, #240]	@ (80072ac <xTaskIncrementTick+0x158>)
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	f000 fae0 	bl	8007780 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071c0:	4b3b      	ldr	r3, [pc, #236]	@ (80072b0 <xTaskIncrementTick+0x15c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d349      	bcc.n	800725e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ca:	4b36      	ldr	r3, [pc, #216]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d4:	4b36      	ldr	r3, [pc, #216]	@ (80072b0 <xTaskIncrementTick+0x15c>)
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295
 80071da:	601a      	str	r2, [r3, #0]
					break;
 80071dc:	e03f      	b.n	800725e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071de:	4b31      	ldr	r3, [pc, #196]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d203      	bcs.n	80071fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071f6:	4a2e      	ldr	r2, [pc, #184]	@ (80072b0 <xTaskIncrementTick+0x15c>)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071fc:	e02f      	b.n	800725e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fe0a 	bl	8005e1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3318      	adds	r3, #24
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe fe01 	bl	8005e1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721e:	4b25      	ldr	r3, [pc, #148]	@ (80072b4 <xTaskIncrementTick+0x160>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d903      	bls.n	800722e <xTaskIncrementTick+0xda>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	4a22      	ldr	r2, [pc, #136]	@ (80072b4 <xTaskIncrementTick+0x160>)
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4a1f      	ldr	r2, [pc, #124]	@ (80072b8 <xTaskIncrementTick+0x164>)
 800723c:	441a      	add	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	3304      	adds	r3, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fe fd8e 	bl	8005d66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724e:	4b1b      	ldr	r3, [pc, #108]	@ (80072bc <xTaskIncrementTick+0x168>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	429a      	cmp	r2, r3
 8007256:	d3b8      	bcc.n	80071ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800725c:	e7b5      	b.n	80071ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800725e:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <xTaskIncrementTick+0x168>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007264:	4914      	ldr	r1, [pc, #80]	@ (80072b8 <xTaskIncrementTick+0x164>)
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d901      	bls.n	800727a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007276:	2301      	movs	r3, #1
 8007278:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800727a:	4b11      	ldr	r3, [pc, #68]	@ (80072c0 <xTaskIncrementTick+0x16c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	e004      	b.n	8007292 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007288:	4b0e      	ldr	r3, [pc, #56]	@ (80072c4 <xTaskIncrementTick+0x170>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	4a0d      	ldr	r2, [pc, #52]	@ (80072c4 <xTaskIncrementTick+0x170>)
 8007290:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	200010a8 	.word	0x200010a8
 80072a0:	20001084 	.word	0x20001084
 80072a4:	20001038 	.word	0x20001038
 80072a8:	2000103c 	.word	0x2000103c
 80072ac:	20001098 	.word	0x20001098
 80072b0:	200010a0 	.word	0x200010a0
 80072b4:	20001088 	.word	0x20001088
 80072b8:	20000bb0 	.word	0x20000bb0
 80072bc:	20000bac 	.word	0x20000bac
 80072c0:	20001094 	.word	0x20001094
 80072c4:	20001090 	.word	0x20001090

080072c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007378 <vTaskSwitchContext+0xb0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072d6:	4b29      	ldr	r3, [pc, #164]	@ (800737c <vTaskSwitchContext+0xb4>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072dc:	e047      	b.n	800736e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80072de:	4b27      	ldr	r3, [pc, #156]	@ (800737c <vTaskSwitchContext+0xb4>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	4b26      	ldr	r3, [pc, #152]	@ (8007380 <vTaskSwitchContext+0xb8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e011      	b.n	8007310 <vTaskSwitchContext+0x48>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <vTaskSwitchContext+0x42>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <vTaskSwitchContext+0x3e>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3b01      	subs	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	491c      	ldr	r1, [pc, #112]	@ (8007384 <vTaskSwitchContext+0xbc>)
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0e3      	beq.n	80072ec <vTaskSwitchContext+0x24>
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a15      	ldr	r2, [pc, #84]	@ (8007384 <vTaskSwitchContext+0xbc>)
 8007330:	4413      	add	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	3308      	adds	r3, #8
 8007346:	429a      	cmp	r2, r3
 8007348:	d104      	bne.n	8007354 <vTaskSwitchContext+0x8c>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	605a      	str	r2, [r3, #4]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	4a0b      	ldr	r2, [pc, #44]	@ (8007388 <vTaskSwitchContext+0xc0>)
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	4a08      	ldr	r2, [pc, #32]	@ (8007380 <vTaskSwitchContext+0xb8>)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007364:	4b08      	ldr	r3, [pc, #32]	@ (8007388 <vTaskSwitchContext+0xc0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3354      	adds	r3, #84	@ 0x54
 800736a:	4a08      	ldr	r2, [pc, #32]	@ (800738c <vTaskSwitchContext+0xc4>)
 800736c:	6013      	str	r3, [r2, #0]
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	200010a8 	.word	0x200010a8
 800737c:	20001094 	.word	0x20001094
 8007380:	20001088 	.word	0x20001088
 8007384:	20000bb0 	.word	0x20000bb0
 8007388:	20000bac 	.word	0x20000bac
 800738c:	2000002c 	.word	0x2000002c

08007390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10b      	bne.n	80073b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073b8:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <vTaskPlaceOnEventList+0x48>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3318      	adds	r3, #24
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fe fcf3 	bl	8005dac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073c6:	2101      	movs	r1, #1
 80073c8:	6838      	ldr	r0, [r7, #0]
 80073ca:	f000 fc8f 	bl	8007cec <prvAddCurrentTaskToDelayedList>
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000bac 	.word	0x20000bac

080073dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	617b      	str	r3, [r7, #20]
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	e7fd      	b.n	8007402 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007406:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <vTaskPlaceOnEventListRestricted+0x54>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3318      	adds	r3, #24
 800740c:	4619      	mov	r1, r3
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7fe fca9 	bl	8005d66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800741a:	f04f 33ff 	mov.w	r3, #4294967295
 800741e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f000 fc62 	bl	8007cec <prvAddCurrentTaskToDelayedList>
	}
 8007428:	bf00      	nop
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000bac 	.word	0x20000bac

08007434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10b      	bne.n	8007462 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	60fb      	str	r3, [r7, #12]
}
 800745c:	bf00      	nop
 800745e:	bf00      	nop
 8007460:	e7fd      	b.n	800745e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3318      	adds	r3, #24
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe fcd8 	bl	8005e1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800746c:	4b1d      	ldr	r3, [pc, #116]	@ (80074e4 <xTaskRemoveFromEventList+0xb0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d11d      	bne.n	80074b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	3304      	adds	r3, #4
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe fccf 	bl	8005e1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007482:	4b19      	ldr	r3, [pc, #100]	@ (80074e8 <xTaskRemoveFromEventList+0xb4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d903      	bls.n	8007492 <xTaskRemoveFromEventList+0x5e>
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	4a16      	ldr	r2, [pc, #88]	@ (80074e8 <xTaskRemoveFromEventList+0xb4>)
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4a13      	ldr	r2, [pc, #76]	@ (80074ec <xTaskRemoveFromEventList+0xb8>)
 80074a0:	441a      	add	r2, r3
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7fe fc5c 	bl	8005d66 <vListInsertEnd>
 80074ae:	e005      	b.n	80074bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	3318      	adds	r3, #24
 80074b4:	4619      	mov	r1, r3
 80074b6:	480e      	ldr	r0, [pc, #56]	@ (80074f0 <xTaskRemoveFromEventList+0xbc>)
 80074b8:	f7fe fc55 	bl	8005d66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c0:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <xTaskRemoveFromEventList+0xc0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d905      	bls.n	80074d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074ce:	4b0a      	ldr	r3, [pc, #40]	@ (80074f8 <xTaskRemoveFromEventList+0xc4>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e001      	b.n	80074da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074da:	697b      	ldr	r3, [r7, #20]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	200010a8 	.word	0x200010a8
 80074e8:	20001088 	.word	0x20001088
 80074ec:	20000bb0 	.word	0x20000bb0
 80074f0:	20001040 	.word	0x20001040
 80074f4:	20000bac 	.word	0x20000bac
 80074f8:	20001094 	.word	0x20001094

080074fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007504:	4b06      	ldr	r3, [pc, #24]	@ (8007520 <vTaskInternalSetTimeOutState+0x24>)
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <vTaskInternalSetTimeOutState+0x28>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	605a      	str	r2, [r3, #4]
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	20001098 	.word	0x20001098
 8007524:	20001084 	.word	0x20001084

08007528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10b      	bne.n	8007550 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	613b      	str	r3, [r7, #16]
}
 800754a:	bf00      	nop
 800754c:	bf00      	nop
 800754e:	e7fd      	b.n	800754c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10b      	bne.n	800756e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60fb      	str	r3, [r7, #12]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800756e:	f001 f85d 	bl	800862c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007572:	4b1d      	ldr	r3, [pc, #116]	@ (80075e8 <xTaskCheckForTimeOut+0xc0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d102      	bne.n	8007592 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800758c:	2300      	movs	r3, #0
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	e023      	b.n	80075da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	4b15      	ldr	r3, [pc, #84]	@ (80075ec <xTaskCheckForTimeOut+0xc4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d007      	beq.n	80075ae <xTaskCheckForTimeOut+0x86>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075a8:	2301      	movs	r3, #1
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e015      	b.n	80075da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d20b      	bcs.n	80075d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff ff99 	bl	80074fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	e004      	b.n	80075da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075da:	f001 f857 	bl	800868c <vPortExitCritical>

	return xReturn;
 80075de:	69fb      	ldr	r3, [r7, #28]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	20001084 	.word	0x20001084
 80075ec:	20001098 	.word	0x20001098

080075f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075f4:	4b03      	ldr	r3, [pc, #12]	@ (8007604 <vTaskMissedYield+0x14>)
 80075f6:	2201      	movs	r2, #1
 80075f8:	601a      	str	r2, [r3, #0]
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	20001094 	.word	0x20001094

08007608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007610:	f000 f852 	bl	80076b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007614:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <prvIdleTask+0x28>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d9f9      	bls.n	8007610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <prvIdleTask+0x2c>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800762c:	e7f0      	b.n	8007610 <prvIdleTask+0x8>
 800762e:	bf00      	nop
 8007630:	20000bb0 	.word	0x20000bb0
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800763e:	2300      	movs	r3, #0
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	e00c      	b.n	800765e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4a12      	ldr	r2, [pc, #72]	@ (8007698 <prvInitialiseTaskLists+0x60>)
 8007650:	4413      	add	r3, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe fb5c 	bl	8005d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3301      	adds	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b37      	cmp	r3, #55	@ 0x37
 8007662:	d9ef      	bls.n	8007644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007664:	480d      	ldr	r0, [pc, #52]	@ (800769c <prvInitialiseTaskLists+0x64>)
 8007666:	f7fe fb53 	bl	8005d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800766a:	480d      	ldr	r0, [pc, #52]	@ (80076a0 <prvInitialiseTaskLists+0x68>)
 800766c:	f7fe fb50 	bl	8005d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007670:	480c      	ldr	r0, [pc, #48]	@ (80076a4 <prvInitialiseTaskLists+0x6c>)
 8007672:	f7fe fb4d 	bl	8005d10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007676:	480c      	ldr	r0, [pc, #48]	@ (80076a8 <prvInitialiseTaskLists+0x70>)
 8007678:	f7fe fb4a 	bl	8005d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800767c:	480b      	ldr	r0, [pc, #44]	@ (80076ac <prvInitialiseTaskLists+0x74>)
 800767e:	f7fe fb47 	bl	8005d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <prvInitialiseTaskLists+0x78>)
 8007684:	4a05      	ldr	r2, [pc, #20]	@ (800769c <prvInitialiseTaskLists+0x64>)
 8007686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007688:	4b0a      	ldr	r3, [pc, #40]	@ (80076b4 <prvInitialiseTaskLists+0x7c>)
 800768a:	4a05      	ldr	r2, [pc, #20]	@ (80076a0 <prvInitialiseTaskLists+0x68>)
 800768c:	601a      	str	r2, [r3, #0]
}
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20000bb0 	.word	0x20000bb0
 800769c:	20001010 	.word	0x20001010
 80076a0:	20001024 	.word	0x20001024
 80076a4:	20001040 	.word	0x20001040
 80076a8:	20001054 	.word	0x20001054
 80076ac:	2000106c 	.word	0x2000106c
 80076b0:	20001038 	.word	0x20001038
 80076b4:	2000103c 	.word	0x2000103c

080076b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076be:	e019      	b.n	80076f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076c0:	f000 ffb4 	bl	800862c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c4:	4b10      	ldr	r3, [pc, #64]	@ (8007708 <prvCheckTasksWaitingTermination+0x50>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe fba3 	bl	8005e1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076d6:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <prvCheckTasksWaitingTermination+0x54>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3b01      	subs	r3, #1
 80076dc:	4a0b      	ldr	r2, [pc, #44]	@ (800770c <prvCheckTasksWaitingTermination+0x54>)
 80076de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076ea:	f000 ffcf 	bl	800868c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f810 	bl	8007714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076f4:	4b06      	ldr	r3, [pc, #24]	@ (8007710 <prvCheckTasksWaitingTermination+0x58>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e1      	bne.n	80076c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20001054 	.word	0x20001054
 800770c:	20001080 	.word	0x20001080
 8007710:	20001068 	.word	0x20001068

08007714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3354      	adds	r3, #84	@ 0x54
 8007720:	4618      	mov	r0, r3
 8007722:	f002 f913 	bl	800994c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007734:	4618      	mov	r0, r3
 8007736:	f001 f949 	bl	80089cc <vPortFree>
				vPortFree( pxTCB );
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 f946 	bl	80089cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007740:	e019      	b.n	8007776 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007748:	2b01      	cmp	r3, #1
 800774a:	d103      	bne.n	8007754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 f93d 	bl	80089cc <vPortFree>
	}
 8007752:	e010      	b.n	8007776 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800775a:	2b02      	cmp	r3, #2
 800775c:	d00b      	beq.n	8007776 <prvDeleteTCB+0x62>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60fb      	str	r3, [r7, #12]
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	e7fd      	b.n	8007772 <prvDeleteTCB+0x5e>
	}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007786:	4b0c      	ldr	r3, [pc, #48]	@ (80077b8 <prvResetNextTaskUnblockTime+0x38>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <prvResetNextTaskUnblockTime+0x3c>)
 8007792:	f04f 32ff 	mov.w	r2, #4294967295
 8007796:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007798:	e008      	b.n	80077ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779a:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <prvResetNextTaskUnblockTime+0x38>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	4a04      	ldr	r2, [pc, #16]	@ (80077bc <prvResetNextTaskUnblockTime+0x3c>)
 80077aa:	6013      	str	r3, [r2, #0]
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20001038 	.word	0x20001038
 80077bc:	200010a0 	.word	0x200010a0

080077c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077c6:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <xTaskGetSchedulerState+0x34>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077ce:	2301      	movs	r3, #1
 80077d0:	607b      	str	r3, [r7, #4]
 80077d2:	e008      	b.n	80077e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077d4:	4b08      	ldr	r3, [pc, #32]	@ (80077f8 <xTaskGetSchedulerState+0x38>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077dc:	2302      	movs	r3, #2
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	e001      	b.n	80077e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077e6:	687b      	ldr	r3, [r7, #4]
	}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	2000108c 	.word	0x2000108c
 80077f8:	200010a8 	.word	0x200010a8

080077fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d058      	beq.n	80078c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007812:	4b2f      	ldr	r3, [pc, #188]	@ (80078d0 <xTaskPriorityDisinherit+0xd4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	429a      	cmp	r2, r3
 800781a:	d00b      	beq.n	8007834 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	60fb      	str	r3, [r7, #12]
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	e7fd      	b.n	8007830 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	60bb      	str	r3, [r7, #8]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007858:	1e5a      	subs	r2, r3, #1
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007866:	429a      	cmp	r2, r3
 8007868:	d02c      	beq.n	80078c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800786e:	2b00      	cmp	r3, #0
 8007870:	d128      	bne.n	80078c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3304      	adds	r3, #4
 8007876:	4618      	mov	r0, r3
 8007878:	f7fe fad0 	bl	8005e1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007894:	4b0f      	ldr	r3, [pc, #60]	@ (80078d4 <xTaskPriorityDisinherit+0xd8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d903      	bls.n	80078a4 <xTaskPriorityDisinherit+0xa8>
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	4a0c      	ldr	r2, [pc, #48]	@ (80078d4 <xTaskPriorityDisinherit+0xd8>)
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a8:	4613      	mov	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4a09      	ldr	r2, [pc, #36]	@ (80078d8 <xTaskPriorityDisinherit+0xdc>)
 80078b2:	441a      	add	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe fa53 	bl	8005d66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078c0:	2301      	movs	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078c4:	697b      	ldr	r3, [r7, #20]
	}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	20000bac 	.word	0x20000bac
 80078d4:	20001088 	.word	0x20001088
 80078d8:	20000bb0 	.word	0x20000bb0

080078dc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80078ea:	f000 fe9f 	bl	800862c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80078ee:	4b29      	ldr	r3, [pc, #164]	@ (8007994 <xTaskNotifyWait+0xb8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d01c      	beq.n	8007936 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80078fc:	4b25      	ldr	r3, [pc, #148]	@ (8007994 <xTaskNotifyWait+0xb8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	43d2      	mvns	r2, r2
 8007908:	400a      	ands	r2, r1
 800790a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800790e:	4b21      	ldr	r3, [pc, #132]	@ (8007994 <xTaskNotifyWait+0xb8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00b      	beq.n	8007936 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800791e:	2101      	movs	r1, #1
 8007920:	6838      	ldr	r0, [r7, #0]
 8007922:	f000 f9e3 	bl	8007cec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007926:	4b1c      	ldr	r3, [pc, #112]	@ (8007998 <xTaskNotifyWait+0xbc>)
 8007928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007936:	f000 fea9 	bl	800868c <vPortExitCritical>

		taskENTER_CRITICAL();
 800793a:	f000 fe77 	bl	800862c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007944:	4b13      	ldr	r3, [pc, #76]	@ (8007994 <xTaskNotifyWait+0xb8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007950:	4b10      	ldr	r3, [pc, #64]	@ (8007994 <xTaskNotifyWait+0xb8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d002      	beq.n	8007964 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e00a      	b.n	800797a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007964:	4b0b      	ldr	r3, [pc, #44]	@ (8007994 <xTaskNotifyWait+0xb8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	43d2      	mvns	r2, r2
 8007970:	400a      	ands	r2, r1
 8007972:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800797a:	4b06      	ldr	r3, [pc, #24]	@ (8007994 <xTaskNotifyWait+0xb8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8007984:	f000 fe82 	bl	800868c <vPortExitCritical>

		return xReturn;
 8007988:	697b      	ldr	r3, [r7, #20]
	}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000bac 	.word	0x20000bac
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	@ 0x28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80079ac:	2301      	movs	r3, #1
 80079ae:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <xTaskGenericNotify+0x32>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	61bb      	str	r3, [r7, #24]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80079d2:	f000 fe2b 	bl	800862c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80079ec:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	2202      	movs	r2, #2
 80079f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	2b04      	cmp	r3, #4
 80079fa:	d82e      	bhi.n	8007a5a <xTaskGenericNotify+0xbe>
 80079fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007a04 <xTaskGenericNotify+0x68>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a7f 	.word	0x08007a7f
 8007a08:	08007a19 	.word	0x08007a19
 8007a0c:	08007a2b 	.word	0x08007a2b
 8007a10:	08007a3b 	.word	0x08007a3b
 8007a14:	08007a45 	.word	0x08007a45
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007a28:	e02c      	b.n	8007a84 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007a38:	e024      	b.n	8007a84 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007a42:	e01f      	b.n	8007a84 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007a44:	7ffb      	ldrb	r3, [r7, #31]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d004      	beq.n	8007a54 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007a52:	e017      	b.n	8007a84 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007a58:	e014      	b.n	8007a84 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a64:	d00d      	beq.n	8007a82 <xTaskGenericNotify+0xe6>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	617b      	str	r3, [r7, #20]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <xTaskGenericNotify+0xde>
					break;
 8007a7e:	bf00      	nop
 8007a80:	e000      	b.n	8007a84 <xTaskGenericNotify+0xe8>

					break;
 8007a82:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007a84:	7ffb      	ldrb	r3, [r7, #31]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d13b      	bne.n	8007b02 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe f9c4 	bl	8005e1c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a98:	4b1d      	ldr	r3, [pc, #116]	@ (8007b10 <xTaskGenericNotify+0x174>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d903      	bls.n	8007aa8 <xTaskGenericNotify+0x10c>
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b10 <xTaskGenericNotify+0x174>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a17      	ldr	r2, [pc, #92]	@ (8007b14 <xTaskGenericNotify+0x178>)
 8007ab6:	441a      	add	r2, r3
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f7fe f951 	bl	8005d66 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <xTaskGenericNotify+0x148>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	613b      	str	r3, [r7, #16]
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8007b18 <xTaskGenericNotify+0x17c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d907      	bls.n	8007b02 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007af2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b1c <xTaskGenericNotify+0x180>)
 8007af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b02:	f000 fdc3 	bl	800868c <vPortExitCritical>

		return xReturn;
 8007b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3728      	adds	r7, #40	@ 0x28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20001088 	.word	0x20001088
 8007b14:	20000bb0 	.word	0x20000bb0
 8007b18:	20000bac 	.word	0x20000bac
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	@ 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007b30:	2301      	movs	r3, #1
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10b      	bne.n	8007b52 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	e7fd      	b.n	8007b4e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b52:	f000 fe2d 	bl	80087b0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	623a      	str	r2, [r7, #32]
 8007b70:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007b72:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007b8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d82e      	bhi.n	8007bfc <xTaskGenericNotifyFromISR+0xdc>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <xTaskGenericNotifyFromISR+0x84>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007c21 	.word	0x08007c21
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bcb 	.word	0x08007bcb
 8007bb0:	08007bdb 	.word	0x08007bdb
 8007bb4:	08007be5 	.word	0x08007be5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007bc8:	e02d      	b.n	8007c26 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007bd8:	e025      	b.n	8007c26 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007be2:	e020      	b.n	8007c26 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007be4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d004      	beq.n	8007bf6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007bf4:	e017      	b.n	8007c26 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007bfa:	e014      	b.n	8007c26 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d00d      	beq.n	8007c24 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61bb      	str	r3, [r7, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	bf00      	nop
 8007c1e:	e7fd      	b.n	8007c1c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007c20:	bf00      	nop
 8007c22:	e000      	b.n	8007c26 <xTaskGenericNotifyFromISR+0x106>
					break;
 8007c24:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007c26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d147      	bne.n	8007cbe <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00b      	beq.n	8007c4e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	617b      	str	r3, [r7, #20]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c4e:	4b21      	ldr	r3, [pc, #132]	@ (8007cd4 <xTaskGenericNotifyFromISR+0x1b4>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d11d      	bne.n	8007c92 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe f8de 	bl	8005e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c64:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd8 <xTaskGenericNotifyFromISR+0x1b8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d903      	bls.n	8007c74 <xTaskGenericNotifyFromISR+0x154>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <xTaskGenericNotifyFromISR+0x1b8>)
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4a16      	ldr	r2, [pc, #88]	@ (8007cdc <xTaskGenericNotifyFromISR+0x1bc>)
 8007c82:	441a      	add	r2, r3
 8007c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fe f86b 	bl	8005d66 <vListInsertEnd>
 8007c90:	e005      	b.n	8007c9e <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	3318      	adds	r3, #24
 8007c96:	4619      	mov	r1, r3
 8007c98:	4811      	ldr	r0, [pc, #68]	@ (8007ce0 <xTaskGenericNotifyFromISR+0x1c0>)
 8007c9a:	f7fe f864 	bl	8005d66 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca2:	4b10      	ldr	r3, [pc, #64]	@ (8007ce4 <xTaskGenericNotifyFromISR+0x1c4>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d908      	bls.n	8007cbe <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce8 <xTaskGenericNotifyFromISR+0x1c8>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f383 8811 	msr	BASEPRI, r3
}
 8007cc8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3738      	adds	r7, #56	@ 0x38
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200010a8 	.word	0x200010a8
 8007cd8:	20001088 	.word	0x20001088
 8007cdc:	20000bb0 	.word	0x20000bb0
 8007ce0:	20001040 	.word	0x20001040
 8007ce4:	20000bac 	.word	0x20000bac
 8007ce8:	20001094 	.word	0x20001094

08007cec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cf6:	4b21      	ldr	r3, [pc, #132]	@ (8007d7c <prvAddCurrentTaskToDelayedList+0x90>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cfc:	4b20      	ldr	r3, [pc, #128]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3304      	adds	r3, #4
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe f88a 	bl	8005e1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d10a      	bne.n	8007d26 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d16:	4b1a      	ldr	r3, [pc, #104]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4819      	ldr	r0, [pc, #100]	@ (8007d84 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d20:	f7fe f821 	bl	8005d66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d24:	e026      	b.n	8007d74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d2e:	4b14      	ldr	r3, [pc, #80]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d209      	bcs.n	8007d52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d3e:	4b12      	ldr	r3, [pc, #72]	@ (8007d88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b0f      	ldr	r3, [pc, #60]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	f7fe f82e 	bl	8005dac <vListInsert>
}
 8007d50:	e010      	b.n	8007d74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d52:	4b0e      	ldr	r3, [pc, #56]	@ (8007d8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f7fe f824 	bl	8005dac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d64:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d202      	bcs.n	8007d74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d6e:	4a08      	ldr	r2, [pc, #32]	@ (8007d90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6013      	str	r3, [r2, #0]
}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20001084 	.word	0x20001084
 8007d80:	20000bac 	.word	0x20000bac
 8007d84:	2000106c 	.word	0x2000106c
 8007d88:	2000103c 	.word	0x2000103c
 8007d8c:	20001038 	.word	0x20001038
 8007d90:	200010a0 	.word	0x200010a0

08007d94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	@ 0x28
 8007d98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d9e:	f000 fb11 	bl	80083c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007da2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e18 <xTimerCreateTimerTask+0x84>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d021      	beq.n	8007dee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007db2:	1d3a      	adds	r2, r7, #4
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	f107 030c 	add.w	r3, r7, #12
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fd ff8d 	bl	8005cdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	9202      	str	r2, [sp, #8]
 8007dca:	9301      	str	r3, [sp, #4]
 8007dcc:	2302      	movs	r3, #2
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	4911      	ldr	r1, [pc, #68]	@ (8007e1c <xTimerCreateTimerTask+0x88>)
 8007dd6:	4812      	ldr	r0, [pc, #72]	@ (8007e20 <xTimerCreateTimerTask+0x8c>)
 8007dd8:	f7fe fe00 	bl	80069dc <xTaskCreateStatic>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4a11      	ldr	r2, [pc, #68]	@ (8007e24 <xTimerCreateTimerTask+0x90>)
 8007de0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007de2:	4b10      	ldr	r3, [pc, #64]	@ (8007e24 <xTimerCreateTimerTask+0x90>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dea:	2301      	movs	r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10b      	bne.n	8007e0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	613b      	str	r3, [r7, #16]
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	e7fd      	b.n	8007e08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e0c:	697b      	ldr	r3, [r7, #20]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200010dc 	.word	0x200010dc
 8007e1c:	0800bb4c 	.word	0x0800bb4c
 8007e20:	08007f61 	.word	0x08007f61
 8007e24:	200010e0 	.word	0x200010e0

08007e28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b08a      	sub	sp, #40	@ 0x28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
 8007e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	623b      	str	r3, [r7, #32]
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	e7fd      	b.n	8007e54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e58:	4b19      	ldr	r3, [pc, #100]	@ (8007ec0 <xTimerGenericCommand+0x98>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02a      	beq.n	8007eb6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2b05      	cmp	r3, #5
 8007e70:	dc18      	bgt.n	8007ea4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e72:	f7ff fca5 	bl	80077c0 <xTaskGetSchedulerState>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d109      	bne.n	8007e90 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ec0 <xTimerGenericCommand+0x98>)
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	f107 0110 	add.w	r1, r7, #16
 8007e84:	2300      	movs	r3, #0
 8007e86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e88:	f7fe f938 	bl	80060fc <xQueueGenericSend>
 8007e8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e8e:	e012      	b.n	8007eb6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec0 <xTimerGenericCommand+0x98>)
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	f107 0110 	add.w	r1, r7, #16
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f7fe f92e 	bl	80060fc <xQueueGenericSend>
 8007ea0:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ea2:	e008      	b.n	8007eb6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ea4:	4b06      	ldr	r3, [pc, #24]	@ (8007ec0 <xTimerGenericCommand+0x98>)
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	f107 0110 	add.w	r1, r7, #16
 8007eac:	2300      	movs	r3, #0
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	f7fe fa26 	bl	8006300 <xQueueGenericSendFromISR>
 8007eb4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3728      	adds	r7, #40	@ 0x28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	200010dc 	.word	0x200010dc

08007ec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ece:	4b23      	ldr	r3, [pc, #140]	@ (8007f5c <prvProcessExpiredTimer+0x98>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd ff9d 	bl	8005e1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d023      	beq.n	8007f38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	699a      	ldr	r2, [r3, #24]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	18d1      	adds	r1, r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	6978      	ldr	r0, [r7, #20]
 8007efe:	f000 f8d3 	bl	80080a8 <prvInsertTimerInActiveList>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d020      	beq.n	8007f4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	2100      	movs	r1, #0
 8007f12:	6978      	ldr	r0, [r7, #20]
 8007f14:	f7ff ff88 	bl	8007e28 <xTimerGenericCommand>
 8007f18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d114      	bne.n	8007f4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	60fb      	str	r3, [r7, #12]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	6978      	ldr	r0, [r7, #20]
 8007f50:	4798      	blx	r3
}
 8007f52:	bf00      	nop
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	200010d4 	.word	0x200010d4

08007f60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f68:	f107 0308 	add.w	r3, r7, #8
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f859 	bl	8008024 <prvGetNextExpireTime>
 8007f72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4619      	mov	r1, r3
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f805 	bl	8007f88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f7e:	f000 f8d5 	bl	800812c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f82:	bf00      	nop
 8007f84:	e7f0      	b.n	8007f68 <prvTimerTask+0x8>
	...

08007f88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f92:	f7ff f825 	bl	8006fe0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f96:	f107 0308 	add.w	r3, r7, #8
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 f864 	bl	8008068 <prvSampleTimeNow>
 8007fa0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d130      	bne.n	800800a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <prvProcessTimerOrBlockTask+0x3c>
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d806      	bhi.n	8007fc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fb6:	f7ff f821 	bl	8006ffc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff ff81 	bl	8007ec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fc2:	e024      	b.n	800800e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007fca:	4b13      	ldr	r3, [pc, #76]	@ (8008018 <prvProcessTimerOrBlockTask+0x90>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <prvProcessTimerOrBlockTask+0x50>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <prvProcessTimerOrBlockTask+0x52>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800801c <prvProcessTimerOrBlockTask+0x94>)
 8007fde:	6818      	ldr	r0, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f7fe fcc3 	bl	8006974 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fee:	f7ff f805 	bl	8006ffc <xTaskResumeAll>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ff8:	4b09      	ldr	r3, [pc, #36]	@ (8008020 <prvProcessTimerOrBlockTask+0x98>)
 8007ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	f3bf 8f6f 	isb	sy
}
 8008008:	e001      	b.n	800800e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800800a:	f7fe fff7 	bl	8006ffc <xTaskResumeAll>
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	200010d8 	.word	0x200010d8
 800801c:	200010dc 	.word	0x200010dc
 8008020:	e000ed04 	.word	0xe000ed04

08008024 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800802c:	4b0d      	ldr	r3, [pc, #52]	@ (8008064 <prvGetNextExpireTime+0x40>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <prvGetNextExpireTime+0x16>
 8008036:	2201      	movs	r2, #1
 8008038:	e000      	b.n	800803c <prvGetNextExpireTime+0x18>
 800803a:	2200      	movs	r2, #0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d105      	bne.n	8008054 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008048:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <prvGetNextExpireTime+0x40>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	e001      	b.n	8008058 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008058:	68fb      	ldr	r3, [r7, #12]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	bc80      	pop	{r7}
 8008062:	4770      	bx	lr
 8008064:	200010d4 	.word	0x200010d4

08008068 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008070:	f7ff f862 	bl	8007138 <xTaskGetTickCount>
 8008074:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008076:	4b0b      	ldr	r3, [pc, #44]	@ (80080a4 <prvSampleTimeNow+0x3c>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	429a      	cmp	r2, r3
 800807e:	d205      	bcs.n	800808c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008080:	f000 f93a 	bl	80082f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e002      	b.n	8008092 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008092:	4a04      	ldr	r2, [pc, #16]	@ (80080a4 <prvSampleTimeNow+0x3c>)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008098:	68fb      	ldr	r3, [r7, #12]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	200010e4 	.word	0x200010e4

080080a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d812      	bhi.n	80080f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	1ad2      	subs	r2, r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d302      	bcc.n	80080e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080dc:	2301      	movs	r3, #1
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e01b      	b.n	800811a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080e2:	4b10      	ldr	r3, [pc, #64]	@ (8008124 <prvInsertTimerInActiveList+0x7c>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f7fd fe5d 	bl	8005dac <vListInsert>
 80080f2:	e012      	b.n	800811a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d206      	bcs.n	800810a <prvInsertTimerInActiveList+0x62>
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d302      	bcc.n	800810a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e007      	b.n	800811a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800810a:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <prvInsertTimerInActiveList+0x80>)
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3304      	adds	r3, #4
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f7fd fe49 	bl	8005dac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800811a:	697b      	ldr	r3, [r7, #20]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	200010d8 	.word	0x200010d8
 8008128:	200010d4 	.word	0x200010d4

0800812c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08e      	sub	sp, #56	@ 0x38
 8008130:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008132:	e0ce      	b.n	80082d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	da19      	bge.n	800816e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800813a:	1d3b      	adds	r3, r7, #4
 800813c:	3304      	adds	r3, #4
 800813e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	61fb      	str	r3, [r7, #28]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800815e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008164:	6850      	ldr	r0, [r2, #4]
 8008166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008168:	6892      	ldr	r2, [r2, #8]
 800816a:	4611      	mov	r1, r2
 800816c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f2c0 80ae 	blt.w	80082d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	3304      	adds	r3, #4
 8008186:	4618      	mov	r0, r3
 8008188:	f7fd fe48 	bl	8005e1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800818c:	463b      	mov	r3, r7
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff ff6a 	bl	8008068 <prvSampleTimeNow>
 8008194:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b09      	cmp	r3, #9
 800819a:	f200 8097 	bhi.w	80082cc <prvProcessReceivedCommands+0x1a0>
 800819e:	a201      	add	r2, pc, #4	@ (adr r2, 80081a4 <prvProcessReceivedCommands+0x78>)
 80081a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081cd 	.word	0x080081cd
 80081ac:	080081cd 	.word	0x080081cd
 80081b0:	08008243 	.word	0x08008243
 80081b4:	08008257 	.word	0x08008257
 80081b8:	080082a3 	.word	0x080082a3
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081cd 	.word	0x080081cd
 80081c4:	08008243 	.word	0x08008243
 80081c8:	08008257 	.word	0x08008257
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081d2:	f043 0301 	orr.w	r3, r3, #1
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	18d1      	adds	r1, r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ec:	f7ff ff5c 	bl	80080a8 <prvInsertTimerInActiveList>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d06c      	beq.n	80082d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d061      	beq.n	80082d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	441a      	add	r2, r3
 8008214:	2300      	movs	r3, #0
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	2300      	movs	r3, #0
 800821a:	2100      	movs	r1, #0
 800821c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800821e:	f7ff fe03 	bl	8007e28 <xTimerGenericCommand>
 8008222:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d152      	bne.n	80082d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	61bb      	str	r3, [r7, #24]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	b2da      	uxtb	r2, r3
 800824e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008250:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008254:	e03d      	b.n	80082d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800825c:	f043 0301 	orr.w	r3, r3, #1
 8008260:	b2da      	uxtb	r2, r3
 8008262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008264:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10b      	bne.n	800828e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	617b      	str	r3, [r7, #20]
}
 8008288:	bf00      	nop
 800828a:	bf00      	nop
 800828c:	e7fd      	b.n	800828a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	18d1      	adds	r1, r2, r3
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800829a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800829c:	f7ff ff04 	bl	80080a8 <prvInsertTimerInActiveList>
					break;
 80082a0:	e017      	b.n	80082d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a8:	f003 0302 	and.w	r3, r3, #2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d103      	bne.n	80082b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80082b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082b2:	f000 fb8b 	bl	80089cc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082b6:	e00c      	b.n	80082d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082be:	f023 0301 	bic.w	r3, r3, #1
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082ca:	e002      	b.n	80082d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80082cc:	bf00      	nop
 80082ce:	e000      	b.n	80082d2 <prvProcessReceivedCommands+0x1a6>
					break;
 80082d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082d2:	4b08      	ldr	r3, [pc, #32]	@ (80082f4 <prvProcessReceivedCommands+0x1c8>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	1d39      	adds	r1, r7, #4
 80082d8:	2200      	movs	r2, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe f8ae 	bl	800643c <xQueueReceive>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f47f af26 	bne.w	8008134 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	3730      	adds	r7, #48	@ 0x30
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200010dc 	.word	0x200010dc

080082f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082fe:	e049      	b.n	8008394 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008300:	4b2e      	ldr	r3, [pc, #184]	@ (80083bc <prvSwitchTimerLists+0xc4>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800830a:	4b2c      	ldr	r3, [pc, #176]	@ (80083bc <prvSwitchTimerLists+0xc4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7fd fd7f 	bl	8005e1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d02f      	beq.n	8008394 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	429a      	cmp	r2, r3
 8008344:	d90e      	bls.n	8008364 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008352:	4b1a      	ldr	r3, [pc, #104]	@ (80083bc <prvSwitchTimerLists+0xc4>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3304      	adds	r3, #4
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7fd fd25 	bl	8005dac <vListInsert>
 8008362:	e017      	b.n	8008394 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	2300      	movs	r3, #0
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	2100      	movs	r1, #0
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff fd5a 	bl	8007e28 <xTimerGenericCommand>
 8008374:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10b      	bne.n	8008394 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	603b      	str	r3, [r7, #0]
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008394:	4b09      	ldr	r3, [pc, #36]	@ (80083bc <prvSwitchTimerLists+0xc4>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1b0      	bne.n	8008300 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800839e:	4b07      	ldr	r3, [pc, #28]	@ (80083bc <prvSwitchTimerLists+0xc4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083a4:	4b06      	ldr	r3, [pc, #24]	@ (80083c0 <prvSwitchTimerLists+0xc8>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a04      	ldr	r2, [pc, #16]	@ (80083bc <prvSwitchTimerLists+0xc4>)
 80083aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083ac:	4a04      	ldr	r2, [pc, #16]	@ (80083c0 <prvSwitchTimerLists+0xc8>)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6013      	str	r3, [r2, #0]
}
 80083b2:	bf00      	nop
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200010d4 	.word	0x200010d4
 80083c0:	200010d8 	.word	0x200010d8

080083c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083ca:	f000 f92f 	bl	800862c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083ce:	4b15      	ldr	r3, [pc, #84]	@ (8008424 <prvCheckForValidListAndQueue+0x60>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d120      	bne.n	8008418 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083d6:	4814      	ldr	r0, [pc, #80]	@ (8008428 <prvCheckForValidListAndQueue+0x64>)
 80083d8:	f7fd fc9a 	bl	8005d10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083dc:	4813      	ldr	r0, [pc, #76]	@ (800842c <prvCheckForValidListAndQueue+0x68>)
 80083de:	f7fd fc97 	bl	8005d10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083e2:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <prvCheckForValidListAndQueue+0x6c>)
 80083e4:	4a10      	ldr	r2, [pc, #64]	@ (8008428 <prvCheckForValidListAndQueue+0x64>)
 80083e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083e8:	4b12      	ldr	r3, [pc, #72]	@ (8008434 <prvCheckForValidListAndQueue+0x70>)
 80083ea:	4a10      	ldr	r2, [pc, #64]	@ (800842c <prvCheckForValidListAndQueue+0x68>)
 80083ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083ee:	2300      	movs	r3, #0
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	4b11      	ldr	r3, [pc, #68]	@ (8008438 <prvCheckForValidListAndQueue+0x74>)
 80083f4:	4a11      	ldr	r2, [pc, #68]	@ (800843c <prvCheckForValidListAndQueue+0x78>)
 80083f6:	2110      	movs	r1, #16
 80083f8:	200a      	movs	r0, #10
 80083fa:	f7fd fda3 	bl	8005f44 <xQueueGenericCreateStatic>
 80083fe:	4603      	mov	r3, r0
 8008400:	4a08      	ldr	r2, [pc, #32]	@ (8008424 <prvCheckForValidListAndQueue+0x60>)
 8008402:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008404:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <prvCheckForValidListAndQueue+0x60>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800840c:	4b05      	ldr	r3, [pc, #20]	@ (8008424 <prvCheckForValidListAndQueue+0x60>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	490b      	ldr	r1, [pc, #44]	@ (8008440 <prvCheckForValidListAndQueue+0x7c>)
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fa86 	bl	8006924 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008418:	f000 f938 	bl	800868c <vPortExitCritical>
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200010dc 	.word	0x200010dc
 8008428:	200010ac 	.word	0x200010ac
 800842c:	200010c0 	.word	0x200010c0
 8008430:	200010d4 	.word	0x200010d4
 8008434:	200010d8 	.word	0x200010d8
 8008438:	20001188 	.word	0x20001188
 800843c:	200010e8 	.word	0x200010e8
 8008440:	0800bb54 	.word	0x0800bb54

08008444 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3b04      	subs	r3, #4
 8008454:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800845c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3b04      	subs	r3, #4
 8008462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f023 0201 	bic.w	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3b04      	subs	r3, #4
 8008472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008474:	4a08      	ldr	r2, [pc, #32]	@ (8008498 <pxPortInitialiseStack+0x54>)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3b14      	subs	r3, #20
 800847e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3b20      	subs	r3, #32
 800848a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800848c:	68fb      	ldr	r3, [r7, #12]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3714      	adds	r7, #20
 8008492:	46bd      	mov	sp, r7
 8008494:	bc80      	pop	{r7}
 8008496:	4770      	bx	lr
 8008498:	0800849d 	.word	0x0800849d

0800849c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084a6:	4b12      	ldr	r3, [pc, #72]	@ (80084f0 <prvTaskExitError+0x54>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	d00b      	beq.n	80084c8 <prvTaskExitError+0x2c>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	60fb      	str	r3, [r7, #12]
}
 80084c2:	bf00      	nop
 80084c4:	bf00      	nop
 80084c6:	e7fd      	b.n	80084c4 <prvTaskExitError+0x28>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	60bb      	str	r3, [r7, #8]
}
 80084da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80084dc:	bf00      	nop
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d0fc      	beq.n	80084de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr
 80084f0:	2000001c 	.word	0x2000001c
	...

08008500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008500:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <pxCurrentTCBConst2>)
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	6808      	ldr	r0, [r1, #0]
 8008506:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800850a:	f380 8809 	msr	PSP, r0
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f04f 0000 	mov.w	r0, #0
 8008516:	f380 8811 	msr	BASEPRI, r0
 800851a:	f04e 0e0d 	orr.w	lr, lr, #13
 800851e:	4770      	bx	lr

08008520 <pxCurrentTCBConst2>:
 8008520:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop

08008528 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008528:	4806      	ldr	r0, [pc, #24]	@ (8008544 <prvPortStartFirstTask+0x1c>)
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	6800      	ldr	r0, [r0, #0]
 800852e:	f380 8808 	msr	MSP, r0
 8008532:	b662      	cpsie	i
 8008534:	b661      	cpsie	f
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	df00      	svc	0
 8008540:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008542:	bf00      	nop
 8008544:	e000ed08 	.word	0xe000ed08

08008548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800854e:	4b32      	ldr	r3, [pc, #200]	@ (8008618 <xPortStartScheduler+0xd0>)
 8008550:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	22ff      	movs	r2, #255	@ 0xff
 800855e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008570:	b2da      	uxtb	r2, r3
 8008572:	4b2a      	ldr	r3, [pc, #168]	@ (800861c <xPortStartScheduler+0xd4>)
 8008574:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008576:	4b2a      	ldr	r3, [pc, #168]	@ (8008620 <xPortStartScheduler+0xd8>)
 8008578:	2207      	movs	r2, #7
 800857a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800857c:	e009      	b.n	8008592 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800857e:	4b28      	ldr	r3, [pc, #160]	@ (8008620 <xPortStartScheduler+0xd8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3b01      	subs	r3, #1
 8008584:	4a26      	ldr	r2, [pc, #152]	@ (8008620 <xPortStartScheduler+0xd8>)
 8008586:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	b2db      	uxtb	r3, r3
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	b2db      	uxtb	r3, r3
 8008590:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800859a:	2b80      	cmp	r3, #128	@ 0x80
 800859c:	d0ef      	beq.n	800857e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800859e:	4b20      	ldr	r3, [pc, #128]	@ (8008620 <xPortStartScheduler+0xd8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f1c3 0307 	rsb	r3, r3, #7
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d00b      	beq.n	80085c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	60bb      	str	r3, [r7, #8]
}
 80085bc:	bf00      	nop
 80085be:	bf00      	nop
 80085c0:	e7fd      	b.n	80085be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80085c2:	4b17      	ldr	r3, [pc, #92]	@ (8008620 <xPortStartScheduler+0xd8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	4a15      	ldr	r2, [pc, #84]	@ (8008620 <xPortStartScheduler+0xd8>)
 80085ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80085cc:	4b14      	ldr	r3, [pc, #80]	@ (8008620 <xPortStartScheduler+0xd8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085d4:	4a12      	ldr	r2, [pc, #72]	@ (8008620 <xPortStartScheduler+0xd8>)
 80085d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80085e0:	4b10      	ldr	r3, [pc, #64]	@ (8008624 <xPortStartScheduler+0xdc>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a0f      	ldr	r2, [pc, #60]	@ (8008624 <xPortStartScheduler+0xdc>)
 80085e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80085ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80085ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008624 <xPortStartScheduler+0xdc>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a0c      	ldr	r2, [pc, #48]	@ (8008624 <xPortStartScheduler+0xdc>)
 80085f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085f8:	f000 f8b8 	bl	800876c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <xPortStartScheduler+0xe0>)
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008602:	f7ff ff91 	bl	8008528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008606:	f7fe fe5f 	bl	80072c8 <vTaskSwitchContext>
	prvTaskExitError();
 800860a:	f7ff ff47 	bl	800849c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	e000e400 	.word	0xe000e400
 800861c:	200011d8 	.word	0x200011d8
 8008620:	200011dc 	.word	0x200011dc
 8008624:	e000ed20 	.word	0xe000ed20
 8008628:	2000001c 	.word	0x2000001c

0800862c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	607b      	str	r3, [r7, #4]
}
 8008644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008646:	4b0f      	ldr	r3, [pc, #60]	@ (8008684 <vPortEnterCritical+0x58>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3301      	adds	r3, #1
 800864c:	4a0d      	ldr	r2, [pc, #52]	@ (8008684 <vPortEnterCritical+0x58>)
 800864e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008650:	4b0c      	ldr	r3, [pc, #48]	@ (8008684 <vPortEnterCritical+0x58>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d110      	bne.n	800867a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008658:	4b0b      	ldr	r3, [pc, #44]	@ (8008688 <vPortEnterCritical+0x5c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00b      	beq.n	800867a <vPortEnterCritical+0x4e>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	603b      	str	r3, [r7, #0]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <vPortEnterCritical+0x4a>
	}
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr
 8008684:	2000001c 	.word	0x2000001c
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008692:	4b12      	ldr	r3, [pc, #72]	@ (80086dc <vPortExitCritical+0x50>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10b      	bne.n	80086b2 <vPortExitCritical+0x26>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	607b      	str	r3, [r7, #4]
}
 80086ac:	bf00      	nop
 80086ae:	bf00      	nop
 80086b0:	e7fd      	b.n	80086ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80086b2:	4b0a      	ldr	r3, [pc, #40]	@ (80086dc <vPortExitCritical+0x50>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	4a08      	ldr	r2, [pc, #32]	@ (80086dc <vPortExitCritical+0x50>)
 80086ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80086bc:	4b07      	ldr	r3, [pc, #28]	@ (80086dc <vPortExitCritical+0x50>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d105      	bne.n	80086d0 <vPortExitCritical+0x44>
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f383 8811 	msr	BASEPRI, r3
}
 80086ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	2000001c 	.word	0x2000001c

080086e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80086e0:	f3ef 8009 	mrs	r0, PSP
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008720 <pxCurrentTCBConst>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086f0:	6010      	str	r0, [r2, #0]
 80086f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80086f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086fa:	f380 8811 	msr	BASEPRI, r0
 80086fe:	f7fe fde3 	bl	80072c8 <vTaskSwitchContext>
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8811 	msr	BASEPRI, r0
 800870a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800870e:	6819      	ldr	r1, [r3, #0]
 8008710:	6808      	ldr	r0, [r1, #0]
 8008712:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008716:	f380 8809 	msr	PSP, r0
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	4770      	bx	lr

08008720 <pxCurrentTCBConst>:
 8008720:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop

08008728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
 800873a:	f3bf 8f4f 	dsb	sy
 800873e:	607b      	str	r3, [r7, #4]
}
 8008740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008742:	f7fe fd07 	bl	8007154 <xTaskIncrementTick>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800874c:	4b06      	ldr	r3, [pc, #24]	@ (8008768 <xPortSysTickHandler+0x40>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	2300      	movs	r3, #0
 8008756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f383 8811 	msr	BASEPRI, r3
}
 800875e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	e000ed04 	.word	0xe000ed04

0800876c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008770:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <vPortSetupTimerInterrupt+0x30>)
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008776:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <vPortSetupTimerInterrupt+0x34>)
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800877c:	4b09      	ldr	r3, [pc, #36]	@ (80087a4 <vPortSetupTimerInterrupt+0x38>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a09      	ldr	r2, [pc, #36]	@ (80087a8 <vPortSetupTimerInterrupt+0x3c>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	099b      	lsrs	r3, r3, #6
 8008788:	4a08      	ldr	r2, [pc, #32]	@ (80087ac <vPortSetupTimerInterrupt+0x40>)
 800878a:	3b01      	subs	r3, #1
 800878c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800878e:	4b03      	ldr	r3, [pc, #12]	@ (800879c <vPortSetupTimerInterrupt+0x30>)
 8008790:	2207      	movs	r2, #7
 8008792:	601a      	str	r2, [r3, #0]
}
 8008794:	bf00      	nop
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr
 800879c:	e000e010 	.word	0xe000e010
 80087a0:	e000e018 	.word	0xe000e018
 80087a4:	20000010 	.word	0x20000010
 80087a8:	10624dd3 	.word	0x10624dd3
 80087ac:	e000e014 	.word	0xe000e014

080087b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80087b6:	f3ef 8305 	mrs	r3, IPSR
 80087ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d915      	bls.n	80087ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80087c2:	4a17      	ldr	r2, [pc, #92]	@ (8008820 <vPortValidateInterruptPriority+0x70>)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087cc:	4b15      	ldr	r3, [pc, #84]	@ (8008824 <vPortValidateInterruptPriority+0x74>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	7afa      	ldrb	r2, [r7, #11]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d20b      	bcs.n	80087ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	607b      	str	r3, [r7, #4]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008828 <vPortValidateInterruptPriority+0x78>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087f6:	4b0d      	ldr	r3, [pc, #52]	@ (800882c <vPortValidateInterruptPriority+0x7c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d90b      	bls.n	8008816 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	603b      	str	r3, [r7, #0]
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	e7fd      	b.n	8008812 <vPortValidateInterruptPriority+0x62>
	}
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr
 8008820:	e000e3f0 	.word	0xe000e3f0
 8008824:	200011d8 	.word	0x200011d8
 8008828:	e000ed0c 	.word	0xe000ed0c
 800882c:	200011dc 	.word	0x200011dc

08008830 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	@ 0x28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008838:	2300      	movs	r3, #0
 800883a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800883c:	f7fe fbd0 	bl	8006fe0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008840:	4b5c      	ldr	r3, [pc, #368]	@ (80089b4 <pvPortMalloc+0x184>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008848:	f000 f924 	bl	8008a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800884c:	4b5a      	ldr	r3, [pc, #360]	@ (80089b8 <pvPortMalloc+0x188>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4013      	ands	r3, r2
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 8095 	bne.w	8008984 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01e      	beq.n	800889e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008860:	2208      	movs	r2, #8
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	2b00      	cmp	r3, #0
 8008870:	d015      	beq.n	800889e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f023 0307 	bic.w	r3, r3, #7
 8008878:	3308      	adds	r3, #8
 800887a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <pvPortMalloc+0x6e>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	617b      	str	r3, [r7, #20]
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	e7fd      	b.n	800889a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d06f      	beq.n	8008984 <pvPortMalloc+0x154>
 80088a4:	4b45      	ldr	r3, [pc, #276]	@ (80089bc <pvPortMalloc+0x18c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d86a      	bhi.n	8008984 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80088ae:	4b44      	ldr	r3, [pc, #272]	@ (80089c0 <pvPortMalloc+0x190>)
 80088b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80088b2:	4b43      	ldr	r3, [pc, #268]	@ (80089c0 <pvPortMalloc+0x190>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088b8:	e004      	b.n	80088c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d903      	bls.n	80088d6 <pvPortMalloc+0xa6>
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f1      	bne.n	80088ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088d6:	4b37      	ldr	r3, [pc, #220]	@ (80089b4 <pvPortMalloc+0x184>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088dc:	429a      	cmp	r2, r3
 80088de:	d051      	beq.n	8008984 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2208      	movs	r2, #8
 80088e6:	4413      	add	r3, r2
 80088e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	1ad2      	subs	r2, r2, r3
 80088fa:	2308      	movs	r3, #8
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	429a      	cmp	r2, r3
 8008900:	d920      	bls.n	8008944 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4413      	add	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <pvPortMalloc+0xfc>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	613b      	str	r3, [r7, #16]
}
 8008926:	bf00      	nop
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800892c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	1ad2      	subs	r2, r2, r3
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800893e:	69b8      	ldr	r0, [r7, #24]
 8008940:	f000 f90a 	bl	8008b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008944:	4b1d      	ldr	r3, [pc, #116]	@ (80089bc <pvPortMalloc+0x18c>)
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	4a1b      	ldr	r2, [pc, #108]	@ (80089bc <pvPortMalloc+0x18c>)
 8008950:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008952:	4b1a      	ldr	r3, [pc, #104]	@ (80089bc <pvPortMalloc+0x18c>)
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	4b1b      	ldr	r3, [pc, #108]	@ (80089c4 <pvPortMalloc+0x194>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d203      	bcs.n	8008966 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800895e:	4b17      	ldr	r3, [pc, #92]	@ (80089bc <pvPortMalloc+0x18c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a18      	ldr	r2, [pc, #96]	@ (80089c4 <pvPortMalloc+0x194>)
 8008964:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	4b13      	ldr	r3, [pc, #76]	@ (80089b8 <pvPortMalloc+0x188>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	431a      	orrs	r2, r3
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	2200      	movs	r2, #0
 8008978:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800897a:	4b13      	ldr	r3, [pc, #76]	@ (80089c8 <pvPortMalloc+0x198>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	4a11      	ldr	r2, [pc, #68]	@ (80089c8 <pvPortMalloc+0x198>)
 8008982:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008984:	f7fe fb3a 	bl	8006ffc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00b      	beq.n	80089aa <pvPortMalloc+0x17a>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60fb      	str	r3, [r7, #12]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <pvPortMalloc+0x176>
	return pvReturn;
 80089aa:	69fb      	ldr	r3, [r7, #28]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3728      	adds	r7, #40	@ 0x28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	200040c8 	.word	0x200040c8
 80089b8:	200040dc 	.word	0x200040dc
 80089bc:	200040cc 	.word	0x200040cc
 80089c0:	200040c0 	.word	0x200040c0
 80089c4:	200040d0 	.word	0x200040d0
 80089c8:	200040d4 	.word	0x200040d4

080089cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d04f      	beq.n	8008a7e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089de:	2308      	movs	r3, #8
 80089e0:	425b      	negs	r3, r3
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4413      	add	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	4b25      	ldr	r3, [pc, #148]	@ (8008a88 <vPortFree+0xbc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4013      	ands	r3, r2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <vPortFree+0x46>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	60fb      	str	r3, [r7, #12]
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	e7fd      	b.n	8008a0e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00b      	beq.n	8008a32 <vPortFree+0x66>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	60bb      	str	r3, [r7, #8]
}
 8008a2c:	bf00      	nop
 8008a2e:	bf00      	nop
 8008a30:	e7fd      	b.n	8008a2e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	4b14      	ldr	r3, [pc, #80]	@ (8008a88 <vPortFree+0xbc>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01e      	beq.n	8008a7e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d11a      	bne.n	8008a7e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a88 <vPortFree+0xbc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	43db      	mvns	r3, r3
 8008a52:	401a      	ands	r2, r3
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a58:	f7fe fac2 	bl	8006fe0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <vPortFree+0xc0>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4413      	add	r3, r2
 8008a66:	4a09      	ldr	r2, [pc, #36]	@ (8008a8c <vPortFree+0xc0>)
 8008a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a6a:	6938      	ldr	r0, [r7, #16]
 8008a6c:	f000 f874 	bl	8008b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a70:	4b07      	ldr	r3, [pc, #28]	@ (8008a90 <vPortFree+0xc4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3301      	adds	r3, #1
 8008a76:	4a06      	ldr	r2, [pc, #24]	@ (8008a90 <vPortFree+0xc4>)
 8008a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a7a:	f7fe fabf 	bl	8006ffc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a7e:	bf00      	nop
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	200040dc 	.word	0x200040dc
 8008a8c:	200040cc 	.word	0x200040cc
 8008a90:	200040d8 	.word	0x200040d8

08008a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a9a:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8008a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008aa0:	4b27      	ldr	r3, [pc, #156]	@ (8008b40 <prvHeapInit+0xac>)
 8008aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00c      	beq.n	8008ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3307      	adds	r3, #7
 8008ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0307 	bic.w	r3, r3, #7
 8008aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8008b40 <prvHeapInit+0xac>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008acc:	4a1d      	ldr	r2, [pc, #116]	@ (8008b44 <prvHeapInit+0xb0>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8008b44 <prvHeapInit+0xb0>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	4413      	add	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0307 	bic.w	r3, r3, #7
 8008aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4a15      	ldr	r2, [pc, #84]	@ (8008b48 <prvHeapInit+0xb4>)
 8008af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008af6:	4b14      	ldr	r3, [pc, #80]	@ (8008b48 <prvHeapInit+0xb4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2200      	movs	r2, #0
 8008afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008afe:	4b12      	ldr	r3, [pc, #72]	@ (8008b48 <prvHeapInit+0xb4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <prvHeapInit+0xb4>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	4a0a      	ldr	r2, [pc, #40]	@ (8008b4c <prvHeapInit+0xb8>)
 8008b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4a09      	ldr	r2, [pc, #36]	@ (8008b50 <prvHeapInit+0xbc>)
 8008b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008b2c:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <prvHeapInit+0xc0>)
 8008b2e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b32:	601a      	str	r2, [r3, #0]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	200011e0 	.word	0x200011e0
 8008b44:	200040c0 	.word	0x200040c0
 8008b48:	200040c8 	.word	0x200040c8
 8008b4c:	200040d0 	.word	0x200040d0
 8008b50:	200040cc 	.word	0x200040cc
 8008b54:	200040dc 	.word	0x200040dc

08008b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b60:	4b27      	ldr	r3, [pc, #156]	@ (8008c00 <prvInsertBlockIntoFreeList+0xa8>)
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	e002      	b.n	8008b6c <prvInsertBlockIntoFreeList+0x14>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d8f7      	bhi.n	8008b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	4413      	add	r3, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d108      	bne.n	8008b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d118      	bne.n	8008be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b14      	ldr	r3, [pc, #80]	@ (8008c04 <prvInsertBlockIntoFreeList+0xac>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d00d      	beq.n	8008bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	441a      	add	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	e008      	b.n	8008be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <prvInsertBlockIntoFreeList+0xac>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	e003      	b.n	8008be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d002      	beq.n	8008bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bc80      	pop	{r7}
 8008bfe:	4770      	bx	lr
 8008c00:	200040c0 	.word	0x200040c0
 8008c04:	200040c8 	.word	0x200040c8

08008c08 <__cvt>:
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0e:	461d      	mov	r5, r3
 8008c10:	bfbb      	ittet	lt
 8008c12:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008c16:	461d      	movlt	r5, r3
 8008c18:	2300      	movge	r3, #0
 8008c1a:	232d      	movlt	r3, #45	@ 0x2d
 8008c1c:	b088      	sub	sp, #32
 8008c1e:	4614      	mov	r4, r2
 8008c20:	bfb8      	it	lt
 8008c22:	4614      	movlt	r4, r2
 8008c24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c26:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008c28:	7013      	strb	r3, [r2, #0]
 8008c2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008c30:	f023 0820 	bic.w	r8, r3, #32
 8008c34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c38:	d005      	beq.n	8008c46 <__cvt+0x3e>
 8008c3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c3e:	d100      	bne.n	8008c42 <__cvt+0x3a>
 8008c40:	3601      	adds	r6, #1
 8008c42:	2302      	movs	r3, #2
 8008c44:	e000      	b.n	8008c48 <__cvt+0x40>
 8008c46:	2303      	movs	r3, #3
 8008c48:	aa07      	add	r2, sp, #28
 8008c4a:	9204      	str	r2, [sp, #16]
 8008c4c:	aa06      	add	r2, sp, #24
 8008c4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c52:	e9cd 3600 	strd	r3, r6, [sp]
 8008c56:	4622      	mov	r2, r4
 8008c58:	462b      	mov	r3, r5
 8008c5a:	f000 ffd5 	bl	8009c08 <_dtoa_r>
 8008c5e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c62:	4607      	mov	r7, r0
 8008c64:	d119      	bne.n	8008c9a <__cvt+0x92>
 8008c66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c68:	07db      	lsls	r3, r3, #31
 8008c6a:	d50e      	bpl.n	8008c8a <__cvt+0x82>
 8008c6c:	eb00 0906 	add.w	r9, r0, r6
 8008c70:	2200      	movs	r2, #0
 8008c72:	2300      	movs	r3, #0
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8008c7c:	b108      	cbz	r0, 8008c82 <__cvt+0x7a>
 8008c7e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c82:	2230      	movs	r2, #48	@ 0x30
 8008c84:	9b07      	ldr	r3, [sp, #28]
 8008c86:	454b      	cmp	r3, r9
 8008c88:	d31e      	bcc.n	8008cc8 <__cvt+0xc0>
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	9b07      	ldr	r3, [sp, #28]
 8008c8e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c90:	1bdb      	subs	r3, r3, r7
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	b008      	add	sp, #32
 8008c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c9e:	eb00 0906 	add.w	r9, r0, r6
 8008ca2:	d1e5      	bne.n	8008c70 <__cvt+0x68>
 8008ca4:	7803      	ldrb	r3, [r0, #0]
 8008ca6:	2b30      	cmp	r3, #48	@ 0x30
 8008ca8:	d10a      	bne.n	8008cc0 <__cvt+0xb8>
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 fe79 	bl	80009a8 <__aeabi_dcmpeq>
 8008cb6:	b918      	cbnz	r0, 8008cc0 <__cvt+0xb8>
 8008cb8:	f1c6 0601 	rsb	r6, r6, #1
 8008cbc:	f8ca 6000 	str.w	r6, [sl]
 8008cc0:	f8da 3000 	ldr.w	r3, [sl]
 8008cc4:	4499      	add	r9, r3
 8008cc6:	e7d3      	b.n	8008c70 <__cvt+0x68>
 8008cc8:	1c59      	adds	r1, r3, #1
 8008cca:	9107      	str	r1, [sp, #28]
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	e7d9      	b.n	8008c84 <__cvt+0x7c>

08008cd0 <__exponent>:
 8008cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cd2:	2900      	cmp	r1, #0
 8008cd4:	bfb6      	itet	lt
 8008cd6:	232d      	movlt	r3, #45	@ 0x2d
 8008cd8:	232b      	movge	r3, #43	@ 0x2b
 8008cda:	4249      	neglt	r1, r1
 8008cdc:	2909      	cmp	r1, #9
 8008cde:	7002      	strb	r2, [r0, #0]
 8008ce0:	7043      	strb	r3, [r0, #1]
 8008ce2:	dd29      	ble.n	8008d38 <__exponent+0x68>
 8008ce4:	f10d 0307 	add.w	r3, sp, #7
 8008ce8:	461d      	mov	r5, r3
 8008cea:	270a      	movs	r7, #10
 8008cec:	fbb1 f6f7 	udiv	r6, r1, r7
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	fb07 1416 	mls	r4, r7, r6, r1
 8008cf6:	3430      	adds	r4, #48	@ 0x30
 8008cf8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	2c63      	cmp	r4, #99	@ 0x63
 8008d00:	4631      	mov	r1, r6
 8008d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d06:	dcf1      	bgt.n	8008cec <__exponent+0x1c>
 8008d08:	3130      	adds	r1, #48	@ 0x30
 8008d0a:	1e94      	subs	r4, r2, #2
 8008d0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d10:	4623      	mov	r3, r4
 8008d12:	1c41      	adds	r1, r0, #1
 8008d14:	42ab      	cmp	r3, r5
 8008d16:	d30a      	bcc.n	8008d2e <__exponent+0x5e>
 8008d18:	f10d 0309 	add.w	r3, sp, #9
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	42ac      	cmp	r4, r5
 8008d20:	bf88      	it	hi
 8008d22:	2300      	movhi	r3, #0
 8008d24:	3302      	adds	r3, #2
 8008d26:	4403      	add	r3, r0
 8008d28:	1a18      	subs	r0, r3, r0
 8008d2a:	b003      	add	sp, #12
 8008d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d36:	e7ed      	b.n	8008d14 <__exponent+0x44>
 8008d38:	2330      	movs	r3, #48	@ 0x30
 8008d3a:	3130      	adds	r1, #48	@ 0x30
 8008d3c:	7083      	strb	r3, [r0, #2]
 8008d3e:	70c1      	strb	r1, [r0, #3]
 8008d40:	1d03      	adds	r3, r0, #4
 8008d42:	e7f1      	b.n	8008d28 <__exponent+0x58>

08008d44 <_printf_float>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	b091      	sub	sp, #68	@ 0x44
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008d50:	4616      	mov	r6, r2
 8008d52:	461f      	mov	r7, r3
 8008d54:	4605      	mov	r5, r0
 8008d56:	f000 fde5 	bl	8009924 <_localeconv_r>
 8008d5a:	6803      	ldr	r3, [r0, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	9308      	str	r3, [sp, #32]
 8008d60:	f7f7 f9f6 	bl	8000150 <strlen>
 8008d64:	2300      	movs	r3, #0
 8008d66:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d68:	f8d8 3000 	ldr.w	r3, [r8]
 8008d6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d6e:	3307      	adds	r3, #7
 8008d70:	f023 0307 	bic.w	r3, r3, #7
 8008d74:	f103 0208 	add.w	r2, r3, #8
 8008d78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d7c:	f8d4 b000 	ldr.w	fp, [r4]
 8008d80:	f8c8 2000 	str.w	r2, [r8]
 8008d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d8e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295
 8008d96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8009010 <_printf_float+0x2cc>)
 8008da0:	f7f7 fe34 	bl	8000a0c <__aeabi_dcmpun>
 8008da4:	bb70      	cbnz	r0, 8008e04 <_printf_float+0xc0>
 8008da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008daa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dae:	4b98      	ldr	r3, [pc, #608]	@ (8009010 <_printf_float+0x2cc>)
 8008db0:	f7f7 fe0e 	bl	80009d0 <__aeabi_dcmple>
 8008db4:	bb30      	cbnz	r0, 8008e04 <_printf_float+0xc0>
 8008db6:	2200      	movs	r2, #0
 8008db8:	2300      	movs	r3, #0
 8008dba:	4640      	mov	r0, r8
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	f7f7 fdfd 	bl	80009bc <__aeabi_dcmplt>
 8008dc2:	b110      	cbz	r0, 8008dca <_printf_float+0x86>
 8008dc4:	232d      	movs	r3, #45	@ 0x2d
 8008dc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dca:	4a92      	ldr	r2, [pc, #584]	@ (8009014 <_printf_float+0x2d0>)
 8008dcc:	4b92      	ldr	r3, [pc, #584]	@ (8009018 <_printf_float+0x2d4>)
 8008dce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008dd2:	bf94      	ite	ls
 8008dd4:	4690      	movls	r8, r2
 8008dd6:	4698      	movhi	r8, r3
 8008dd8:	2303      	movs	r3, #3
 8008dda:	f04f 0900 	mov.w	r9, #0
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	f02b 0304 	bic.w	r3, fp, #4
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	4633      	mov	r3, r6
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	9700      	str	r7, [sp, #0]
 8008dee:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008df0:	f000 f9d4 	bl	800919c <_printf_common>
 8008df4:	3001      	adds	r0, #1
 8008df6:	f040 8090 	bne.w	8008f1a <_printf_float+0x1d6>
 8008dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfe:	b011      	add	sp, #68	@ 0x44
 8008e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e04:	4642      	mov	r2, r8
 8008e06:	464b      	mov	r3, r9
 8008e08:	4640      	mov	r0, r8
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	f7f7 fdfe 	bl	8000a0c <__aeabi_dcmpun>
 8008e10:	b148      	cbz	r0, 8008e26 <_printf_float+0xe2>
 8008e12:	464b      	mov	r3, r9
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	bfb8      	it	lt
 8008e18:	232d      	movlt	r3, #45	@ 0x2d
 8008e1a:	4a80      	ldr	r2, [pc, #512]	@ (800901c <_printf_float+0x2d8>)
 8008e1c:	bfb8      	it	lt
 8008e1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e22:	4b7f      	ldr	r3, [pc, #508]	@ (8009020 <_printf_float+0x2dc>)
 8008e24:	e7d3      	b.n	8008dce <_printf_float+0x8a>
 8008e26:	6863      	ldr	r3, [r4, #4]
 8008e28:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	d13f      	bne.n	8008eb0 <_printf_float+0x16c>
 8008e30:	2306      	movs	r3, #6
 8008e32:	6063      	str	r3, [r4, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008e3a:	6023      	str	r3, [r4, #0]
 8008e3c:	9206      	str	r2, [sp, #24]
 8008e3e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008e40:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008e44:	aa0d      	add	r2, sp, #52	@ 0x34
 8008e46:	9203      	str	r2, [sp, #12]
 8008e48:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008e4c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e50:	6863      	ldr	r3, [r4, #4]
 8008e52:	4642      	mov	r2, r8
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	4628      	mov	r0, r5
 8008e58:	464b      	mov	r3, r9
 8008e5a:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e5c:	f7ff fed4 	bl	8008c08 <__cvt>
 8008e60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e62:	4680      	mov	r8, r0
 8008e64:	2947      	cmp	r1, #71	@ 0x47
 8008e66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008e68:	d128      	bne.n	8008ebc <_printf_float+0x178>
 8008e6a:	1cc8      	adds	r0, r1, #3
 8008e6c:	db02      	blt.n	8008e74 <_printf_float+0x130>
 8008e6e:	6863      	ldr	r3, [r4, #4]
 8008e70:	4299      	cmp	r1, r3
 8008e72:	dd40      	ble.n	8008ef6 <_printf_float+0x1b2>
 8008e74:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e78:	fa5f fa8a 	uxtb.w	sl, sl
 8008e7c:	4652      	mov	r2, sl
 8008e7e:	3901      	subs	r1, #1
 8008e80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e84:	910d      	str	r1, [sp, #52]	@ 0x34
 8008e86:	f7ff ff23 	bl	8008cd0 <__exponent>
 8008e8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e8c:	4681      	mov	r9, r0
 8008e8e:	1813      	adds	r3, r2, r0
 8008e90:	2a01      	cmp	r2, #1
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	dc02      	bgt.n	8008e9c <_printf_float+0x158>
 8008e96:	6822      	ldr	r2, [r4, #0]
 8008e98:	07d2      	lsls	r2, r2, #31
 8008e9a:	d501      	bpl.n	8008ea0 <_printf_float+0x15c>
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	6123      	str	r3, [r4, #16]
 8008ea0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d09e      	beq.n	8008de6 <_printf_float+0xa2>
 8008ea8:	232d      	movs	r3, #45	@ 0x2d
 8008eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eae:	e79a      	b.n	8008de6 <_printf_float+0xa2>
 8008eb0:	2947      	cmp	r1, #71	@ 0x47
 8008eb2:	d1bf      	bne.n	8008e34 <_printf_float+0xf0>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1bd      	bne.n	8008e34 <_printf_float+0xf0>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7ba      	b.n	8008e32 <_printf_float+0xee>
 8008ebc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ec0:	d9dc      	bls.n	8008e7c <_printf_float+0x138>
 8008ec2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ec6:	d118      	bne.n	8008efa <_printf_float+0x1b6>
 8008ec8:	2900      	cmp	r1, #0
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	dd0b      	ble.n	8008ee6 <_printf_float+0x1a2>
 8008ece:	6121      	str	r1, [r4, #16]
 8008ed0:	b913      	cbnz	r3, 8008ed8 <_printf_float+0x194>
 8008ed2:	6822      	ldr	r2, [r4, #0]
 8008ed4:	07d0      	lsls	r0, r2, #31
 8008ed6:	d502      	bpl.n	8008ede <_printf_float+0x19a>
 8008ed8:	3301      	adds	r3, #1
 8008eda:	440b      	add	r3, r1
 8008edc:	6123      	str	r3, [r4, #16]
 8008ede:	f04f 0900 	mov.w	r9, #0
 8008ee2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ee4:	e7dc      	b.n	8008ea0 <_printf_float+0x15c>
 8008ee6:	b913      	cbnz	r3, 8008eee <_printf_float+0x1aa>
 8008ee8:	6822      	ldr	r2, [r4, #0]
 8008eea:	07d2      	lsls	r2, r2, #31
 8008eec:	d501      	bpl.n	8008ef2 <_printf_float+0x1ae>
 8008eee:	3302      	adds	r3, #2
 8008ef0:	e7f4      	b.n	8008edc <_printf_float+0x198>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e7f2      	b.n	8008edc <_printf_float+0x198>
 8008ef6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008efc:	4299      	cmp	r1, r3
 8008efe:	db05      	blt.n	8008f0c <_printf_float+0x1c8>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	6121      	str	r1, [r4, #16]
 8008f04:	07d8      	lsls	r0, r3, #31
 8008f06:	d5ea      	bpl.n	8008ede <_printf_float+0x19a>
 8008f08:	1c4b      	adds	r3, r1, #1
 8008f0a:	e7e7      	b.n	8008edc <_printf_float+0x198>
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	bfcc      	ite	gt
 8008f10:	2201      	movgt	r2, #1
 8008f12:	f1c1 0202 	rsble	r2, r1, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	e7e0      	b.n	8008edc <_printf_float+0x198>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	055a      	lsls	r2, r3, #21
 8008f1e:	d407      	bmi.n	8008f30 <_printf_float+0x1ec>
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	4642      	mov	r2, r8
 8008f24:	4631      	mov	r1, r6
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b8      	blx	r7
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d12b      	bne.n	8008f86 <_printf_float+0x242>
 8008f2e:	e764      	b.n	8008dfa <_printf_float+0xb6>
 8008f30:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f34:	f240 80dc 	bls.w	80090f0 <_printf_float+0x3ac>
 8008f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f7f7 fd32 	bl	80009a8 <__aeabi_dcmpeq>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d033      	beq.n	8008fb0 <_printf_float+0x26c>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	4a35      	ldr	r2, [pc, #212]	@ (8009024 <_printf_float+0x2e0>)
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	f43f af51 	beq.w	8008dfa <_printf_float+0xb6>
 8008f58:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008f5c:	4543      	cmp	r3, r8
 8008f5e:	db02      	blt.n	8008f66 <_printf_float+0x222>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	07d8      	lsls	r0, r3, #31
 8008f64:	d50f      	bpl.n	8008f86 <_printf_float+0x242>
 8008f66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f af42 	beq.w	8008dfa <_printf_float+0xb6>
 8008f76:	f04f 0900 	mov.w	r9, #0
 8008f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f7e:	f104 0a1a 	add.w	sl, r4, #26
 8008f82:	45c8      	cmp	r8, r9
 8008f84:	dc09      	bgt.n	8008f9a <_printf_float+0x256>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	079b      	lsls	r3, r3, #30
 8008f8a:	f100 8102 	bmi.w	8009192 <_printf_float+0x44e>
 8008f8e:	68e0      	ldr	r0, [r4, #12]
 8008f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f92:	4298      	cmp	r0, r3
 8008f94:	bfb8      	it	lt
 8008f96:	4618      	movlt	r0, r3
 8008f98:	e731      	b.n	8008dfe <_printf_float+0xba>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4652      	mov	r2, sl
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f43f af28 	beq.w	8008dfa <_printf_float+0xb6>
 8008faa:	f109 0901 	add.w	r9, r9, #1
 8008fae:	e7e8      	b.n	8008f82 <_printf_float+0x23e>
 8008fb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dc38      	bgt.n	8009028 <_printf_float+0x2e4>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	4a19      	ldr	r2, [pc, #100]	@ (8009024 <_printf_float+0x2e0>)
 8008fbe:	47b8      	blx	r7
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	f43f af1a 	beq.w	8008dfa <_printf_float+0xb6>
 8008fc6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008fca:	ea59 0303 	orrs.w	r3, r9, r3
 8008fce:	d102      	bne.n	8008fd6 <_printf_float+0x292>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	07d9      	lsls	r1, r3, #31
 8008fd4:	d5d7      	bpl.n	8008f86 <_printf_float+0x242>
 8008fd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b8      	blx	r7
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	f43f af0a 	beq.w	8008dfa <_printf_float+0xb6>
 8008fe6:	f04f 0a00 	mov.w	sl, #0
 8008fea:	f104 0b1a 	add.w	fp, r4, #26
 8008fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ff0:	425b      	negs	r3, r3
 8008ff2:	4553      	cmp	r3, sl
 8008ff4:	dc01      	bgt.n	8008ffa <_printf_float+0x2b6>
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	e793      	b.n	8008f22 <_printf_float+0x1de>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	465a      	mov	r2, fp
 8008ffe:	4631      	mov	r1, r6
 8009000:	4628      	mov	r0, r5
 8009002:	47b8      	blx	r7
 8009004:	3001      	adds	r0, #1
 8009006:	f43f aef8 	beq.w	8008dfa <_printf_float+0xb6>
 800900a:	f10a 0a01 	add.w	sl, sl, #1
 800900e:	e7ee      	b.n	8008fee <_printf_float+0x2aa>
 8009010:	7fefffff 	.word	0x7fefffff
 8009014:	0800bc3a 	.word	0x0800bc3a
 8009018:	0800bc3e 	.word	0x0800bc3e
 800901c:	0800bc42 	.word	0x0800bc42
 8009020:	0800bc46 	.word	0x0800bc46
 8009024:	0800bc4a 	.word	0x0800bc4a
 8009028:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800902a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800902e:	4553      	cmp	r3, sl
 8009030:	bfa8      	it	ge
 8009032:	4653      	movge	r3, sl
 8009034:	2b00      	cmp	r3, #0
 8009036:	4699      	mov	r9, r3
 8009038:	dc36      	bgt.n	80090a8 <_printf_float+0x364>
 800903a:	f04f 0b00 	mov.w	fp, #0
 800903e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009042:	f104 021a 	add.w	r2, r4, #26
 8009046:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009048:	930a      	str	r3, [sp, #40]	@ 0x28
 800904a:	eba3 0309 	sub.w	r3, r3, r9
 800904e:	455b      	cmp	r3, fp
 8009050:	dc31      	bgt.n	80090b6 <_printf_float+0x372>
 8009052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009054:	459a      	cmp	sl, r3
 8009056:	dc3a      	bgt.n	80090ce <_printf_float+0x38a>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	07da      	lsls	r2, r3, #31
 800905c:	d437      	bmi.n	80090ce <_printf_float+0x38a>
 800905e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009060:	ebaa 0903 	sub.w	r9, sl, r3
 8009064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009066:	ebaa 0303 	sub.w	r3, sl, r3
 800906a:	4599      	cmp	r9, r3
 800906c:	bfa8      	it	ge
 800906e:	4699      	movge	r9, r3
 8009070:	f1b9 0f00 	cmp.w	r9, #0
 8009074:	dc33      	bgt.n	80090de <_printf_float+0x39a>
 8009076:	f04f 0800 	mov.w	r8, #0
 800907a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800907e:	f104 0b1a 	add.w	fp, r4, #26
 8009082:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009084:	ebaa 0303 	sub.w	r3, sl, r3
 8009088:	eba3 0309 	sub.w	r3, r3, r9
 800908c:	4543      	cmp	r3, r8
 800908e:	f77f af7a 	ble.w	8008f86 <_printf_float+0x242>
 8009092:	2301      	movs	r3, #1
 8009094:	465a      	mov	r2, fp
 8009096:	4631      	mov	r1, r6
 8009098:	4628      	mov	r0, r5
 800909a:	47b8      	blx	r7
 800909c:	3001      	adds	r0, #1
 800909e:	f43f aeac 	beq.w	8008dfa <_printf_float+0xb6>
 80090a2:	f108 0801 	add.w	r8, r8, #1
 80090a6:	e7ec      	b.n	8009082 <_printf_float+0x33e>
 80090a8:	4642      	mov	r2, r8
 80090aa:	4631      	mov	r1, r6
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b8      	blx	r7
 80090b0:	3001      	adds	r0, #1
 80090b2:	d1c2      	bne.n	800903a <_printf_float+0x2f6>
 80090b4:	e6a1      	b.n	8008dfa <_printf_float+0xb6>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f ae9a 	beq.w	8008dfa <_printf_float+0xb6>
 80090c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090c8:	f10b 0b01 	add.w	fp, fp, #1
 80090cc:	e7bb      	b.n	8009046 <_printf_float+0x302>
 80090ce:	4631      	mov	r1, r6
 80090d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	d1c0      	bne.n	800905e <_printf_float+0x31a>
 80090dc:	e68d      	b.n	8008dfa <_printf_float+0xb6>
 80090de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090e0:	464b      	mov	r3, r9
 80090e2:	4631      	mov	r1, r6
 80090e4:	4628      	mov	r0, r5
 80090e6:	4442      	add	r2, r8
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	d1c3      	bne.n	8009076 <_printf_float+0x332>
 80090ee:	e684      	b.n	8008dfa <_printf_float+0xb6>
 80090f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80090f4:	f1ba 0f01 	cmp.w	sl, #1
 80090f8:	dc01      	bgt.n	80090fe <_printf_float+0x3ba>
 80090fa:	07db      	lsls	r3, r3, #31
 80090fc:	d536      	bpl.n	800916c <_printf_float+0x428>
 80090fe:	2301      	movs	r3, #1
 8009100:	4642      	mov	r2, r8
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	f43f ae76 	beq.w	8008dfa <_printf_float+0xb6>
 800910e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009112:	4631      	mov	r1, r6
 8009114:	4628      	mov	r0, r5
 8009116:	47b8      	blx	r7
 8009118:	3001      	adds	r0, #1
 800911a:	f43f ae6e 	beq.w	8008dfa <_printf_float+0xb6>
 800911e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009122:	2200      	movs	r2, #0
 8009124:	2300      	movs	r3, #0
 8009126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800912a:	f7f7 fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800912e:	b9c0      	cbnz	r0, 8009162 <_printf_float+0x41e>
 8009130:	4653      	mov	r3, sl
 8009132:	f108 0201 	add.w	r2, r8, #1
 8009136:	4631      	mov	r1, r6
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	d10c      	bne.n	800915a <_printf_float+0x416>
 8009140:	e65b      	b.n	8008dfa <_printf_float+0xb6>
 8009142:	2301      	movs	r3, #1
 8009144:	465a      	mov	r2, fp
 8009146:	4631      	mov	r1, r6
 8009148:	4628      	mov	r0, r5
 800914a:	47b8      	blx	r7
 800914c:	3001      	adds	r0, #1
 800914e:	f43f ae54 	beq.w	8008dfa <_printf_float+0xb6>
 8009152:	f108 0801 	add.w	r8, r8, #1
 8009156:	45d0      	cmp	r8, sl
 8009158:	dbf3      	blt.n	8009142 <_printf_float+0x3fe>
 800915a:	464b      	mov	r3, r9
 800915c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009160:	e6e0      	b.n	8008f24 <_printf_float+0x1e0>
 8009162:	f04f 0800 	mov.w	r8, #0
 8009166:	f104 0b1a 	add.w	fp, r4, #26
 800916a:	e7f4      	b.n	8009156 <_printf_float+0x412>
 800916c:	2301      	movs	r3, #1
 800916e:	4642      	mov	r2, r8
 8009170:	e7e1      	b.n	8009136 <_printf_float+0x3f2>
 8009172:	2301      	movs	r3, #1
 8009174:	464a      	mov	r2, r9
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae3c 	beq.w	8008dfa <_printf_float+0xb6>
 8009182:	f108 0801 	add.w	r8, r8, #1
 8009186:	68e3      	ldr	r3, [r4, #12]
 8009188:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800918a:	1a5b      	subs	r3, r3, r1
 800918c:	4543      	cmp	r3, r8
 800918e:	dcf0      	bgt.n	8009172 <_printf_float+0x42e>
 8009190:	e6fd      	b.n	8008f8e <_printf_float+0x24a>
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	f104 0919 	add.w	r9, r4, #25
 800919a:	e7f4      	b.n	8009186 <_printf_float+0x442>

0800919c <_printf_common>:
 800919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	4616      	mov	r6, r2
 80091a2:	4698      	mov	r8, r3
 80091a4:	688a      	ldr	r2, [r1, #8]
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	4607      	mov	r7, r0
 80091aa:	4293      	cmp	r3, r2
 80091ac:	bfb8      	it	lt
 80091ae:	4613      	movlt	r3, r2
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091b6:	460c      	mov	r4, r1
 80091b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091bc:	b10a      	cbz	r2, 80091c2 <_printf_common+0x26>
 80091be:	3301      	adds	r3, #1
 80091c0:	6033      	str	r3, [r6, #0]
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	0699      	lsls	r1, r3, #26
 80091c6:	bf42      	ittt	mi
 80091c8:	6833      	ldrmi	r3, [r6, #0]
 80091ca:	3302      	addmi	r3, #2
 80091cc:	6033      	strmi	r3, [r6, #0]
 80091ce:	6825      	ldr	r5, [r4, #0]
 80091d0:	f015 0506 	ands.w	r5, r5, #6
 80091d4:	d106      	bne.n	80091e4 <_printf_common+0x48>
 80091d6:	f104 0a19 	add.w	sl, r4, #25
 80091da:	68e3      	ldr	r3, [r4, #12]
 80091dc:	6832      	ldr	r2, [r6, #0]
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	42ab      	cmp	r3, r5
 80091e2:	dc2b      	bgt.n	800923c <_printf_common+0xa0>
 80091e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091e8:	6822      	ldr	r2, [r4, #0]
 80091ea:	3b00      	subs	r3, #0
 80091ec:	bf18      	it	ne
 80091ee:	2301      	movne	r3, #1
 80091f0:	0692      	lsls	r2, r2, #26
 80091f2:	d430      	bmi.n	8009256 <_printf_common+0xba>
 80091f4:	4641      	mov	r1, r8
 80091f6:	4638      	mov	r0, r7
 80091f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091fc:	47c8      	blx	r9
 80091fe:	3001      	adds	r0, #1
 8009200:	d023      	beq.n	800924a <_printf_common+0xae>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	6922      	ldr	r2, [r4, #16]
 8009206:	f003 0306 	and.w	r3, r3, #6
 800920a:	2b04      	cmp	r3, #4
 800920c:	bf14      	ite	ne
 800920e:	2500      	movne	r5, #0
 8009210:	6833      	ldreq	r3, [r6, #0]
 8009212:	f04f 0600 	mov.w	r6, #0
 8009216:	bf08      	it	eq
 8009218:	68e5      	ldreq	r5, [r4, #12]
 800921a:	f104 041a 	add.w	r4, r4, #26
 800921e:	bf08      	it	eq
 8009220:	1aed      	subeq	r5, r5, r3
 8009222:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009226:	bf08      	it	eq
 8009228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800922c:	4293      	cmp	r3, r2
 800922e:	bfc4      	itt	gt
 8009230:	1a9b      	subgt	r3, r3, r2
 8009232:	18ed      	addgt	r5, r5, r3
 8009234:	42b5      	cmp	r5, r6
 8009236:	d11a      	bne.n	800926e <_printf_common+0xd2>
 8009238:	2000      	movs	r0, #0
 800923a:	e008      	b.n	800924e <_printf_common+0xb2>
 800923c:	2301      	movs	r3, #1
 800923e:	4652      	mov	r2, sl
 8009240:	4641      	mov	r1, r8
 8009242:	4638      	mov	r0, r7
 8009244:	47c8      	blx	r9
 8009246:	3001      	adds	r0, #1
 8009248:	d103      	bne.n	8009252 <_printf_common+0xb6>
 800924a:	f04f 30ff 	mov.w	r0, #4294967295
 800924e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009252:	3501      	adds	r5, #1
 8009254:	e7c1      	b.n	80091da <_printf_common+0x3e>
 8009256:	2030      	movs	r0, #48	@ 0x30
 8009258:	18e1      	adds	r1, r4, r3
 800925a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009264:	4422      	add	r2, r4
 8009266:	3302      	adds	r3, #2
 8009268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800926c:	e7c2      	b.n	80091f4 <_printf_common+0x58>
 800926e:	2301      	movs	r3, #1
 8009270:	4622      	mov	r2, r4
 8009272:	4641      	mov	r1, r8
 8009274:	4638      	mov	r0, r7
 8009276:	47c8      	blx	r9
 8009278:	3001      	adds	r0, #1
 800927a:	d0e6      	beq.n	800924a <_printf_common+0xae>
 800927c:	3601      	adds	r6, #1
 800927e:	e7d9      	b.n	8009234 <_printf_common+0x98>

08009280 <_printf_i>:
 8009280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009284:	7e0f      	ldrb	r7, [r1, #24]
 8009286:	4691      	mov	r9, r2
 8009288:	2f78      	cmp	r7, #120	@ 0x78
 800928a:	4680      	mov	r8, r0
 800928c:	460c      	mov	r4, r1
 800928e:	469a      	mov	sl, r3
 8009290:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009296:	d807      	bhi.n	80092a8 <_printf_i+0x28>
 8009298:	2f62      	cmp	r7, #98	@ 0x62
 800929a:	d80a      	bhi.n	80092b2 <_printf_i+0x32>
 800929c:	2f00      	cmp	r7, #0
 800929e:	f000 80d3 	beq.w	8009448 <_printf_i+0x1c8>
 80092a2:	2f58      	cmp	r7, #88	@ 0x58
 80092a4:	f000 80ba 	beq.w	800941c <_printf_i+0x19c>
 80092a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092b0:	e03a      	b.n	8009328 <_printf_i+0xa8>
 80092b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092b6:	2b15      	cmp	r3, #21
 80092b8:	d8f6      	bhi.n	80092a8 <_printf_i+0x28>
 80092ba:	a101      	add	r1, pc, #4	@ (adr r1, 80092c0 <_printf_i+0x40>)
 80092bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c0:	08009319 	.word	0x08009319
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	080092a9 	.word	0x080092a9
 80092cc:	080092a9 	.word	0x080092a9
 80092d0:	080092a9 	.word	0x080092a9
 80092d4:	080092a9 	.word	0x080092a9
 80092d8:	0800932d 	.word	0x0800932d
 80092dc:	080092a9 	.word	0x080092a9
 80092e0:	080092a9 	.word	0x080092a9
 80092e4:	080092a9 	.word	0x080092a9
 80092e8:	080092a9 	.word	0x080092a9
 80092ec:	0800942f 	.word	0x0800942f
 80092f0:	08009357 	.word	0x08009357
 80092f4:	080093e9 	.word	0x080093e9
 80092f8:	080092a9 	.word	0x080092a9
 80092fc:	080092a9 	.word	0x080092a9
 8009300:	08009451 	.word	0x08009451
 8009304:	080092a9 	.word	0x080092a9
 8009308:	08009357 	.word	0x08009357
 800930c:	080092a9 	.word	0x080092a9
 8009310:	080092a9 	.word	0x080092a9
 8009314:	080093f1 	.word	0x080093f1
 8009318:	6833      	ldr	r3, [r6, #0]
 800931a:	1d1a      	adds	r2, r3, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6032      	str	r2, [r6, #0]
 8009320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009328:	2301      	movs	r3, #1
 800932a:	e09e      	b.n	800946a <_printf_i+0x1ea>
 800932c:	6833      	ldr	r3, [r6, #0]
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	1d19      	adds	r1, r3, #4
 8009332:	6031      	str	r1, [r6, #0]
 8009334:	0606      	lsls	r6, r0, #24
 8009336:	d501      	bpl.n	800933c <_printf_i+0xbc>
 8009338:	681d      	ldr	r5, [r3, #0]
 800933a:	e003      	b.n	8009344 <_printf_i+0xc4>
 800933c:	0645      	lsls	r5, r0, #25
 800933e:	d5fb      	bpl.n	8009338 <_printf_i+0xb8>
 8009340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009344:	2d00      	cmp	r5, #0
 8009346:	da03      	bge.n	8009350 <_printf_i+0xd0>
 8009348:	232d      	movs	r3, #45	@ 0x2d
 800934a:	426d      	negs	r5, r5
 800934c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009350:	230a      	movs	r3, #10
 8009352:	4859      	ldr	r0, [pc, #356]	@ (80094b8 <_printf_i+0x238>)
 8009354:	e011      	b.n	800937a <_printf_i+0xfa>
 8009356:	6821      	ldr	r1, [r4, #0]
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	0608      	lsls	r0, r1, #24
 800935c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009360:	d402      	bmi.n	8009368 <_printf_i+0xe8>
 8009362:	0649      	lsls	r1, r1, #25
 8009364:	bf48      	it	mi
 8009366:	b2ad      	uxthmi	r5, r5
 8009368:	2f6f      	cmp	r7, #111	@ 0x6f
 800936a:	6033      	str	r3, [r6, #0]
 800936c:	bf14      	ite	ne
 800936e:	230a      	movne	r3, #10
 8009370:	2308      	moveq	r3, #8
 8009372:	4851      	ldr	r0, [pc, #324]	@ (80094b8 <_printf_i+0x238>)
 8009374:	2100      	movs	r1, #0
 8009376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800937a:	6866      	ldr	r6, [r4, #4]
 800937c:	2e00      	cmp	r6, #0
 800937e:	bfa8      	it	ge
 8009380:	6821      	ldrge	r1, [r4, #0]
 8009382:	60a6      	str	r6, [r4, #8]
 8009384:	bfa4      	itt	ge
 8009386:	f021 0104 	bicge.w	r1, r1, #4
 800938a:	6021      	strge	r1, [r4, #0]
 800938c:	b90d      	cbnz	r5, 8009392 <_printf_i+0x112>
 800938e:	2e00      	cmp	r6, #0
 8009390:	d04b      	beq.n	800942a <_printf_i+0x1aa>
 8009392:	4616      	mov	r6, r2
 8009394:	fbb5 f1f3 	udiv	r1, r5, r3
 8009398:	fb03 5711 	mls	r7, r3, r1, r5
 800939c:	5dc7      	ldrb	r7, [r0, r7]
 800939e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093a2:	462f      	mov	r7, r5
 80093a4:	42bb      	cmp	r3, r7
 80093a6:	460d      	mov	r5, r1
 80093a8:	d9f4      	bls.n	8009394 <_printf_i+0x114>
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	d10b      	bne.n	80093c6 <_printf_i+0x146>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	07df      	lsls	r7, r3, #31
 80093b2:	d508      	bpl.n	80093c6 <_printf_i+0x146>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	6861      	ldr	r1, [r4, #4]
 80093b8:	4299      	cmp	r1, r3
 80093ba:	bfde      	ittt	le
 80093bc:	2330      	movle	r3, #48	@ 0x30
 80093be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093c6:	1b92      	subs	r2, r2, r6
 80093c8:	6122      	str	r2, [r4, #16]
 80093ca:	464b      	mov	r3, r9
 80093cc:	4621      	mov	r1, r4
 80093ce:	4640      	mov	r0, r8
 80093d0:	f8cd a000 	str.w	sl, [sp]
 80093d4:	aa03      	add	r2, sp, #12
 80093d6:	f7ff fee1 	bl	800919c <_printf_common>
 80093da:	3001      	adds	r0, #1
 80093dc:	d14a      	bne.n	8009474 <_printf_i+0x1f4>
 80093de:	f04f 30ff 	mov.w	r0, #4294967295
 80093e2:	b004      	add	sp, #16
 80093e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	f043 0320 	orr.w	r3, r3, #32
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	2778      	movs	r7, #120	@ 0x78
 80093f2:	4832      	ldr	r0, [pc, #200]	@ (80094bc <_printf_i+0x23c>)
 80093f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	6831      	ldr	r1, [r6, #0]
 80093fc:	061f      	lsls	r7, r3, #24
 80093fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8009402:	d402      	bmi.n	800940a <_printf_i+0x18a>
 8009404:	065f      	lsls	r7, r3, #25
 8009406:	bf48      	it	mi
 8009408:	b2ad      	uxthmi	r5, r5
 800940a:	6031      	str	r1, [r6, #0]
 800940c:	07d9      	lsls	r1, r3, #31
 800940e:	bf44      	itt	mi
 8009410:	f043 0320 	orrmi.w	r3, r3, #32
 8009414:	6023      	strmi	r3, [r4, #0]
 8009416:	b11d      	cbz	r5, 8009420 <_printf_i+0x1a0>
 8009418:	2310      	movs	r3, #16
 800941a:	e7ab      	b.n	8009374 <_printf_i+0xf4>
 800941c:	4826      	ldr	r0, [pc, #152]	@ (80094b8 <_printf_i+0x238>)
 800941e:	e7e9      	b.n	80093f4 <_printf_i+0x174>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	f023 0320 	bic.w	r3, r3, #32
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	e7f6      	b.n	8009418 <_printf_i+0x198>
 800942a:	4616      	mov	r6, r2
 800942c:	e7bd      	b.n	80093aa <_printf_i+0x12a>
 800942e:	6833      	ldr	r3, [r6, #0]
 8009430:	6825      	ldr	r5, [r4, #0]
 8009432:	1d18      	adds	r0, r3, #4
 8009434:	6961      	ldr	r1, [r4, #20]
 8009436:	6030      	str	r0, [r6, #0]
 8009438:	062e      	lsls	r6, r5, #24
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	d501      	bpl.n	8009442 <_printf_i+0x1c2>
 800943e:	6019      	str	r1, [r3, #0]
 8009440:	e002      	b.n	8009448 <_printf_i+0x1c8>
 8009442:	0668      	lsls	r0, r5, #25
 8009444:	d5fb      	bpl.n	800943e <_printf_i+0x1be>
 8009446:	8019      	strh	r1, [r3, #0]
 8009448:	2300      	movs	r3, #0
 800944a:	4616      	mov	r6, r2
 800944c:	6123      	str	r3, [r4, #16]
 800944e:	e7bc      	b.n	80093ca <_printf_i+0x14a>
 8009450:	6833      	ldr	r3, [r6, #0]
 8009452:	2100      	movs	r1, #0
 8009454:	1d1a      	adds	r2, r3, #4
 8009456:	6032      	str	r2, [r6, #0]
 8009458:	681e      	ldr	r6, [r3, #0]
 800945a:	6862      	ldr	r2, [r4, #4]
 800945c:	4630      	mov	r0, r6
 800945e:	f000 fb2e 	bl	8009abe <memchr>
 8009462:	b108      	cbz	r0, 8009468 <_printf_i+0x1e8>
 8009464:	1b80      	subs	r0, r0, r6
 8009466:	6060      	str	r0, [r4, #4]
 8009468:	6863      	ldr	r3, [r4, #4]
 800946a:	6123      	str	r3, [r4, #16]
 800946c:	2300      	movs	r3, #0
 800946e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009472:	e7aa      	b.n	80093ca <_printf_i+0x14a>
 8009474:	4632      	mov	r2, r6
 8009476:	4649      	mov	r1, r9
 8009478:	4640      	mov	r0, r8
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	47d0      	blx	sl
 800947e:	3001      	adds	r0, #1
 8009480:	d0ad      	beq.n	80093de <_printf_i+0x15e>
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	079b      	lsls	r3, r3, #30
 8009486:	d413      	bmi.n	80094b0 <_printf_i+0x230>
 8009488:	68e0      	ldr	r0, [r4, #12]
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	4298      	cmp	r0, r3
 800948e:	bfb8      	it	lt
 8009490:	4618      	movlt	r0, r3
 8009492:	e7a6      	b.n	80093e2 <_printf_i+0x162>
 8009494:	2301      	movs	r3, #1
 8009496:	4632      	mov	r2, r6
 8009498:	4649      	mov	r1, r9
 800949a:	4640      	mov	r0, r8
 800949c:	47d0      	blx	sl
 800949e:	3001      	adds	r0, #1
 80094a0:	d09d      	beq.n	80093de <_printf_i+0x15e>
 80094a2:	3501      	adds	r5, #1
 80094a4:	68e3      	ldr	r3, [r4, #12]
 80094a6:	9903      	ldr	r1, [sp, #12]
 80094a8:	1a5b      	subs	r3, r3, r1
 80094aa:	42ab      	cmp	r3, r5
 80094ac:	dcf2      	bgt.n	8009494 <_printf_i+0x214>
 80094ae:	e7eb      	b.n	8009488 <_printf_i+0x208>
 80094b0:	2500      	movs	r5, #0
 80094b2:	f104 0619 	add.w	r6, r4, #25
 80094b6:	e7f5      	b.n	80094a4 <_printf_i+0x224>
 80094b8:	0800bc4c 	.word	0x0800bc4c
 80094bc:	0800bc5d 	.word	0x0800bc5d

080094c0 <std>:
 80094c0:	2300      	movs	r3, #0
 80094c2:	b510      	push	{r4, lr}
 80094c4:	4604      	mov	r4, r0
 80094c6:	e9c0 3300 	strd	r3, r3, [r0]
 80094ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ce:	6083      	str	r3, [r0, #8]
 80094d0:	8181      	strh	r1, [r0, #12]
 80094d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80094d4:	81c2      	strh	r2, [r0, #14]
 80094d6:	6183      	str	r3, [r0, #24]
 80094d8:	4619      	mov	r1, r3
 80094da:	2208      	movs	r2, #8
 80094dc:	305c      	adds	r0, #92	@ 0x5c
 80094de:	f000 fa19 	bl	8009914 <memset>
 80094e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009518 <std+0x58>)
 80094e4:	6224      	str	r4, [r4, #32]
 80094e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80094e8:	4b0c      	ldr	r3, [pc, #48]	@ (800951c <std+0x5c>)
 80094ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009520 <std+0x60>)
 80094ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <std+0x64>)
 80094f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80094f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009528 <std+0x68>)
 80094f6:	429c      	cmp	r4, r3
 80094f8:	d006      	beq.n	8009508 <std+0x48>
 80094fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094fe:	4294      	cmp	r4, r2
 8009500:	d002      	beq.n	8009508 <std+0x48>
 8009502:	33d0      	adds	r3, #208	@ 0xd0
 8009504:	429c      	cmp	r4, r3
 8009506:	d105      	bne.n	8009514 <std+0x54>
 8009508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800950c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009510:	f000 bad2 	b.w	8009ab8 <__retarget_lock_init_recursive>
 8009514:	bd10      	pop	{r4, pc}
 8009516:	bf00      	nop
 8009518:	08009765 	.word	0x08009765
 800951c:	08009787 	.word	0x08009787
 8009520:	080097bf 	.word	0x080097bf
 8009524:	080097e3 	.word	0x080097e3
 8009528:	200040e0 	.word	0x200040e0

0800952c <stdio_exit_handler>:
 800952c:	4a02      	ldr	r2, [pc, #8]	@ (8009538 <stdio_exit_handler+0xc>)
 800952e:	4903      	ldr	r1, [pc, #12]	@ (800953c <stdio_exit_handler+0x10>)
 8009530:	4803      	ldr	r0, [pc, #12]	@ (8009540 <stdio_exit_handler+0x14>)
 8009532:	f000 b869 	b.w	8009608 <_fwalk_sglue>
 8009536:	bf00      	nop
 8009538:	20000020 	.word	0x20000020
 800953c:	0800b6c5 	.word	0x0800b6c5
 8009540:	20000030 	.word	0x20000030

08009544 <cleanup_stdio>:
 8009544:	6841      	ldr	r1, [r0, #4]
 8009546:	4b0c      	ldr	r3, [pc, #48]	@ (8009578 <cleanup_stdio+0x34>)
 8009548:	b510      	push	{r4, lr}
 800954a:	4299      	cmp	r1, r3
 800954c:	4604      	mov	r4, r0
 800954e:	d001      	beq.n	8009554 <cleanup_stdio+0x10>
 8009550:	f002 f8b8 	bl	800b6c4 <_fflush_r>
 8009554:	68a1      	ldr	r1, [r4, #8]
 8009556:	4b09      	ldr	r3, [pc, #36]	@ (800957c <cleanup_stdio+0x38>)
 8009558:	4299      	cmp	r1, r3
 800955a:	d002      	beq.n	8009562 <cleanup_stdio+0x1e>
 800955c:	4620      	mov	r0, r4
 800955e:	f002 f8b1 	bl	800b6c4 <_fflush_r>
 8009562:	68e1      	ldr	r1, [r4, #12]
 8009564:	4b06      	ldr	r3, [pc, #24]	@ (8009580 <cleanup_stdio+0x3c>)
 8009566:	4299      	cmp	r1, r3
 8009568:	d004      	beq.n	8009574 <cleanup_stdio+0x30>
 800956a:	4620      	mov	r0, r4
 800956c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009570:	f002 b8a8 	b.w	800b6c4 <_fflush_r>
 8009574:	bd10      	pop	{r4, pc}
 8009576:	bf00      	nop
 8009578:	200040e0 	.word	0x200040e0
 800957c:	20004148 	.word	0x20004148
 8009580:	200041b0 	.word	0x200041b0

08009584 <global_stdio_init.part.0>:
 8009584:	b510      	push	{r4, lr}
 8009586:	4b0b      	ldr	r3, [pc, #44]	@ (80095b4 <global_stdio_init.part.0+0x30>)
 8009588:	4c0b      	ldr	r4, [pc, #44]	@ (80095b8 <global_stdio_init.part.0+0x34>)
 800958a:	4a0c      	ldr	r2, [pc, #48]	@ (80095bc <global_stdio_init.part.0+0x38>)
 800958c:	4620      	mov	r0, r4
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	2104      	movs	r1, #4
 8009592:	2200      	movs	r2, #0
 8009594:	f7ff ff94 	bl	80094c0 <std>
 8009598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800959c:	2201      	movs	r2, #1
 800959e:	2109      	movs	r1, #9
 80095a0:	f7ff ff8e 	bl	80094c0 <std>
 80095a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095a8:	2202      	movs	r2, #2
 80095aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ae:	2112      	movs	r1, #18
 80095b0:	f7ff bf86 	b.w	80094c0 <std>
 80095b4:	20004218 	.word	0x20004218
 80095b8:	200040e0 	.word	0x200040e0
 80095bc:	0800952d 	.word	0x0800952d

080095c0 <__sfp_lock_acquire>:
 80095c0:	4801      	ldr	r0, [pc, #4]	@ (80095c8 <__sfp_lock_acquire+0x8>)
 80095c2:	f000 ba7a 	b.w	8009aba <__retarget_lock_acquire_recursive>
 80095c6:	bf00      	nop
 80095c8:	20004221 	.word	0x20004221

080095cc <__sfp_lock_release>:
 80095cc:	4801      	ldr	r0, [pc, #4]	@ (80095d4 <__sfp_lock_release+0x8>)
 80095ce:	f000 ba75 	b.w	8009abc <__retarget_lock_release_recursive>
 80095d2:	bf00      	nop
 80095d4:	20004221 	.word	0x20004221

080095d8 <__sinit>:
 80095d8:	b510      	push	{r4, lr}
 80095da:	4604      	mov	r4, r0
 80095dc:	f7ff fff0 	bl	80095c0 <__sfp_lock_acquire>
 80095e0:	6a23      	ldr	r3, [r4, #32]
 80095e2:	b11b      	cbz	r3, 80095ec <__sinit+0x14>
 80095e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e8:	f7ff bff0 	b.w	80095cc <__sfp_lock_release>
 80095ec:	4b04      	ldr	r3, [pc, #16]	@ (8009600 <__sinit+0x28>)
 80095ee:	6223      	str	r3, [r4, #32]
 80095f0:	4b04      	ldr	r3, [pc, #16]	@ (8009604 <__sinit+0x2c>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1f5      	bne.n	80095e4 <__sinit+0xc>
 80095f8:	f7ff ffc4 	bl	8009584 <global_stdio_init.part.0>
 80095fc:	e7f2      	b.n	80095e4 <__sinit+0xc>
 80095fe:	bf00      	nop
 8009600:	08009545 	.word	0x08009545
 8009604:	20004218 	.word	0x20004218

08009608 <_fwalk_sglue>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	4607      	mov	r7, r0
 800960e:	4688      	mov	r8, r1
 8009610:	4614      	mov	r4, r2
 8009612:	2600      	movs	r6, #0
 8009614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009618:	f1b9 0901 	subs.w	r9, r9, #1
 800961c:	d505      	bpl.n	800962a <_fwalk_sglue+0x22>
 800961e:	6824      	ldr	r4, [r4, #0]
 8009620:	2c00      	cmp	r4, #0
 8009622:	d1f7      	bne.n	8009614 <_fwalk_sglue+0xc>
 8009624:	4630      	mov	r0, r6
 8009626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d907      	bls.n	8009640 <_fwalk_sglue+0x38>
 8009630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009634:	3301      	adds	r3, #1
 8009636:	d003      	beq.n	8009640 <_fwalk_sglue+0x38>
 8009638:	4629      	mov	r1, r5
 800963a:	4638      	mov	r0, r7
 800963c:	47c0      	blx	r8
 800963e:	4306      	orrs	r6, r0
 8009640:	3568      	adds	r5, #104	@ 0x68
 8009642:	e7e9      	b.n	8009618 <_fwalk_sglue+0x10>

08009644 <iprintf>:
 8009644:	b40f      	push	{r0, r1, r2, r3}
 8009646:	b507      	push	{r0, r1, r2, lr}
 8009648:	4906      	ldr	r1, [pc, #24]	@ (8009664 <iprintf+0x20>)
 800964a:	ab04      	add	r3, sp, #16
 800964c:	6808      	ldr	r0, [r1, #0]
 800964e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009652:	6881      	ldr	r1, [r0, #8]
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	f001 fe9d 	bl	800b394 <_vfiprintf_r>
 800965a:	b003      	add	sp, #12
 800965c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009660:	b004      	add	sp, #16
 8009662:	4770      	bx	lr
 8009664:	2000002c 	.word	0x2000002c

08009668 <_puts_r>:
 8009668:	6a03      	ldr	r3, [r0, #32]
 800966a:	b570      	push	{r4, r5, r6, lr}
 800966c:	4605      	mov	r5, r0
 800966e:	460e      	mov	r6, r1
 8009670:	6884      	ldr	r4, [r0, #8]
 8009672:	b90b      	cbnz	r3, 8009678 <_puts_r+0x10>
 8009674:	f7ff ffb0 	bl	80095d8 <__sinit>
 8009678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800967a:	07db      	lsls	r3, r3, #31
 800967c:	d405      	bmi.n	800968a <_puts_r+0x22>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	0598      	lsls	r0, r3, #22
 8009682:	d402      	bmi.n	800968a <_puts_r+0x22>
 8009684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009686:	f000 fa18 	bl	8009aba <__retarget_lock_acquire_recursive>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	0719      	lsls	r1, r3, #28
 800968e:	d502      	bpl.n	8009696 <_puts_r+0x2e>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d135      	bne.n	8009702 <_puts_r+0x9a>
 8009696:	4621      	mov	r1, r4
 8009698:	4628      	mov	r0, r5
 800969a:	f000 f8e5 	bl	8009868 <__swsetup_r>
 800969e:	b380      	cbz	r0, 8009702 <_puts_r+0x9a>
 80096a0:	f04f 35ff 	mov.w	r5, #4294967295
 80096a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096a6:	07da      	lsls	r2, r3, #31
 80096a8:	d405      	bmi.n	80096b6 <_puts_r+0x4e>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	059b      	lsls	r3, r3, #22
 80096ae:	d402      	bmi.n	80096b6 <_puts_r+0x4e>
 80096b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096b2:	f000 fa03 	bl	8009abc <__retarget_lock_release_recursive>
 80096b6:	4628      	mov	r0, r5
 80096b8:	bd70      	pop	{r4, r5, r6, pc}
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	da04      	bge.n	80096c8 <_puts_r+0x60>
 80096be:	69a2      	ldr	r2, [r4, #24]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	dc17      	bgt.n	80096f4 <_puts_r+0x8c>
 80096c4:	290a      	cmp	r1, #10
 80096c6:	d015      	beq.n	80096f4 <_puts_r+0x8c>
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	6022      	str	r2, [r4, #0]
 80096ce:	7019      	strb	r1, [r3, #0]
 80096d0:	68a3      	ldr	r3, [r4, #8]
 80096d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096d6:	3b01      	subs	r3, #1
 80096d8:	60a3      	str	r3, [r4, #8]
 80096da:	2900      	cmp	r1, #0
 80096dc:	d1ed      	bne.n	80096ba <_puts_r+0x52>
 80096de:	2b00      	cmp	r3, #0
 80096e0:	da11      	bge.n	8009706 <_puts_r+0x9e>
 80096e2:	4622      	mov	r2, r4
 80096e4:	210a      	movs	r1, #10
 80096e6:	4628      	mov	r0, r5
 80096e8:	f000 f87f 	bl	80097ea <__swbuf_r>
 80096ec:	3001      	adds	r0, #1
 80096ee:	d0d7      	beq.n	80096a0 <_puts_r+0x38>
 80096f0:	250a      	movs	r5, #10
 80096f2:	e7d7      	b.n	80096a4 <_puts_r+0x3c>
 80096f4:	4622      	mov	r2, r4
 80096f6:	4628      	mov	r0, r5
 80096f8:	f000 f877 	bl	80097ea <__swbuf_r>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d1e7      	bne.n	80096d0 <_puts_r+0x68>
 8009700:	e7ce      	b.n	80096a0 <_puts_r+0x38>
 8009702:	3e01      	subs	r6, #1
 8009704:	e7e4      	b.n	80096d0 <_puts_r+0x68>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	6022      	str	r2, [r4, #0]
 800970c:	220a      	movs	r2, #10
 800970e:	701a      	strb	r2, [r3, #0]
 8009710:	e7ee      	b.n	80096f0 <_puts_r+0x88>
	...

08009714 <puts>:
 8009714:	4b02      	ldr	r3, [pc, #8]	@ (8009720 <puts+0xc>)
 8009716:	4601      	mov	r1, r0
 8009718:	6818      	ldr	r0, [r3, #0]
 800971a:	f7ff bfa5 	b.w	8009668 <_puts_r>
 800971e:	bf00      	nop
 8009720:	2000002c 	.word	0x2000002c

08009724 <siprintf>:
 8009724:	b40e      	push	{r1, r2, r3}
 8009726:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800972a:	b500      	push	{lr}
 800972c:	b09c      	sub	sp, #112	@ 0x70
 800972e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009730:	9002      	str	r0, [sp, #8]
 8009732:	9006      	str	r0, [sp, #24]
 8009734:	9107      	str	r1, [sp, #28]
 8009736:	9104      	str	r1, [sp, #16]
 8009738:	4808      	ldr	r0, [pc, #32]	@ (800975c <siprintf+0x38>)
 800973a:	4909      	ldr	r1, [pc, #36]	@ (8009760 <siprintf+0x3c>)
 800973c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009740:	9105      	str	r1, [sp, #20]
 8009742:	6800      	ldr	r0, [r0, #0]
 8009744:	a902      	add	r1, sp, #8
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	f001 fd00 	bl	800b14c <_svfiprintf_r>
 800974c:	2200      	movs	r2, #0
 800974e:	9b02      	ldr	r3, [sp, #8]
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	b01c      	add	sp, #112	@ 0x70
 8009754:	f85d eb04 	ldr.w	lr, [sp], #4
 8009758:	b003      	add	sp, #12
 800975a:	4770      	bx	lr
 800975c:	2000002c 	.word	0x2000002c
 8009760:	ffff0208 	.word	0xffff0208

08009764 <__sread>:
 8009764:	b510      	push	{r4, lr}
 8009766:	460c      	mov	r4, r1
 8009768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976c:	f000 f956 	bl	8009a1c <_read_r>
 8009770:	2800      	cmp	r0, #0
 8009772:	bfab      	itete	ge
 8009774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009776:	89a3      	ldrhlt	r3, [r4, #12]
 8009778:	181b      	addge	r3, r3, r0
 800977a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800977e:	bfac      	ite	ge
 8009780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009782:	81a3      	strhlt	r3, [r4, #12]
 8009784:	bd10      	pop	{r4, pc}

08009786 <__swrite>:
 8009786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978a:	461f      	mov	r7, r3
 800978c:	898b      	ldrh	r3, [r1, #12]
 800978e:	4605      	mov	r5, r0
 8009790:	05db      	lsls	r3, r3, #23
 8009792:	460c      	mov	r4, r1
 8009794:	4616      	mov	r6, r2
 8009796:	d505      	bpl.n	80097a4 <__swrite+0x1e>
 8009798:	2302      	movs	r3, #2
 800979a:	2200      	movs	r2, #0
 800979c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a0:	f000 f92a 	bl	80099f8 <_lseek_r>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	4632      	mov	r2, r6
 80097a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097ac:	81a3      	strh	r3, [r4, #12]
 80097ae:	4628      	mov	r0, r5
 80097b0:	463b      	mov	r3, r7
 80097b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ba:	f000 b941 	b.w	8009a40 <_write_r>

080097be <__sseek>:
 80097be:	b510      	push	{r4, lr}
 80097c0:	460c      	mov	r4, r1
 80097c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c6:	f000 f917 	bl	80099f8 <_lseek_r>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	bf15      	itete	ne
 80097d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097da:	81a3      	strheq	r3, [r4, #12]
 80097dc:	bf18      	it	ne
 80097de:	81a3      	strhne	r3, [r4, #12]
 80097e0:	bd10      	pop	{r4, pc}

080097e2 <__sclose>:
 80097e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e6:	f000 b8a1 	b.w	800992c <_close_r>

080097ea <__swbuf_r>:
 80097ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ec:	460e      	mov	r6, r1
 80097ee:	4614      	mov	r4, r2
 80097f0:	4605      	mov	r5, r0
 80097f2:	b118      	cbz	r0, 80097fc <__swbuf_r+0x12>
 80097f4:	6a03      	ldr	r3, [r0, #32]
 80097f6:	b90b      	cbnz	r3, 80097fc <__swbuf_r+0x12>
 80097f8:	f7ff feee 	bl	80095d8 <__sinit>
 80097fc:	69a3      	ldr	r3, [r4, #24]
 80097fe:	60a3      	str	r3, [r4, #8]
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	071a      	lsls	r2, r3, #28
 8009804:	d501      	bpl.n	800980a <__swbuf_r+0x20>
 8009806:	6923      	ldr	r3, [r4, #16]
 8009808:	b943      	cbnz	r3, 800981c <__swbuf_r+0x32>
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f000 f82b 	bl	8009868 <__swsetup_r>
 8009812:	b118      	cbz	r0, 800981c <__swbuf_r+0x32>
 8009814:	f04f 37ff 	mov.w	r7, #4294967295
 8009818:	4638      	mov	r0, r7
 800981a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	6922      	ldr	r2, [r4, #16]
 8009820:	b2f6      	uxtb	r6, r6
 8009822:	1a98      	subs	r0, r3, r2
 8009824:	6963      	ldr	r3, [r4, #20]
 8009826:	4637      	mov	r7, r6
 8009828:	4283      	cmp	r3, r0
 800982a:	dc05      	bgt.n	8009838 <__swbuf_r+0x4e>
 800982c:	4621      	mov	r1, r4
 800982e:	4628      	mov	r0, r5
 8009830:	f001 ff48 	bl	800b6c4 <_fflush_r>
 8009834:	2800      	cmp	r0, #0
 8009836:	d1ed      	bne.n	8009814 <__swbuf_r+0x2a>
 8009838:	68a3      	ldr	r3, [r4, #8]
 800983a:	3b01      	subs	r3, #1
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	6022      	str	r2, [r4, #0]
 8009844:	701e      	strb	r6, [r3, #0]
 8009846:	6962      	ldr	r2, [r4, #20]
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	429a      	cmp	r2, r3
 800984c:	d004      	beq.n	8009858 <__swbuf_r+0x6e>
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	07db      	lsls	r3, r3, #31
 8009852:	d5e1      	bpl.n	8009818 <__swbuf_r+0x2e>
 8009854:	2e0a      	cmp	r6, #10
 8009856:	d1df      	bne.n	8009818 <__swbuf_r+0x2e>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f001 ff32 	bl	800b6c4 <_fflush_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	d0d9      	beq.n	8009818 <__swbuf_r+0x2e>
 8009864:	e7d6      	b.n	8009814 <__swbuf_r+0x2a>
	...

08009868 <__swsetup_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4b29      	ldr	r3, [pc, #164]	@ (8009910 <__swsetup_r+0xa8>)
 800986c:	4605      	mov	r5, r0
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	460c      	mov	r4, r1
 8009872:	b118      	cbz	r0, 800987c <__swsetup_r+0x14>
 8009874:	6a03      	ldr	r3, [r0, #32]
 8009876:	b90b      	cbnz	r3, 800987c <__swsetup_r+0x14>
 8009878:	f7ff feae 	bl	80095d8 <__sinit>
 800987c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009880:	0719      	lsls	r1, r3, #28
 8009882:	d422      	bmi.n	80098ca <__swsetup_r+0x62>
 8009884:	06da      	lsls	r2, r3, #27
 8009886:	d407      	bmi.n	8009898 <__swsetup_r+0x30>
 8009888:	2209      	movs	r2, #9
 800988a:	602a      	str	r2, [r5, #0]
 800988c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009890:	f04f 30ff 	mov.w	r0, #4294967295
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	e033      	b.n	8009900 <__swsetup_r+0x98>
 8009898:	0758      	lsls	r0, r3, #29
 800989a:	d512      	bpl.n	80098c2 <__swsetup_r+0x5a>
 800989c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800989e:	b141      	cbz	r1, 80098b2 <__swsetup_r+0x4a>
 80098a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098a4:	4299      	cmp	r1, r3
 80098a6:	d002      	beq.n	80098ae <__swsetup_r+0x46>
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 ff75 	bl	800a798 <_free_r>
 80098ae:	2300      	movs	r3, #0
 80098b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	2300      	movs	r3, #0
 80098bc:	6063      	str	r3, [r4, #4]
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	f043 0308 	orr.w	r3, r3, #8
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	6923      	ldr	r3, [r4, #16]
 80098cc:	b94b      	cbnz	r3, 80098e2 <__swsetup_r+0x7a>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098d8:	d003      	beq.n	80098e2 <__swsetup_r+0x7a>
 80098da:	4621      	mov	r1, r4
 80098dc:	4628      	mov	r0, r5
 80098de:	f001 ff3e 	bl	800b75e <__smakebuf_r>
 80098e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e6:	f013 0201 	ands.w	r2, r3, #1
 80098ea:	d00a      	beq.n	8009902 <__swsetup_r+0x9a>
 80098ec:	2200      	movs	r2, #0
 80098ee:	60a2      	str	r2, [r4, #8]
 80098f0:	6962      	ldr	r2, [r4, #20]
 80098f2:	4252      	negs	r2, r2
 80098f4:	61a2      	str	r2, [r4, #24]
 80098f6:	6922      	ldr	r2, [r4, #16]
 80098f8:	b942      	cbnz	r2, 800990c <__swsetup_r+0xa4>
 80098fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098fe:	d1c5      	bne.n	800988c <__swsetup_r+0x24>
 8009900:	bd38      	pop	{r3, r4, r5, pc}
 8009902:	0799      	lsls	r1, r3, #30
 8009904:	bf58      	it	pl
 8009906:	6962      	ldrpl	r2, [r4, #20]
 8009908:	60a2      	str	r2, [r4, #8]
 800990a:	e7f4      	b.n	80098f6 <__swsetup_r+0x8e>
 800990c:	2000      	movs	r0, #0
 800990e:	e7f7      	b.n	8009900 <__swsetup_r+0x98>
 8009910:	2000002c 	.word	0x2000002c

08009914 <memset>:
 8009914:	4603      	mov	r3, r0
 8009916:	4402      	add	r2, r0
 8009918:	4293      	cmp	r3, r2
 800991a:	d100      	bne.n	800991e <memset+0xa>
 800991c:	4770      	bx	lr
 800991e:	f803 1b01 	strb.w	r1, [r3], #1
 8009922:	e7f9      	b.n	8009918 <memset+0x4>

08009924 <_localeconv_r>:
 8009924:	4800      	ldr	r0, [pc, #0]	@ (8009928 <_localeconv_r+0x4>)
 8009926:	4770      	bx	lr
 8009928:	2000016c 	.word	0x2000016c

0800992c <_close_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	2300      	movs	r3, #0
 8009930:	4d05      	ldr	r5, [pc, #20]	@ (8009948 <_close_r+0x1c>)
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	602b      	str	r3, [r5, #0]
 8009938:	f7f8 fdfd 	bl	8002536 <_close>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d102      	bne.n	8009946 <_close_r+0x1a>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	b103      	cbz	r3, 8009946 <_close_r+0x1a>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	2000421c 	.word	0x2000421c

0800994c <_reclaim_reent>:
 800994c:	4b29      	ldr	r3, [pc, #164]	@ (80099f4 <_reclaim_reent+0xa8>)
 800994e:	b570      	push	{r4, r5, r6, lr}
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4604      	mov	r4, r0
 8009954:	4283      	cmp	r3, r0
 8009956:	d04b      	beq.n	80099f0 <_reclaim_reent+0xa4>
 8009958:	69c3      	ldr	r3, [r0, #28]
 800995a:	b1ab      	cbz	r3, 8009988 <_reclaim_reent+0x3c>
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	b16b      	cbz	r3, 800997c <_reclaim_reent+0x30>
 8009960:	2500      	movs	r5, #0
 8009962:	69e3      	ldr	r3, [r4, #28]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	5959      	ldr	r1, [r3, r5]
 8009968:	2900      	cmp	r1, #0
 800996a:	d13b      	bne.n	80099e4 <_reclaim_reent+0x98>
 800996c:	3504      	adds	r5, #4
 800996e:	2d80      	cmp	r5, #128	@ 0x80
 8009970:	d1f7      	bne.n	8009962 <_reclaim_reent+0x16>
 8009972:	69e3      	ldr	r3, [r4, #28]
 8009974:	4620      	mov	r0, r4
 8009976:	68d9      	ldr	r1, [r3, #12]
 8009978:	f000 ff0e 	bl	800a798 <_free_r>
 800997c:	69e3      	ldr	r3, [r4, #28]
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	b111      	cbz	r1, 8009988 <_reclaim_reent+0x3c>
 8009982:	4620      	mov	r0, r4
 8009984:	f000 ff08 	bl	800a798 <_free_r>
 8009988:	6961      	ldr	r1, [r4, #20]
 800998a:	b111      	cbz	r1, 8009992 <_reclaim_reent+0x46>
 800998c:	4620      	mov	r0, r4
 800998e:	f000 ff03 	bl	800a798 <_free_r>
 8009992:	69e1      	ldr	r1, [r4, #28]
 8009994:	b111      	cbz	r1, 800999c <_reclaim_reent+0x50>
 8009996:	4620      	mov	r0, r4
 8009998:	f000 fefe 	bl	800a798 <_free_r>
 800999c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800999e:	b111      	cbz	r1, 80099a6 <_reclaim_reent+0x5a>
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 fef9 	bl	800a798 <_free_r>
 80099a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099a8:	b111      	cbz	r1, 80099b0 <_reclaim_reent+0x64>
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 fef4 	bl	800a798 <_free_r>
 80099b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80099b2:	b111      	cbz	r1, 80099ba <_reclaim_reent+0x6e>
 80099b4:	4620      	mov	r0, r4
 80099b6:	f000 feef 	bl	800a798 <_free_r>
 80099ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80099bc:	b111      	cbz	r1, 80099c4 <_reclaim_reent+0x78>
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 feea 	bl	800a798 <_free_r>
 80099c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80099c6:	b111      	cbz	r1, 80099ce <_reclaim_reent+0x82>
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 fee5 	bl	800a798 <_free_r>
 80099ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099d0:	b111      	cbz	r1, 80099d8 <_reclaim_reent+0x8c>
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 fee0 	bl	800a798 <_free_r>
 80099d8:	6a23      	ldr	r3, [r4, #32]
 80099da:	b14b      	cbz	r3, 80099f0 <_reclaim_reent+0xa4>
 80099dc:	4620      	mov	r0, r4
 80099de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099e2:	4718      	bx	r3
 80099e4:	680e      	ldr	r6, [r1, #0]
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 fed6 	bl	800a798 <_free_r>
 80099ec:	4631      	mov	r1, r6
 80099ee:	e7bb      	b.n	8009968 <_reclaim_reent+0x1c>
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
 80099f2:	bf00      	nop
 80099f4:	2000002c 	.word	0x2000002c

080099f8 <_lseek_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	4611      	mov	r1, r2
 8009a00:	2200      	movs	r2, #0
 8009a02:	4d05      	ldr	r5, [pc, #20]	@ (8009a18 <_lseek_r+0x20>)
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f8 fdb9 	bl	800257e <_lseek>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_lseek_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_lseek_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	2000421c 	.word	0x2000421c

08009a1c <_read_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	4611      	mov	r1, r2
 8009a24:	2200      	movs	r2, #0
 8009a26:	4d05      	ldr	r5, [pc, #20]	@ (8009a3c <_read_r+0x20>)
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f7f8 fd4a 	bl	80024c4 <_read>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_read_r+0x1e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_read_r+0x1e>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	2000421c 	.word	0x2000421c

08009a40 <_write_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4d05      	ldr	r5, [pc, #20]	@ (8009a60 <_write_r+0x20>)
 8009a4c:	602a      	str	r2, [r5, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f7f8 fd55 	bl	80024fe <_write>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d102      	bne.n	8009a5e <_write_r+0x1e>
 8009a58:	682b      	ldr	r3, [r5, #0]
 8009a5a:	b103      	cbz	r3, 8009a5e <_write_r+0x1e>
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	2000421c 	.word	0x2000421c

08009a64 <__errno>:
 8009a64:	4b01      	ldr	r3, [pc, #4]	@ (8009a6c <__errno+0x8>)
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	2000002c 	.word	0x2000002c

08009a70 <__libc_init_array>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	2600      	movs	r6, #0
 8009a74:	4d0c      	ldr	r5, [pc, #48]	@ (8009aa8 <__libc_init_array+0x38>)
 8009a76:	4c0d      	ldr	r4, [pc, #52]	@ (8009aac <__libc_init_array+0x3c>)
 8009a78:	1b64      	subs	r4, r4, r5
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	42a6      	cmp	r6, r4
 8009a7e:	d109      	bne.n	8009a94 <__libc_init_array+0x24>
 8009a80:	f001 ffdc 	bl	800ba3c <_init>
 8009a84:	2600      	movs	r6, #0
 8009a86:	4d0a      	ldr	r5, [pc, #40]	@ (8009ab0 <__libc_init_array+0x40>)
 8009a88:	4c0a      	ldr	r4, [pc, #40]	@ (8009ab4 <__libc_init_array+0x44>)
 8009a8a:	1b64      	subs	r4, r4, r5
 8009a8c:	10a4      	asrs	r4, r4, #2
 8009a8e:	42a6      	cmp	r6, r4
 8009a90:	d105      	bne.n	8009a9e <__libc_init_array+0x2e>
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a98:	4798      	blx	r3
 8009a9a:	3601      	adds	r6, #1
 8009a9c:	e7ee      	b.n	8009a7c <__libc_init_array+0xc>
 8009a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa2:	4798      	blx	r3
 8009aa4:	3601      	adds	r6, #1
 8009aa6:	e7f2      	b.n	8009a8e <__libc_init_array+0x1e>
 8009aa8:	0800bfb0 	.word	0x0800bfb0
 8009aac:	0800bfb0 	.word	0x0800bfb0
 8009ab0:	0800bfb0 	.word	0x0800bfb0
 8009ab4:	0800bfb4 	.word	0x0800bfb4

08009ab8 <__retarget_lock_init_recursive>:
 8009ab8:	4770      	bx	lr

08009aba <__retarget_lock_acquire_recursive>:
 8009aba:	4770      	bx	lr

08009abc <__retarget_lock_release_recursive>:
 8009abc:	4770      	bx	lr

08009abe <memchr>:
 8009abe:	4603      	mov	r3, r0
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	b2c9      	uxtb	r1, r1
 8009ac4:	4402      	add	r2, r0
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	d101      	bne.n	8009ad0 <memchr+0x12>
 8009acc:	2000      	movs	r0, #0
 8009ace:	e003      	b.n	8009ad8 <memchr+0x1a>
 8009ad0:	7804      	ldrb	r4, [r0, #0]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	428c      	cmp	r4, r1
 8009ad6:	d1f6      	bne.n	8009ac6 <memchr+0x8>
 8009ad8:	bd10      	pop	{r4, pc}

08009ada <memcpy>:
 8009ada:	440a      	add	r2, r1
 8009adc:	4291      	cmp	r1, r2
 8009ade:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae2:	d100      	bne.n	8009ae6 <memcpy+0xc>
 8009ae4:	4770      	bx	lr
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aec:	4291      	cmp	r1, r2
 8009aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af2:	d1f9      	bne.n	8009ae8 <memcpy+0xe>
 8009af4:	bd10      	pop	{r4, pc}

08009af6 <quorem>:
 8009af6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	6903      	ldr	r3, [r0, #16]
 8009afc:	690c      	ldr	r4, [r1, #16]
 8009afe:	4607      	mov	r7, r0
 8009b00:	42a3      	cmp	r3, r4
 8009b02:	db7e      	blt.n	8009c02 <quorem+0x10c>
 8009b04:	3c01      	subs	r4, #1
 8009b06:	00a3      	lsls	r3, r4, #2
 8009b08:	f100 0514 	add.w	r5, r0, #20
 8009b0c:	f101 0814 	add.w	r8, r1, #20
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b20:	3301      	adds	r3, #1
 8009b22:	429a      	cmp	r2, r3
 8009b24:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b2c:	d32e      	bcc.n	8009b8c <quorem+0x96>
 8009b2e:	f04f 0a00 	mov.w	sl, #0
 8009b32:	46c4      	mov	ip, r8
 8009b34:	46ae      	mov	lr, r5
 8009b36:	46d3      	mov	fp, sl
 8009b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b3c:	b298      	uxth	r0, r3
 8009b3e:	fb06 a000 	mla	r0, r6, r0, sl
 8009b42:	0c1b      	lsrs	r3, r3, #16
 8009b44:	0c02      	lsrs	r2, r0, #16
 8009b46:	fb06 2303 	mla	r3, r6, r3, r2
 8009b4a:	f8de 2000 	ldr.w	r2, [lr]
 8009b4e:	b280      	uxth	r0, r0
 8009b50:	b292      	uxth	r2, r2
 8009b52:	1a12      	subs	r2, r2, r0
 8009b54:	445a      	add	r2, fp
 8009b56:	f8de 0000 	ldr.w	r0, [lr]
 8009b5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b64:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b68:	b292      	uxth	r2, r2
 8009b6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b6e:	45e1      	cmp	r9, ip
 8009b70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b74:	f84e 2b04 	str.w	r2, [lr], #4
 8009b78:	d2de      	bcs.n	8009b38 <quorem+0x42>
 8009b7a:	9b00      	ldr	r3, [sp, #0]
 8009b7c:	58eb      	ldr	r3, [r5, r3]
 8009b7e:	b92b      	cbnz	r3, 8009b8c <quorem+0x96>
 8009b80:	9b01      	ldr	r3, [sp, #4]
 8009b82:	3b04      	subs	r3, #4
 8009b84:	429d      	cmp	r5, r3
 8009b86:	461a      	mov	r2, r3
 8009b88:	d32f      	bcc.n	8009bea <quorem+0xf4>
 8009b8a:	613c      	str	r4, [r7, #16]
 8009b8c:	4638      	mov	r0, r7
 8009b8e:	f001 f979 	bl	800ae84 <__mcmp>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	db25      	blt.n	8009be2 <quorem+0xec>
 8009b96:	4629      	mov	r1, r5
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b9e:	f8d1 c000 	ldr.w	ip, [r1]
 8009ba2:	fa1f fe82 	uxth.w	lr, r2
 8009ba6:	fa1f f38c 	uxth.w	r3, ip
 8009baa:	eba3 030e 	sub.w	r3, r3, lr
 8009bae:	4403      	add	r3, r0
 8009bb0:	0c12      	lsrs	r2, r2, #16
 8009bb2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009bb6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bc0:	45c1      	cmp	r9, r8
 8009bc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009bc6:	f841 3b04 	str.w	r3, [r1], #4
 8009bca:	d2e6      	bcs.n	8009b9a <quorem+0xa4>
 8009bcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bd4:	b922      	cbnz	r2, 8009be0 <quorem+0xea>
 8009bd6:	3b04      	subs	r3, #4
 8009bd8:	429d      	cmp	r5, r3
 8009bda:	461a      	mov	r2, r3
 8009bdc:	d30b      	bcc.n	8009bf6 <quorem+0x100>
 8009bde:	613c      	str	r4, [r7, #16]
 8009be0:	3601      	adds	r6, #1
 8009be2:	4630      	mov	r0, r6
 8009be4:	b003      	add	sp, #12
 8009be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bea:	6812      	ldr	r2, [r2, #0]
 8009bec:	3b04      	subs	r3, #4
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	d1cb      	bne.n	8009b8a <quorem+0x94>
 8009bf2:	3c01      	subs	r4, #1
 8009bf4:	e7c6      	b.n	8009b84 <quorem+0x8e>
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	3b04      	subs	r3, #4
 8009bfa:	2a00      	cmp	r2, #0
 8009bfc:	d1ef      	bne.n	8009bde <quorem+0xe8>
 8009bfe:	3c01      	subs	r4, #1
 8009c00:	e7ea      	b.n	8009bd8 <quorem+0xe2>
 8009c02:	2000      	movs	r0, #0
 8009c04:	e7ee      	b.n	8009be4 <quorem+0xee>
	...

08009c08 <_dtoa_r>:
 8009c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	461d      	mov	r5, r3
 8009c10:	69c7      	ldr	r7, [r0, #28]
 8009c12:	b097      	sub	sp, #92	@ 0x5c
 8009c14:	4683      	mov	fp, r0
 8009c16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009c1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009c1c:	b97f      	cbnz	r7, 8009c3e <_dtoa_r+0x36>
 8009c1e:	2010      	movs	r0, #16
 8009c20:	f000 fe02 	bl	800a828 <malloc>
 8009c24:	4602      	mov	r2, r0
 8009c26:	f8cb 001c 	str.w	r0, [fp, #28]
 8009c2a:	b920      	cbnz	r0, 8009c36 <_dtoa_r+0x2e>
 8009c2c:	21ef      	movs	r1, #239	@ 0xef
 8009c2e:	4ba8      	ldr	r3, [pc, #672]	@ (8009ed0 <_dtoa_r+0x2c8>)
 8009c30:	48a8      	ldr	r0, [pc, #672]	@ (8009ed4 <_dtoa_r+0x2cc>)
 8009c32:	f001 fe1d 	bl	800b870 <__assert_func>
 8009c36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c3a:	6007      	str	r7, [r0, #0]
 8009c3c:	60c7      	str	r7, [r0, #12]
 8009c3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	b159      	cbz	r1, 8009c5e <_dtoa_r+0x56>
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4093      	lsls	r3, r2
 8009c4c:	604a      	str	r2, [r1, #4]
 8009c4e:	608b      	str	r3, [r1, #8]
 8009c50:	4658      	mov	r0, fp
 8009c52:	f000 fedf 	bl	800aa14 <_Bfree>
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	1e2b      	subs	r3, r5, #0
 8009c60:	bfaf      	iteee	ge
 8009c62:	2300      	movge	r3, #0
 8009c64:	2201      	movlt	r2, #1
 8009c66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c6a:	9303      	strlt	r3, [sp, #12]
 8009c6c:	bfa8      	it	ge
 8009c6e:	6033      	strge	r3, [r6, #0]
 8009c70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c74:	4b98      	ldr	r3, [pc, #608]	@ (8009ed8 <_dtoa_r+0x2d0>)
 8009c76:	bfb8      	it	lt
 8009c78:	6032      	strlt	r2, [r6, #0]
 8009c7a:	ea33 0308 	bics.w	r3, r3, r8
 8009c7e:	d112      	bne.n	8009ca6 <_dtoa_r+0x9e>
 8009c80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009c8c:	4323      	orrs	r3, r4
 8009c8e:	f000 8550 	beq.w	800a732 <_dtoa_r+0xb2a>
 8009c92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009c94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009edc <_dtoa_r+0x2d4>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 8552 	beq.w	800a742 <_dtoa_r+0xb3a>
 8009c9e:	f10a 0303 	add.w	r3, sl, #3
 8009ca2:	f000 bd4c 	b.w	800a73e <_dtoa_r+0xb36>
 8009ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009caa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f7f6 fe77 	bl	80009a8 <__aeabi_dcmpeq>
 8009cba:	4607      	mov	r7, r0
 8009cbc:	b158      	cbz	r0, 8009cd6 <_dtoa_r+0xce>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009cc6:	b113      	cbz	r3, 8009cce <_dtoa_r+0xc6>
 8009cc8:	4b85      	ldr	r3, [pc, #532]	@ (8009ee0 <_dtoa_r+0x2d8>)
 8009cca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009ee4 <_dtoa_r+0x2dc>
 8009cd2:	f000 bd36 	b.w	800a742 <_dtoa_r+0xb3a>
 8009cd6:	ab14      	add	r3, sp, #80	@ 0x50
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	ab15      	add	r3, sp, #84	@ 0x54
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	4658      	mov	r0, fp
 8009ce0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ce4:	f001 f97e 	bl	800afe4 <__d2b>
 8009ce8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009cec:	4681      	mov	r9, r0
 8009cee:	2e00      	cmp	r6, #0
 8009cf0:	d077      	beq.n	8009de2 <_dtoa_r+0x1da>
 8009cf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cf8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d08:	9712      	str	r7, [sp, #72]	@ 0x48
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4b76      	ldr	r3, [pc, #472]	@ (8009ee8 <_dtoa_r+0x2e0>)
 8009d10:	f7f6 fa2a 	bl	8000168 <__aeabi_dsub>
 8009d14:	a368      	add	r3, pc, #416	@ (adr r3, 8009eb8 <_dtoa_r+0x2b0>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fbdd 	bl	80004d8 <__aeabi_dmul>
 8009d1e:	a368      	add	r3, pc, #416	@ (adr r3, 8009ec0 <_dtoa_r+0x2b8>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fa22 	bl	800016c <__adddf3>
 8009d28:	4604      	mov	r4, r0
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	460d      	mov	r5, r1
 8009d2e:	f7f6 fb69 	bl	8000404 <__aeabi_i2d>
 8009d32:	a365      	add	r3, pc, #404	@ (adr r3, 8009ec8 <_dtoa_r+0x2c0>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 fbce 	bl	80004d8 <__aeabi_dmul>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4620      	mov	r0, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	f7f6 fa12 	bl	800016c <__adddf3>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	460d      	mov	r5, r1
 8009d4c:	f7f6 fe74 	bl	8000a38 <__aeabi_d2iz>
 8009d50:	2200      	movs	r2, #0
 8009d52:	4607      	mov	r7, r0
 8009d54:	2300      	movs	r3, #0
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fe2f 	bl	80009bc <__aeabi_dcmplt>
 8009d5e:	b140      	cbz	r0, 8009d72 <_dtoa_r+0x16a>
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7f6 fb4f 	bl	8000404 <__aeabi_i2d>
 8009d66:	4622      	mov	r2, r4
 8009d68:	462b      	mov	r3, r5
 8009d6a:	f7f6 fe1d 	bl	80009a8 <__aeabi_dcmpeq>
 8009d6e:	b900      	cbnz	r0, 8009d72 <_dtoa_r+0x16a>
 8009d70:	3f01      	subs	r7, #1
 8009d72:	2f16      	cmp	r7, #22
 8009d74:	d853      	bhi.n	8009e1e <_dtoa_r+0x216>
 8009d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8009eec <_dtoa_r+0x2e4>)
 8009d7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	f7f6 fe1a 	bl	80009bc <__aeabi_dcmplt>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d04a      	beq.n	8009e22 <_dtoa_r+0x21a>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	3f01      	subs	r7, #1
 8009d90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d94:	1b9b      	subs	r3, r3, r6
 8009d96:	1e5a      	subs	r2, r3, #1
 8009d98:	bf46      	itte	mi
 8009d9a:	f1c3 0801 	rsbmi	r8, r3, #1
 8009d9e:	2300      	movmi	r3, #0
 8009da0:	f04f 0800 	movpl.w	r8, #0
 8009da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009da6:	bf48      	it	mi
 8009da8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009daa:	2f00      	cmp	r7, #0
 8009dac:	db3b      	blt.n	8009e26 <_dtoa_r+0x21e>
 8009dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db0:	970e      	str	r7, [sp, #56]	@ 0x38
 8009db2:	443b      	add	r3, r7
 8009db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db6:	2300      	movs	r3, #0
 8009db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009dbc:	2b09      	cmp	r3, #9
 8009dbe:	d866      	bhi.n	8009e8e <_dtoa_r+0x286>
 8009dc0:	2b05      	cmp	r3, #5
 8009dc2:	bfc4      	itt	gt
 8009dc4:	3b04      	subgt	r3, #4
 8009dc6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009dc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009dca:	bfc8      	it	gt
 8009dcc:	2400      	movgt	r4, #0
 8009dce:	f1a3 0302 	sub.w	r3, r3, #2
 8009dd2:	bfd8      	it	le
 8009dd4:	2401      	movle	r4, #1
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d864      	bhi.n	8009ea4 <_dtoa_r+0x29c>
 8009dda:	e8df f003 	tbb	[pc, r3]
 8009dde:	382b      	.short	0x382b
 8009de0:	5636      	.short	0x5636
 8009de2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009de6:	441e      	add	r6, r3
 8009de8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	bfc1      	itttt	gt
 8009df0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009df4:	fa08 f803 	lslgt.w	r8, r8, r3
 8009df8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009dfc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e00:	bfd6      	itet	le
 8009e02:	f1c3 0320 	rsble	r3, r3, #32
 8009e06:	ea48 0003 	orrgt.w	r0, r8, r3
 8009e0a:	fa04 f003 	lslle.w	r0, r4, r3
 8009e0e:	f7f6 fae9 	bl	80003e4 <__aeabi_ui2d>
 8009e12:	2201      	movs	r2, #1
 8009e14:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e18:	3e01      	subs	r6, #1
 8009e1a:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e1c:	e775      	b.n	8009d0a <_dtoa_r+0x102>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e7b6      	b.n	8009d90 <_dtoa_r+0x188>
 8009e22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009e24:	e7b5      	b.n	8009d92 <_dtoa_r+0x18a>
 8009e26:	427b      	negs	r3, r7
 8009e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	eba8 0807 	sub.w	r8, r8, r7
 8009e30:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e32:	e7c2      	b.n	8009dba <_dtoa_r+0x1b2>
 8009e34:	2300      	movs	r3, #0
 8009e36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	dc35      	bgt.n	8009eaa <_dtoa_r+0x2a2>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	461a      	mov	r2, r3
 8009e42:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009e46:	9221      	str	r2, [sp, #132]	@ 0x84
 8009e48:	e00b      	b.n	8009e62 <_dtoa_r+0x25a>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e7f3      	b.n	8009e36 <_dtoa_r+0x22e>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e54:	18fb      	adds	r3, r7, r3
 8009e56:	9308      	str	r3, [sp, #32]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	9307      	str	r3, [sp, #28]
 8009e5e:	bfb8      	it	lt
 8009e60:	2301      	movlt	r3, #1
 8009e62:	2100      	movs	r1, #0
 8009e64:	2204      	movs	r2, #4
 8009e66:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009e6a:	f102 0514 	add.w	r5, r2, #20
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	d91f      	bls.n	8009eb2 <_dtoa_r+0x2aa>
 8009e72:	6041      	str	r1, [r0, #4]
 8009e74:	4658      	mov	r0, fp
 8009e76:	f000 fd8d 	bl	800a994 <_Balloc>
 8009e7a:	4682      	mov	sl, r0
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d139      	bne.n	8009ef4 <_dtoa_r+0x2ec>
 8009e80:	4602      	mov	r2, r0
 8009e82:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e86:	4b1a      	ldr	r3, [pc, #104]	@ (8009ef0 <_dtoa_r+0x2e8>)
 8009e88:	e6d2      	b.n	8009c30 <_dtoa_r+0x28>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e7e0      	b.n	8009e50 <_dtoa_r+0x248>
 8009e8e:	2401      	movs	r4, #1
 8009e90:	2300      	movs	r3, #0
 8009e92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e94:	9320      	str	r3, [sp, #128]	@ 0x80
 8009e96:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ea0:	2312      	movs	r3, #18
 8009ea2:	e7d0      	b.n	8009e46 <_dtoa_r+0x23e>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ea8:	e7f5      	b.n	8009e96 <_dtoa_r+0x28e>
 8009eaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009eac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009eb0:	e7d7      	b.n	8009e62 <_dtoa_r+0x25a>
 8009eb2:	3101      	adds	r1, #1
 8009eb4:	0052      	lsls	r2, r2, #1
 8009eb6:	e7d8      	b.n	8009e6a <_dtoa_r+0x262>
 8009eb8:	636f4361 	.word	0x636f4361
 8009ebc:	3fd287a7 	.word	0x3fd287a7
 8009ec0:	8b60c8b3 	.word	0x8b60c8b3
 8009ec4:	3fc68a28 	.word	0x3fc68a28
 8009ec8:	509f79fb 	.word	0x509f79fb
 8009ecc:	3fd34413 	.word	0x3fd34413
 8009ed0:	0800bc7b 	.word	0x0800bc7b
 8009ed4:	0800bc92 	.word	0x0800bc92
 8009ed8:	7ff00000 	.word	0x7ff00000
 8009edc:	0800bc77 	.word	0x0800bc77
 8009ee0:	0800bc4b 	.word	0x0800bc4b
 8009ee4:	0800bc4a 	.word	0x0800bc4a
 8009ee8:	3ff80000 	.word	0x3ff80000
 8009eec:	0800bd88 	.word	0x0800bd88
 8009ef0:	0800bcea 	.word	0x0800bcea
 8009ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ef8:	6018      	str	r0, [r3, #0]
 8009efa:	9b07      	ldr	r3, [sp, #28]
 8009efc:	2b0e      	cmp	r3, #14
 8009efe:	f200 80a4 	bhi.w	800a04a <_dtoa_r+0x442>
 8009f02:	2c00      	cmp	r4, #0
 8009f04:	f000 80a1 	beq.w	800a04a <_dtoa_r+0x442>
 8009f08:	2f00      	cmp	r7, #0
 8009f0a:	dd33      	ble.n	8009f74 <_dtoa_r+0x36c>
 8009f0c:	4b86      	ldr	r3, [pc, #536]	@ (800a128 <_dtoa_r+0x520>)
 8009f0e:	f007 020f 	and.w	r2, r7, #15
 8009f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f16:	05f8      	lsls	r0, r7, #23
 8009f18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f24:	d516      	bpl.n	8009f54 <_dtoa_r+0x34c>
 8009f26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f2a:	4b80      	ldr	r3, [pc, #512]	@ (800a12c <_dtoa_r+0x524>)
 8009f2c:	2603      	movs	r6, #3
 8009f2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f32:	f7f6 fbfb 	bl	800072c <__aeabi_ddiv>
 8009f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f3a:	f004 040f 	and.w	r4, r4, #15
 8009f3e:	4d7b      	ldr	r5, [pc, #492]	@ (800a12c <_dtoa_r+0x524>)
 8009f40:	b954      	cbnz	r4, 8009f58 <_dtoa_r+0x350>
 8009f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f4a:	f7f6 fbef 	bl	800072c <__aeabi_ddiv>
 8009f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f52:	e028      	b.n	8009fa6 <_dtoa_r+0x39e>
 8009f54:	2602      	movs	r6, #2
 8009f56:	e7f2      	b.n	8009f3e <_dtoa_r+0x336>
 8009f58:	07e1      	lsls	r1, r4, #31
 8009f5a:	d508      	bpl.n	8009f6e <_dtoa_r+0x366>
 8009f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f64:	f7f6 fab8 	bl	80004d8 <__aeabi_dmul>
 8009f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f6c:	3601      	adds	r6, #1
 8009f6e:	1064      	asrs	r4, r4, #1
 8009f70:	3508      	adds	r5, #8
 8009f72:	e7e5      	b.n	8009f40 <_dtoa_r+0x338>
 8009f74:	f000 80d2 	beq.w	800a11c <_dtoa_r+0x514>
 8009f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f7c:	427c      	negs	r4, r7
 8009f7e:	4b6a      	ldr	r3, [pc, #424]	@ (800a128 <_dtoa_r+0x520>)
 8009f80:	f004 020f 	and.w	r2, r4, #15
 8009f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 faa4 	bl	80004d8 <__aeabi_dmul>
 8009f90:	2602      	movs	r6, #2
 8009f92:	2300      	movs	r3, #0
 8009f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f98:	4d64      	ldr	r5, [pc, #400]	@ (800a12c <_dtoa_r+0x524>)
 8009f9a:	1124      	asrs	r4, r4, #4
 8009f9c:	2c00      	cmp	r4, #0
 8009f9e:	f040 80b2 	bne.w	800a106 <_dtoa_r+0x4fe>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1d3      	bne.n	8009f4e <_dtoa_r+0x346>
 8009fa6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009faa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 80b7 	beq.w	800a120 <_dtoa_r+0x518>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	4b5d      	ldr	r3, [pc, #372]	@ (800a130 <_dtoa_r+0x528>)
 8009fba:	f7f6 fcff 	bl	80009bc <__aeabi_dcmplt>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	f000 80ae 	beq.w	800a120 <_dtoa_r+0x518>
 8009fc4:	9b07      	ldr	r3, [sp, #28]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 80aa 	beq.w	800a120 <_dtoa_r+0x518>
 8009fcc:	9b08      	ldr	r3, [sp, #32]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dd37      	ble.n	800a042 <_dtoa_r+0x43a>
 8009fd2:	1e7b      	subs	r3, r7, #1
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	9304      	str	r3, [sp, #16]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4629      	mov	r1, r5
 8009fdc:	4b55      	ldr	r3, [pc, #340]	@ (800a134 <_dtoa_r+0x52c>)
 8009fde:	f7f6 fa7b 	bl	80004d8 <__aeabi_dmul>
 8009fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe6:	9c08      	ldr	r4, [sp, #32]
 8009fe8:	3601      	adds	r6, #1
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7f6 fa0a 	bl	8000404 <__aeabi_i2d>
 8009ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ff4:	f7f6 fa70 	bl	80004d8 <__aeabi_dmul>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4b4f      	ldr	r3, [pc, #316]	@ (800a138 <_dtoa_r+0x530>)
 8009ffc:	f7f6 f8b6 	bl	800016c <__adddf3>
 800a000:	4605      	mov	r5, r0
 800a002:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a006:	2c00      	cmp	r4, #0
 800a008:	f040 809a 	bne.w	800a140 <_dtoa_r+0x538>
 800a00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a010:	2200      	movs	r2, #0
 800a012:	4b4a      	ldr	r3, [pc, #296]	@ (800a13c <_dtoa_r+0x534>)
 800a014:	f7f6 f8a8 	bl	8000168 <__aeabi_dsub>
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a020:	462a      	mov	r2, r5
 800a022:	4633      	mov	r3, r6
 800a024:	f7f6 fce8 	bl	80009f8 <__aeabi_dcmpgt>
 800a028:	2800      	cmp	r0, #0
 800a02a:	f040 828e 	bne.w	800a54a <_dtoa_r+0x942>
 800a02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a032:	462a      	mov	r2, r5
 800a034:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a038:	f7f6 fcc0 	bl	80009bc <__aeabi_dcmplt>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	f040 8127 	bne.w	800a290 <_dtoa_r+0x688>
 800a042:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a046:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a04a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f2c0 8163 	blt.w	800a318 <_dtoa_r+0x710>
 800a052:	2f0e      	cmp	r7, #14
 800a054:	f300 8160 	bgt.w	800a318 <_dtoa_r+0x710>
 800a058:	4b33      	ldr	r3, [pc, #204]	@ (800a128 <_dtoa_r+0x520>)
 800a05a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a05e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a062:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a066:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a068:	2b00      	cmp	r3, #0
 800a06a:	da03      	bge.n	800a074 <_dtoa_r+0x46c>
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f340 8100 	ble.w	800a274 <_dtoa_r+0x66c>
 800a074:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a078:	4656      	mov	r6, sl
 800a07a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7f6 fb53 	bl	800072c <__aeabi_ddiv>
 800a086:	f7f6 fcd7 	bl	8000a38 <__aeabi_d2iz>
 800a08a:	4680      	mov	r8, r0
 800a08c:	f7f6 f9ba 	bl	8000404 <__aeabi_i2d>
 800a090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a094:	f7f6 fa20 	bl	80004d8 <__aeabi_dmul>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4620      	mov	r0, r4
 800a09e:	4629      	mov	r1, r5
 800a0a0:	f7f6 f862 	bl	8000168 <__aeabi_dsub>
 800a0a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a0a8:	9d07      	ldr	r5, [sp, #28]
 800a0aa:	f806 4b01 	strb.w	r4, [r6], #1
 800a0ae:	eba6 040a 	sub.w	r4, r6, sl
 800a0b2:	42a5      	cmp	r5, r4
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	f040 8116 	bne.w	800a2e8 <_dtoa_r+0x6e0>
 800a0bc:	f7f6 f856 	bl	800016c <__adddf3>
 800a0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	f7f6 fc96 	bl	80009f8 <__aeabi_dcmpgt>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f040 80f8 	bne.w	800a2c2 <_dtoa_r+0x6ba>
 800a0d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 fc65 	bl	80009a8 <__aeabi_dcmpeq>
 800a0de:	b118      	cbz	r0, 800a0e8 <_dtoa_r+0x4e0>
 800a0e0:	f018 0f01 	tst.w	r8, #1
 800a0e4:	f040 80ed 	bne.w	800a2c2 <_dtoa_r+0x6ba>
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	4658      	mov	r0, fp
 800a0ec:	f000 fc92 	bl	800aa14 <_Bfree>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	7033      	strb	r3, [r6, #0]
 800a0f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a0f6:	3701      	adds	r7, #1
 800a0f8:	601f      	str	r7, [r3, #0]
 800a0fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8320 	beq.w	800a742 <_dtoa_r+0xb3a>
 800a102:	601e      	str	r6, [r3, #0]
 800a104:	e31d      	b.n	800a742 <_dtoa_r+0xb3a>
 800a106:	07e2      	lsls	r2, r4, #31
 800a108:	d505      	bpl.n	800a116 <_dtoa_r+0x50e>
 800a10a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a10e:	f7f6 f9e3 	bl	80004d8 <__aeabi_dmul>
 800a112:	2301      	movs	r3, #1
 800a114:	3601      	adds	r6, #1
 800a116:	1064      	asrs	r4, r4, #1
 800a118:	3508      	adds	r5, #8
 800a11a:	e73f      	b.n	8009f9c <_dtoa_r+0x394>
 800a11c:	2602      	movs	r6, #2
 800a11e:	e742      	b.n	8009fa6 <_dtoa_r+0x39e>
 800a120:	9c07      	ldr	r4, [sp, #28]
 800a122:	9704      	str	r7, [sp, #16]
 800a124:	e761      	b.n	8009fea <_dtoa_r+0x3e2>
 800a126:	bf00      	nop
 800a128:	0800bd88 	.word	0x0800bd88
 800a12c:	0800bd60 	.word	0x0800bd60
 800a130:	3ff00000 	.word	0x3ff00000
 800a134:	40240000 	.word	0x40240000
 800a138:	401c0000 	.word	0x401c0000
 800a13c:	40140000 	.word	0x40140000
 800a140:	4b70      	ldr	r3, [pc, #448]	@ (800a304 <_dtoa_r+0x6fc>)
 800a142:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a14c:	4454      	add	r4, sl
 800a14e:	2900      	cmp	r1, #0
 800a150:	d045      	beq.n	800a1de <_dtoa_r+0x5d6>
 800a152:	2000      	movs	r0, #0
 800a154:	496c      	ldr	r1, [pc, #432]	@ (800a308 <_dtoa_r+0x700>)
 800a156:	f7f6 fae9 	bl	800072c <__aeabi_ddiv>
 800a15a:	4633      	mov	r3, r6
 800a15c:	462a      	mov	r2, r5
 800a15e:	f7f6 f803 	bl	8000168 <__aeabi_dsub>
 800a162:	4656      	mov	r6, sl
 800a164:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a16c:	f7f6 fc64 	bl	8000a38 <__aeabi_d2iz>
 800a170:	4605      	mov	r5, r0
 800a172:	f7f6 f947 	bl	8000404 <__aeabi_i2d>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a17e:	f7f5 fff3 	bl	8000168 <__aeabi_dsub>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	3530      	adds	r5, #48	@ 0x30
 800a188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a18c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a190:	f806 5b01 	strb.w	r5, [r6], #1
 800a194:	f7f6 fc12 	bl	80009bc <__aeabi_dcmplt>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d163      	bne.n	800a264 <_dtoa_r+0x65c>
 800a19c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	495a      	ldr	r1, [pc, #360]	@ (800a30c <_dtoa_r+0x704>)
 800a1a4:	f7f5 ffe0 	bl	8000168 <__aeabi_dsub>
 800a1a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1ac:	f7f6 fc06 	bl	80009bc <__aeabi_dcmplt>
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	f040 8087 	bne.w	800a2c4 <_dtoa_r+0x6bc>
 800a1b6:	42a6      	cmp	r6, r4
 800a1b8:	f43f af43 	beq.w	800a042 <_dtoa_r+0x43a>
 800a1bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	4b53      	ldr	r3, [pc, #332]	@ (800a310 <_dtoa_r+0x708>)
 800a1c4:	f7f6 f988 	bl	80004d8 <__aeabi_dmul>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800a310 <_dtoa_r+0x708>)
 800a1d4:	f7f6 f980 	bl	80004d8 <__aeabi_dmul>
 800a1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1dc:	e7c4      	b.n	800a168 <_dtoa_r+0x560>
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	4656      	mov	r6, sl
 800a1e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f2:	f7f6 fc21 	bl	8000a38 <__aeabi_d2iz>
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	f7f6 f904 	bl	8000404 <__aeabi_i2d>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a204:	f7f5 ffb0 	bl	8000168 <__aeabi_dsub>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	3530      	adds	r5, #48	@ 0x30
 800a20e:	f806 5b01 	strb.w	r5, [r6], #1
 800a212:	42a6      	cmp	r6, r4
 800a214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	d124      	bne.n	800a268 <_dtoa_r+0x660>
 800a21e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a222:	4b39      	ldr	r3, [pc, #228]	@ (800a308 <_dtoa_r+0x700>)
 800a224:	f7f5 ffa2 	bl	800016c <__adddf3>
 800a228:	4602      	mov	r2, r0
 800a22a:	460b      	mov	r3, r1
 800a22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a230:	f7f6 fbe2 	bl	80009f8 <__aeabi_dcmpgt>
 800a234:	2800      	cmp	r0, #0
 800a236:	d145      	bne.n	800a2c4 <_dtoa_r+0x6bc>
 800a238:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a23c:	2000      	movs	r0, #0
 800a23e:	4932      	ldr	r1, [pc, #200]	@ (800a308 <_dtoa_r+0x700>)
 800a240:	f7f5 ff92 	bl	8000168 <__aeabi_dsub>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a24c:	f7f6 fbb6 	bl	80009bc <__aeabi_dcmplt>
 800a250:	2800      	cmp	r0, #0
 800a252:	f43f aef6 	beq.w	800a042 <_dtoa_r+0x43a>
 800a256:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a258:	1e73      	subs	r3, r6, #1
 800a25a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a25c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a260:	2b30      	cmp	r3, #48	@ 0x30
 800a262:	d0f8      	beq.n	800a256 <_dtoa_r+0x64e>
 800a264:	9f04      	ldr	r7, [sp, #16]
 800a266:	e73f      	b.n	800a0e8 <_dtoa_r+0x4e0>
 800a268:	4b29      	ldr	r3, [pc, #164]	@ (800a310 <_dtoa_r+0x708>)
 800a26a:	f7f6 f935 	bl	80004d8 <__aeabi_dmul>
 800a26e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a272:	e7bc      	b.n	800a1ee <_dtoa_r+0x5e6>
 800a274:	d10c      	bne.n	800a290 <_dtoa_r+0x688>
 800a276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a27a:	2200      	movs	r2, #0
 800a27c:	4b25      	ldr	r3, [pc, #148]	@ (800a314 <_dtoa_r+0x70c>)
 800a27e:	f7f6 f92b 	bl	80004d8 <__aeabi_dmul>
 800a282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a286:	f7f6 fbad 	bl	80009e4 <__aeabi_dcmpge>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f000 815b 	beq.w	800a546 <_dtoa_r+0x93e>
 800a290:	2400      	movs	r4, #0
 800a292:	4625      	mov	r5, r4
 800a294:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a296:	4656      	mov	r6, sl
 800a298:	43db      	mvns	r3, r3
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	2700      	movs	r7, #0
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4658      	mov	r0, fp
 800a2a2:	f000 fbb7 	bl	800aa14 <_Bfree>
 800a2a6:	2d00      	cmp	r5, #0
 800a2a8:	d0dc      	beq.n	800a264 <_dtoa_r+0x65c>
 800a2aa:	b12f      	cbz	r7, 800a2b8 <_dtoa_r+0x6b0>
 800a2ac:	42af      	cmp	r7, r5
 800a2ae:	d003      	beq.n	800a2b8 <_dtoa_r+0x6b0>
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	4658      	mov	r0, fp
 800a2b4:	f000 fbae 	bl	800aa14 <_Bfree>
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4658      	mov	r0, fp
 800a2bc:	f000 fbaa 	bl	800aa14 <_Bfree>
 800a2c0:	e7d0      	b.n	800a264 <_dtoa_r+0x65c>
 800a2c2:	9704      	str	r7, [sp, #16]
 800a2c4:	4633      	mov	r3, r6
 800a2c6:	461e      	mov	r6, r3
 800a2c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2cc:	2a39      	cmp	r2, #57	@ 0x39
 800a2ce:	d107      	bne.n	800a2e0 <_dtoa_r+0x6d8>
 800a2d0:	459a      	cmp	sl, r3
 800a2d2:	d1f8      	bne.n	800a2c6 <_dtoa_r+0x6be>
 800a2d4:	9a04      	ldr	r2, [sp, #16]
 800a2d6:	3201      	adds	r2, #1
 800a2d8:	9204      	str	r2, [sp, #16]
 800a2da:	2230      	movs	r2, #48	@ 0x30
 800a2dc:	f88a 2000 	strb.w	r2, [sl]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	e7bd      	b.n	800a264 <_dtoa_r+0x65c>
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	4b09      	ldr	r3, [pc, #36]	@ (800a310 <_dtoa_r+0x708>)
 800a2ec:	f7f6 f8f4 	bl	80004d8 <__aeabi_dmul>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	f7f6 fb56 	bl	80009a8 <__aeabi_dcmpeq>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	f43f aebc 	beq.w	800a07a <_dtoa_r+0x472>
 800a302:	e6f1      	b.n	800a0e8 <_dtoa_r+0x4e0>
 800a304:	0800bd88 	.word	0x0800bd88
 800a308:	3fe00000 	.word	0x3fe00000
 800a30c:	3ff00000 	.word	0x3ff00000
 800a310:	40240000 	.word	0x40240000
 800a314:	40140000 	.word	0x40140000
 800a318:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	f000 80db 	beq.w	800a4d6 <_dtoa_r+0x8ce>
 800a320:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a322:	2a01      	cmp	r2, #1
 800a324:	f300 80bf 	bgt.w	800a4a6 <_dtoa_r+0x89e>
 800a328:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	f000 80b7 	beq.w	800a49e <_dtoa_r+0x896>
 800a330:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a334:	4646      	mov	r6, r8
 800a336:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a33a:	2101      	movs	r1, #1
 800a33c:	441a      	add	r2, r3
 800a33e:	4658      	mov	r0, fp
 800a340:	4498      	add	r8, r3
 800a342:	9209      	str	r2, [sp, #36]	@ 0x24
 800a344:	f000 fc1a 	bl	800ab7c <__i2b>
 800a348:	4605      	mov	r5, r0
 800a34a:	b15e      	cbz	r6, 800a364 <_dtoa_r+0x75c>
 800a34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	dd08      	ble.n	800a364 <_dtoa_r+0x75c>
 800a352:	42b3      	cmp	r3, r6
 800a354:	bfa8      	it	ge
 800a356:	4633      	movge	r3, r6
 800a358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a35a:	eba8 0803 	sub.w	r8, r8, r3
 800a35e:	1af6      	subs	r6, r6, r3
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	9309      	str	r3, [sp, #36]	@ 0x24
 800a364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a366:	b1f3      	cbz	r3, 800a3a6 <_dtoa_r+0x79e>
 800a368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 80b7 	beq.w	800a4de <_dtoa_r+0x8d6>
 800a370:	b18c      	cbz	r4, 800a396 <_dtoa_r+0x78e>
 800a372:	4629      	mov	r1, r5
 800a374:	4622      	mov	r2, r4
 800a376:	4658      	mov	r0, fp
 800a378:	f000 fcbe 	bl	800acf8 <__pow5mult>
 800a37c:	464a      	mov	r2, r9
 800a37e:	4601      	mov	r1, r0
 800a380:	4605      	mov	r5, r0
 800a382:	4658      	mov	r0, fp
 800a384:	f000 fc10 	bl	800aba8 <__multiply>
 800a388:	4649      	mov	r1, r9
 800a38a:	9004      	str	r0, [sp, #16]
 800a38c:	4658      	mov	r0, fp
 800a38e:	f000 fb41 	bl	800aa14 <_Bfree>
 800a392:	9b04      	ldr	r3, [sp, #16]
 800a394:	4699      	mov	r9, r3
 800a396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a398:	1b1a      	subs	r2, r3, r4
 800a39a:	d004      	beq.n	800a3a6 <_dtoa_r+0x79e>
 800a39c:	4649      	mov	r1, r9
 800a39e:	4658      	mov	r0, fp
 800a3a0:	f000 fcaa 	bl	800acf8 <__pow5mult>
 800a3a4:	4681      	mov	r9, r0
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	4658      	mov	r0, fp
 800a3aa:	f000 fbe7 	bl	800ab7c <__i2b>
 800a3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 81c9 	beq.w	800a74a <_dtoa_r+0xb42>
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	4658      	mov	r0, fp
 800a3be:	f000 fc9b 	bl	800acf8 <__pow5mult>
 800a3c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	f300 808f 	bgt.w	800a4ea <_dtoa_r+0x8e2>
 800a3cc:	9b02      	ldr	r3, [sp, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f040 8087 	bne.w	800a4e2 <_dtoa_r+0x8da>
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f040 8083 	bne.w	800a4e6 <_dtoa_r+0x8de>
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3e6:	0d1b      	lsrs	r3, r3, #20
 800a3e8:	051b      	lsls	r3, r3, #20
 800a3ea:	b12b      	cbz	r3, 800a3f8 <_dtoa_r+0x7f0>
 800a3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ee:	f108 0801 	add.w	r8, r8, #1
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 81aa 	beq.w	800a756 <_dtoa_r+0xb4e>
 800a402:	6923      	ldr	r3, [r4, #16]
 800a404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a408:	6918      	ldr	r0, [r3, #16]
 800a40a:	f000 fb6b 	bl	800aae4 <__hi0bits>
 800a40e:	f1c0 0020 	rsb	r0, r0, #32
 800a412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a414:	4418      	add	r0, r3
 800a416:	f010 001f 	ands.w	r0, r0, #31
 800a41a:	d071      	beq.n	800a500 <_dtoa_r+0x8f8>
 800a41c:	f1c0 0320 	rsb	r3, r0, #32
 800a420:	2b04      	cmp	r3, #4
 800a422:	dd65      	ble.n	800a4f0 <_dtoa_r+0x8e8>
 800a424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a426:	f1c0 001c 	rsb	r0, r0, #28
 800a42a:	4403      	add	r3, r0
 800a42c:	4480      	add	r8, r0
 800a42e:	4406      	add	r6, r0
 800a430:	9309      	str	r3, [sp, #36]	@ 0x24
 800a432:	f1b8 0f00 	cmp.w	r8, #0
 800a436:	dd05      	ble.n	800a444 <_dtoa_r+0x83c>
 800a438:	4649      	mov	r1, r9
 800a43a:	4642      	mov	r2, r8
 800a43c:	4658      	mov	r0, fp
 800a43e:	f000 fcb5 	bl	800adac <__lshift>
 800a442:	4681      	mov	r9, r0
 800a444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a446:	2b00      	cmp	r3, #0
 800a448:	dd05      	ble.n	800a456 <_dtoa_r+0x84e>
 800a44a:	4621      	mov	r1, r4
 800a44c:	461a      	mov	r2, r3
 800a44e:	4658      	mov	r0, fp
 800a450:	f000 fcac 	bl	800adac <__lshift>
 800a454:	4604      	mov	r4, r0
 800a456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d053      	beq.n	800a504 <_dtoa_r+0x8fc>
 800a45c:	4621      	mov	r1, r4
 800a45e:	4648      	mov	r0, r9
 800a460:	f000 fd10 	bl	800ae84 <__mcmp>
 800a464:	2800      	cmp	r0, #0
 800a466:	da4d      	bge.n	800a504 <_dtoa_r+0x8fc>
 800a468:	1e7b      	subs	r3, r7, #1
 800a46a:	4649      	mov	r1, r9
 800a46c:	9304      	str	r3, [sp, #16]
 800a46e:	220a      	movs	r2, #10
 800a470:	2300      	movs	r3, #0
 800a472:	4658      	mov	r0, fp
 800a474:	f000 faf0 	bl	800aa58 <__multadd>
 800a478:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a47a:	4681      	mov	r9, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 816c 	beq.w	800a75a <_dtoa_r+0xb52>
 800a482:	2300      	movs	r3, #0
 800a484:	4629      	mov	r1, r5
 800a486:	220a      	movs	r2, #10
 800a488:	4658      	mov	r0, fp
 800a48a:	f000 fae5 	bl	800aa58 <__multadd>
 800a48e:	9b08      	ldr	r3, [sp, #32]
 800a490:	4605      	mov	r5, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	dc61      	bgt.n	800a55a <_dtoa_r+0x952>
 800a496:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a498:	2b02      	cmp	r3, #2
 800a49a:	dc3b      	bgt.n	800a514 <_dtoa_r+0x90c>
 800a49c:	e05d      	b.n	800a55a <_dtoa_r+0x952>
 800a49e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a4a4:	e746      	b.n	800a334 <_dtoa_r+0x72c>
 800a4a6:	9b07      	ldr	r3, [sp, #28]
 800a4a8:	1e5c      	subs	r4, r3, #1
 800a4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4ac:	42a3      	cmp	r3, r4
 800a4ae:	bfbf      	itttt	lt
 800a4b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a4b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a4b4:	1ae3      	sublt	r3, r4, r3
 800a4b6:	18d2      	addlt	r2, r2, r3
 800a4b8:	bfa8      	it	ge
 800a4ba:	1b1c      	subge	r4, r3, r4
 800a4bc:	9b07      	ldr	r3, [sp, #28]
 800a4be:	bfbe      	ittt	lt
 800a4c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a4c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a4c4:	2400      	movlt	r4, #0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfb5      	itete	lt
 800a4ca:	eba8 0603 	sublt.w	r6, r8, r3
 800a4ce:	4646      	movge	r6, r8
 800a4d0:	2300      	movlt	r3, #0
 800a4d2:	9b07      	ldrge	r3, [sp, #28]
 800a4d4:	e730      	b.n	800a338 <_dtoa_r+0x730>
 800a4d6:	4646      	mov	r6, r8
 800a4d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a4da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a4dc:	e735      	b.n	800a34a <_dtoa_r+0x742>
 800a4de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4e0:	e75c      	b.n	800a39c <_dtoa_r+0x794>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e788      	b.n	800a3f8 <_dtoa_r+0x7f0>
 800a4e6:	9b02      	ldr	r3, [sp, #8]
 800a4e8:	e786      	b.n	800a3f8 <_dtoa_r+0x7f0>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4ee:	e788      	b.n	800a402 <_dtoa_r+0x7fa>
 800a4f0:	d09f      	beq.n	800a432 <_dtoa_r+0x82a>
 800a4f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4f4:	331c      	adds	r3, #28
 800a4f6:	441a      	add	r2, r3
 800a4f8:	4498      	add	r8, r3
 800a4fa:	441e      	add	r6, r3
 800a4fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4fe:	e798      	b.n	800a432 <_dtoa_r+0x82a>
 800a500:	4603      	mov	r3, r0
 800a502:	e7f6      	b.n	800a4f2 <_dtoa_r+0x8ea>
 800a504:	9b07      	ldr	r3, [sp, #28]
 800a506:	9704      	str	r7, [sp, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc20      	bgt.n	800a54e <_dtoa_r+0x946>
 800a50c:	9308      	str	r3, [sp, #32]
 800a50e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a510:	2b02      	cmp	r3, #2
 800a512:	dd1e      	ble.n	800a552 <_dtoa_r+0x94a>
 800a514:	9b08      	ldr	r3, [sp, #32]
 800a516:	2b00      	cmp	r3, #0
 800a518:	f47f aebc 	bne.w	800a294 <_dtoa_r+0x68c>
 800a51c:	4621      	mov	r1, r4
 800a51e:	2205      	movs	r2, #5
 800a520:	4658      	mov	r0, fp
 800a522:	f000 fa99 	bl	800aa58 <__multadd>
 800a526:	4601      	mov	r1, r0
 800a528:	4604      	mov	r4, r0
 800a52a:	4648      	mov	r0, r9
 800a52c:	f000 fcaa 	bl	800ae84 <__mcmp>
 800a530:	2800      	cmp	r0, #0
 800a532:	f77f aeaf 	ble.w	800a294 <_dtoa_r+0x68c>
 800a536:	2331      	movs	r3, #49	@ 0x31
 800a538:	4656      	mov	r6, sl
 800a53a:	f806 3b01 	strb.w	r3, [r6], #1
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	3301      	adds	r3, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	e6aa      	b.n	800a29c <_dtoa_r+0x694>
 800a546:	9c07      	ldr	r4, [sp, #28]
 800a548:	9704      	str	r7, [sp, #16]
 800a54a:	4625      	mov	r5, r4
 800a54c:	e7f3      	b.n	800a536 <_dtoa_r+0x92e>
 800a54e:	9b07      	ldr	r3, [sp, #28]
 800a550:	9308      	str	r3, [sp, #32]
 800a552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 8104 	beq.w	800a762 <_dtoa_r+0xb5a>
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	dd05      	ble.n	800a56a <_dtoa_r+0x962>
 800a55e:	4629      	mov	r1, r5
 800a560:	4632      	mov	r2, r6
 800a562:	4658      	mov	r0, fp
 800a564:	f000 fc22 	bl	800adac <__lshift>
 800a568:	4605      	mov	r5, r0
 800a56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d05a      	beq.n	800a626 <_dtoa_r+0xa1e>
 800a570:	4658      	mov	r0, fp
 800a572:	6869      	ldr	r1, [r5, #4]
 800a574:	f000 fa0e 	bl	800a994 <_Balloc>
 800a578:	4606      	mov	r6, r0
 800a57a:	b928      	cbnz	r0, 800a588 <_dtoa_r+0x980>
 800a57c:	4602      	mov	r2, r0
 800a57e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a582:	4b83      	ldr	r3, [pc, #524]	@ (800a790 <_dtoa_r+0xb88>)
 800a584:	f7ff bb54 	b.w	8009c30 <_dtoa_r+0x28>
 800a588:	692a      	ldr	r2, [r5, #16]
 800a58a:	f105 010c 	add.w	r1, r5, #12
 800a58e:	3202      	adds	r2, #2
 800a590:	0092      	lsls	r2, r2, #2
 800a592:	300c      	adds	r0, #12
 800a594:	f7ff faa1 	bl	8009ada <memcpy>
 800a598:	2201      	movs	r2, #1
 800a59a:	4631      	mov	r1, r6
 800a59c:	4658      	mov	r0, fp
 800a59e:	f000 fc05 	bl	800adac <__lshift>
 800a5a2:	462f      	mov	r7, r5
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	f10a 0301 	add.w	r3, sl, #1
 800a5aa:	9307      	str	r3, [sp, #28]
 800a5ac:	9b08      	ldr	r3, [sp, #32]
 800a5ae:	4453      	add	r3, sl
 800a5b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5b2:	9b02      	ldr	r3, [sp, #8]
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5ba:	9b07      	ldr	r3, [sp, #28]
 800a5bc:	4621      	mov	r1, r4
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	4648      	mov	r0, r9
 800a5c2:	9302      	str	r3, [sp, #8]
 800a5c4:	f7ff fa97 	bl	8009af6 <quorem>
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	9008      	str	r0, [sp, #32]
 800a5cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a5d0:	4648      	mov	r0, r9
 800a5d2:	f000 fc57 	bl	800ae84 <__mcmp>
 800a5d6:	462a      	mov	r2, r5
 800a5d8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4658      	mov	r0, fp
 800a5de:	f000 fc6d 	bl	800aebc <__mdiff>
 800a5e2:	68c2      	ldr	r2, [r0, #12]
 800a5e4:	4606      	mov	r6, r0
 800a5e6:	bb02      	cbnz	r2, 800a62a <_dtoa_r+0xa22>
 800a5e8:	4601      	mov	r1, r0
 800a5ea:	4648      	mov	r0, r9
 800a5ec:	f000 fc4a 	bl	800ae84 <__mcmp>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	4658      	mov	r0, fp
 800a5f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a5f8:	f000 fa0c 	bl	800aa14 <_Bfree>
 800a5fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a5fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a600:	9e07      	ldr	r6, [sp, #28]
 800a602:	ea43 0102 	orr.w	r1, r3, r2
 800a606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a608:	4319      	orrs	r1, r3
 800a60a:	d110      	bne.n	800a62e <_dtoa_r+0xa26>
 800a60c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a610:	d029      	beq.n	800a666 <_dtoa_r+0xa5e>
 800a612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	dd02      	ble.n	800a61e <_dtoa_r+0xa16>
 800a618:	9b08      	ldr	r3, [sp, #32]
 800a61a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	f883 8000 	strb.w	r8, [r3]
 800a624:	e63b      	b.n	800a29e <_dtoa_r+0x696>
 800a626:	4628      	mov	r0, r5
 800a628:	e7bb      	b.n	800a5a2 <_dtoa_r+0x99a>
 800a62a:	2201      	movs	r2, #1
 800a62c:	e7e1      	b.n	800a5f2 <_dtoa_r+0x9ea>
 800a62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	db04      	blt.n	800a63e <_dtoa_r+0xa36>
 800a634:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a636:	430b      	orrs	r3, r1
 800a638:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a63a:	430b      	orrs	r3, r1
 800a63c:	d120      	bne.n	800a680 <_dtoa_r+0xa78>
 800a63e:	2a00      	cmp	r2, #0
 800a640:	dded      	ble.n	800a61e <_dtoa_r+0xa16>
 800a642:	4649      	mov	r1, r9
 800a644:	2201      	movs	r2, #1
 800a646:	4658      	mov	r0, fp
 800a648:	f000 fbb0 	bl	800adac <__lshift>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4681      	mov	r9, r0
 800a650:	f000 fc18 	bl	800ae84 <__mcmp>
 800a654:	2800      	cmp	r0, #0
 800a656:	dc03      	bgt.n	800a660 <_dtoa_r+0xa58>
 800a658:	d1e1      	bne.n	800a61e <_dtoa_r+0xa16>
 800a65a:	f018 0f01 	tst.w	r8, #1
 800a65e:	d0de      	beq.n	800a61e <_dtoa_r+0xa16>
 800a660:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a664:	d1d8      	bne.n	800a618 <_dtoa_r+0xa10>
 800a666:	2339      	movs	r3, #57	@ 0x39
 800a668:	9a02      	ldr	r2, [sp, #8]
 800a66a:	7013      	strb	r3, [r2, #0]
 800a66c:	4633      	mov	r3, r6
 800a66e:	461e      	mov	r6, r3
 800a670:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a674:	3b01      	subs	r3, #1
 800a676:	2a39      	cmp	r2, #57	@ 0x39
 800a678:	d052      	beq.n	800a720 <_dtoa_r+0xb18>
 800a67a:	3201      	adds	r2, #1
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	e60e      	b.n	800a29e <_dtoa_r+0x696>
 800a680:	2a00      	cmp	r2, #0
 800a682:	dd07      	ble.n	800a694 <_dtoa_r+0xa8c>
 800a684:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a688:	d0ed      	beq.n	800a666 <_dtoa_r+0xa5e>
 800a68a:	9a02      	ldr	r2, [sp, #8]
 800a68c:	f108 0301 	add.w	r3, r8, #1
 800a690:	7013      	strb	r3, [r2, #0]
 800a692:	e604      	b.n	800a29e <_dtoa_r+0x696>
 800a694:	9b07      	ldr	r3, [sp, #28]
 800a696:	9a07      	ldr	r2, [sp, #28]
 800a698:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a69c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d028      	beq.n	800a6f4 <_dtoa_r+0xaec>
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	220a      	movs	r2, #10
 800a6a8:	4658      	mov	r0, fp
 800a6aa:	f000 f9d5 	bl	800aa58 <__multadd>
 800a6ae:	42af      	cmp	r7, r5
 800a6b0:	4681      	mov	r9, r0
 800a6b2:	f04f 0300 	mov.w	r3, #0
 800a6b6:	f04f 020a 	mov.w	r2, #10
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	4658      	mov	r0, fp
 800a6be:	d107      	bne.n	800a6d0 <_dtoa_r+0xac8>
 800a6c0:	f000 f9ca 	bl	800aa58 <__multadd>
 800a6c4:	4607      	mov	r7, r0
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	9b07      	ldr	r3, [sp, #28]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	9307      	str	r3, [sp, #28]
 800a6ce:	e774      	b.n	800a5ba <_dtoa_r+0x9b2>
 800a6d0:	f000 f9c2 	bl	800aa58 <__multadd>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4607      	mov	r7, r0
 800a6d8:	2300      	movs	r3, #0
 800a6da:	220a      	movs	r2, #10
 800a6dc:	4658      	mov	r0, fp
 800a6de:	f000 f9bb 	bl	800aa58 <__multadd>
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	e7f0      	b.n	800a6c8 <_dtoa_r+0xac0>
 800a6e6:	9b08      	ldr	r3, [sp, #32]
 800a6e8:	2700      	movs	r7, #0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfcc      	ite	gt
 800a6ee:	461e      	movgt	r6, r3
 800a6f0:	2601      	movle	r6, #1
 800a6f2:	4456      	add	r6, sl
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4658      	mov	r0, fp
 800a6fa:	f000 fb57 	bl	800adac <__lshift>
 800a6fe:	4621      	mov	r1, r4
 800a700:	4681      	mov	r9, r0
 800a702:	f000 fbbf 	bl	800ae84 <__mcmp>
 800a706:	2800      	cmp	r0, #0
 800a708:	dcb0      	bgt.n	800a66c <_dtoa_r+0xa64>
 800a70a:	d102      	bne.n	800a712 <_dtoa_r+0xb0a>
 800a70c:	f018 0f01 	tst.w	r8, #1
 800a710:	d1ac      	bne.n	800a66c <_dtoa_r+0xa64>
 800a712:	4633      	mov	r3, r6
 800a714:	461e      	mov	r6, r3
 800a716:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a71a:	2a30      	cmp	r2, #48	@ 0x30
 800a71c:	d0fa      	beq.n	800a714 <_dtoa_r+0xb0c>
 800a71e:	e5be      	b.n	800a29e <_dtoa_r+0x696>
 800a720:	459a      	cmp	sl, r3
 800a722:	d1a4      	bne.n	800a66e <_dtoa_r+0xa66>
 800a724:	9b04      	ldr	r3, [sp, #16]
 800a726:	3301      	adds	r3, #1
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	2331      	movs	r3, #49	@ 0x31
 800a72c:	f88a 3000 	strb.w	r3, [sl]
 800a730:	e5b5      	b.n	800a29e <_dtoa_r+0x696>
 800a732:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a734:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a794 <_dtoa_r+0xb8c>
 800a738:	b11b      	cbz	r3, 800a742 <_dtoa_r+0xb3a>
 800a73a:	f10a 0308 	add.w	r3, sl, #8
 800a73e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	4650      	mov	r0, sl
 800a744:	b017      	add	sp, #92	@ 0x5c
 800a746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a74a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	f77f ae3d 	ble.w	800a3cc <_dtoa_r+0x7c4>
 800a752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a754:	930a      	str	r3, [sp, #40]	@ 0x28
 800a756:	2001      	movs	r0, #1
 800a758:	e65b      	b.n	800a412 <_dtoa_r+0x80a>
 800a75a:	9b08      	ldr	r3, [sp, #32]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f77f aed6 	ble.w	800a50e <_dtoa_r+0x906>
 800a762:	4656      	mov	r6, sl
 800a764:	4621      	mov	r1, r4
 800a766:	4648      	mov	r0, r9
 800a768:	f7ff f9c5 	bl	8009af6 <quorem>
 800a76c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a770:	9b08      	ldr	r3, [sp, #32]
 800a772:	f806 8b01 	strb.w	r8, [r6], #1
 800a776:	eba6 020a 	sub.w	r2, r6, sl
 800a77a:	4293      	cmp	r3, r2
 800a77c:	ddb3      	ble.n	800a6e6 <_dtoa_r+0xade>
 800a77e:	4649      	mov	r1, r9
 800a780:	2300      	movs	r3, #0
 800a782:	220a      	movs	r2, #10
 800a784:	4658      	mov	r0, fp
 800a786:	f000 f967 	bl	800aa58 <__multadd>
 800a78a:	4681      	mov	r9, r0
 800a78c:	e7ea      	b.n	800a764 <_dtoa_r+0xb5c>
 800a78e:	bf00      	nop
 800a790:	0800bcea 	.word	0x0800bcea
 800a794:	0800bc6e 	.word	0x0800bc6e

0800a798 <_free_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4605      	mov	r5, r0
 800a79c:	2900      	cmp	r1, #0
 800a79e:	d040      	beq.n	800a822 <_free_r+0x8a>
 800a7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7a4:	1f0c      	subs	r4, r1, #4
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	bfb8      	it	lt
 800a7aa:	18e4      	addlt	r4, r4, r3
 800a7ac:	f000 f8e6 	bl	800a97c <__malloc_lock>
 800a7b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a824 <_free_r+0x8c>)
 800a7b2:	6813      	ldr	r3, [r2, #0]
 800a7b4:	b933      	cbnz	r3, 800a7c4 <_free_r+0x2c>
 800a7b6:	6063      	str	r3, [r4, #4]
 800a7b8:	6014      	str	r4, [r2, #0]
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c0:	f000 b8e2 	b.w	800a988 <__malloc_unlock>
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	d908      	bls.n	800a7da <_free_r+0x42>
 800a7c8:	6820      	ldr	r0, [r4, #0]
 800a7ca:	1821      	adds	r1, r4, r0
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	bf01      	itttt	eq
 800a7d0:	6819      	ldreq	r1, [r3, #0]
 800a7d2:	685b      	ldreq	r3, [r3, #4]
 800a7d4:	1809      	addeq	r1, r1, r0
 800a7d6:	6021      	streq	r1, [r4, #0]
 800a7d8:	e7ed      	b.n	800a7b6 <_free_r+0x1e>
 800a7da:	461a      	mov	r2, r3
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	b10b      	cbz	r3, 800a7e4 <_free_r+0x4c>
 800a7e0:	42a3      	cmp	r3, r4
 800a7e2:	d9fa      	bls.n	800a7da <_free_r+0x42>
 800a7e4:	6811      	ldr	r1, [r2, #0]
 800a7e6:	1850      	adds	r0, r2, r1
 800a7e8:	42a0      	cmp	r0, r4
 800a7ea:	d10b      	bne.n	800a804 <_free_r+0x6c>
 800a7ec:	6820      	ldr	r0, [r4, #0]
 800a7ee:	4401      	add	r1, r0
 800a7f0:	1850      	adds	r0, r2, r1
 800a7f2:	4283      	cmp	r3, r0
 800a7f4:	6011      	str	r1, [r2, #0]
 800a7f6:	d1e0      	bne.n	800a7ba <_free_r+0x22>
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	4408      	add	r0, r1
 800a7fe:	6010      	str	r0, [r2, #0]
 800a800:	6053      	str	r3, [r2, #4]
 800a802:	e7da      	b.n	800a7ba <_free_r+0x22>
 800a804:	d902      	bls.n	800a80c <_free_r+0x74>
 800a806:	230c      	movs	r3, #12
 800a808:	602b      	str	r3, [r5, #0]
 800a80a:	e7d6      	b.n	800a7ba <_free_r+0x22>
 800a80c:	6820      	ldr	r0, [r4, #0]
 800a80e:	1821      	adds	r1, r4, r0
 800a810:	428b      	cmp	r3, r1
 800a812:	bf01      	itttt	eq
 800a814:	6819      	ldreq	r1, [r3, #0]
 800a816:	685b      	ldreq	r3, [r3, #4]
 800a818:	1809      	addeq	r1, r1, r0
 800a81a:	6021      	streq	r1, [r4, #0]
 800a81c:	6063      	str	r3, [r4, #4]
 800a81e:	6054      	str	r4, [r2, #4]
 800a820:	e7cb      	b.n	800a7ba <_free_r+0x22>
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20004228 	.word	0x20004228

0800a828 <malloc>:
 800a828:	4b02      	ldr	r3, [pc, #8]	@ (800a834 <malloc+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f000 b825 	b.w	800a87c <_malloc_r>
 800a832:	bf00      	nop
 800a834:	2000002c 	.word	0x2000002c

0800a838 <sbrk_aligned>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	4e0f      	ldr	r6, [pc, #60]	@ (800a878 <sbrk_aligned+0x40>)
 800a83c:	460c      	mov	r4, r1
 800a83e:	6831      	ldr	r1, [r6, #0]
 800a840:	4605      	mov	r5, r0
 800a842:	b911      	cbnz	r1, 800a84a <sbrk_aligned+0x12>
 800a844:	f001 f804 	bl	800b850 <_sbrk_r>
 800a848:	6030      	str	r0, [r6, #0]
 800a84a:	4621      	mov	r1, r4
 800a84c:	4628      	mov	r0, r5
 800a84e:	f000 ffff 	bl	800b850 <_sbrk_r>
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	d103      	bne.n	800a85e <sbrk_aligned+0x26>
 800a856:	f04f 34ff 	mov.w	r4, #4294967295
 800a85a:	4620      	mov	r0, r4
 800a85c:	bd70      	pop	{r4, r5, r6, pc}
 800a85e:	1cc4      	adds	r4, r0, #3
 800a860:	f024 0403 	bic.w	r4, r4, #3
 800a864:	42a0      	cmp	r0, r4
 800a866:	d0f8      	beq.n	800a85a <sbrk_aligned+0x22>
 800a868:	1a21      	subs	r1, r4, r0
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 fff0 	bl	800b850 <_sbrk_r>
 800a870:	3001      	adds	r0, #1
 800a872:	d1f2      	bne.n	800a85a <sbrk_aligned+0x22>
 800a874:	e7ef      	b.n	800a856 <sbrk_aligned+0x1e>
 800a876:	bf00      	nop
 800a878:	20004224 	.word	0x20004224

0800a87c <_malloc_r>:
 800a87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a880:	1ccd      	adds	r5, r1, #3
 800a882:	f025 0503 	bic.w	r5, r5, #3
 800a886:	3508      	adds	r5, #8
 800a888:	2d0c      	cmp	r5, #12
 800a88a:	bf38      	it	cc
 800a88c:	250c      	movcc	r5, #12
 800a88e:	2d00      	cmp	r5, #0
 800a890:	4606      	mov	r6, r0
 800a892:	db01      	blt.n	800a898 <_malloc_r+0x1c>
 800a894:	42a9      	cmp	r1, r5
 800a896:	d904      	bls.n	800a8a2 <_malloc_r+0x26>
 800a898:	230c      	movs	r3, #12
 800a89a:	6033      	str	r3, [r6, #0]
 800a89c:	2000      	movs	r0, #0
 800a89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a978 <_malloc_r+0xfc>
 800a8a6:	f000 f869 	bl	800a97c <__malloc_lock>
 800a8aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ae:	461c      	mov	r4, r3
 800a8b0:	bb44      	cbnz	r4, 800a904 <_malloc_r+0x88>
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff ffbf 	bl	800a838 <sbrk_aligned>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	4604      	mov	r4, r0
 800a8be:	d158      	bne.n	800a972 <_malloc_r+0xf6>
 800a8c0:	f8d8 4000 	ldr.w	r4, [r8]
 800a8c4:	4627      	mov	r7, r4
 800a8c6:	2f00      	cmp	r7, #0
 800a8c8:	d143      	bne.n	800a952 <_malloc_r+0xd6>
 800a8ca:	2c00      	cmp	r4, #0
 800a8cc:	d04b      	beq.n	800a966 <_malloc_r+0xea>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	eb04 0903 	add.w	r9, r4, r3
 800a8d8:	f000 ffba 	bl	800b850 <_sbrk_r>
 800a8dc:	4581      	cmp	r9, r0
 800a8de:	d142      	bne.n	800a966 <_malloc_r+0xea>
 800a8e0:	6821      	ldr	r1, [r4, #0]
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	1a6d      	subs	r5, r5, r1
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7ff ffa6 	bl	800a838 <sbrk_aligned>
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d03a      	beq.n	800a966 <_malloc_r+0xea>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	442b      	add	r3, r5
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	bb62      	cbnz	r2, 800a958 <_malloc_r+0xdc>
 800a8fe:	f8c8 7000 	str.w	r7, [r8]
 800a902:	e00f      	b.n	800a924 <_malloc_r+0xa8>
 800a904:	6822      	ldr	r2, [r4, #0]
 800a906:	1b52      	subs	r2, r2, r5
 800a908:	d420      	bmi.n	800a94c <_malloc_r+0xd0>
 800a90a:	2a0b      	cmp	r2, #11
 800a90c:	d917      	bls.n	800a93e <_malloc_r+0xc2>
 800a90e:	1961      	adds	r1, r4, r5
 800a910:	42a3      	cmp	r3, r4
 800a912:	6025      	str	r5, [r4, #0]
 800a914:	bf18      	it	ne
 800a916:	6059      	strne	r1, [r3, #4]
 800a918:	6863      	ldr	r3, [r4, #4]
 800a91a:	bf08      	it	eq
 800a91c:	f8c8 1000 	streq.w	r1, [r8]
 800a920:	5162      	str	r2, [r4, r5]
 800a922:	604b      	str	r3, [r1, #4]
 800a924:	4630      	mov	r0, r6
 800a926:	f000 f82f 	bl	800a988 <__malloc_unlock>
 800a92a:	f104 000b 	add.w	r0, r4, #11
 800a92e:	1d23      	adds	r3, r4, #4
 800a930:	f020 0007 	bic.w	r0, r0, #7
 800a934:	1ac2      	subs	r2, r0, r3
 800a936:	bf1c      	itt	ne
 800a938:	1a1b      	subne	r3, r3, r0
 800a93a:	50a3      	strne	r3, [r4, r2]
 800a93c:	e7af      	b.n	800a89e <_malloc_r+0x22>
 800a93e:	6862      	ldr	r2, [r4, #4]
 800a940:	42a3      	cmp	r3, r4
 800a942:	bf0c      	ite	eq
 800a944:	f8c8 2000 	streq.w	r2, [r8]
 800a948:	605a      	strne	r2, [r3, #4]
 800a94a:	e7eb      	b.n	800a924 <_malloc_r+0xa8>
 800a94c:	4623      	mov	r3, r4
 800a94e:	6864      	ldr	r4, [r4, #4]
 800a950:	e7ae      	b.n	800a8b0 <_malloc_r+0x34>
 800a952:	463c      	mov	r4, r7
 800a954:	687f      	ldr	r7, [r7, #4]
 800a956:	e7b6      	b.n	800a8c6 <_malloc_r+0x4a>
 800a958:	461a      	mov	r2, r3
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	d1fb      	bne.n	800a958 <_malloc_r+0xdc>
 800a960:	2300      	movs	r3, #0
 800a962:	6053      	str	r3, [r2, #4]
 800a964:	e7de      	b.n	800a924 <_malloc_r+0xa8>
 800a966:	230c      	movs	r3, #12
 800a968:	4630      	mov	r0, r6
 800a96a:	6033      	str	r3, [r6, #0]
 800a96c:	f000 f80c 	bl	800a988 <__malloc_unlock>
 800a970:	e794      	b.n	800a89c <_malloc_r+0x20>
 800a972:	6005      	str	r5, [r0, #0]
 800a974:	e7d6      	b.n	800a924 <_malloc_r+0xa8>
 800a976:	bf00      	nop
 800a978:	20004228 	.word	0x20004228

0800a97c <__malloc_lock>:
 800a97c:	4801      	ldr	r0, [pc, #4]	@ (800a984 <__malloc_lock+0x8>)
 800a97e:	f7ff b89c 	b.w	8009aba <__retarget_lock_acquire_recursive>
 800a982:	bf00      	nop
 800a984:	20004220 	.word	0x20004220

0800a988 <__malloc_unlock>:
 800a988:	4801      	ldr	r0, [pc, #4]	@ (800a990 <__malloc_unlock+0x8>)
 800a98a:	f7ff b897 	b.w	8009abc <__retarget_lock_release_recursive>
 800a98e:	bf00      	nop
 800a990:	20004220 	.word	0x20004220

0800a994 <_Balloc>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	69c6      	ldr	r6, [r0, #28]
 800a998:	4604      	mov	r4, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	b976      	cbnz	r6, 800a9bc <_Balloc+0x28>
 800a99e:	2010      	movs	r0, #16
 800a9a0:	f7ff ff42 	bl	800a828 <malloc>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	61e0      	str	r0, [r4, #28]
 800a9a8:	b920      	cbnz	r0, 800a9b4 <_Balloc+0x20>
 800a9aa:	216b      	movs	r1, #107	@ 0x6b
 800a9ac:	4b17      	ldr	r3, [pc, #92]	@ (800aa0c <_Balloc+0x78>)
 800a9ae:	4818      	ldr	r0, [pc, #96]	@ (800aa10 <_Balloc+0x7c>)
 800a9b0:	f000 ff5e 	bl	800b870 <__assert_func>
 800a9b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9b8:	6006      	str	r6, [r0, #0]
 800a9ba:	60c6      	str	r6, [r0, #12]
 800a9bc:	69e6      	ldr	r6, [r4, #28]
 800a9be:	68f3      	ldr	r3, [r6, #12]
 800a9c0:	b183      	cbz	r3, 800a9e4 <_Balloc+0x50>
 800a9c2:	69e3      	ldr	r3, [r4, #28]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9ca:	b9b8      	cbnz	r0, 800a9fc <_Balloc+0x68>
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	fa01 f605 	lsl.w	r6, r1, r5
 800a9d2:	1d72      	adds	r2, r6, #5
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	0092      	lsls	r2, r2, #2
 800a9d8:	f000 ff68 	bl	800b8ac <_calloc_r>
 800a9dc:	b160      	cbz	r0, 800a9f8 <_Balloc+0x64>
 800a9de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9e2:	e00e      	b.n	800aa02 <_Balloc+0x6e>
 800a9e4:	2221      	movs	r2, #33	@ 0x21
 800a9e6:	2104      	movs	r1, #4
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 ff5f 	bl	800b8ac <_calloc_r>
 800a9ee:	69e3      	ldr	r3, [r4, #28]
 800a9f0:	60f0      	str	r0, [r6, #12]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1e4      	bne.n	800a9c2 <_Balloc+0x2e>
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	6802      	ldr	r2, [r0, #0]
 800a9fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa02:	2300      	movs	r3, #0
 800aa04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa08:	e7f7      	b.n	800a9fa <_Balloc+0x66>
 800aa0a:	bf00      	nop
 800aa0c:	0800bc7b 	.word	0x0800bc7b
 800aa10:	0800bcfb 	.word	0x0800bcfb

0800aa14 <_Bfree>:
 800aa14:	b570      	push	{r4, r5, r6, lr}
 800aa16:	69c6      	ldr	r6, [r0, #28]
 800aa18:	4605      	mov	r5, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	b976      	cbnz	r6, 800aa3c <_Bfree+0x28>
 800aa1e:	2010      	movs	r0, #16
 800aa20:	f7ff ff02 	bl	800a828 <malloc>
 800aa24:	4602      	mov	r2, r0
 800aa26:	61e8      	str	r0, [r5, #28]
 800aa28:	b920      	cbnz	r0, 800aa34 <_Bfree+0x20>
 800aa2a:	218f      	movs	r1, #143	@ 0x8f
 800aa2c:	4b08      	ldr	r3, [pc, #32]	@ (800aa50 <_Bfree+0x3c>)
 800aa2e:	4809      	ldr	r0, [pc, #36]	@ (800aa54 <_Bfree+0x40>)
 800aa30:	f000 ff1e 	bl	800b870 <__assert_func>
 800aa34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa38:	6006      	str	r6, [r0, #0]
 800aa3a:	60c6      	str	r6, [r0, #12]
 800aa3c:	b13c      	cbz	r4, 800aa4e <_Bfree+0x3a>
 800aa3e:	69eb      	ldr	r3, [r5, #28]
 800aa40:	6862      	ldr	r2, [r4, #4]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa48:	6021      	str	r1, [r4, #0]
 800aa4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa4e:	bd70      	pop	{r4, r5, r6, pc}
 800aa50:	0800bc7b 	.word	0x0800bc7b
 800aa54:	0800bcfb 	.word	0x0800bcfb

0800aa58 <__multadd>:
 800aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5c:	4607      	mov	r7, r0
 800aa5e:	460c      	mov	r4, r1
 800aa60:	461e      	mov	r6, r3
 800aa62:	2000      	movs	r0, #0
 800aa64:	690d      	ldr	r5, [r1, #16]
 800aa66:	f101 0c14 	add.w	ip, r1, #20
 800aa6a:	f8dc 3000 	ldr.w	r3, [ip]
 800aa6e:	3001      	adds	r0, #1
 800aa70:	b299      	uxth	r1, r3
 800aa72:	fb02 6101 	mla	r1, r2, r1, r6
 800aa76:	0c1e      	lsrs	r6, r3, #16
 800aa78:	0c0b      	lsrs	r3, r1, #16
 800aa7a:	fb02 3306 	mla	r3, r2, r6, r3
 800aa7e:	b289      	uxth	r1, r1
 800aa80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa84:	4285      	cmp	r5, r0
 800aa86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa8a:	f84c 1b04 	str.w	r1, [ip], #4
 800aa8e:	dcec      	bgt.n	800aa6a <__multadd+0x12>
 800aa90:	b30e      	cbz	r6, 800aad6 <__multadd+0x7e>
 800aa92:	68a3      	ldr	r3, [r4, #8]
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dc19      	bgt.n	800aacc <__multadd+0x74>
 800aa98:	6861      	ldr	r1, [r4, #4]
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	3101      	adds	r1, #1
 800aa9e:	f7ff ff79 	bl	800a994 <_Balloc>
 800aaa2:	4680      	mov	r8, r0
 800aaa4:	b928      	cbnz	r0, 800aab2 <__multadd+0x5a>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	21ba      	movs	r1, #186	@ 0xba
 800aaaa:	4b0c      	ldr	r3, [pc, #48]	@ (800aadc <__multadd+0x84>)
 800aaac:	480c      	ldr	r0, [pc, #48]	@ (800aae0 <__multadd+0x88>)
 800aaae:	f000 fedf 	bl	800b870 <__assert_func>
 800aab2:	6922      	ldr	r2, [r4, #16]
 800aab4:	f104 010c 	add.w	r1, r4, #12
 800aab8:	3202      	adds	r2, #2
 800aaba:	0092      	lsls	r2, r2, #2
 800aabc:	300c      	adds	r0, #12
 800aabe:	f7ff f80c 	bl	8009ada <memcpy>
 800aac2:	4621      	mov	r1, r4
 800aac4:	4638      	mov	r0, r7
 800aac6:	f7ff ffa5 	bl	800aa14 <_Bfree>
 800aaca:	4644      	mov	r4, r8
 800aacc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aad0:	3501      	adds	r5, #1
 800aad2:	615e      	str	r6, [r3, #20]
 800aad4:	6125      	str	r5, [r4, #16]
 800aad6:	4620      	mov	r0, r4
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aadc:	0800bcea 	.word	0x0800bcea
 800aae0:	0800bcfb 	.word	0x0800bcfb

0800aae4 <__hi0bits>:
 800aae4:	4603      	mov	r3, r0
 800aae6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aaea:	bf3a      	itte	cc
 800aaec:	0403      	lslcc	r3, r0, #16
 800aaee:	2010      	movcc	r0, #16
 800aaf0:	2000      	movcs	r0, #0
 800aaf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaf6:	bf3c      	itt	cc
 800aaf8:	021b      	lslcc	r3, r3, #8
 800aafa:	3008      	addcc	r0, #8
 800aafc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab00:	bf3c      	itt	cc
 800ab02:	011b      	lslcc	r3, r3, #4
 800ab04:	3004      	addcc	r0, #4
 800ab06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab0a:	bf3c      	itt	cc
 800ab0c:	009b      	lslcc	r3, r3, #2
 800ab0e:	3002      	addcc	r0, #2
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	db05      	blt.n	800ab20 <__hi0bits+0x3c>
 800ab14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab18:	f100 0001 	add.w	r0, r0, #1
 800ab1c:	bf08      	it	eq
 800ab1e:	2020      	moveq	r0, #32
 800ab20:	4770      	bx	lr

0800ab22 <__lo0bits>:
 800ab22:	6803      	ldr	r3, [r0, #0]
 800ab24:	4602      	mov	r2, r0
 800ab26:	f013 0007 	ands.w	r0, r3, #7
 800ab2a:	d00b      	beq.n	800ab44 <__lo0bits+0x22>
 800ab2c:	07d9      	lsls	r1, r3, #31
 800ab2e:	d421      	bmi.n	800ab74 <__lo0bits+0x52>
 800ab30:	0798      	lsls	r0, r3, #30
 800ab32:	bf49      	itett	mi
 800ab34:	085b      	lsrmi	r3, r3, #1
 800ab36:	089b      	lsrpl	r3, r3, #2
 800ab38:	2001      	movmi	r0, #1
 800ab3a:	6013      	strmi	r3, [r2, #0]
 800ab3c:	bf5c      	itt	pl
 800ab3e:	2002      	movpl	r0, #2
 800ab40:	6013      	strpl	r3, [r2, #0]
 800ab42:	4770      	bx	lr
 800ab44:	b299      	uxth	r1, r3
 800ab46:	b909      	cbnz	r1, 800ab4c <__lo0bits+0x2a>
 800ab48:	2010      	movs	r0, #16
 800ab4a:	0c1b      	lsrs	r3, r3, #16
 800ab4c:	b2d9      	uxtb	r1, r3
 800ab4e:	b909      	cbnz	r1, 800ab54 <__lo0bits+0x32>
 800ab50:	3008      	adds	r0, #8
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	0719      	lsls	r1, r3, #28
 800ab56:	bf04      	itt	eq
 800ab58:	091b      	lsreq	r3, r3, #4
 800ab5a:	3004      	addeq	r0, #4
 800ab5c:	0799      	lsls	r1, r3, #30
 800ab5e:	bf04      	itt	eq
 800ab60:	089b      	lsreq	r3, r3, #2
 800ab62:	3002      	addeq	r0, #2
 800ab64:	07d9      	lsls	r1, r3, #31
 800ab66:	d403      	bmi.n	800ab70 <__lo0bits+0x4e>
 800ab68:	085b      	lsrs	r3, r3, #1
 800ab6a:	f100 0001 	add.w	r0, r0, #1
 800ab6e:	d003      	beq.n	800ab78 <__lo0bits+0x56>
 800ab70:	6013      	str	r3, [r2, #0]
 800ab72:	4770      	bx	lr
 800ab74:	2000      	movs	r0, #0
 800ab76:	4770      	bx	lr
 800ab78:	2020      	movs	r0, #32
 800ab7a:	4770      	bx	lr

0800ab7c <__i2b>:
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	460c      	mov	r4, r1
 800ab80:	2101      	movs	r1, #1
 800ab82:	f7ff ff07 	bl	800a994 <_Balloc>
 800ab86:	4602      	mov	r2, r0
 800ab88:	b928      	cbnz	r0, 800ab96 <__i2b+0x1a>
 800ab8a:	f240 1145 	movw	r1, #325	@ 0x145
 800ab8e:	4b04      	ldr	r3, [pc, #16]	@ (800aba0 <__i2b+0x24>)
 800ab90:	4804      	ldr	r0, [pc, #16]	@ (800aba4 <__i2b+0x28>)
 800ab92:	f000 fe6d 	bl	800b870 <__assert_func>
 800ab96:	2301      	movs	r3, #1
 800ab98:	6144      	str	r4, [r0, #20]
 800ab9a:	6103      	str	r3, [r0, #16]
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	bf00      	nop
 800aba0:	0800bcea 	.word	0x0800bcea
 800aba4:	0800bcfb 	.word	0x0800bcfb

0800aba8 <__multiply>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	4614      	mov	r4, r2
 800abae:	690a      	ldr	r2, [r1, #16]
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	460f      	mov	r7, r1
 800abb4:	429a      	cmp	r2, r3
 800abb6:	bfa2      	ittt	ge
 800abb8:	4623      	movge	r3, r4
 800abba:	460c      	movge	r4, r1
 800abbc:	461f      	movge	r7, r3
 800abbe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800abc2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800abc6:	68a3      	ldr	r3, [r4, #8]
 800abc8:	6861      	ldr	r1, [r4, #4]
 800abca:	eb0a 0609 	add.w	r6, sl, r9
 800abce:	42b3      	cmp	r3, r6
 800abd0:	b085      	sub	sp, #20
 800abd2:	bfb8      	it	lt
 800abd4:	3101      	addlt	r1, #1
 800abd6:	f7ff fedd 	bl	800a994 <_Balloc>
 800abda:	b930      	cbnz	r0, 800abea <__multiply+0x42>
 800abdc:	4602      	mov	r2, r0
 800abde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800abe2:	4b43      	ldr	r3, [pc, #268]	@ (800acf0 <__multiply+0x148>)
 800abe4:	4843      	ldr	r0, [pc, #268]	@ (800acf4 <__multiply+0x14c>)
 800abe6:	f000 fe43 	bl	800b870 <__assert_func>
 800abea:	f100 0514 	add.w	r5, r0, #20
 800abee:	462b      	mov	r3, r5
 800abf0:	2200      	movs	r2, #0
 800abf2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abf6:	4543      	cmp	r3, r8
 800abf8:	d321      	bcc.n	800ac3e <__multiply+0x96>
 800abfa:	f107 0114 	add.w	r1, r7, #20
 800abfe:	f104 0214 	add.w	r2, r4, #20
 800ac02:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ac06:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ac0a:	9302      	str	r3, [sp, #8]
 800ac0c:	1b13      	subs	r3, r2, r4
 800ac0e:	3b15      	subs	r3, #21
 800ac10:	f023 0303 	bic.w	r3, r3, #3
 800ac14:	3304      	adds	r3, #4
 800ac16:	f104 0715 	add.w	r7, r4, #21
 800ac1a:	42ba      	cmp	r2, r7
 800ac1c:	bf38      	it	cc
 800ac1e:	2304      	movcc	r3, #4
 800ac20:	9301      	str	r3, [sp, #4]
 800ac22:	9b02      	ldr	r3, [sp, #8]
 800ac24:	9103      	str	r1, [sp, #12]
 800ac26:	428b      	cmp	r3, r1
 800ac28:	d80c      	bhi.n	800ac44 <__multiply+0x9c>
 800ac2a:	2e00      	cmp	r6, #0
 800ac2c:	dd03      	ble.n	800ac36 <__multiply+0x8e>
 800ac2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d05a      	beq.n	800acec <__multiply+0x144>
 800ac36:	6106      	str	r6, [r0, #16]
 800ac38:	b005      	add	sp, #20
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3e:	f843 2b04 	str.w	r2, [r3], #4
 800ac42:	e7d8      	b.n	800abf6 <__multiply+0x4e>
 800ac44:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac48:	f1ba 0f00 	cmp.w	sl, #0
 800ac4c:	d023      	beq.n	800ac96 <__multiply+0xee>
 800ac4e:	46a9      	mov	r9, r5
 800ac50:	f04f 0c00 	mov.w	ip, #0
 800ac54:	f104 0e14 	add.w	lr, r4, #20
 800ac58:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac5c:	f8d9 3000 	ldr.w	r3, [r9]
 800ac60:	fa1f fb87 	uxth.w	fp, r7
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac6a:	4463      	add	r3, ip
 800ac6c:	f8d9 c000 	ldr.w	ip, [r9]
 800ac70:	0c3f      	lsrs	r7, r7, #16
 800ac72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac76:	fb0a c707 	mla	r7, sl, r7, ip
 800ac7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac84:	4572      	cmp	r2, lr
 800ac86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac8a:	f849 3b04 	str.w	r3, [r9], #4
 800ac8e:	d8e3      	bhi.n	800ac58 <__multiply+0xb0>
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	f845 c003 	str.w	ip, [r5, r3]
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	3104      	adds	r1, #4
 800ac9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac9e:	f1b9 0f00 	cmp.w	r9, #0
 800aca2:	d021      	beq.n	800ace8 <__multiply+0x140>
 800aca4:	46ae      	mov	lr, r5
 800aca6:	f04f 0a00 	mov.w	sl, #0
 800acaa:	682b      	ldr	r3, [r5, #0]
 800acac:	f104 0c14 	add.w	ip, r4, #20
 800acb0:	f8bc b000 	ldrh.w	fp, [ip]
 800acb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800acb8:	b29b      	uxth	r3, r3
 800acba:	fb09 770b 	mla	r7, r9, fp, r7
 800acbe:	4457      	add	r7, sl
 800acc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800acc4:	f84e 3b04 	str.w	r3, [lr], #4
 800acc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800accc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acd0:	f8be 3000 	ldrh.w	r3, [lr]
 800acd4:	4562      	cmp	r2, ip
 800acd6:	fb09 330a 	mla	r3, r9, sl, r3
 800acda:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800acde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ace2:	d8e5      	bhi.n	800acb0 <__multiply+0x108>
 800ace4:	9f01      	ldr	r7, [sp, #4]
 800ace6:	51eb      	str	r3, [r5, r7]
 800ace8:	3504      	adds	r5, #4
 800acea:	e79a      	b.n	800ac22 <__multiply+0x7a>
 800acec:	3e01      	subs	r6, #1
 800acee:	e79c      	b.n	800ac2a <__multiply+0x82>
 800acf0:	0800bcea 	.word	0x0800bcea
 800acf4:	0800bcfb 	.word	0x0800bcfb

0800acf8 <__pow5mult>:
 800acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acfc:	4615      	mov	r5, r2
 800acfe:	f012 0203 	ands.w	r2, r2, #3
 800ad02:	4607      	mov	r7, r0
 800ad04:	460e      	mov	r6, r1
 800ad06:	d007      	beq.n	800ad18 <__pow5mult+0x20>
 800ad08:	4c25      	ldr	r4, [pc, #148]	@ (800ada0 <__pow5mult+0xa8>)
 800ad0a:	3a01      	subs	r2, #1
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad12:	f7ff fea1 	bl	800aa58 <__multadd>
 800ad16:	4606      	mov	r6, r0
 800ad18:	10ad      	asrs	r5, r5, #2
 800ad1a:	d03d      	beq.n	800ad98 <__pow5mult+0xa0>
 800ad1c:	69fc      	ldr	r4, [r7, #28]
 800ad1e:	b97c      	cbnz	r4, 800ad40 <__pow5mult+0x48>
 800ad20:	2010      	movs	r0, #16
 800ad22:	f7ff fd81 	bl	800a828 <malloc>
 800ad26:	4602      	mov	r2, r0
 800ad28:	61f8      	str	r0, [r7, #28]
 800ad2a:	b928      	cbnz	r0, 800ad38 <__pow5mult+0x40>
 800ad2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad30:	4b1c      	ldr	r3, [pc, #112]	@ (800ada4 <__pow5mult+0xac>)
 800ad32:	481d      	ldr	r0, [pc, #116]	@ (800ada8 <__pow5mult+0xb0>)
 800ad34:	f000 fd9c 	bl	800b870 <__assert_func>
 800ad38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad3c:	6004      	str	r4, [r0, #0]
 800ad3e:	60c4      	str	r4, [r0, #12]
 800ad40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad48:	b94c      	cbnz	r4, 800ad5e <__pow5mult+0x66>
 800ad4a:	f240 2171 	movw	r1, #625	@ 0x271
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f7ff ff14 	bl	800ab7c <__i2b>
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad5c:	6003      	str	r3, [r0, #0]
 800ad5e:	f04f 0900 	mov.w	r9, #0
 800ad62:	07eb      	lsls	r3, r5, #31
 800ad64:	d50a      	bpl.n	800ad7c <__pow5mult+0x84>
 800ad66:	4631      	mov	r1, r6
 800ad68:	4622      	mov	r2, r4
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f7ff ff1c 	bl	800aba8 <__multiply>
 800ad70:	4680      	mov	r8, r0
 800ad72:	4631      	mov	r1, r6
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff fe4d 	bl	800aa14 <_Bfree>
 800ad7a:	4646      	mov	r6, r8
 800ad7c:	106d      	asrs	r5, r5, #1
 800ad7e:	d00b      	beq.n	800ad98 <__pow5mult+0xa0>
 800ad80:	6820      	ldr	r0, [r4, #0]
 800ad82:	b938      	cbnz	r0, 800ad94 <__pow5mult+0x9c>
 800ad84:	4622      	mov	r2, r4
 800ad86:	4621      	mov	r1, r4
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f7ff ff0d 	bl	800aba8 <__multiply>
 800ad8e:	6020      	str	r0, [r4, #0]
 800ad90:	f8c0 9000 	str.w	r9, [r0]
 800ad94:	4604      	mov	r4, r0
 800ad96:	e7e4      	b.n	800ad62 <__pow5mult+0x6a>
 800ad98:	4630      	mov	r0, r6
 800ad9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad9e:	bf00      	nop
 800ada0:	0800bd54 	.word	0x0800bd54
 800ada4:	0800bc7b 	.word	0x0800bc7b
 800ada8:	0800bcfb 	.word	0x0800bcfb

0800adac <__lshift>:
 800adac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb0:	460c      	mov	r4, r1
 800adb2:	4607      	mov	r7, r0
 800adb4:	4691      	mov	r9, r2
 800adb6:	6923      	ldr	r3, [r4, #16]
 800adb8:	6849      	ldr	r1, [r1, #4]
 800adba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adbe:	68a3      	ldr	r3, [r4, #8]
 800adc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adc4:	f108 0601 	add.w	r6, r8, #1
 800adc8:	42b3      	cmp	r3, r6
 800adca:	db0b      	blt.n	800ade4 <__lshift+0x38>
 800adcc:	4638      	mov	r0, r7
 800adce:	f7ff fde1 	bl	800a994 <_Balloc>
 800add2:	4605      	mov	r5, r0
 800add4:	b948      	cbnz	r0, 800adea <__lshift+0x3e>
 800add6:	4602      	mov	r2, r0
 800add8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800addc:	4b27      	ldr	r3, [pc, #156]	@ (800ae7c <__lshift+0xd0>)
 800adde:	4828      	ldr	r0, [pc, #160]	@ (800ae80 <__lshift+0xd4>)
 800ade0:	f000 fd46 	bl	800b870 <__assert_func>
 800ade4:	3101      	adds	r1, #1
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	e7ee      	b.n	800adc8 <__lshift+0x1c>
 800adea:	2300      	movs	r3, #0
 800adec:	f100 0114 	add.w	r1, r0, #20
 800adf0:	f100 0210 	add.w	r2, r0, #16
 800adf4:	4618      	mov	r0, r3
 800adf6:	4553      	cmp	r3, sl
 800adf8:	db33      	blt.n	800ae62 <__lshift+0xb6>
 800adfa:	6920      	ldr	r0, [r4, #16]
 800adfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae00:	f104 0314 	add.w	r3, r4, #20
 800ae04:	f019 091f 	ands.w	r9, r9, #31
 800ae08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae10:	d02b      	beq.n	800ae6a <__lshift+0xbe>
 800ae12:	468a      	mov	sl, r1
 800ae14:	2200      	movs	r2, #0
 800ae16:	f1c9 0e20 	rsb	lr, r9, #32
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ae20:	4310      	orrs	r0, r2
 800ae22:	f84a 0b04 	str.w	r0, [sl], #4
 800ae26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae2a:	459c      	cmp	ip, r3
 800ae2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae30:	d8f3      	bhi.n	800ae1a <__lshift+0x6e>
 800ae32:	ebac 0304 	sub.w	r3, ip, r4
 800ae36:	3b15      	subs	r3, #21
 800ae38:	f023 0303 	bic.w	r3, r3, #3
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	f104 0015 	add.w	r0, r4, #21
 800ae42:	4584      	cmp	ip, r0
 800ae44:	bf38      	it	cc
 800ae46:	2304      	movcc	r3, #4
 800ae48:	50ca      	str	r2, [r1, r3]
 800ae4a:	b10a      	cbz	r2, 800ae50 <__lshift+0xa4>
 800ae4c:	f108 0602 	add.w	r6, r8, #2
 800ae50:	3e01      	subs	r6, #1
 800ae52:	4638      	mov	r0, r7
 800ae54:	4621      	mov	r1, r4
 800ae56:	612e      	str	r6, [r5, #16]
 800ae58:	f7ff fddc 	bl	800aa14 <_Bfree>
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae66:	3301      	adds	r3, #1
 800ae68:	e7c5      	b.n	800adf6 <__lshift+0x4a>
 800ae6a:	3904      	subs	r1, #4
 800ae6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae70:	459c      	cmp	ip, r3
 800ae72:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae76:	d8f9      	bhi.n	800ae6c <__lshift+0xc0>
 800ae78:	e7ea      	b.n	800ae50 <__lshift+0xa4>
 800ae7a:	bf00      	nop
 800ae7c:	0800bcea 	.word	0x0800bcea
 800ae80:	0800bcfb 	.word	0x0800bcfb

0800ae84 <__mcmp>:
 800ae84:	4603      	mov	r3, r0
 800ae86:	690a      	ldr	r2, [r1, #16]
 800ae88:	6900      	ldr	r0, [r0, #16]
 800ae8a:	b530      	push	{r4, r5, lr}
 800ae8c:	1a80      	subs	r0, r0, r2
 800ae8e:	d10e      	bne.n	800aeae <__mcmp+0x2a>
 800ae90:	3314      	adds	r3, #20
 800ae92:	3114      	adds	r1, #20
 800ae94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aea4:	4295      	cmp	r5, r2
 800aea6:	d003      	beq.n	800aeb0 <__mcmp+0x2c>
 800aea8:	d205      	bcs.n	800aeb6 <__mcmp+0x32>
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	bd30      	pop	{r4, r5, pc}
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	d3f3      	bcc.n	800ae9c <__mcmp+0x18>
 800aeb4:	e7fb      	b.n	800aeae <__mcmp+0x2a>
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	e7f9      	b.n	800aeae <__mcmp+0x2a>
	...

0800aebc <__mdiff>:
 800aebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	4689      	mov	r9, r1
 800aec2:	4606      	mov	r6, r0
 800aec4:	4611      	mov	r1, r2
 800aec6:	4648      	mov	r0, r9
 800aec8:	4614      	mov	r4, r2
 800aeca:	f7ff ffdb 	bl	800ae84 <__mcmp>
 800aece:	1e05      	subs	r5, r0, #0
 800aed0:	d112      	bne.n	800aef8 <__mdiff+0x3c>
 800aed2:	4629      	mov	r1, r5
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7ff fd5d 	bl	800a994 <_Balloc>
 800aeda:	4602      	mov	r2, r0
 800aedc:	b928      	cbnz	r0, 800aeea <__mdiff+0x2e>
 800aede:	f240 2137 	movw	r1, #567	@ 0x237
 800aee2:	4b3e      	ldr	r3, [pc, #248]	@ (800afdc <__mdiff+0x120>)
 800aee4:	483e      	ldr	r0, [pc, #248]	@ (800afe0 <__mdiff+0x124>)
 800aee6:	f000 fcc3 	bl	800b870 <__assert_func>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aef0:	4610      	mov	r0, r2
 800aef2:	b003      	add	sp, #12
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	bfbc      	itt	lt
 800aefa:	464b      	movlt	r3, r9
 800aefc:	46a1      	movlt	r9, r4
 800aefe:	4630      	mov	r0, r6
 800af00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af04:	bfba      	itte	lt
 800af06:	461c      	movlt	r4, r3
 800af08:	2501      	movlt	r5, #1
 800af0a:	2500      	movge	r5, #0
 800af0c:	f7ff fd42 	bl	800a994 <_Balloc>
 800af10:	4602      	mov	r2, r0
 800af12:	b918      	cbnz	r0, 800af1c <__mdiff+0x60>
 800af14:	f240 2145 	movw	r1, #581	@ 0x245
 800af18:	4b30      	ldr	r3, [pc, #192]	@ (800afdc <__mdiff+0x120>)
 800af1a:	e7e3      	b.n	800aee4 <__mdiff+0x28>
 800af1c:	f100 0b14 	add.w	fp, r0, #20
 800af20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af24:	f109 0310 	add.w	r3, r9, #16
 800af28:	60c5      	str	r5, [r0, #12]
 800af2a:	f04f 0c00 	mov.w	ip, #0
 800af2e:	f109 0514 	add.w	r5, r9, #20
 800af32:	46d9      	mov	r9, fp
 800af34:	6926      	ldr	r6, [r4, #16]
 800af36:	f104 0e14 	add.w	lr, r4, #20
 800af3a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af3e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af4e:	b281      	uxth	r1, r0
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	fa1f f38a 	uxth.w	r3, sl
 800af56:	1a5b      	subs	r3, r3, r1
 800af58:	0c00      	lsrs	r0, r0, #16
 800af5a:	4463      	add	r3, ip
 800af5c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af60:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af64:	b29b      	uxth	r3, r3
 800af66:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af6a:	4576      	cmp	r6, lr
 800af6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af70:	f849 3b04 	str.w	r3, [r9], #4
 800af74:	d8e6      	bhi.n	800af44 <__mdiff+0x88>
 800af76:	1b33      	subs	r3, r6, r4
 800af78:	3b15      	subs	r3, #21
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	3415      	adds	r4, #21
 800af80:	3304      	adds	r3, #4
 800af82:	42a6      	cmp	r6, r4
 800af84:	bf38      	it	cc
 800af86:	2304      	movcc	r3, #4
 800af88:	441d      	add	r5, r3
 800af8a:	445b      	add	r3, fp
 800af8c:	461e      	mov	r6, r3
 800af8e:	462c      	mov	r4, r5
 800af90:	4544      	cmp	r4, r8
 800af92:	d30e      	bcc.n	800afb2 <__mdiff+0xf6>
 800af94:	f108 0103 	add.w	r1, r8, #3
 800af98:	1b49      	subs	r1, r1, r5
 800af9a:	f021 0103 	bic.w	r1, r1, #3
 800af9e:	3d03      	subs	r5, #3
 800afa0:	45a8      	cmp	r8, r5
 800afa2:	bf38      	it	cc
 800afa4:	2100      	movcc	r1, #0
 800afa6:	440b      	add	r3, r1
 800afa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afac:	b199      	cbz	r1, 800afd6 <__mdiff+0x11a>
 800afae:	6117      	str	r7, [r2, #16]
 800afb0:	e79e      	b.n	800aef0 <__mdiff+0x34>
 800afb2:	46e6      	mov	lr, ip
 800afb4:	f854 1b04 	ldr.w	r1, [r4], #4
 800afb8:	fa1f fc81 	uxth.w	ip, r1
 800afbc:	44f4      	add	ip, lr
 800afbe:	0c08      	lsrs	r0, r1, #16
 800afc0:	4471      	add	r1, lr
 800afc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afc6:	b289      	uxth	r1, r1
 800afc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afcc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afd0:	f846 1b04 	str.w	r1, [r6], #4
 800afd4:	e7dc      	b.n	800af90 <__mdiff+0xd4>
 800afd6:	3f01      	subs	r7, #1
 800afd8:	e7e6      	b.n	800afa8 <__mdiff+0xec>
 800afda:	bf00      	nop
 800afdc:	0800bcea 	.word	0x0800bcea
 800afe0:	0800bcfb 	.word	0x0800bcfb

0800afe4 <__d2b>:
 800afe4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800afe8:	2101      	movs	r1, #1
 800afea:	4690      	mov	r8, r2
 800afec:	4699      	mov	r9, r3
 800afee:	9e08      	ldr	r6, [sp, #32]
 800aff0:	f7ff fcd0 	bl	800a994 <_Balloc>
 800aff4:	4604      	mov	r4, r0
 800aff6:	b930      	cbnz	r0, 800b006 <__d2b+0x22>
 800aff8:	4602      	mov	r2, r0
 800affa:	f240 310f 	movw	r1, #783	@ 0x30f
 800affe:	4b23      	ldr	r3, [pc, #140]	@ (800b08c <__d2b+0xa8>)
 800b000:	4823      	ldr	r0, [pc, #140]	@ (800b090 <__d2b+0xac>)
 800b002:	f000 fc35 	bl	800b870 <__assert_func>
 800b006:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b00a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b00e:	b10d      	cbz	r5, 800b014 <__d2b+0x30>
 800b010:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b014:	9301      	str	r3, [sp, #4]
 800b016:	f1b8 0300 	subs.w	r3, r8, #0
 800b01a:	d024      	beq.n	800b066 <__d2b+0x82>
 800b01c:	4668      	mov	r0, sp
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	f7ff fd7f 	bl	800ab22 <__lo0bits>
 800b024:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b028:	b1d8      	cbz	r0, 800b062 <__d2b+0x7e>
 800b02a:	f1c0 0320 	rsb	r3, r0, #32
 800b02e:	fa02 f303 	lsl.w	r3, r2, r3
 800b032:	430b      	orrs	r3, r1
 800b034:	40c2      	lsrs	r2, r0
 800b036:	6163      	str	r3, [r4, #20]
 800b038:	9201      	str	r2, [sp, #4]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bf0c      	ite	eq
 800b040:	2201      	moveq	r2, #1
 800b042:	2202      	movne	r2, #2
 800b044:	61a3      	str	r3, [r4, #24]
 800b046:	6122      	str	r2, [r4, #16]
 800b048:	b1ad      	cbz	r5, 800b076 <__d2b+0x92>
 800b04a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b04e:	4405      	add	r5, r0
 800b050:	6035      	str	r5, [r6, #0]
 800b052:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b058:	6018      	str	r0, [r3, #0]
 800b05a:	4620      	mov	r0, r4
 800b05c:	b002      	add	sp, #8
 800b05e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b062:	6161      	str	r1, [r4, #20]
 800b064:	e7e9      	b.n	800b03a <__d2b+0x56>
 800b066:	a801      	add	r0, sp, #4
 800b068:	f7ff fd5b 	bl	800ab22 <__lo0bits>
 800b06c:	9b01      	ldr	r3, [sp, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	6163      	str	r3, [r4, #20]
 800b072:	3020      	adds	r0, #32
 800b074:	e7e7      	b.n	800b046 <__d2b+0x62>
 800b076:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b07a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b07e:	6030      	str	r0, [r6, #0]
 800b080:	6918      	ldr	r0, [r3, #16]
 800b082:	f7ff fd2f 	bl	800aae4 <__hi0bits>
 800b086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b08a:	e7e4      	b.n	800b056 <__d2b+0x72>
 800b08c:	0800bcea 	.word	0x0800bcea
 800b090:	0800bcfb 	.word	0x0800bcfb

0800b094 <__ssputs_r>:
 800b094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b098:	461f      	mov	r7, r3
 800b09a:	688e      	ldr	r6, [r1, #8]
 800b09c:	4682      	mov	sl, r0
 800b09e:	42be      	cmp	r6, r7
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	4690      	mov	r8, r2
 800b0a4:	680b      	ldr	r3, [r1, #0]
 800b0a6:	d82d      	bhi.n	800b104 <__ssputs_r+0x70>
 800b0a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b0b0:	d026      	beq.n	800b100 <__ssputs_r+0x6c>
 800b0b2:	6965      	ldr	r5, [r4, #20]
 800b0b4:	6909      	ldr	r1, [r1, #16]
 800b0b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ba:	eba3 0901 	sub.w	r9, r3, r1
 800b0be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0c2:	1c7b      	adds	r3, r7, #1
 800b0c4:	444b      	add	r3, r9
 800b0c6:	106d      	asrs	r5, r5, #1
 800b0c8:	429d      	cmp	r5, r3
 800b0ca:	bf38      	it	cc
 800b0cc:	461d      	movcc	r5, r3
 800b0ce:	0553      	lsls	r3, r2, #21
 800b0d0:	d527      	bpl.n	800b122 <__ssputs_r+0x8e>
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	f7ff fbd2 	bl	800a87c <_malloc_r>
 800b0d8:	4606      	mov	r6, r0
 800b0da:	b360      	cbz	r0, 800b136 <__ssputs_r+0xa2>
 800b0dc:	464a      	mov	r2, r9
 800b0de:	6921      	ldr	r1, [r4, #16]
 800b0e0:	f7fe fcfb 	bl	8009ada <memcpy>
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b0ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ee:	81a3      	strh	r3, [r4, #12]
 800b0f0:	6126      	str	r6, [r4, #16]
 800b0f2:	444e      	add	r6, r9
 800b0f4:	6026      	str	r6, [r4, #0]
 800b0f6:	463e      	mov	r6, r7
 800b0f8:	6165      	str	r5, [r4, #20]
 800b0fa:	eba5 0509 	sub.w	r5, r5, r9
 800b0fe:	60a5      	str	r5, [r4, #8]
 800b100:	42be      	cmp	r6, r7
 800b102:	d900      	bls.n	800b106 <__ssputs_r+0x72>
 800b104:	463e      	mov	r6, r7
 800b106:	4632      	mov	r2, r6
 800b108:	4641      	mov	r1, r8
 800b10a:	6820      	ldr	r0, [r4, #0]
 800b10c:	f000 fb63 	bl	800b7d6 <memmove>
 800b110:	2000      	movs	r0, #0
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	1b9b      	subs	r3, r3, r6
 800b116:	60a3      	str	r3, [r4, #8]
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	4433      	add	r3, r6
 800b11c:	6023      	str	r3, [r4, #0]
 800b11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b122:	462a      	mov	r2, r5
 800b124:	f000 fbe8 	bl	800b8f8 <_realloc_r>
 800b128:	4606      	mov	r6, r0
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d1e0      	bne.n	800b0f0 <__ssputs_r+0x5c>
 800b12e:	4650      	mov	r0, sl
 800b130:	6921      	ldr	r1, [r4, #16]
 800b132:	f7ff fb31 	bl	800a798 <_free_r>
 800b136:	230c      	movs	r3, #12
 800b138:	f8ca 3000 	str.w	r3, [sl]
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	f04f 30ff 	mov.w	r0, #4294967295
 800b142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b146:	81a3      	strh	r3, [r4, #12]
 800b148:	e7e9      	b.n	800b11e <__ssputs_r+0x8a>
	...

0800b14c <_svfiprintf_r>:
 800b14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b150:	4698      	mov	r8, r3
 800b152:	898b      	ldrh	r3, [r1, #12]
 800b154:	4607      	mov	r7, r0
 800b156:	061b      	lsls	r3, r3, #24
 800b158:	460d      	mov	r5, r1
 800b15a:	4614      	mov	r4, r2
 800b15c:	b09d      	sub	sp, #116	@ 0x74
 800b15e:	d510      	bpl.n	800b182 <_svfiprintf_r+0x36>
 800b160:	690b      	ldr	r3, [r1, #16]
 800b162:	b973      	cbnz	r3, 800b182 <_svfiprintf_r+0x36>
 800b164:	2140      	movs	r1, #64	@ 0x40
 800b166:	f7ff fb89 	bl	800a87c <_malloc_r>
 800b16a:	6028      	str	r0, [r5, #0]
 800b16c:	6128      	str	r0, [r5, #16]
 800b16e:	b930      	cbnz	r0, 800b17e <_svfiprintf_r+0x32>
 800b170:	230c      	movs	r3, #12
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	b01d      	add	sp, #116	@ 0x74
 800b17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17e:	2340      	movs	r3, #64	@ 0x40
 800b180:	616b      	str	r3, [r5, #20]
 800b182:	2300      	movs	r3, #0
 800b184:	9309      	str	r3, [sp, #36]	@ 0x24
 800b186:	2320      	movs	r3, #32
 800b188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b18c:	2330      	movs	r3, #48	@ 0x30
 800b18e:	f04f 0901 	mov.w	r9, #1
 800b192:	f8cd 800c 	str.w	r8, [sp, #12]
 800b196:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b330 <_svfiprintf_r+0x1e4>
 800b19a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b19e:	4623      	mov	r3, r4
 800b1a0:	469a      	mov	sl, r3
 800b1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a6:	b10a      	cbz	r2, 800b1ac <_svfiprintf_r+0x60>
 800b1a8:	2a25      	cmp	r2, #37	@ 0x25
 800b1aa:	d1f9      	bne.n	800b1a0 <_svfiprintf_r+0x54>
 800b1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b1b0:	d00b      	beq.n	800b1ca <_svfiprintf_r+0x7e>
 800b1b2:	465b      	mov	r3, fp
 800b1b4:	4622      	mov	r2, r4
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7ff ff6b 	bl	800b094 <__ssputs_r>
 800b1be:	3001      	adds	r0, #1
 800b1c0:	f000 80a7 	beq.w	800b312 <_svfiprintf_r+0x1c6>
 800b1c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1c6:	445a      	add	r2, fp
 800b1c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 809f 	beq.w	800b312 <_svfiprintf_r+0x1c6>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1de:	f10a 0a01 	add.w	sl, sl, #1
 800b1e2:	9304      	str	r3, [sp, #16]
 800b1e4:	9307      	str	r3, [sp, #28]
 800b1e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1ec:	4654      	mov	r4, sl
 800b1ee:	2205      	movs	r2, #5
 800b1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f4:	484e      	ldr	r0, [pc, #312]	@ (800b330 <_svfiprintf_r+0x1e4>)
 800b1f6:	f7fe fc62 	bl	8009abe <memchr>
 800b1fa:	9a04      	ldr	r2, [sp, #16]
 800b1fc:	b9d8      	cbnz	r0, 800b236 <_svfiprintf_r+0xea>
 800b1fe:	06d0      	lsls	r0, r2, #27
 800b200:	bf44      	itt	mi
 800b202:	2320      	movmi	r3, #32
 800b204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b208:	0711      	lsls	r1, r2, #28
 800b20a:	bf44      	itt	mi
 800b20c:	232b      	movmi	r3, #43	@ 0x2b
 800b20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b212:	f89a 3000 	ldrb.w	r3, [sl]
 800b216:	2b2a      	cmp	r3, #42	@ 0x2a
 800b218:	d015      	beq.n	800b246 <_svfiprintf_r+0xfa>
 800b21a:	4654      	mov	r4, sl
 800b21c:	2000      	movs	r0, #0
 800b21e:	f04f 0c0a 	mov.w	ip, #10
 800b222:	9a07      	ldr	r2, [sp, #28]
 800b224:	4621      	mov	r1, r4
 800b226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b22a:	3b30      	subs	r3, #48	@ 0x30
 800b22c:	2b09      	cmp	r3, #9
 800b22e:	d94b      	bls.n	800b2c8 <_svfiprintf_r+0x17c>
 800b230:	b1b0      	cbz	r0, 800b260 <_svfiprintf_r+0x114>
 800b232:	9207      	str	r2, [sp, #28]
 800b234:	e014      	b.n	800b260 <_svfiprintf_r+0x114>
 800b236:	eba0 0308 	sub.w	r3, r0, r8
 800b23a:	fa09 f303 	lsl.w	r3, r9, r3
 800b23e:	4313      	orrs	r3, r2
 800b240:	46a2      	mov	sl, r4
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	e7d2      	b.n	800b1ec <_svfiprintf_r+0xa0>
 800b246:	9b03      	ldr	r3, [sp, #12]
 800b248:	1d19      	adds	r1, r3, #4
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	9103      	str	r1, [sp, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bfbb      	ittet	lt
 800b252:	425b      	neglt	r3, r3
 800b254:	f042 0202 	orrlt.w	r2, r2, #2
 800b258:	9307      	strge	r3, [sp, #28]
 800b25a:	9307      	strlt	r3, [sp, #28]
 800b25c:	bfb8      	it	lt
 800b25e:	9204      	strlt	r2, [sp, #16]
 800b260:	7823      	ldrb	r3, [r4, #0]
 800b262:	2b2e      	cmp	r3, #46	@ 0x2e
 800b264:	d10a      	bne.n	800b27c <_svfiprintf_r+0x130>
 800b266:	7863      	ldrb	r3, [r4, #1]
 800b268:	2b2a      	cmp	r3, #42	@ 0x2a
 800b26a:	d132      	bne.n	800b2d2 <_svfiprintf_r+0x186>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	3402      	adds	r4, #2
 800b270:	1d1a      	adds	r2, r3, #4
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9203      	str	r2, [sp, #12]
 800b276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b27a:	9305      	str	r3, [sp, #20]
 800b27c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b334 <_svfiprintf_r+0x1e8>
 800b280:	2203      	movs	r2, #3
 800b282:	4650      	mov	r0, sl
 800b284:	7821      	ldrb	r1, [r4, #0]
 800b286:	f7fe fc1a 	bl	8009abe <memchr>
 800b28a:	b138      	cbz	r0, 800b29c <_svfiprintf_r+0x150>
 800b28c:	2240      	movs	r2, #64	@ 0x40
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	eba0 000a 	sub.w	r0, r0, sl
 800b294:	4082      	lsls	r2, r0
 800b296:	4313      	orrs	r3, r2
 800b298:	3401      	adds	r4, #1
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a0:	2206      	movs	r2, #6
 800b2a2:	4825      	ldr	r0, [pc, #148]	@ (800b338 <_svfiprintf_r+0x1ec>)
 800b2a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2a8:	f7fe fc09 	bl	8009abe <memchr>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d036      	beq.n	800b31e <_svfiprintf_r+0x1d2>
 800b2b0:	4b22      	ldr	r3, [pc, #136]	@ (800b33c <_svfiprintf_r+0x1f0>)
 800b2b2:	bb1b      	cbnz	r3, 800b2fc <_svfiprintf_r+0x1b0>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	3307      	adds	r3, #7
 800b2b8:	f023 0307 	bic.w	r3, r3, #7
 800b2bc:	3308      	adds	r3, #8
 800b2be:	9303      	str	r3, [sp, #12]
 800b2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c2:	4433      	add	r3, r6
 800b2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2c6:	e76a      	b.n	800b19e <_svfiprintf_r+0x52>
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	2001      	movs	r0, #1
 800b2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2d0:	e7a8      	b.n	800b224 <_svfiprintf_r+0xd8>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f04f 0c0a 	mov.w	ip, #10
 800b2d8:	4619      	mov	r1, r3
 800b2da:	3401      	adds	r4, #1
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e4:	3a30      	subs	r2, #48	@ 0x30
 800b2e6:	2a09      	cmp	r2, #9
 800b2e8:	d903      	bls.n	800b2f2 <_svfiprintf_r+0x1a6>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0c6      	beq.n	800b27c <_svfiprintf_r+0x130>
 800b2ee:	9105      	str	r1, [sp, #20]
 800b2f0:	e7c4      	b.n	800b27c <_svfiprintf_r+0x130>
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2fa:	e7f0      	b.n	800b2de <_svfiprintf_r+0x192>
 800b2fc:	ab03      	add	r3, sp, #12
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	462a      	mov	r2, r5
 800b302:	4638      	mov	r0, r7
 800b304:	4b0e      	ldr	r3, [pc, #56]	@ (800b340 <_svfiprintf_r+0x1f4>)
 800b306:	a904      	add	r1, sp, #16
 800b308:	f7fd fd1c 	bl	8008d44 <_printf_float>
 800b30c:	1c42      	adds	r2, r0, #1
 800b30e:	4606      	mov	r6, r0
 800b310:	d1d6      	bne.n	800b2c0 <_svfiprintf_r+0x174>
 800b312:	89ab      	ldrh	r3, [r5, #12]
 800b314:	065b      	lsls	r3, r3, #25
 800b316:	f53f af2d 	bmi.w	800b174 <_svfiprintf_r+0x28>
 800b31a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b31c:	e72c      	b.n	800b178 <_svfiprintf_r+0x2c>
 800b31e:	ab03      	add	r3, sp, #12
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	462a      	mov	r2, r5
 800b324:	4638      	mov	r0, r7
 800b326:	4b06      	ldr	r3, [pc, #24]	@ (800b340 <_svfiprintf_r+0x1f4>)
 800b328:	a904      	add	r1, sp, #16
 800b32a:	f7fd ffa9 	bl	8009280 <_printf_i>
 800b32e:	e7ed      	b.n	800b30c <_svfiprintf_r+0x1c0>
 800b330:	0800be50 	.word	0x0800be50
 800b334:	0800be56 	.word	0x0800be56
 800b338:	0800be5a 	.word	0x0800be5a
 800b33c:	08008d45 	.word	0x08008d45
 800b340:	0800b095 	.word	0x0800b095

0800b344 <__sfputc_r>:
 800b344:	6893      	ldr	r3, [r2, #8]
 800b346:	b410      	push	{r4}
 800b348:	3b01      	subs	r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	6093      	str	r3, [r2, #8]
 800b34e:	da07      	bge.n	800b360 <__sfputc_r+0x1c>
 800b350:	6994      	ldr	r4, [r2, #24]
 800b352:	42a3      	cmp	r3, r4
 800b354:	db01      	blt.n	800b35a <__sfputc_r+0x16>
 800b356:	290a      	cmp	r1, #10
 800b358:	d102      	bne.n	800b360 <__sfputc_r+0x1c>
 800b35a:	bc10      	pop	{r4}
 800b35c:	f7fe ba45 	b.w	80097ea <__swbuf_r>
 800b360:	6813      	ldr	r3, [r2, #0]
 800b362:	1c58      	adds	r0, r3, #1
 800b364:	6010      	str	r0, [r2, #0]
 800b366:	7019      	strb	r1, [r3, #0]
 800b368:	4608      	mov	r0, r1
 800b36a:	bc10      	pop	{r4}
 800b36c:	4770      	bx	lr

0800b36e <__sfputs_r>:
 800b36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b370:	4606      	mov	r6, r0
 800b372:	460f      	mov	r7, r1
 800b374:	4614      	mov	r4, r2
 800b376:	18d5      	adds	r5, r2, r3
 800b378:	42ac      	cmp	r4, r5
 800b37a:	d101      	bne.n	800b380 <__sfputs_r+0x12>
 800b37c:	2000      	movs	r0, #0
 800b37e:	e007      	b.n	800b390 <__sfputs_r+0x22>
 800b380:	463a      	mov	r2, r7
 800b382:	4630      	mov	r0, r6
 800b384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b388:	f7ff ffdc 	bl	800b344 <__sfputc_r>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d1f3      	bne.n	800b378 <__sfputs_r+0xa>
 800b390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b394 <_vfiprintf_r>:
 800b394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b398:	460d      	mov	r5, r1
 800b39a:	4614      	mov	r4, r2
 800b39c:	4698      	mov	r8, r3
 800b39e:	4606      	mov	r6, r0
 800b3a0:	b09d      	sub	sp, #116	@ 0x74
 800b3a2:	b118      	cbz	r0, 800b3ac <_vfiprintf_r+0x18>
 800b3a4:	6a03      	ldr	r3, [r0, #32]
 800b3a6:	b90b      	cbnz	r3, 800b3ac <_vfiprintf_r+0x18>
 800b3a8:	f7fe f916 	bl	80095d8 <__sinit>
 800b3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3ae:	07d9      	lsls	r1, r3, #31
 800b3b0:	d405      	bmi.n	800b3be <_vfiprintf_r+0x2a>
 800b3b2:	89ab      	ldrh	r3, [r5, #12]
 800b3b4:	059a      	lsls	r2, r3, #22
 800b3b6:	d402      	bmi.n	800b3be <_vfiprintf_r+0x2a>
 800b3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ba:	f7fe fb7e 	bl	8009aba <__retarget_lock_acquire_recursive>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	071b      	lsls	r3, r3, #28
 800b3c2:	d501      	bpl.n	800b3c8 <_vfiprintf_r+0x34>
 800b3c4:	692b      	ldr	r3, [r5, #16]
 800b3c6:	b99b      	cbnz	r3, 800b3f0 <_vfiprintf_r+0x5c>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	f7fe fa4c 	bl	8009868 <__swsetup_r>
 800b3d0:	b170      	cbz	r0, 800b3f0 <_vfiprintf_r+0x5c>
 800b3d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3d4:	07dc      	lsls	r4, r3, #31
 800b3d6:	d504      	bpl.n	800b3e2 <_vfiprintf_r+0x4e>
 800b3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3dc:	b01d      	add	sp, #116	@ 0x74
 800b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e2:	89ab      	ldrh	r3, [r5, #12]
 800b3e4:	0598      	lsls	r0, r3, #22
 800b3e6:	d4f7      	bmi.n	800b3d8 <_vfiprintf_r+0x44>
 800b3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3ea:	f7fe fb67 	bl	8009abc <__retarget_lock_release_recursive>
 800b3ee:	e7f3      	b.n	800b3d8 <_vfiprintf_r+0x44>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f4:	2320      	movs	r3, #32
 800b3f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3fa:	2330      	movs	r3, #48	@ 0x30
 800b3fc:	f04f 0901 	mov.w	r9, #1
 800b400:	f8cd 800c 	str.w	r8, [sp, #12]
 800b404:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b5b0 <_vfiprintf_r+0x21c>
 800b408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b40c:	4623      	mov	r3, r4
 800b40e:	469a      	mov	sl, r3
 800b410:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b414:	b10a      	cbz	r2, 800b41a <_vfiprintf_r+0x86>
 800b416:	2a25      	cmp	r2, #37	@ 0x25
 800b418:	d1f9      	bne.n	800b40e <_vfiprintf_r+0x7a>
 800b41a:	ebba 0b04 	subs.w	fp, sl, r4
 800b41e:	d00b      	beq.n	800b438 <_vfiprintf_r+0xa4>
 800b420:	465b      	mov	r3, fp
 800b422:	4622      	mov	r2, r4
 800b424:	4629      	mov	r1, r5
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff ffa1 	bl	800b36e <__sfputs_r>
 800b42c:	3001      	adds	r0, #1
 800b42e:	f000 80a7 	beq.w	800b580 <_vfiprintf_r+0x1ec>
 800b432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b434:	445a      	add	r2, fp
 800b436:	9209      	str	r2, [sp, #36]	@ 0x24
 800b438:	f89a 3000 	ldrb.w	r3, [sl]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 809f 	beq.w	800b580 <_vfiprintf_r+0x1ec>
 800b442:	2300      	movs	r3, #0
 800b444:	f04f 32ff 	mov.w	r2, #4294967295
 800b448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b44c:	f10a 0a01 	add.w	sl, sl, #1
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	9307      	str	r3, [sp, #28]
 800b454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b458:	931a      	str	r3, [sp, #104]	@ 0x68
 800b45a:	4654      	mov	r4, sl
 800b45c:	2205      	movs	r2, #5
 800b45e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b462:	4853      	ldr	r0, [pc, #332]	@ (800b5b0 <_vfiprintf_r+0x21c>)
 800b464:	f7fe fb2b 	bl	8009abe <memchr>
 800b468:	9a04      	ldr	r2, [sp, #16]
 800b46a:	b9d8      	cbnz	r0, 800b4a4 <_vfiprintf_r+0x110>
 800b46c:	06d1      	lsls	r1, r2, #27
 800b46e:	bf44      	itt	mi
 800b470:	2320      	movmi	r3, #32
 800b472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b476:	0713      	lsls	r3, r2, #28
 800b478:	bf44      	itt	mi
 800b47a:	232b      	movmi	r3, #43	@ 0x2b
 800b47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b480:	f89a 3000 	ldrb.w	r3, [sl]
 800b484:	2b2a      	cmp	r3, #42	@ 0x2a
 800b486:	d015      	beq.n	800b4b4 <_vfiprintf_r+0x120>
 800b488:	4654      	mov	r4, sl
 800b48a:	2000      	movs	r0, #0
 800b48c:	f04f 0c0a 	mov.w	ip, #10
 800b490:	9a07      	ldr	r2, [sp, #28]
 800b492:	4621      	mov	r1, r4
 800b494:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b498:	3b30      	subs	r3, #48	@ 0x30
 800b49a:	2b09      	cmp	r3, #9
 800b49c:	d94b      	bls.n	800b536 <_vfiprintf_r+0x1a2>
 800b49e:	b1b0      	cbz	r0, 800b4ce <_vfiprintf_r+0x13a>
 800b4a0:	9207      	str	r2, [sp, #28]
 800b4a2:	e014      	b.n	800b4ce <_vfiprintf_r+0x13a>
 800b4a4:	eba0 0308 	sub.w	r3, r0, r8
 800b4a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	46a2      	mov	sl, r4
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	e7d2      	b.n	800b45a <_vfiprintf_r+0xc6>
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	1d19      	adds	r1, r3, #4
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	9103      	str	r1, [sp, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	bfbb      	ittet	lt
 800b4c0:	425b      	neglt	r3, r3
 800b4c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4c6:	9307      	strge	r3, [sp, #28]
 800b4c8:	9307      	strlt	r3, [sp, #28]
 800b4ca:	bfb8      	it	lt
 800b4cc:	9204      	strlt	r2, [sp, #16]
 800b4ce:	7823      	ldrb	r3, [r4, #0]
 800b4d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4d2:	d10a      	bne.n	800b4ea <_vfiprintf_r+0x156>
 800b4d4:	7863      	ldrb	r3, [r4, #1]
 800b4d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d8:	d132      	bne.n	800b540 <_vfiprintf_r+0x1ac>
 800b4da:	9b03      	ldr	r3, [sp, #12]
 800b4dc:	3402      	adds	r4, #2
 800b4de:	1d1a      	adds	r2, r3, #4
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	9203      	str	r2, [sp, #12]
 800b4e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4e8:	9305      	str	r3, [sp, #20]
 800b4ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b5b4 <_vfiprintf_r+0x220>
 800b4ee:	2203      	movs	r2, #3
 800b4f0:	4650      	mov	r0, sl
 800b4f2:	7821      	ldrb	r1, [r4, #0]
 800b4f4:	f7fe fae3 	bl	8009abe <memchr>
 800b4f8:	b138      	cbz	r0, 800b50a <_vfiprintf_r+0x176>
 800b4fa:	2240      	movs	r2, #64	@ 0x40
 800b4fc:	9b04      	ldr	r3, [sp, #16]
 800b4fe:	eba0 000a 	sub.w	r0, r0, sl
 800b502:	4082      	lsls	r2, r0
 800b504:	4313      	orrs	r3, r2
 800b506:	3401      	adds	r4, #1
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50e:	2206      	movs	r2, #6
 800b510:	4829      	ldr	r0, [pc, #164]	@ (800b5b8 <_vfiprintf_r+0x224>)
 800b512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b516:	f7fe fad2 	bl	8009abe <memchr>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d03f      	beq.n	800b59e <_vfiprintf_r+0x20a>
 800b51e:	4b27      	ldr	r3, [pc, #156]	@ (800b5bc <_vfiprintf_r+0x228>)
 800b520:	bb1b      	cbnz	r3, 800b56a <_vfiprintf_r+0x1d6>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	3307      	adds	r3, #7
 800b526:	f023 0307 	bic.w	r3, r3, #7
 800b52a:	3308      	adds	r3, #8
 800b52c:	9303      	str	r3, [sp, #12]
 800b52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b530:	443b      	add	r3, r7
 800b532:	9309      	str	r3, [sp, #36]	@ 0x24
 800b534:	e76a      	b.n	800b40c <_vfiprintf_r+0x78>
 800b536:	460c      	mov	r4, r1
 800b538:	2001      	movs	r0, #1
 800b53a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b53e:	e7a8      	b.n	800b492 <_vfiprintf_r+0xfe>
 800b540:	2300      	movs	r3, #0
 800b542:	f04f 0c0a 	mov.w	ip, #10
 800b546:	4619      	mov	r1, r3
 800b548:	3401      	adds	r4, #1
 800b54a:	9305      	str	r3, [sp, #20]
 800b54c:	4620      	mov	r0, r4
 800b54e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b552:	3a30      	subs	r2, #48	@ 0x30
 800b554:	2a09      	cmp	r2, #9
 800b556:	d903      	bls.n	800b560 <_vfiprintf_r+0x1cc>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0c6      	beq.n	800b4ea <_vfiprintf_r+0x156>
 800b55c:	9105      	str	r1, [sp, #20]
 800b55e:	e7c4      	b.n	800b4ea <_vfiprintf_r+0x156>
 800b560:	4604      	mov	r4, r0
 800b562:	2301      	movs	r3, #1
 800b564:	fb0c 2101 	mla	r1, ip, r1, r2
 800b568:	e7f0      	b.n	800b54c <_vfiprintf_r+0x1b8>
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	9300      	str	r3, [sp, #0]
 800b56e:	462a      	mov	r2, r5
 800b570:	4630      	mov	r0, r6
 800b572:	4b13      	ldr	r3, [pc, #76]	@ (800b5c0 <_vfiprintf_r+0x22c>)
 800b574:	a904      	add	r1, sp, #16
 800b576:	f7fd fbe5 	bl	8008d44 <_printf_float>
 800b57a:	4607      	mov	r7, r0
 800b57c:	1c78      	adds	r0, r7, #1
 800b57e:	d1d6      	bne.n	800b52e <_vfiprintf_r+0x19a>
 800b580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b582:	07d9      	lsls	r1, r3, #31
 800b584:	d405      	bmi.n	800b592 <_vfiprintf_r+0x1fe>
 800b586:	89ab      	ldrh	r3, [r5, #12]
 800b588:	059a      	lsls	r2, r3, #22
 800b58a:	d402      	bmi.n	800b592 <_vfiprintf_r+0x1fe>
 800b58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b58e:	f7fe fa95 	bl	8009abc <__retarget_lock_release_recursive>
 800b592:	89ab      	ldrh	r3, [r5, #12]
 800b594:	065b      	lsls	r3, r3, #25
 800b596:	f53f af1f 	bmi.w	800b3d8 <_vfiprintf_r+0x44>
 800b59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b59c:	e71e      	b.n	800b3dc <_vfiprintf_r+0x48>
 800b59e:	ab03      	add	r3, sp, #12
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	4b06      	ldr	r3, [pc, #24]	@ (800b5c0 <_vfiprintf_r+0x22c>)
 800b5a8:	a904      	add	r1, sp, #16
 800b5aa:	f7fd fe69 	bl	8009280 <_printf_i>
 800b5ae:	e7e4      	b.n	800b57a <_vfiprintf_r+0x1e6>
 800b5b0:	0800be50 	.word	0x0800be50
 800b5b4:	0800be56 	.word	0x0800be56
 800b5b8:	0800be5a 	.word	0x0800be5a
 800b5bc:	08008d45 	.word	0x08008d45
 800b5c0:	0800b36f 	.word	0x0800b36f

0800b5c4 <__sflush_r>:
 800b5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	0716      	lsls	r6, r2, #28
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	460c      	mov	r4, r1
 800b5d0:	d454      	bmi.n	800b67c <__sflush_r+0xb8>
 800b5d2:	684b      	ldr	r3, [r1, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	dc02      	bgt.n	800b5de <__sflush_r+0x1a>
 800b5d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	dd48      	ble.n	800b670 <__sflush_r+0xac>
 800b5de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5e0:	2e00      	cmp	r6, #0
 800b5e2:	d045      	beq.n	800b670 <__sflush_r+0xac>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5ea:	682f      	ldr	r7, [r5, #0]
 800b5ec:	6a21      	ldr	r1, [r4, #32]
 800b5ee:	602b      	str	r3, [r5, #0]
 800b5f0:	d030      	beq.n	800b654 <__sflush_r+0x90>
 800b5f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	0759      	lsls	r1, r3, #29
 800b5f8:	d505      	bpl.n	800b606 <__sflush_r+0x42>
 800b5fa:	6863      	ldr	r3, [r4, #4]
 800b5fc:	1ad2      	subs	r2, r2, r3
 800b5fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b600:	b10b      	cbz	r3, 800b606 <__sflush_r+0x42>
 800b602:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b604:	1ad2      	subs	r2, r2, r3
 800b606:	2300      	movs	r3, #0
 800b608:	4628      	mov	r0, r5
 800b60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b60c:	6a21      	ldr	r1, [r4, #32]
 800b60e:	47b0      	blx	r6
 800b610:	1c43      	adds	r3, r0, #1
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	d106      	bne.n	800b624 <__sflush_r+0x60>
 800b616:	6829      	ldr	r1, [r5, #0]
 800b618:	291d      	cmp	r1, #29
 800b61a:	d82b      	bhi.n	800b674 <__sflush_r+0xb0>
 800b61c:	4a28      	ldr	r2, [pc, #160]	@ (800b6c0 <__sflush_r+0xfc>)
 800b61e:	410a      	asrs	r2, r1
 800b620:	07d6      	lsls	r6, r2, #31
 800b622:	d427      	bmi.n	800b674 <__sflush_r+0xb0>
 800b624:	2200      	movs	r2, #0
 800b626:	6062      	str	r2, [r4, #4]
 800b628:	6922      	ldr	r2, [r4, #16]
 800b62a:	04d9      	lsls	r1, r3, #19
 800b62c:	6022      	str	r2, [r4, #0]
 800b62e:	d504      	bpl.n	800b63a <__sflush_r+0x76>
 800b630:	1c42      	adds	r2, r0, #1
 800b632:	d101      	bne.n	800b638 <__sflush_r+0x74>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	b903      	cbnz	r3, 800b63a <__sflush_r+0x76>
 800b638:	6560      	str	r0, [r4, #84]	@ 0x54
 800b63a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b63c:	602f      	str	r7, [r5, #0]
 800b63e:	b1b9      	cbz	r1, 800b670 <__sflush_r+0xac>
 800b640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b644:	4299      	cmp	r1, r3
 800b646:	d002      	beq.n	800b64e <__sflush_r+0x8a>
 800b648:	4628      	mov	r0, r5
 800b64a:	f7ff f8a5 	bl	800a798 <_free_r>
 800b64e:	2300      	movs	r3, #0
 800b650:	6363      	str	r3, [r4, #52]	@ 0x34
 800b652:	e00d      	b.n	800b670 <__sflush_r+0xac>
 800b654:	2301      	movs	r3, #1
 800b656:	4628      	mov	r0, r5
 800b658:	47b0      	blx	r6
 800b65a:	4602      	mov	r2, r0
 800b65c:	1c50      	adds	r0, r2, #1
 800b65e:	d1c9      	bne.n	800b5f4 <__sflush_r+0x30>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d0c6      	beq.n	800b5f4 <__sflush_r+0x30>
 800b666:	2b1d      	cmp	r3, #29
 800b668:	d001      	beq.n	800b66e <__sflush_r+0xaa>
 800b66a:	2b16      	cmp	r3, #22
 800b66c:	d11d      	bne.n	800b6aa <__sflush_r+0xe6>
 800b66e:	602f      	str	r7, [r5, #0]
 800b670:	2000      	movs	r0, #0
 800b672:	e021      	b.n	800b6b8 <__sflush_r+0xf4>
 800b674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b678:	b21b      	sxth	r3, r3
 800b67a:	e01a      	b.n	800b6b2 <__sflush_r+0xee>
 800b67c:	690f      	ldr	r7, [r1, #16]
 800b67e:	2f00      	cmp	r7, #0
 800b680:	d0f6      	beq.n	800b670 <__sflush_r+0xac>
 800b682:	0793      	lsls	r3, r2, #30
 800b684:	bf18      	it	ne
 800b686:	2300      	movne	r3, #0
 800b688:	680e      	ldr	r6, [r1, #0]
 800b68a:	bf08      	it	eq
 800b68c:	694b      	ldreq	r3, [r1, #20]
 800b68e:	1bf6      	subs	r6, r6, r7
 800b690:	600f      	str	r7, [r1, #0]
 800b692:	608b      	str	r3, [r1, #8]
 800b694:	2e00      	cmp	r6, #0
 800b696:	ddeb      	ble.n	800b670 <__sflush_r+0xac>
 800b698:	4633      	mov	r3, r6
 800b69a:	463a      	mov	r2, r7
 800b69c:	4628      	mov	r0, r5
 800b69e:	6a21      	ldr	r1, [r4, #32]
 800b6a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b6a4:	47e0      	blx	ip
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	dc07      	bgt.n	800b6ba <__sflush_r+0xf6>
 800b6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b6:	81a3      	strh	r3, [r4, #12]
 800b6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ba:	4407      	add	r7, r0
 800b6bc:	1a36      	subs	r6, r6, r0
 800b6be:	e7e9      	b.n	800b694 <__sflush_r+0xd0>
 800b6c0:	dfbffffe 	.word	0xdfbffffe

0800b6c4 <_fflush_r>:
 800b6c4:	b538      	push	{r3, r4, r5, lr}
 800b6c6:	690b      	ldr	r3, [r1, #16]
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b913      	cbnz	r3, 800b6d4 <_fflush_r+0x10>
 800b6ce:	2500      	movs	r5, #0
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	b118      	cbz	r0, 800b6de <_fflush_r+0x1a>
 800b6d6:	6a03      	ldr	r3, [r0, #32]
 800b6d8:	b90b      	cbnz	r3, 800b6de <_fflush_r+0x1a>
 800b6da:	f7fd ff7d 	bl	80095d8 <__sinit>
 800b6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0f3      	beq.n	800b6ce <_fflush_r+0xa>
 800b6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6e8:	07d0      	lsls	r0, r2, #31
 800b6ea:	d404      	bmi.n	800b6f6 <_fflush_r+0x32>
 800b6ec:	0599      	lsls	r1, r3, #22
 800b6ee:	d402      	bmi.n	800b6f6 <_fflush_r+0x32>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6f2:	f7fe f9e2 	bl	8009aba <__retarget_lock_acquire_recursive>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	f7ff ff63 	bl	800b5c4 <__sflush_r>
 800b6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b700:	4605      	mov	r5, r0
 800b702:	07da      	lsls	r2, r3, #31
 800b704:	d4e4      	bmi.n	800b6d0 <_fflush_r+0xc>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	059b      	lsls	r3, r3, #22
 800b70a:	d4e1      	bmi.n	800b6d0 <_fflush_r+0xc>
 800b70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b70e:	f7fe f9d5 	bl	8009abc <__retarget_lock_release_recursive>
 800b712:	e7dd      	b.n	800b6d0 <_fflush_r+0xc>

0800b714 <__swhatbuf_r>:
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	460c      	mov	r4, r1
 800b718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71c:	4615      	mov	r5, r2
 800b71e:	2900      	cmp	r1, #0
 800b720:	461e      	mov	r6, r3
 800b722:	b096      	sub	sp, #88	@ 0x58
 800b724:	da0c      	bge.n	800b740 <__swhatbuf_r+0x2c>
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	2100      	movs	r1, #0
 800b72a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b72e:	bf14      	ite	ne
 800b730:	2340      	movne	r3, #64	@ 0x40
 800b732:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b736:	2000      	movs	r0, #0
 800b738:	6031      	str	r1, [r6, #0]
 800b73a:	602b      	str	r3, [r5, #0]
 800b73c:	b016      	add	sp, #88	@ 0x58
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	466a      	mov	r2, sp
 800b742:	f000 f863 	bl	800b80c <_fstat_r>
 800b746:	2800      	cmp	r0, #0
 800b748:	dbed      	blt.n	800b726 <__swhatbuf_r+0x12>
 800b74a:	9901      	ldr	r1, [sp, #4]
 800b74c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b750:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b754:	4259      	negs	r1, r3
 800b756:	4159      	adcs	r1, r3
 800b758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b75c:	e7eb      	b.n	800b736 <__swhatbuf_r+0x22>

0800b75e <__smakebuf_r>:
 800b75e:	898b      	ldrh	r3, [r1, #12]
 800b760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b762:	079d      	lsls	r5, r3, #30
 800b764:	4606      	mov	r6, r0
 800b766:	460c      	mov	r4, r1
 800b768:	d507      	bpl.n	800b77a <__smakebuf_r+0x1c>
 800b76a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	2301      	movs	r3, #1
 800b774:	6163      	str	r3, [r4, #20]
 800b776:	b003      	add	sp, #12
 800b778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77a:	466a      	mov	r2, sp
 800b77c:	ab01      	add	r3, sp, #4
 800b77e:	f7ff ffc9 	bl	800b714 <__swhatbuf_r>
 800b782:	9f00      	ldr	r7, [sp, #0]
 800b784:	4605      	mov	r5, r0
 800b786:	4639      	mov	r1, r7
 800b788:	4630      	mov	r0, r6
 800b78a:	f7ff f877 	bl	800a87c <_malloc_r>
 800b78e:	b948      	cbnz	r0, 800b7a4 <__smakebuf_r+0x46>
 800b790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b794:	059a      	lsls	r2, r3, #22
 800b796:	d4ee      	bmi.n	800b776 <__smakebuf_r+0x18>
 800b798:	f023 0303 	bic.w	r3, r3, #3
 800b79c:	f043 0302 	orr.w	r3, r3, #2
 800b7a0:	81a3      	strh	r3, [r4, #12]
 800b7a2:	e7e2      	b.n	800b76a <__smakebuf_r+0xc>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	9b01      	ldr	r3, [sp, #4]
 800b7b2:	6020      	str	r0, [r4, #0]
 800b7b4:	b15b      	cbz	r3, 800b7ce <__smakebuf_r+0x70>
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7bc:	f000 f838 	bl	800b830 <_isatty_r>
 800b7c0:	b128      	cbz	r0, 800b7ce <__smakebuf_r+0x70>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f023 0303 	bic.w	r3, r3, #3
 800b7c8:	f043 0301 	orr.w	r3, r3, #1
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	431d      	orrs	r5, r3
 800b7d2:	81a5      	strh	r5, [r4, #12]
 800b7d4:	e7cf      	b.n	800b776 <__smakebuf_r+0x18>

0800b7d6 <memmove>:
 800b7d6:	4288      	cmp	r0, r1
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	eb01 0402 	add.w	r4, r1, r2
 800b7de:	d902      	bls.n	800b7e6 <memmove+0x10>
 800b7e0:	4284      	cmp	r4, r0
 800b7e2:	4623      	mov	r3, r4
 800b7e4:	d807      	bhi.n	800b7f6 <memmove+0x20>
 800b7e6:	1e43      	subs	r3, r0, #1
 800b7e8:	42a1      	cmp	r1, r4
 800b7ea:	d008      	beq.n	800b7fe <memmove+0x28>
 800b7ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7f4:	e7f8      	b.n	800b7e8 <memmove+0x12>
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	4402      	add	r2, r0
 800b7fa:	428a      	cmp	r2, r1
 800b7fc:	d100      	bne.n	800b800 <memmove+0x2a>
 800b7fe:	bd10      	pop	{r4, pc}
 800b800:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b804:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b808:	e7f7      	b.n	800b7fa <memmove+0x24>
	...

0800b80c <_fstat_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	2300      	movs	r3, #0
 800b810:	4d06      	ldr	r5, [pc, #24]	@ (800b82c <_fstat_r+0x20>)
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	4611      	mov	r1, r2
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	f7f6 fe97 	bl	800254c <_fstat>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d102      	bne.n	800b828 <_fstat_r+0x1c>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	b103      	cbz	r3, 800b828 <_fstat_r+0x1c>
 800b826:	6023      	str	r3, [r4, #0]
 800b828:	bd38      	pop	{r3, r4, r5, pc}
 800b82a:	bf00      	nop
 800b82c:	2000421c 	.word	0x2000421c

0800b830 <_isatty_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	2300      	movs	r3, #0
 800b834:	4d05      	ldr	r5, [pc, #20]	@ (800b84c <_isatty_r+0x1c>)
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f6 fe95 	bl	800256a <_isatty>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_isatty_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_isatty_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	2000421c 	.word	0x2000421c

0800b850 <_sbrk_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	2300      	movs	r3, #0
 800b854:	4d05      	ldr	r5, [pc, #20]	@ (800b86c <_sbrk_r+0x1c>)
 800b856:	4604      	mov	r4, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	f7f6 fe9c 	bl	8002598 <_sbrk>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_sbrk_r+0x1a>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_sbrk_r+0x1a>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	2000421c 	.word	0x2000421c

0800b870 <__assert_func>:
 800b870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b872:	4614      	mov	r4, r2
 800b874:	461a      	mov	r2, r3
 800b876:	4b09      	ldr	r3, [pc, #36]	@ (800b89c <__assert_func+0x2c>)
 800b878:	4605      	mov	r5, r0
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68d8      	ldr	r0, [r3, #12]
 800b87e:	b954      	cbnz	r4, 800b896 <__assert_func+0x26>
 800b880:	4b07      	ldr	r3, [pc, #28]	@ (800b8a0 <__assert_func+0x30>)
 800b882:	461c      	mov	r4, r3
 800b884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b888:	9100      	str	r1, [sp, #0]
 800b88a:	462b      	mov	r3, r5
 800b88c:	4905      	ldr	r1, [pc, #20]	@ (800b8a4 <__assert_func+0x34>)
 800b88e:	f000 f86f 	bl	800b970 <fiprintf>
 800b892:	f000 f87f 	bl	800b994 <abort>
 800b896:	4b04      	ldr	r3, [pc, #16]	@ (800b8a8 <__assert_func+0x38>)
 800b898:	e7f4      	b.n	800b884 <__assert_func+0x14>
 800b89a:	bf00      	nop
 800b89c:	2000002c 	.word	0x2000002c
 800b8a0:	0800bea6 	.word	0x0800bea6
 800b8a4:	0800be78 	.word	0x0800be78
 800b8a8:	0800be6b 	.word	0x0800be6b

0800b8ac <_calloc_r>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	fba1 5402 	umull	r5, r4, r1, r2
 800b8b2:	b93c      	cbnz	r4, 800b8c4 <_calloc_r+0x18>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7fe ffe1 	bl	800a87c <_malloc_r>
 800b8ba:	4606      	mov	r6, r0
 800b8bc:	b928      	cbnz	r0, 800b8ca <_calloc_r+0x1e>
 800b8be:	2600      	movs	r6, #0
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	bd70      	pop	{r4, r5, r6, pc}
 800b8c4:	220c      	movs	r2, #12
 800b8c6:	6002      	str	r2, [r0, #0]
 800b8c8:	e7f9      	b.n	800b8be <_calloc_r+0x12>
 800b8ca:	462a      	mov	r2, r5
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	f7fe f821 	bl	8009914 <memset>
 800b8d2:	e7f5      	b.n	800b8c0 <_calloc_r+0x14>

0800b8d4 <__ascii_mbtowc>:
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	b901      	cbnz	r1, 800b8da <__ascii_mbtowc+0x6>
 800b8d8:	a901      	add	r1, sp, #4
 800b8da:	b142      	cbz	r2, 800b8ee <__ascii_mbtowc+0x1a>
 800b8dc:	b14b      	cbz	r3, 800b8f2 <__ascii_mbtowc+0x1e>
 800b8de:	7813      	ldrb	r3, [r2, #0]
 800b8e0:	600b      	str	r3, [r1, #0]
 800b8e2:	7812      	ldrb	r2, [r2, #0]
 800b8e4:	1e10      	subs	r0, r2, #0
 800b8e6:	bf18      	it	ne
 800b8e8:	2001      	movne	r0, #1
 800b8ea:	b002      	add	sp, #8
 800b8ec:	4770      	bx	lr
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	e7fb      	b.n	800b8ea <__ascii_mbtowc+0x16>
 800b8f2:	f06f 0001 	mvn.w	r0, #1
 800b8f6:	e7f8      	b.n	800b8ea <__ascii_mbtowc+0x16>

0800b8f8 <_realloc_r>:
 800b8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fc:	4680      	mov	r8, r0
 800b8fe:	4615      	mov	r5, r2
 800b900:	460c      	mov	r4, r1
 800b902:	b921      	cbnz	r1, 800b90e <_realloc_r+0x16>
 800b904:	4611      	mov	r1, r2
 800b906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b90a:	f7fe bfb7 	b.w	800a87c <_malloc_r>
 800b90e:	b92a      	cbnz	r2, 800b91c <_realloc_r+0x24>
 800b910:	f7fe ff42 	bl	800a798 <_free_r>
 800b914:	2400      	movs	r4, #0
 800b916:	4620      	mov	r0, r4
 800b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91c:	f000 f841 	bl	800b9a2 <_malloc_usable_size_r>
 800b920:	4285      	cmp	r5, r0
 800b922:	4606      	mov	r6, r0
 800b924:	d802      	bhi.n	800b92c <_realloc_r+0x34>
 800b926:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b92a:	d8f4      	bhi.n	800b916 <_realloc_r+0x1e>
 800b92c:	4629      	mov	r1, r5
 800b92e:	4640      	mov	r0, r8
 800b930:	f7fe ffa4 	bl	800a87c <_malloc_r>
 800b934:	4607      	mov	r7, r0
 800b936:	2800      	cmp	r0, #0
 800b938:	d0ec      	beq.n	800b914 <_realloc_r+0x1c>
 800b93a:	42b5      	cmp	r5, r6
 800b93c:	462a      	mov	r2, r5
 800b93e:	4621      	mov	r1, r4
 800b940:	bf28      	it	cs
 800b942:	4632      	movcs	r2, r6
 800b944:	f7fe f8c9 	bl	8009ada <memcpy>
 800b948:	4621      	mov	r1, r4
 800b94a:	4640      	mov	r0, r8
 800b94c:	f7fe ff24 	bl	800a798 <_free_r>
 800b950:	463c      	mov	r4, r7
 800b952:	e7e0      	b.n	800b916 <_realloc_r+0x1e>

0800b954 <__ascii_wctomb>:
 800b954:	4603      	mov	r3, r0
 800b956:	4608      	mov	r0, r1
 800b958:	b141      	cbz	r1, 800b96c <__ascii_wctomb+0x18>
 800b95a:	2aff      	cmp	r2, #255	@ 0xff
 800b95c:	d904      	bls.n	800b968 <__ascii_wctomb+0x14>
 800b95e:	228a      	movs	r2, #138	@ 0x8a
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	4770      	bx	lr
 800b968:	2001      	movs	r0, #1
 800b96a:	700a      	strb	r2, [r1, #0]
 800b96c:	4770      	bx	lr
	...

0800b970 <fiprintf>:
 800b970:	b40e      	push	{r1, r2, r3}
 800b972:	b503      	push	{r0, r1, lr}
 800b974:	4601      	mov	r1, r0
 800b976:	ab03      	add	r3, sp, #12
 800b978:	4805      	ldr	r0, [pc, #20]	@ (800b990 <fiprintf+0x20>)
 800b97a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97e:	6800      	ldr	r0, [r0, #0]
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	f7ff fd07 	bl	800b394 <_vfiprintf_r>
 800b986:	b002      	add	sp, #8
 800b988:	f85d eb04 	ldr.w	lr, [sp], #4
 800b98c:	b003      	add	sp, #12
 800b98e:	4770      	bx	lr
 800b990:	2000002c 	.word	0x2000002c

0800b994 <abort>:
 800b994:	2006      	movs	r0, #6
 800b996:	b508      	push	{r3, lr}
 800b998:	f000 f834 	bl	800ba04 <raise>
 800b99c:	2001      	movs	r0, #1
 800b99e:	f7f6 fd86 	bl	80024ae <_exit>

0800b9a2 <_malloc_usable_size_r>:
 800b9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a6:	1f18      	subs	r0, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfbc      	itt	lt
 800b9ac:	580b      	ldrlt	r3, [r1, r0]
 800b9ae:	18c0      	addlt	r0, r0, r3
 800b9b0:	4770      	bx	lr

0800b9b2 <_raise_r>:
 800b9b2:	291f      	cmp	r1, #31
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	d904      	bls.n	800b9c6 <_raise_r+0x14>
 800b9bc:	2316      	movs	r3, #22
 800b9be:	6003      	str	r3, [r0, #0]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9c8:	b112      	cbz	r2, 800b9d0 <_raise_r+0x1e>
 800b9ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9ce:	b94b      	cbnz	r3, 800b9e4 <_raise_r+0x32>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 f831 	bl	800ba38 <_getpid_r>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9e0:	f000 b818 	b.w	800ba14 <_kill_r>
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d00a      	beq.n	800b9fe <_raise_r+0x4c>
 800b9e8:	1c59      	adds	r1, r3, #1
 800b9ea:	d103      	bne.n	800b9f4 <_raise_r+0x42>
 800b9ec:	2316      	movs	r3, #22
 800b9ee:	6003      	str	r3, [r0, #0]
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	e7e7      	b.n	800b9c4 <_raise_r+0x12>
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9fc:	4798      	blx	r3
 800b9fe:	2000      	movs	r0, #0
 800ba00:	e7e0      	b.n	800b9c4 <_raise_r+0x12>
	...

0800ba04 <raise>:
 800ba04:	4b02      	ldr	r3, [pc, #8]	@ (800ba10 <raise+0xc>)
 800ba06:	4601      	mov	r1, r0
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f7ff bfd2 	b.w	800b9b2 <_raise_r>
 800ba0e:	bf00      	nop
 800ba10:	2000002c 	.word	0x2000002c

0800ba14 <_kill_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	2300      	movs	r3, #0
 800ba18:	4d06      	ldr	r5, [pc, #24]	@ (800ba34 <_kill_r+0x20>)
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	f7f6 fd34 	bl	800248e <_kill>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d102      	bne.n	800ba30 <_kill_r+0x1c>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	b103      	cbz	r3, 800ba30 <_kill_r+0x1c>
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	2000421c 	.word	0x2000421c

0800ba38 <_getpid_r>:
 800ba38:	f7f6 bd22 	b.w	8002480 <_getpid>

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
