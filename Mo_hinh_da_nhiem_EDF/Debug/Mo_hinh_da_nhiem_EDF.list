
Mo_hinh_da_nhiem_EDF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d090  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800d1a0  0800d1a0  0000e1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7cc  0800d7cc  0000f210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7cc  0800d7cc  0000e7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7d4  0800d7d4  0000f210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7d4  0800d7d4  0000e7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7d8  0800d7d8  0000e7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800d7dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003af4  20000210  0800d9ec  0000f210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003d04  0800d9ec  0000fd04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d396  00000000  00000000  0000f239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000406c  00000000  00000000  0002c5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001958  00000000  00000000  00030640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b5  00000000  00000000  00031f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9cc  00000000  00000000  0003334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfa0  00000000  00000000  0004dd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099d4d  00000000  00000000  0006acb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fe8  00000000  00000000  00104a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010ca34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d188 	.word	0x0800d188

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800d188 	.word	0x0800d188

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <I2C_LCD_ExpanderWrite+0x60>)
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	785a      	ldrb	r2, [r3, #1]
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	490f      	ldr	r1, [pc, #60]	@ (8000fbc <I2C_LCD_ExpanderWrite+0x64>)
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	3304      	adds	r3, #4
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	490b      	ldr	r1, [pc, #44]	@ (8000fbc <I2C_LCD_ExpanderWrite+0x64>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	3308      	adds	r3, #8
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f107 020f 	add.w	r2, r7, #15
 8000fa6:	2364      	movs	r3, #100	@ 0x64
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	2301      	movs	r3, #1
 8000fac:	f002 fa2e 	bl	800340c <HAL_I2C_Master_Transmit>
}
 8000fb0:	bf00      	nop
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000022c 	.word	0x2000022c
 8000fbc:	0800d330 	.word	0x0800d330

08000fc0 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ffbb 	bl	8000f58 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <I2C_LCD_EnPulse+0x78>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	2302      	movs	r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <I2C_LCD_EnPulse+0x78>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d8f7      	bhi.n	8000fee <I2C_LCD_EnPulse+0x2e>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	b2da      	uxtb	r2, r3
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffa4 	bl	8000f58 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <I2C_LCD_EnPulse+0x78>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	2332      	movs	r3, #50	@ 0x32
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <I2C_LCD_EnPulse+0x78>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <I2C_LCD_EnPulse+0x5c>
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200002d0 	.word	0x200002d0

0800103c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800104c:	79ba      	ldrb	r2, [r7, #6]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff80 	bl	8000f58 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8001058:	79ba      	ldrb	r2, [r7, #6]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffae 	bl	8000fc0 <I2C_LCD_EnPulse>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	460b      	mov	r3, r1
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	4613      	mov	r3, r2
 800107c:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	f023 030f 	bic.w	r3, r3, #15
 8001084:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	4313      	orrs	r3, r2
 8001092:	b2da      	uxtb	r2, r3
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ffcf 	bl	800103c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800109e:	7bba      	ldrb	r2, [r7, #14]
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffc6 	bl	800103c <I2C_LCD_Write4Bits>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80010c8:	79b9      	ldrb	r1, [r7, #6]
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2200      	movs	r2, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffcc 	bl	800106c <I2C_LCD_Send>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80010ec:	79b9      	ldrb	r1, [r7, #6]
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2201      	movs	r2, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffba 	bl	800106c <I2C_LCD_Send>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800110a:	bf00      	nop
 800110c:	f001 fbf2 	bl	80028f4 <HAL_GetTick>
 8001110:	4603      	mov	r3, r0
 8001112:	2b31      	cmp	r3, #49	@ 0x31
 8001114:	d9fa      	bls.n	800110c <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2130      	movs	r1, #48	@ 0x30
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffcc 	bl	80010b8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
 8001124:	e011      	b.n	800114a <I2C_LCD_Init+0x4a>
 8001126:	4b36      	ldr	r3, [pc, #216]	@ (8001200 <I2C_LCD_Init+0x100>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <I2C_LCD_Init+0x100>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <I2C_LCD_Init+0x34>
 8001144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001146:	3301      	adds	r3, #1
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	2b04      	cmp	r3, #4
 800114e:	d9ea      	bls.n	8001126 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2130      	movs	r1, #48	@ 0x30
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffaf 	bl	80010b8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
 800115e:	e011      	b.n	8001184 <I2C_LCD_Init+0x84>
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <I2C_LCD_Init+0x100>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <I2C_LCD_Init+0x100>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	429a      	cmp	r2, r3
 800117c:	d8f7      	bhi.n	800116e <I2C_LCD_Init+0x6e>
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	3301      	adds	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	2b04      	cmp	r3, #4
 8001188:	d9ea      	bls.n	8001160 <I2C_LCD_Init+0x60>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2130      	movs	r1, #48	@ 0x30
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff92 	bl	80010b8 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <I2C_LCD_Init+0x100>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	2396      	movs	r3, #150	@ 0x96
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <I2C_LCD_Init+0x100>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <I2C_LCD_Init+0xa0>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2102      	movs	r1, #2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff7f 	bl	80010b8 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2128      	movs	r1, #40	@ 0x28
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff7a 	bl	80010b8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	210c      	movs	r1, #12
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff75 	bl	80010b8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2106      	movs	r1, #6
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff70 	bl	80010b8 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <I2C_LCD_Init+0x104>)
 80011dc:	2104      	movs	r1, #4
 80011de:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <I2C_LCD_Init+0x104>)
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	2208      	movs	r2, #8
 80011ec:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 f809 	bl	8001208 <I2C_LCD_Clear>
}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002d0 	.word	0x200002d0
 8001204:	2000022c 	.word	0x2000022c

08001208 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2101      	movs	r1, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff4e 	bl	80010b8 <I2C_LCD_Cmd>
    DELAY_MS(2);
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e011      	b.n	8001246 <I2C_LCD_Clear+0x3e>
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <I2C_LCD_Clear+0x50>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <I2C_LCD_Clear+0x50>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <I2C_LCD_Clear+0x28>
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d9ea      	bls.n	8001222 <I2C_LCD_Clear+0x1a>
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002d0 	.word	0x200002d0

0800125c <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	460b      	mov	r3, r1
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	4613      	mov	r3, r2
 800126c:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <I2C_LCD_SetCursor+0x7c>)
 8001270:	f107 0408 	add.w	r4, r7, #8
 8001274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001276:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800127a:	79fa      	ldrb	r2, [r7, #7]
 800127c:	4917      	ldr	r1, [pc, #92]	@ (80012dc <I2C_LCD_SetCursor+0x80>)
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	330a      	adds	r3, #10
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	797a      	ldrb	r2, [r7, #5]
 800128e:	429a      	cmp	r2, r3
 8001290:	d90a      	bls.n	80012a8 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	4911      	ldr	r1, [pc, #68]	@ (80012dc <I2C_LCD_SetCursor+0x80>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	330a      	adds	r3, #10
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	3318      	adds	r3, #24
 80012ae:	443b      	add	r3, r7
 80012b0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	4413      	add	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fef4 	bl	80010b8 <I2C_LCD_Cmd>
}
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	0800d1a0 	.word	0x0800d1a0
 80012dc:	0800d330 	.word	0x0800d330

080012e0 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 80012ec:	e008      	b.n	8001300 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	603a      	str	r2, [r7, #0]
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff feee 	bl	80010dc <I2C_LCD_Data>
    while (*Str)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f2      	bne.n	80012ee <I2C_LCD_WriteString+0xe>
    }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <DelayMicro+0x34>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <DelayMicro+0x38>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0ddb      	lsrs	r3, r3, #23
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8001330:	bf00      	nop
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1fa      	bne.n	8001332 <DelayMicro+0x1e>
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000038 	.word	0x20000038
 800134c:	ee9bfab5 	.word	0xee9bfab5

08001350 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 8001362:	2104      	movs	r1, #4
 8001364:	480e      	ldr	r0, [pc, #56]	@ (80013a0 <dht22_init+0x50>)
 8001366:	f001 fe09 	bl	8002f7c <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 800136a:	2304      	movs	r3, #4
 800136c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800136e:	2311      	movs	r3, #17
 8001370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 800137a:	463b      	mov	r3, r7
 800137c:	4619      	mov	r1, r3
 800137e:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <dht22_init+0x50>)
 8001380:	f001 fc78 	bl	8002c74 <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 8001384:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001388:	f001 fabe 	bl	8002908 <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2104      	movs	r1, #4
 8001390:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <dht22_init+0x50>)
 8001392:	f001 fec6 	bl	8003122 <HAL_GPIO_WritePin>

}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40010800 	.word	0x40010800

080013a4 <DHT22_Get_Temp>:

uint8_t DHT22_Get_Temp(float *Temp)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16;
	uint8_t i, j = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2104      	movs	r1, #4
 80013b4:	4854      	ldr	r0, [pc, #336]	@ (8001508 <DHT22_Get_Temp+0x164>)
 80013b6:	f001 feb4 	bl	8003122 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2104      	movs	r1, #4
 80013be:	4852      	ldr	r0, [pc, #328]	@ (8001508 <DHT22_Get_Temp+0x164>)
 80013c0:	f001 feaf 	bl	8003122 <HAL_GPIO_WritePin>
	DelayMicro(2000);
 80013c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013c8:	f7ff ffa4 	bl	8001314 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2104      	movs	r1, #4
 80013d0:	484d      	ldr	r0, [pc, #308]	@ (8001508 <DHT22_Get_Temp+0x164>)
 80013d2:	f001 fea6 	bl	8003122 <HAL_GPIO_WritePin>
	DelayMicro(1200);
 80013d6:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80013da:	f7ff ff9b 	bl	8001314 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);	
 80013de:	2201      	movs	r2, #1
 80013e0:	2104      	movs	r1, #4
 80013e2:	4849      	ldr	r0, [pc, #292]	@ (8001508 <DHT22_Get_Temp+0x164>)
 80013e4:	f001 fe9d 	bl	8003122 <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40 	
 80013e8:	2027      	movs	r0, #39	@ 0x27
 80013ea:	f7ff ff93 	bl	8001314 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 80013ee:	2104      	movs	r1, #4
 80013f0:	4845      	ldr	r0, [pc, #276]	@ (8001508 <DHT22_Get_Temp+0x164>)
 80013f2:	f001 fe7f 	bl	80030f4 <HAL_GPIO_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <DHT22_Get_Temp+0x5c>
	{
		return 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e07e      	b.n	80014fe <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 8001400:	2050      	movs	r0, #80	@ 0x50
 8001402:	f7ff ff87 	bl	8001314 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 8001406:	2104      	movs	r1, #4
 8001408:	483f      	ldr	r0, [pc, #252]	@ (8001508 <DHT22_Get_Temp+0x164>)
 800140a:	f001 fe73 	bl	80030f4 <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <DHT22_Get_Temp+0x74>
	{
		return 0;
 8001414:	2300      	movs	r3, #0
 8001416:	e072      	b.n	80014fe <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 8001418:	2050      	movs	r0, #80	@ 0x50
 800141a:	f7ff ff7b 	bl	8001314 <DelayMicro>

	for (j=0; j<5; j++)
 800141e:	2300      	movs	r3, #0
 8001420:	757b      	strb	r3, [r7, #21]
 8001422:	e040      	b.n	80014a6 <DHT22_Get_Temp+0x102>
	{
		dataArray[j]=0;
 8001424:	7d7b      	ldrb	r3, [r7, #21]
 8001426:	3318      	adds	r3, #24
 8001428:	443b      	add	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 8001430:	2300      	movs	r3, #0
 8001432:	75bb      	strb	r3, [r7, #22]
 8001434:	e031      	b.n	800149a <DHT22_Get_Temp+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);	
 8001436:	bf00      	nop
 8001438:	2104      	movs	r1, #4
 800143a:	4833      	ldr	r0, [pc, #204]	@ (8001508 <DHT22_Get_Temp+0x164>)
 800143c:	f001 fe5a 	bl	80030f4 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f8      	beq.n	8001438 <DHT22_Get_Temp+0x94>
			DelayMicro(30);
 8001446:	201e      	movs	r0, #30
 8001448:	f7ff ff64 	bl	8001314 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 800144c:	2104      	movs	r1, #4
 800144e:	482e      	ldr	r0, [pc, #184]	@ (8001508 <DHT22_Get_Temp+0x164>)
 8001450:	f001 fe50 	bl	80030f4 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d014      	beq.n	8001484 <DHT22_Get_Temp+0xe0>
				dataArray[j] |= (1<<(7-i));
 800145a:	7d7b      	ldrb	r3, [r7, #21]
 800145c:	3318      	adds	r3, #24
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001464:	b25a      	sxtb	r2, r3
 8001466:	7dbb      	ldrb	r3, [r7, #22]
 8001468:	f1c3 0307 	rsb	r3, r3, #7
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	b25b      	sxtb	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b25a      	sxtb	r2, r3
 8001478:	7d7b      	ldrb	r3, [r7, #21]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	3318      	adds	r3, #24
 800147e:	443b      	add	r3, r7
 8001480:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);				
 8001484:	bf00      	nop
 8001486:	2104      	movs	r1, #4
 8001488:	481f      	ldr	r0, [pc, #124]	@ (8001508 <DHT22_Get_Temp+0x164>)
 800148a:	f001 fe33 	bl	80030f4 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d0f8      	beq.n	8001486 <DHT22_Get_Temp+0xe2>
		for(i=0; i<8; i++)
 8001494:	7dbb      	ldrb	r3, [r7, #22]
 8001496:	3301      	adds	r3, #1
 8001498:	75bb      	strb	r3, [r7, #22]
 800149a:	7dbb      	ldrb	r3, [r7, #22]
 800149c:	2b07      	cmp	r3, #7
 800149e:	d9ca      	bls.n	8001436 <DHT22_Get_Temp+0x92>
	for (j=0; j<5; j++)
 80014a0:	7d7b      	ldrb	r3, [r7, #21]
 80014a2:	3301      	adds	r3, #1
 80014a4:	757b      	strb	r3, [r7, #21]
 80014a6:	7d7b      	ldrb	r3, [r7, #21]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d9bb      	bls.n	8001424 <DHT22_Get_Temp+0x80>
		}
	}
	myChecksum = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 80014b0:	2300      	movs	r3, #0
 80014b2:	753b      	strb	r3, [r7, #20]
 80014b4:	e00a      	b.n	80014cc <DHT22_Get_Temp+0x128>
	{
		myChecksum += dataArray[k];
 80014b6:	7d3b      	ldrb	r3, [r7, #20]
 80014b8:	3318      	adds	r3, #24
 80014ba:	443b      	add	r3, r7
 80014bc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	4413      	add	r3, r2
 80014c4:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 80014c6:	7d3b      	ldrb	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	753b      	strb	r3, [r7, #20]
 80014cc:	7d3b      	ldrb	r3, [r7, #20]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d9f1      	bls.n	80014b6 <DHT22_Get_Temp+0x112>
	}
		Temp16 = (dataArray[2] <<8) | dataArray[3];
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b21b      	sxth	r3, r3
 80014e0:	827b      	strh	r3, [r7, #18]

		*Temp = Temp16/10.0f;
 80014e2:	8a7b      	ldrh	r3, [r7, #18]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fb93 	bl	8000c10 <__aeabi_i2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4907      	ldr	r1, [pc, #28]	@ (800150c <DHT22_Get_Temp+0x168>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fc96 	bl	8000e20 <__aeabi_fdiv>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	601a      	str	r2, [r3, #0]
		return 1;
 80014fc:	2301      	movs	r3, #1
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40010800 	.word	0x40010800
 800150c:	41200000 	.word	0x41200000

08001510 <DHT22_Get_Humidity>:
uint8_t DHT22_Get_Humidity(float *Humidity)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Humid16;
	uint8_t i, j = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2104      	movs	r1, #4
 8001520:	4854      	ldr	r0, [pc, #336]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 8001522:	f001 fdfe 	bl	8003122 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2104      	movs	r1, #4
 800152a:	4852      	ldr	r0, [pc, #328]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 800152c:	f001 fdf9 	bl	8003122 <HAL_GPIO_WritePin>
	DelayMicro(2000);
 8001530:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001534:	f7ff feee 	bl	8001314 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2104      	movs	r1, #4
 800153c:	484d      	ldr	r0, [pc, #308]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 800153e:	f001 fdf0 	bl	8003122 <HAL_GPIO_WritePin>
	DelayMicro(1200);
 8001542:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001546:	f7ff fee5 	bl	8001314 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2104      	movs	r1, #4
 800154e:	4849      	ldr	r0, [pc, #292]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 8001550:	f001 fde7 	bl	8003122 <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40
 8001554:	2027      	movs	r0, #39	@ 0x27
 8001556:	f7ff fedd 	bl	8001314 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 800155a:	2104      	movs	r1, #4
 800155c:	4845      	ldr	r0, [pc, #276]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 800155e:	f001 fdc9 	bl	80030f4 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <DHT22_Get_Humidity+0x5c>
	{
		return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e07e      	b.n	800166a <DHT22_Get_Humidity+0x15a>
	}
	DelayMicro(80);
 800156c:	2050      	movs	r0, #80	@ 0x50
 800156e:	f7ff fed1 	bl	8001314 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 8001572:	2104      	movs	r1, #4
 8001574:	483f      	ldr	r0, [pc, #252]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 8001576:	f001 fdbd 	bl	80030f4 <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <DHT22_Get_Humidity+0x74>
	{
		return 0;
 8001580:	2300      	movs	r3, #0
 8001582:	e072      	b.n	800166a <DHT22_Get_Humidity+0x15a>
	}
	DelayMicro(80);
 8001584:	2050      	movs	r0, #80	@ 0x50
 8001586:	f7ff fec5 	bl	8001314 <DelayMicro>

	for (j=0; j<5; j++)
 800158a:	2300      	movs	r3, #0
 800158c:	757b      	strb	r3, [r7, #21]
 800158e:	e040      	b.n	8001612 <DHT22_Get_Humidity+0x102>
	{
		dataArray[j]=0;
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	3318      	adds	r3, #24
 8001594:	443b      	add	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	75bb      	strb	r3, [r7, #22]
 80015a0:	e031      	b.n	8001606 <DHT22_Get_Humidity+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);
 80015a2:	bf00      	nop
 80015a4:	2104      	movs	r1, #4
 80015a6:	4833      	ldr	r0, [pc, #204]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 80015a8:	f001 fda4 	bl	80030f4 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f8      	beq.n	80015a4 <DHT22_Get_Humidity+0x94>
			DelayMicro(30);
 80015b2:	201e      	movs	r0, #30
 80015b4:	f7ff feae 	bl	8001314 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 80015b8:	2104      	movs	r1, #4
 80015ba:	482e      	ldr	r0, [pc, #184]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 80015bc:	f001 fd9a 	bl	80030f4 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d014      	beq.n	80015f0 <DHT22_Get_Humidity+0xe0>
				dataArray[j] |= (1<<(7-i));
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	3318      	adds	r3, #24
 80015ca:	443b      	add	r3, r7
 80015cc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	f1c3 0307 	rsb	r3, r3, #7
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b25a      	sxtb	r2, r3
 80015e4:	7d7b      	ldrb	r3, [r7, #21]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	3318      	adds	r3, #24
 80015ea:	443b      	add	r3, r7
 80015ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);
 80015f0:	bf00      	nop
 80015f2:	2104      	movs	r1, #4
 80015f4:	481f      	ldr	r0, [pc, #124]	@ (8001674 <DHT22_Get_Humidity+0x164>)
 80015f6:	f001 fd7d 	bl	80030f4 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d0f8      	beq.n	80015f2 <DHT22_Get_Humidity+0xe2>
		for(i=0; i<8; i++)
 8001600:	7dbb      	ldrb	r3, [r7, #22]
 8001602:	3301      	adds	r3, #1
 8001604:	75bb      	strb	r3, [r7, #22]
 8001606:	7dbb      	ldrb	r3, [r7, #22]
 8001608:	2b07      	cmp	r3, #7
 800160a:	d9ca      	bls.n	80015a2 <DHT22_Get_Humidity+0x92>
	for (j=0; j<5; j++)
 800160c:	7d7b      	ldrb	r3, [r7, #21]
 800160e:	3301      	adds	r3, #1
 8001610:	757b      	strb	r3, [r7, #21]
 8001612:	7d7b      	ldrb	r3, [r7, #21]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d9bb      	bls.n	8001590 <DHT22_Get_Humidity+0x80>
		}
	}
	myChecksum = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 800161c:	2300      	movs	r3, #0
 800161e:	753b      	strb	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <DHT22_Get_Humidity+0x128>
	{
		myChecksum += dataArray[k];
 8001622:	7d3b      	ldrb	r3, [r7, #20]
 8001624:	3318      	adds	r3, #24
 8001626:	443b      	add	r3, r7
 8001628:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	4413      	add	r3, r2
 8001630:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 8001632:	7d3b      	ldrb	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	753b      	strb	r3, [r7, #20]
 8001638:	7d3b      	ldrb	r3, [r7, #20]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d9f1      	bls.n	8001622 <DHT22_Get_Humidity+0x112>
	}

		Humid16 = (dataArray[0] <<8) | dataArray[1];
 800163e:	7b3b      	ldrb	r3, [r7, #12]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	7b7b      	ldrb	r3, [r7, #13]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21b      	sxth	r3, r3
 800164c:	827b      	strh	r3, [r7, #18]
		
		*Humidity = Humid16/10.0f;
 800164e:	8a7b      	ldrh	r3, [r7, #18]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fadd 	bl	8000c10 <__aeabi_i2f>
 8001656:	4603      	mov	r3, r0
 8001658:	4907      	ldr	r1, [pc, #28]	@ (8001678 <DHT22_Get_Humidity+0x168>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fbe0 	bl	8000e20 <__aeabi_fdiv>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
		return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40010800 	.word	0x40010800
 8001678:	41200000 	.word	0x41200000

0800167c <HCSR04_Init>:

// Hàm tạo xung tín hiệu
static void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

// Khởi tạo cảm biến HCSR04
void HCSR04_Init(TIM_HandleTypeDef *timer) {
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

    htim = timer;  // Gán con trỏ timer
 8001684:	4a03      	ldr	r2, [pc, #12]	@ (8001694 <HCSR04_Init+0x18>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000230 	.word	0x20000230

08001698 <Delay_us>:

// Hàm delay micro giây
void Delay_us(uint16_t us) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
    htim->Instance->CNT = 0;
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <Delay_us+0x40>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(htim);
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <Delay_us+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fe93 	bl	80043dc <HAL_TIM_Base_Start>
    while (htim->Instance->CNT < us);
 80016b6:	bf00      	nop
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <Delay_us+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3f8      	bcc.n	80016b8 <Delay_us+0x20>
    HAL_TIM_Base_Stop(htim);
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <Delay_us+0x40>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fed0 	bl	8004470 <HAL_TIM_Base_Stop>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000230 	.word	0x20000230

080016dc <pulseGPIO>:

// Hàm tạo xung tín hiệu cho chân Trigger
static void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f001 fd17 	bl	8003122 <HAL_GPIO_WritePin>
    Delay_us(10);  // Tạo xung 10 micro giây
 80016f4:	200a      	movs	r0, #10
 80016f6:	f7ff ffcf 	bl	8001698 <Delay_us>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f001 fd0e 	bl	8003122 <HAL_GPIO_WritePin>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HCSR04_Start>:

// Bắt đầu đo khoảng cách
void HCSR04_Start(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    if (hc04_state == HCSR04_IDLE_STATE) {
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HCSR04_Start+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <HCSR04_Start+0x1c>
        pulseGPIO(GPIOA, GPIO_PIN_8);  // Trigger trên chân PA8
 800171c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <HCSR04_Start+0x24>)
 8001722:	f7ff ffdb 	bl	80016dc <pulseGPIO>
        hc04_state = HCSR04_WAIT_RISING_STATE;
 8001726:	4b02      	ldr	r3, [pc, #8]	@ (8001730 <HCSR04_Start+0x20>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
    }
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000022e 	.word	0x2000022e
 8001734:	40010800 	.word	0x40010800

08001738 <HCSR04_Handle>:

// Xử lý trạng thái hoàn thành đo
int HCSR04_Handle(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
    if (hc04_state == HCSR04_COMPLETE_STATE) {
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <HCSR04_Handle+0x48>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d119      	bne.n	8001778 <HCSR04_Handle+0x40>
        hcsr04_distance = 0.017f * htim->Instance->CNT;  // Tính khoảng cách
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HCSR04_Handle+0x4c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fa5b 	bl	8000c08 <__aeabi_ui2f>
 8001752:	4603      	mov	r3, r0
 8001754:	490c      	ldr	r1, [pc, #48]	@ (8001788 <HCSR04_Handle+0x50>)
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff faae 	bl	8000cb8 <__aeabi_fmul>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HCSR04_Handle+0x54>)
 8001762:	601a      	str	r2, [r3, #0]
        HCSR04_Complete_Callback(hcsr04_distance);
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HCSR04_Handle+0x54>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f857 	bl	800181c <HCSR04_Complete_Callback>
        hc04_state = HCSR04_IDLE_STATE;
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <HCSR04_Handle+0x48>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
        return 1;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HCSR04_Handle+0x42>
    }
    return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000022e 	.word	0x2000022e
 8001784:	20000230 	.word	0x20000230
 8001788:	3c8b4396 	.word	0x3c8b4396
 800178c:	20000000 	.word	0x20000000

08001790 <HAL_GPIO_EXTI_Callback>:

// Callback EXTI khi xảy ra ngắt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
    switch (hc04_state) {
 800179a:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x80>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d002      	beq.n	80017a8 <HAL_GPIO_EXTI_Callback+0x18>
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d01a      	beq.n	80017dc <HAL_GPIO_EXTI_Callback+0x4c>
                hc04_state = HCSR04_IDLE_STATE;
            }
            break;

        default:
            break;
 80017a6:	e02e      	b.n	8001806 <HAL_GPIO_EXTI_Callback+0x76>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 80017a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ac:	4819      	ldr	r0, [pc, #100]	@ (8001814 <HAL_GPIO_EXTI_Callback+0x84>)
 80017ae:	f001 fca1 	bl	80030f4 <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10d      	bne.n	80017d4 <HAL_GPIO_EXTI_Callback+0x44>
                htim->Instance->CNT = 0;
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <HAL_GPIO_EXTI_Callback+0x88>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
                hc04_state = HCSRO4_WAIT_FALLING_STATE;
 80017c2:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x80>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
                HAL_TIM_Base_Start(htim);
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <HAL_GPIO_EXTI_Callback+0x88>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fe05 	bl	80043dc <HAL_TIM_Base_Start>
            break;
 80017d2:	e018      	b.n	8001806 <HAL_GPIO_EXTI_Callback+0x76>
                hc04_state = HCSR04_IDLE_STATE;
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x80>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
            break;
 80017da:	e014      	b.n	8001806 <HAL_GPIO_EXTI_Callback+0x76>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80017dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <HAL_GPIO_EXTI_Callback+0x84>)
 80017e2:	f001 fc87 	bl	80030f4 <HAL_GPIO_ReadPin>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d108      	bne.n	80017fe <HAL_GPIO_EXTI_Callback+0x6e>
                HAL_TIM_Base_Stop(htim);
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_GPIO_EXTI_Callback+0x88>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fe3d 	bl	8004470 <HAL_TIM_Base_Stop>
                hc04_state = HCSR04_COMPLETE_STATE;
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x80>)
 80017f8:	2203      	movs	r2, #3
 80017fa:	701a      	strb	r2, [r3, #0]
            break;
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_EXTI_Callback+0x74>
                hc04_state = HCSR04_IDLE_STATE;
 80017fe:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x80>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
            break;
 8001804:	bf00      	nop
    }
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000022e 	.word	0x2000022e
 8001814:	40010c00 	.word	0x40010c00
 8001818:	20000230 	.word	0x20000230

0800181c <HCSR04_Complete_Callback>:

// Callback khi đo xong khoảng cách
__weak void HCSR04_Complete_Callback(float measured_hcsr04_distance) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    // Hàm này được định nghĩa lại trong user file
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
	...

08001830 <Deadline_Init>:
void Function_Get_Humidity(void *argument);
void Function_LCD_UART(void *argument);
void CallbackEDF_Scheduler(void *argument);

/* USER CODE BEGIN PFP */
void Deadline_Init(){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
	  uint32_t current_time = osKernelGetTickCount();  // Get the current system time
 8001836:	f004 f8d9 	bl	80059ec <osKernelGetTickCount>
 800183a:	6078      	str	r0, [r7, #4]
	  tasks[0].earliest_deadline =current_time + tasks[0].deadline;
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <Deadline_Init+0x5c>)
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	4a11      	ldr	r2, [pc, #68]	@ (800188c <Deadline_Init+0x5c>)
 8001846:	6013      	str	r3, [r2, #0]
	  tasks[1].earliest_deadline =current_time +tasks[1].deadline;
 8001848:	4b10      	ldr	r3, [pc, #64]	@ (800188c <Deadline_Init+0x5c>)
 800184a:	699a      	ldr	r2, [r3, #24]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4413      	add	r3, r2
 8001850:	4a0e      	ldr	r2, [pc, #56]	@ (800188c <Deadline_Init+0x5c>)
 8001852:	6113      	str	r3, [r2, #16]
	  tasks[2].earliest_deadline =current_time +tasks[2].deadline;
 8001854:	4b0d      	ldr	r3, [pc, #52]	@ (800188c <Deadline_Init+0x5c>)
 8001856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <Deadline_Init+0x5c>)
 800185e:	6213      	str	r3, [r2, #32]
	  tasks[0].end_cycle = current_time+tasks[0].period;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <Deadline_Init+0x5c>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	4a08      	ldr	r2, [pc, #32]	@ (800188c <Deadline_Init+0x5c>)
 800186a:	6053      	str	r3, [r2, #4]
	  tasks[1].end_cycle = current_time+tasks[1].period;
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <Deadline_Init+0x5c>)
 800186e:	69da      	ldr	r2, [r3, #28]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	4a05      	ldr	r2, [pc, #20]	@ (800188c <Deadline_Init+0x5c>)
 8001876:	6153      	str	r3, [r2, #20]
	  tasks[2].end_cycle = current_time+tasks[2].period;
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <Deadline_Init+0x5c>)
 800187a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	4a02      	ldr	r2, [pc, #8]	@ (800188c <Deadline_Init+0x5c>)
 8001882:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000004 	.word	0x20000004

08001890 <EDF_Scheduler>:
void EDF_Scheduler(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
    // In thông tin các deadline hiện tại để theo dõi
	uint32_t current_time = osKernelGetTickCount(); // Lấy thời gian hiện tại
 8001896:	f004 f8a9 	bl	80059ec <osKernelGetTickCount>
 800189a:	6038      	str	r0, [r7, #0]
//    printf("%lu:::%lu ----%lu----%lu\n",current_time, tasks[0].earliest_deadline, tasks[1].earliest_deadline, tasks[2].earliest_deadline);



    // Cập nhật lại deadline dựa trên chu kỳ cố định
    for (int i = 0; i < NUM_TASKS; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e030      	b.n	8001904 <EDF_Scheduler+0x74>
        if (current_time > tasks[i].end_cycle) {
 80018a2:	4a48      	ldr	r2, [pc, #288]	@ (80019c4 <EDF_Scheduler+0x134>)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d924      	bls.n	80018fe <EDF_Scheduler+0x6e>
            // Cập nhật deadline và chuyển sang chu kỳ kế tiếp
            tasks[i].earliest_deadline = tasks[i].end_cycle + tasks[i].deadline;
 80018b4:	4a43      	ldr	r2, [pc, #268]	@ (80019c4 <EDF_Scheduler+0x134>)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4940      	ldr	r1, [pc, #256]	@ (80019c4 <EDF_Scheduler+0x134>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	440b      	add	r3, r1
 80018c8:	3308      	adds	r3, #8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	441a      	add	r2, r3
 80018ce:	493d      	ldr	r1, [pc, #244]	@ (80019c4 <EDF_Scheduler+0x134>)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	440b      	add	r3, r1
 80018d6:	601a      	str	r2, [r3, #0]
            tasks[i].end_cycle += tasks[i].period;
 80018d8:	4a3a      	ldr	r2, [pc, #232]	@ (80019c4 <EDF_Scheduler+0x134>)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4937      	ldr	r1, [pc, #220]	@ (80019c4 <EDF_Scheduler+0x134>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	440b      	add	r3, r1
 80018ec:	330c      	adds	r3, #12
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	441a      	add	r2, r3
 80018f2:	4934      	ldr	r1, [pc, #208]	@ (80019c4 <EDF_Scheduler+0x134>)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	440b      	add	r3, r1
 80018fa:	3304      	adds	r3, #4
 80018fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_TASKS; i++) {
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3301      	adds	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <EDF_Scheduler+0x138>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbc9      	blt.n	80018a2 <EDF_Scheduler+0x12>
        }
    }

    // Tìm tác vụ có deadline sớm nhất
    int earliest_task = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < NUM_TASKS; i++) {
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	e010      	b.n	800193a <EDF_Scheduler+0xaa>
        if (tasks[i].earliest_deadline < tasks[earliest_task].earliest_deadline) {
 8001918:	4a2a      	ldr	r2, [pc, #168]	@ (80019c4 <EDF_Scheduler+0x134>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	4413      	add	r3, r2
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4928      	ldr	r1, [pc, #160]	@ (80019c4 <EDF_Scheduler+0x134>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	440b      	add	r3, r1
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d201      	bcs.n	8001934 <EDF_Scheduler+0xa4>
            earliest_task = i;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < NUM_TASKS; i++) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3301      	adds	r3, #1
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b23      	ldr	r3, [pc, #140]	@ (80019c8 <EDF_Scheduler+0x138>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbe9      	blt.n	8001918 <EDF_Scheduler+0x88>
        }
    }
    if(tasks[earliest_task].earliest_deadline<tasks[earliest_task].end_cycle){
 8001944:	4a1f      	ldr	r2, [pc, #124]	@ (80019c4 <EDF_Scheduler+0x134>)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	491d      	ldr	r1, [pc, #116]	@ (80019c4 <EDF_Scheduler+0x134>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	440b      	add	r3, r1
 8001956:	3304      	adds	r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d22d      	bcs.n	80019ba <EDF_Scheduler+0x12a>
    	// Ghi nhật ký nhiệm vụ được ưu tiên (cho mục đích kiểm tra)
    	    printf("Task %d ->1 (Deadline: %lu)\n", earliest_task, tasks[earliest_task].earliest_deadline);
 800195e:	4a19      	ldr	r2, [pc, #100]	@ (80019c4 <EDF_Scheduler+0x134>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	4817      	ldr	r0, [pc, #92]	@ (80019cc <EDF_Scheduler+0x13c>)
 800196e:	f008 fd71 	bl	800a454 <iprintf>


    	    osThreadFlagsSet(Get_DistanceHandle, earliest_task == 0 ? FLAG_TASK_0 : 0);
 8001972:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <EDF_Scheduler+0x140>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4619      	mov	r1, r3
 8001984:	4610      	mov	r0, r2
 8001986:	f004 f907 	bl	8005b98 <osThreadFlagsSet>
    	    osThreadFlagsSet(Get_TempHandle, earliest_task == 1 ? FLAG_TASK_1 : 0);
 800198a:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <EDF_Scheduler+0x144>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <EDF_Scheduler+0x108>
 8001994:	2302      	movs	r3, #2
 8001996:	e000      	b.n	800199a <EDF_Scheduler+0x10a>
 8001998:	2300      	movs	r3, #0
 800199a:	4619      	mov	r1, r3
 800199c:	4610      	mov	r0, r2
 800199e:	f004 f8fb 	bl	8005b98 <osThreadFlagsSet>
    	    osThreadFlagsSet(Get_HumidityHandle, earliest_task == 2 ? FLAG_TASK_2 : 0);
 80019a2:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <EDF_Scheduler+0x148>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d101      	bne.n	80019b0 <EDF_Scheduler+0x120>
 80019ac:	2304      	movs	r3, #4
 80019ae:	e000      	b.n	80019b2 <EDF_Scheduler+0x122>
 80019b0:	2300      	movs	r3, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f004 f8ef 	bl	8005b98 <osThreadFlagsSet>
    	//    osThreadSetPriority(Get_DistanceHandle, earliest_task == 0 ? osPriorityNormal1 : osPriorityNormal);
    	//    osThreadSetPriority(Get_TempHandle, earliest_task == 1 ? osPriorityNormal1 : osPriorityNormal);
    	//    osThreadSetPriority(Get_HumidityHandle, earliest_task == 2 ? osPriorityNormal1 : osPriorityNormal);

    }
    }
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000004 	.word	0x20000004
 80019c8:	20000034 	.word	0x20000034
 80019cc:	0800d21c 	.word	0x0800d21c
 80019d0:	20000360 	.word	0x20000360
 80019d4:	20000364 	.word	0x20000364
 80019d8:	20000368 	.word	0x20000368

080019dc <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);  // Transmit char via UART
 80019e4:	1d39      	adds	r1, r7, #4
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	2201      	movs	r2, #1
 80019ec:	4803      	ldr	r0, [pc, #12]	@ (80019fc <__io_putchar+0x20>)
 80019ee:	f003 f957 	bl	8004ca0 <HAL_UART_Transmit>
    return ch;
 80019f2:	687b      	ldr	r3, [r7, #4]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000318 	.word	0x20000318

08001a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a04:	f000 ff4e 	bl	80028a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a08:	f000 f8c4 	bl	8001b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a0c:	f000 fa0e 	bl	8001e2c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a10:	f000 f9e2 	bl	8001dd8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001a14:	f000 f904 	bl	8001c20 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001a18:	f000 f930 	bl	8001c7c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001a1c:	f000 f97e 	bl	8001d1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001a20:	483d      	ldr	r0, [pc, #244]	@ (8001b18 <main+0x118>)
 8001a22:	f002 fcdb 	bl	80043dc <HAL_TIM_Base_Start>
  printf("start\n");
 8001a26:	483d      	ldr	r0, [pc, #244]	@ (8001b1c <main+0x11c>)
 8001a28:	f008 fd7c 	bl	800a524 <puts>
  printf("\"start.\"->start\n");
 8001a2c:	483c      	ldr	r0, [pc, #240]	@ (8001b20 <main+0x120>)
 8001a2e:	f008 fd79 	bl	800a524 <puts>

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001a32:	4b3c      	ldr	r3, [pc, #240]	@ (8001b24 <main+0x124>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	4a3b      	ldr	r2, [pc, #236]	@ (8001b24 <main+0x124>)
 8001a38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3c:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <main+0x128>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a39      	ldr	r2, [pc, #228]	@ (8001b28 <main+0x128>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6013      	str	r3, [r2, #0]

  HCSR04_Init(&htim1);
 8001a4a:	4838      	ldr	r0, [pc, #224]	@ (8001b2c <main+0x12c>)
 8001a4c:	f7ff fe16 	bl	800167c <HCSR04_Init>
  dht22_init();
 8001a50:	f7ff fc7e 	bl	8001350 <dht22_init>
  I2C_LCD_Init(MyI2C_LCD);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fb53 	bl	8001100 <I2C_LCD_Init>

  I2C_LCD_Clear(MyI2C_LCD);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fbd4 	bl	8001208 <I2C_LCD_Clear>
  sprintf(buf,"\"start.\"->start");
 8001a60:	492f      	ldr	r1, [pc, #188]	@ (8001b20 <main+0x120>)
 8001a62:	4833      	ldr	r0, [pc, #204]	@ (8001b30 <main+0x130>)
 8001a64:	f008 fd66 	bl	800a534 <siprintf>
  I2C_LCD_WriteString(MyI2C_LCD, buf);
 8001a68:	4931      	ldr	r1, [pc, #196]	@ (8001b30 <main+0x130>)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fc38 	bl	80012e0 <I2C_LCD_WriteString>

//  HAL_UART_Receive_IT(&huart3, (uint8_t*)&received_char, 1);

  HAL_UART_Receive_IT(&huart3, &RX_data, 1);
 8001a70:	2201      	movs	r2, #1
 8001a72:	4930      	ldr	r1, [pc, #192]	@ (8001b34 <main+0x134>)
 8001a74:	4830      	ldr	r0, [pc, #192]	@ (8001b38 <main+0x138>)
 8001a76:	f003 f99e 	bl	8004db6 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a7a:	f003 ff6f 	bl	800595c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UARTMutex */
  UARTMutexHandle = osMutexNew(&UARTMutex_attributes);
 8001a7e:	482f      	ldr	r0, [pc, #188]	@ (8001b3c <main+0x13c>)
 8001a80:	f004 fa18 	bl	8005eb4 <osMutexNew>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a2e      	ldr	r2, [pc, #184]	@ (8001b40 <main+0x140>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* creation of LCDMutex */
  LCDMutexHandle = osMutexNew(&LCDMutex_attributes);
 8001a8a:	482e      	ldr	r0, [pc, #184]	@ (8001b44 <main+0x144>)
 8001a8c:	f004 fa12 	bl	8005eb4 <osMutexNew>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4a2d      	ldr	r2, [pc, #180]	@ (8001b48 <main+0x148>)
 8001a94:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of EDF_Scheduler */
  EDF_SchedulerHandle = osTimerNew(CallbackEDF_Scheduler, osTimerPeriodic, NULL, &EDF_Scheduler_attributes);
 8001a96:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <main+0x14c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	482c      	ldr	r0, [pc, #176]	@ (8001b50 <main+0x150>)
 8001a9e:	f004 f95f 	bl	8005d60 <osTimerNew>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b54 <main+0x154>)
 8001aa6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* Start the EDF Scheduler timer */
  if (osTimerStart(EDF_SchedulerHandle, 30) != osOK) {
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <main+0x154>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	211e      	movs	r1, #30
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 f9d2 	bl	8005e58 <osTimerStart>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <main+0xc0>
      printf("Failed to start EDF Scheduler timer\n");
 8001aba:	4827      	ldr	r0, [pc, #156]	@ (8001b58 <main+0x158>)
 8001abc:	f008 fd32 	bl	800a524 <puts>
  }
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &LCDQueue_attributes);
 8001ac0:	4a26      	ldr	r2, [pc, #152]	@ (8001b5c <main+0x15c>)
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	2010      	movs	r0, #16
 8001ac6:	f004 fb03 	bl	80060d0 <osMessageQueueNew>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <main+0x160>)
 8001ace:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Get_Distance */
  Get_DistanceHandle = osThreadNew(Function_Get_Distance, NULL, &Get_Distance_attributes);
 8001ad0:	4a24      	ldr	r2, [pc, #144]	@ (8001b64 <main+0x164>)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4824      	ldr	r0, [pc, #144]	@ (8001b68 <main+0x168>)
 8001ad6:	f003 ff9e 	bl	8005a16 <osThreadNew>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <main+0x16c>)
 8001ade:	6013      	str	r3, [r2, #0]

  /* creation of Get_Temp */
  Get_TempHandle = osThreadNew(Function_Get_Temp, NULL, &Get_Temp_attributes);
 8001ae0:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <main+0x170>)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4823      	ldr	r0, [pc, #140]	@ (8001b74 <main+0x174>)
 8001ae6:	f003 ff96 	bl	8005a16 <osThreadNew>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a22      	ldr	r2, [pc, #136]	@ (8001b78 <main+0x178>)
 8001aee:	6013      	str	r3, [r2, #0]

  /* creation of Get_Humidity */
  Get_HumidityHandle = osThreadNew(Function_Get_Humidity, NULL, &Get_Humidity_attributes);
 8001af0:	4a22      	ldr	r2, [pc, #136]	@ (8001b7c <main+0x17c>)
 8001af2:	2100      	movs	r1, #0
 8001af4:	4822      	ldr	r0, [pc, #136]	@ (8001b80 <main+0x180>)
 8001af6:	f003 ff8e 	bl	8005a16 <osThreadNew>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <main+0x184>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* creation of LCD_UART */
  LCD_UARTHandle = osThreadNew(Function_LCD_UART, NULL, &LCD_UART_attributes);
 8001b00:	4a21      	ldr	r2, [pc, #132]	@ (8001b88 <main+0x188>)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4821      	ldr	r0, [pc, #132]	@ (8001b8c <main+0x18c>)
 8001b06:	f003 ff86 	bl	8005a16 <osThreadNew>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a20      	ldr	r2, [pc, #128]	@ (8001b90 <main+0x190>)
 8001b0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b10:	f003 ff46 	bl	80059a0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while(1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <main+0x114>
 8001b18:	200002d0 	.word	0x200002d0
 8001b1c:	0800d23c 	.word	0x0800d23c
 8001b20:	0800d244 	.word	0x0800d244
 8001b24:	e000edf0 	.word	0xe000edf0
 8001b28:	e0001000 	.word	0xe0001000
 8001b2c:	20000288 	.word	0x20000288
 8001b30:	20000380 	.word	0x20000380
 8001b34:	200003a8 	.word	0x200003a8
 8001b38:	20000318 	.word	0x20000318
 8001b3c:	0800d3f4 	.word	0x0800d3f4
 8001b40:	20000378 	.word	0x20000378
 8001b44:	0800d404 	.word	0x0800d404
 8001b48:	2000037c 	.word	0x2000037c
 8001b4c:	0800d3e4 	.word	0x0800d3e4
 8001b50:	0800231d 	.word	0x0800231d
 8001b54:	20000374 	.word	0x20000374
 8001b58:	0800d254 	.word	0x0800d254
 8001b5c:	0800d3cc 	.word	0x0800d3cc
 8001b60:	20000370 	.word	0x20000370
 8001b64:	0800d33c 	.word	0x0800d33c
 8001b68:	08002069 	.word	0x08002069
 8001b6c:	20000360 	.word	0x20000360
 8001b70:	0800d360 	.word	0x0800d360
 8001b74:	080020f1 	.word	0x080020f1
 8001b78:	20000364 	.word	0x20000364
 8001b7c:	0800d384 	.word	0x0800d384
 8001b80:	08002161 	.word	0x08002161
 8001b84:	20000368 	.word	0x20000368
 8001b88:	0800d3a8 	.word	0x0800d3a8
 8001b8c:	080021d1 	.word	0x080021d1
 8001b90:	2000036c 	.word	0x2000036c

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	@ 0x40
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 0318 	add.w	r3, r7, #24
 8001b9e:	2228      	movs	r2, #40	@ 0x28
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f008 fdea 	bl	800a77c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bd2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f001 ff6d 	bl	8003abc <HAL_RCC_OscConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001be8:	f000 fbb9 	bl	800235e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bec:	230f      	movs	r3, #15
 8001bee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2102      	movs	r1, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 f9da 	bl	8003fc0 <HAL_RCC_ClockConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c12:	f000 fba4 	bl	800235e <Error_Handler>
  }
}
 8001c16:	bf00      	nop
 8001c18:	3740      	adds	r7, #64	@ 0x40
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c26:	4a13      	ldr	r2, [pc, #76]	@ (8001c74 <MX_I2C1_Init+0x54>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c2c:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <MX_I2C1_Init+0x58>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c50:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c5c:	4804      	ldr	r0, [pc, #16]	@ (8001c70 <MX_I2C1_Init+0x50>)
 8001c5e:	f001 fa91 	bl	8003184 <HAL_I2C_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c68:	f000 fb79 	bl	800235e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000234 	.word	0x20000234
 8001c74:	40005400 	.word	0x40005400
 8001c78:	000186a0 	.word	0x000186a0

08001c7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d18 <MX_TIM1_Init+0x9c>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001ca0:	223f      	movs	r2, #63	@ 0x3f
 8001ca2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 29999;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001cac:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001cb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cc4:	4813      	ldr	r0, [pc, #76]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001cc6:	f002 fb39 	bl	800433c <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001cd0:	f000 fb45 	bl	800235e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001ce2:	f002 fd2d 	bl	8004740 <HAL_TIM_ConfigClockSource>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001cec:	f000 fb37 	bl	800235e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <MX_TIM1_Init+0x98>)
 8001cfe:	f002 ff0f 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d08:	f000 fb29 	bl	800235e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000288 	.word	0x20000288
 8001d18:	40012c00 	.word	0x40012c00

08001d1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001d22:	4b2a      	ldr	r3, [pc, #168]	@ (8001dcc <MX_TIM3_Init+0xb0>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a29      	ldr	r2, [pc, #164]	@ (8001dcc <MX_TIM3_Init+0xb0>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b27      	ldr	r3, [pc, #156]	@ (8001dcc <MX_TIM3_Init+0xb0>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d54:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <MX_TIM3_Init+0xb8>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d5a:	2247      	movs	r2, #71	@ 0x47
 8001d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d78:	4815      	ldr	r0, [pc, #84]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d7a:	f002 fadf 	bl	800433c <HAL_TIM_Base_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001d84:	f000 faeb 	bl	800235e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4619      	mov	r1, r3
 8001d94:	480e      	ldr	r0, [pc, #56]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001d96:	f002 fcd3 	bl	8004740 <HAL_TIM_ConfigClockSource>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001da0:	f000 fadd 	bl	800235e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	4619      	mov	r1, r3
 8001db2:	4807      	ldr	r0, [pc, #28]	@ (8001dd0 <MX_TIM3_Init+0xb4>)
 8001db4:	f002 feb4 	bl	8004b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001dbe:	f000 face 	bl	800235e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	200002d0 	.word	0x200002d0
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <MX_USART3_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001de2:	4b10      	ldr	r3, [pc, #64]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <MX_USART3_UART_Init+0x4c>)
 8001e10:	f002 fef6 	bl	8004c00 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 faa0 	bl	800235e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000318 	.word	0x20000318
 8001e28:	40004800 	.word	0x40004800

08001e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e40:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a27      	ldr	r2, [pc, #156]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e46:	f043 0320 	orr.w	r3, r3, #32
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a21      	ldr	r2, [pc, #132]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <MX_GPIO_Init+0xb8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001e8e:	4816      	ldr	r0, [pc, #88]	@ (8001ee8 <MX_GPIO_Init+0xbc>)
 8001e90:	f001 f947 	bl	8003122 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 8001e94:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480e      	ldr	r0, [pc, #56]	@ (8001ee8 <MX_GPIO_Init+0xbc>)
 8001eae:	f000 fee1 	bl	8002c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_GPIO_Init+0xc0>)
 8001eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480a      	ldr	r0, [pc, #40]	@ (8001ef0 <MX_GPIO_Init+0xc4>)
 8001ec8:	f000 fed4 	bl	8002c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2105      	movs	r1, #5
 8001ed0:	2028      	movs	r0, #40	@ 0x28
 8001ed2:	f000 fdf2 	bl	8002aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ed6:	2028      	movs	r0, #40	@ 0x28
 8001ed8:	f000 fe0b 	bl	8002af2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	10310000 	.word	0x10310000
 8001ef0:	40010c00 	.word	0x40010c00

08001ef4 <HAL_UART_RxCpltCallback>:
//        // Bắt đầu nhận ký tự tiếp theo
//        HAL_UART_Receive_IT(huart, (uint8_t*)&uart_buffer[uart_buffer_index], 1);
//    }
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if (huart->Instance == huart3.Instance) {
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b45      	ldr	r3, [pc, #276]	@ (8002018 <HAL_UART_RxCpltCallback+0x124>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8082 	bne.w	800200e <HAL_UART_RxCpltCallback+0x11a>
		if(RX_data !=46)
 8001f0a:	4b44      	ldr	r3, [pc, #272]	@ (800201c <HAL_UART_RxCpltCallback+0x128>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f10:	d00b      	beq.n	8001f2a <HAL_UART_RxCpltCallback+0x36>
		{ //NULL ASCII
			rxBuffer[index_buf++] = RX_data;//Them du lieu vao buffer
 8001f12:	4b43      	ldr	r3, [pc, #268]	@ (8002020 <HAL_UART_RxCpltCallback+0x12c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	b2d1      	uxtb	r1, r2
 8001f1a:	4a41      	ldr	r2, [pc, #260]	@ (8002020 <HAL_UART_RxCpltCallback+0x12c>)
 8001f1c:	7011      	strb	r1, [r2, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <HAL_UART_RxCpltCallback+0x128>)
 8001f22:	7819      	ldrb	r1, [r3, #0]
 8001f24:	4b3f      	ldr	r3, [pc, #252]	@ (8002024 <HAL_UART_RxCpltCallback+0x130>)
 8001f26:	5499      	strb	r1, [r3, r2]
 8001f28:	e06c      	b.n	8002004 <HAL_UART_RxCpltCallback+0x110>
		}
		else if(RX_data==46)
 8001f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800201c <HAL_UART_RxCpltCallback+0x128>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f30:	d168      	bne.n	8002004 <HAL_UART_RxCpltCallback+0x110>
		{
			index_buf = 0; // xoa con tro du lieu
 8001f32:	4b3b      	ldr	r3, [pc, #236]	@ (8002020 <HAL_UART_RxCpltCallback+0x12c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
			sprintf (buf,rxBuffer);
 8001f38:	493a      	ldr	r1, [pc, #232]	@ (8002024 <HAL_UART_RxCpltCallback+0x130>)
 8001f3a:	483b      	ldr	r0, [pc, #236]	@ (8002028 <HAL_UART_RxCpltCallback+0x134>)
 8001f3c:	f008 fafa 	bl	800a534 <siprintf>
			memset(rxBuffer,0,strlen(rxBuffer));
 8001f40:	4838      	ldr	r0, [pc, #224]	@ (8002024 <HAL_UART_RxCpltCallback+0x130>)
 8001f42:	f7fe f90f 	bl	8000164 <strlen>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	4835      	ldr	r0, [pc, #212]	@ (8002024 <HAL_UART_RxCpltCallback+0x130>)
 8001f4e:	f008 fc15 	bl	800a77c <memset>
			if(strcmp(buf,"start")==0){
 8001f52:	4936      	ldr	r1, [pc, #216]	@ (800202c <HAL_UART_RxCpltCallback+0x138>)
 8001f54:	4834      	ldr	r0, [pc, #208]	@ (8002028 <HAL_UART_RxCpltCallback+0x134>)
 8001f56:	f7fe f8fb 	bl	8000150 <strcmp>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d113      	bne.n	8001f88 <HAL_UART_RxCpltCallback+0x94>
				        system_running = true;
 8001f60:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_UART_RxCpltCallback+0x13c>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
				//        if (osTimerStart(EDF_SchedulerHandle, 30) != osOK) {
				//            printf("Failed to start EDF Scheduler timer\n");
				//        }
				        Deadline_Init();
 8001f66:	f7ff fc63 	bl	8001830 <Deadline_Init>
				        I2C_LCD_Clear(MyI2C_LCD);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff f94c 	bl	8001208 <I2C_LCD_Clear>
				        LCD_UARTHandle = osThreadNew(Function_LCD_UART, NULL, &LCD_UART_attributes);
 8001f70:	4a30      	ldr	r2, [pc, #192]	@ (8002034 <HAL_UART_RxCpltCallback+0x140>)
 8001f72:	2100      	movs	r1, #0
 8001f74:	4830      	ldr	r0, [pc, #192]	@ (8002038 <HAL_UART_RxCpltCallback+0x144>)
 8001f76:	f003 fd4e 	bl	8005a16 <osThreadNew>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800203c <HAL_UART_RxCpltCallback+0x148>)
 8001f7e:	6013      	str	r3, [r2, #0]
				        printf("System Started\n");
 8001f80:	482f      	ldr	r0, [pc, #188]	@ (8002040 <HAL_UART_RxCpltCallback+0x14c>)
 8001f82:	f008 facf 	bl	800a524 <puts>
 8001f86:	e03d      	b.n	8002004 <HAL_UART_RxCpltCallback+0x110>
			}
			else if(strcmp(buf,"stop")==0){
 8001f88:	492e      	ldr	r1, [pc, #184]	@ (8002044 <HAL_UART_RxCpltCallback+0x150>)
 8001f8a:	4827      	ldr	r0, [pc, #156]	@ (8002028 <HAL_UART_RxCpltCallback+0x134>)
 8001f8c:	f7fe f8e0 	bl	8000150 <strcmp>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_UART_RxCpltCallback+0xd0>
				//    	osTimerStop(EDF_SchedulerHandle);
				        system_running = false;
 8001f96:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_UART_RxCpltCallback+0x13c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
				        osThreadTerminate(LCD_UARTHandle);
 8001f9c:	4b27      	ldr	r3, [pc, #156]	@ (800203c <HAL_UART_RxCpltCallback+0x148>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fdcb 	bl	8005b3c <osThreadTerminate>
				        I2C_LCD_Clear(MyI2C_LCD);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff f92e 	bl	8001208 <I2C_LCD_Clear>
						sprintf(buf,"\"start.\"->start");
 8001fac:	4926      	ldr	r1, [pc, #152]	@ (8002048 <HAL_UART_RxCpltCallback+0x154>)
 8001fae:	481e      	ldr	r0, [pc, #120]	@ (8002028 <HAL_UART_RxCpltCallback+0x134>)
 8001fb0:	f008 fac0 	bl	800a534 <siprintf>
						I2C_LCD_WriteString(MyI2C_LCD, buf);
 8001fb4:	491c      	ldr	r1, [pc, #112]	@ (8002028 <HAL_UART_RxCpltCallback+0x134>)
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff f992 	bl	80012e0 <I2C_LCD_WriteString>
				        printf("System Stopped\n");
 8001fbc:	4823      	ldr	r0, [pc, #140]	@ (800204c <HAL_UART_RxCpltCallback+0x158>)
 8001fbe:	f008 fab1 	bl	800a524 <puts>
 8001fc2:	e01f      	b.n	8002004 <HAL_UART_RxCpltCallback+0x110>
			}
			else if(sscanf(buf, "set %d %lu %lu", &task_id, &deadline, &period)==3){
 8001fc4:	4b22      	ldr	r3, [pc, #136]	@ (8002050 <HAL_UART_RxCpltCallback+0x15c>)
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <HAL_UART_RxCpltCallback+0x160>)
 8001fca:	4a23      	ldr	r2, [pc, #140]	@ (8002058 <HAL_UART_RxCpltCallback+0x164>)
 8001fcc:	4923      	ldr	r1, [pc, #140]	@ (800205c <HAL_UART_RxCpltCallback+0x168>)
 8001fce:	4816      	ldr	r0, [pc, #88]	@ (8002028 <HAL_UART_RxCpltCallback+0x134>)
 8001fd0:	f008 fad0 	bl	800a574 <siscanf>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d114      	bne.n	8002004 <HAL_UART_RxCpltCallback+0x110>
				tasks[task_id].deadline=deadline;
 8001fda:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <HAL_UART_RxCpltCallback+0x164>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <HAL_UART_RxCpltCallback+0x160>)
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	491f      	ldr	r1, [pc, #124]	@ (8002060 <HAL_UART_RxCpltCallback+0x16c>)
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3308      	adds	r3, #8
 8001fea:	601a      	str	r2, [r3, #0]
				tasks[task_id].period=period;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <HAL_UART_RxCpltCallback+0x164>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a17      	ldr	r2, [pc, #92]	@ (8002050 <HAL_UART_RxCpltCallback+0x15c>)
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	491a      	ldr	r1, [pc, #104]	@ (8002060 <HAL_UART_RxCpltCallback+0x16c>)
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	440b      	add	r3, r1
 8001ffa:	330c      	adds	r3, #12
 8001ffc:	601a      	str	r2, [r3, #0]
				printf("Setting done\n");
 8001ffe:	4819      	ldr	r0, [pc, #100]	@ (8002064 <HAL_UART_RxCpltCallback+0x170>)
 8002000:	f008 fa90 	bl	800a524 <puts>
			}
		}
		HAL_UART_Receive_IT(&huart3, &RX_data, 1);
 8002004:	2201      	movs	r2, #1
 8002006:	4905      	ldr	r1, [pc, #20]	@ (800201c <HAL_UART_RxCpltCallback+0x128>)
 8002008:	4803      	ldr	r0, [pc, #12]	@ (8002018 <HAL_UART_RxCpltCallback+0x124>)
 800200a:	f002 fed4 	bl	8004db6 <HAL_UART_Receive_IT>
	}
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000318 	.word	0x20000318
 800201c:	200003a8 	.word	0x200003a8
 8002020:	200003a9 	.word	0x200003a9
 8002024:	200003ac 	.word	0x200003ac
 8002028:	20000380 	.word	0x20000380
 800202c:	0800d23c 	.word	0x0800d23c
 8002030:	200003cc 	.word	0x200003cc
 8002034:	0800d3a8 	.word	0x0800d3a8
 8002038:	080021d1 	.word	0x080021d1
 800203c:	2000036c 	.word	0x2000036c
 8002040:	0800d278 	.word	0x0800d278
 8002044:	0800d288 	.word	0x0800d288
 8002048:	0800d244 	.word	0x0800d244
 800204c:	0800d290 	.word	0x0800d290
 8002050:	200003c8 	.word	0x200003c8
 8002054:	200003c4 	.word	0x200003c4
 8002058:	200003c0 	.word	0x200003c0
 800205c:	0800d2a0 	.word	0x0800d2a0
 8002060:	20000004 	.word	0x20000004
 8002064:	0800d2b0 	.word	0x0800d2b0

08002068 <Function_Get_Distance>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Function_Get_Distance */
void Function_Get_Distance(void *argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t id=1;
 8002070:	2301      	movs	r3, #1
 8002072:	817b      	strh	r3, [r7, #10]
	while(1){
		osThreadFlagsWait(FLAG_TASK_0, osFlagsWaitAny, osWaitForever);
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	2100      	movs	r1, #0
 800207a:	2001      	movs	r0, #1
 800207c:	f003 fdda 	bl	8005c34 <osThreadFlagsWait>

//		printf("test_d\n");
        if (osMutexAcquire(UARTMutexHandle, osWaitForever) == osOK) {
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <Function_Get_Distance+0x78>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	4618      	mov	r0, r3
 800208a:	f003 ff99 	bl	8005fc0 <osMutexAcquire>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ef      	bne.n	8002074 <Function_Get_Distance+0xc>
            // Thực hiện truy cập tài nguyên được bảo vệ
//			printf("test_d\n");


			if (hc04_state == HCSR04_IDLE_STATE) {
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <Function_Get_Distance+0x7c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <Function_Get_Distance+0x38>
				HCSR04_Start();
 800209c:	f7ff fb38 	bl	8001710 <HCSR04_Start>
			}
			int retry;
			retry = HCSR04_Handle();
 80020a0:	f7ff fb4a 	bl	8001738 <HCSR04_Handle>
 80020a4:	60f8      	str	r0, [r7, #12]
			if(retry){
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <Function_Get_Distance+0x4c>
				HCSR04_Start();
 80020ac:	f7ff fb30 	bl	8001710 <HCSR04_Start>
				HCSR04_Handle();
 80020b0:	f7ff fb42 	bl	8001738 <HCSR04_Handle>
			}
			tasks[0].earliest_deadline=tasks[0].end_cycle+tasks[0].deadline;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <Function_Get_Distance+0x80>)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <Function_Get_Distance+0x80>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4413      	add	r3, r2
 80020be:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <Function_Get_Distance+0x80>)
 80020c0:	6013      	str	r3, [r2, #0]
			// Send the result to the LCD queue

			osMessageQueuePut(LCDQueueHandle, &id, 0, osWaitForever);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <Function_Get_Distance+0x84>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	f107 010a 	add.w	r1, r7, #10
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	2200      	movs	r2, #0
 80020d0:	f004 f872 	bl	80061b8 <osMessageQueuePut>
			osMutexRelease(UARTMutexHandle);
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <Function_Get_Distance+0x78>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 ffbc 	bl	8006056 <osMutexRelease>
		osThreadFlagsWait(FLAG_TASK_0, osFlagsWaitAny, osWaitForever);
 80020de:	e7c9      	b.n	8002074 <Function_Get_Distance+0xc>
 80020e0:	20000378 	.word	0x20000378
 80020e4:	2000022e 	.word	0x2000022e
 80020e8:	20000004 	.word	0x20000004
 80020ec:	20000370 	.word	0x20000370

080020f0 <Function_Get_Temp>:
}

/* USER CODE BEGIN Header_Function_Get_Temp */
/* USER CODE END Header_Function_Get_Temp */
void Function_Get_Temp(void *argument)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function_Get_Temp */
	uint16_t id=2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	81fb      	strh	r3, [r7, #14]
	while(1){
		osThreadFlagsWait(FLAG_TASK_1, osFlagsWaitAny, osWaitForever);
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	2100      	movs	r1, #0
 8002102:	2002      	movs	r0, #2
 8002104:	f003 fd96 	bl	8005c34 <osThreadFlagsWait>

//		printf("test_t\n");
        if (osMutexAcquire(UARTMutexHandle, osWaitForever) == osOK) {
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <Function_Get_Temp+0x60>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	4618      	mov	r0, r3
 8002112:	f003 ff55 	bl	8005fc0 <osMutexAcquire>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ef      	bne.n	80020fc <Function_Get_Temp+0xc>
            // Thực hiện truy cập tài nguyên được bảo vệ
//        	printf("test_t\n");


		DHT22_Get_Temp(&T);
 800211c:	480d      	ldr	r0, [pc, #52]	@ (8002154 <Function_Get_Temp+0x64>)
 800211e:	f7ff f941 	bl	80013a4 <DHT22_Get_Temp>


		// Send the result to the LCD queue
		tasks[1].earliest_deadline=tasks[1].end_cycle+tasks[1].deadline;
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <Function_Get_Temp+0x68>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <Function_Get_Temp+0x68>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	4413      	add	r3, r2
 800212c:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <Function_Get_Temp+0x68>)
 800212e:	6113      	str	r3, [r2, #16]
		osMessageQueuePut(LCDQueueHandle, &id, 0, osWaitForever);
 8002130:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <Function_Get_Temp+0x6c>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	f107 010e 	add.w	r1, r7, #14
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	2200      	movs	r2, #0
 800213e:	f004 f83b 	bl	80061b8 <osMessageQueuePut>
		osMutexRelease(UARTMutexHandle);
 8002142:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <Function_Get_Temp+0x60>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f003 ff85 	bl	8006056 <osMutexRelease>
		osThreadFlagsWait(FLAG_TASK_1, osFlagsWaitAny, osWaitForever);
 800214c:	e7d6      	b.n	80020fc <Function_Get_Temp+0xc>
 800214e:	bf00      	nop
 8002150:	20000378 	.word	0x20000378
 8002154:	200003a0 	.word	0x200003a0
 8002158:	20000004 	.word	0x20000004
 800215c:	20000370 	.word	0x20000370

08002160 <Function_Get_Humidity>:
}

/* USER CODE BEGIN Header_Function_Get_Humidity */
/* USER CODE END Header_Function_Get_Humidity */
void Function_Get_Humidity(void *argument)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function_Get_Humidity */
	uint16_t id=3;
 8002168:	2303      	movs	r3, #3
 800216a:	81fb      	strh	r3, [r7, #14]
	while(1){
		osThreadFlagsWait(FLAG_TASK_2, osFlagsWaitAny, osWaitForever);
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	2100      	movs	r1, #0
 8002172:	2004      	movs	r0, #4
 8002174:	f003 fd5e 	bl	8005c34 <osThreadFlagsWait>
//		printf("test_h\n");
        if (osMutexAcquire(UARTMutexHandle, osWaitForever) == osOK) {
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <Function_Get_Humidity+0x60>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f04f 31ff 	mov.w	r1, #4294967295
 8002180:	4618      	mov	r0, r3
 8002182:	f003 ff1d 	bl	8005fc0 <osMutexAcquire>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ef      	bne.n	800216c <Function_Get_Humidity+0xc>
            // Thực hiện truy cập tài nguyên được bảo vệ
//			printf("test_h\n");
			DHT22_Get_Humidity(&H);
 800218c:	480d      	ldr	r0, [pc, #52]	@ (80021c4 <Function_Get_Humidity+0x64>)
 800218e:	f7ff f9bf 	bl	8001510 <DHT22_Get_Humidity>

			// Send the result to the LCD queue
			tasks[2].earliest_deadline=tasks[2].end_cycle+tasks[2].deadline;
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <Function_Get_Humidity+0x68>)
 8002194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002196:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <Function_Get_Humidity+0x68>)
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	4413      	add	r3, r2
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <Function_Get_Humidity+0x68>)
 800219e:	6213      	str	r3, [r2, #32]
			osMessageQueuePut(LCDQueueHandle, &id, 0, osWaitForever);
 80021a0:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <Function_Get_Humidity+0x6c>)
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	f107 010e 	add.w	r1, r7, #14
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	2200      	movs	r2, #0
 80021ae:	f004 f803 	bl	80061b8 <osMessageQueuePut>
			osMutexRelease(UARTMutexHandle);
 80021b2:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <Function_Get_Humidity+0x60>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 ff4d 	bl	8006056 <osMutexRelease>
		osThreadFlagsWait(FLAG_TASK_2, osFlagsWaitAny, osWaitForever);
 80021bc:	e7d6      	b.n	800216c <Function_Get_Humidity+0xc>
 80021be:	bf00      	nop
 80021c0:	20000378 	.word	0x20000378
 80021c4:	200003a4 	.word	0x200003a4
 80021c8:	20000004 	.word	0x20000004
 80021cc:	20000370 	.word	0x20000370

080021d0 <Function_LCD_UART>:
}

/* USER CODE BEGIN Header_Function_LCD_UART */
/* USER CODE END Header_Function_LCD_UART */
void Function_LCD_UART(void *argument)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	uint16_t received_id;

    while (1) {
        // Check if data is available in the queue

        if (osMessageQueueGet(LCDQueueHandle, &received_id, NULL, osWaitForever) == osOK) {
 80021d8:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <Function_LCD_UART+0x118>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f107 010e 	add.w	r1, r7, #14
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	2200      	movs	r2, #0
 80021e6:	f004 f847 	bl	8006278 <osMessageQueueGet>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f3      	bne.n	80021d8 <Function_LCD_UART+0x8>
        	printf("LCD-%d: ",received_id);
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	4619      	mov	r1, r3
 80021f4:	483d      	ldr	r0, [pc, #244]	@ (80022ec <Function_LCD_UART+0x11c>)
 80021f6:	f008 f92d 	bl	800a454 <iprintf>

        	if (osMutexAcquire(LCDMutexHandle, osWaitForever) == osOK) {
 80021fa:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <Function_LCD_UART+0x120>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fedc 	bl	8005fc0 <osMutexAcquire>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1e4      	bne.n	80021d8 <Function_LCD_UART+0x8>
      	  // Kiểm tra giá trị dữ liệu và thực hiện hành động tương ứng
      	  switch (received_id) {
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d044      	beq.n	800229e <Function_LCD_UART+0xce>
 8002214:	2b03      	cmp	r3, #3
 8002216:	dc61      	bgt.n	80022dc <Function_LCD_UART+0x10c>
 8002218:	2b01      	cmp	r3, #1
 800221a:	d002      	beq.n	8002222 <Function_LCD_UART+0x52>
 800221c:	2b02      	cmp	r3, #2
 800221e:	d01f      	beq.n	8002260 <Function_LCD_UART+0x90>
 8002220:	e05c      	b.n	80022dc <Function_LCD_UART+0x10c>
      		  case 1:
//      			printf("LCD111\n");
					sprintf(buf,"D = %.1f cm", hcsr04_distance);
 8002222:	4b34      	ldr	r3, [pc, #208]	@ (80022f4 <Function_LCD_UART+0x124>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe f908 	bl	800043c <__aeabi_f2d>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4931      	ldr	r1, [pc, #196]	@ (80022f8 <Function_LCD_UART+0x128>)
 8002232:	4832      	ldr	r0, [pc, #200]	@ (80022fc <Function_LCD_UART+0x12c>)
 8002234:	f008 f97e 	bl	800a534 <siprintf>
					I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff f80d 	bl	800125c <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(MyI2C_LCD, buf);
 8002242:	492e      	ldr	r1, [pc, #184]	@ (80022fc <Function_LCD_UART+0x12c>)
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff f84b 	bl	80012e0 <I2C_LCD_WriteString>
					printf("D = %.1f\r\n",hcsr04_distance);
 800224a:	4b2a      	ldr	r3, [pc, #168]	@ (80022f4 <Function_LCD_UART+0x124>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f8f4 	bl	800043c <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4829      	ldr	r0, [pc, #164]	@ (8002300 <Function_LCD_UART+0x130>)
 800225a:	f008 f8fb 	bl	800a454 <iprintf>
					break;
 800225e:	e03d      	b.n	80022dc <Function_LCD_UART+0x10c>

      		  case 2:
//      			printf("LCD222\n");
					sprintf(buf,"T=%.1f", T);
 8002260:	4b28      	ldr	r3, [pc, #160]	@ (8002304 <Function_LCD_UART+0x134>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f8e9 	bl	800043c <__aeabi_f2d>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4926      	ldr	r1, [pc, #152]	@ (8002308 <Function_LCD_UART+0x138>)
 8002270:	4822      	ldr	r0, [pc, #136]	@ (80022fc <Function_LCD_UART+0x12c>)
 8002272:	f008 f95f 	bl	800a534 <siprintf>
					I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8002276:	2201      	movs	r2, #1
 8002278:	2100      	movs	r1, #0
 800227a:	2000      	movs	r0, #0
 800227c:	f7fe ffee 	bl	800125c <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(MyI2C_LCD, buf);
 8002280:	491e      	ldr	r1, [pc, #120]	@ (80022fc <Function_LCD_UART+0x12c>)
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff f82c 	bl	80012e0 <I2C_LCD_WriteString>
					printf("T = %.1f\r\n",T);
 8002288:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <Function_LCD_UART+0x134>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f8d5 	bl	800043c <__aeabi_f2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	481d      	ldr	r0, [pc, #116]	@ (800230c <Function_LCD_UART+0x13c>)
 8002298:	f008 f8dc 	bl	800a454 <iprintf>
					break;
 800229c:	e01e      	b.n	80022dc <Function_LCD_UART+0x10c>

      		  case 3:
//      			printf("LCD333\n");
					sprintf(buf,"H=%.1f", H);
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <Function_LCD_UART+0x140>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f8ca 	bl	800043c <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4919      	ldr	r1, [pc, #100]	@ (8002314 <Function_LCD_UART+0x144>)
 80022ae:	4813      	ldr	r0, [pc, #76]	@ (80022fc <Function_LCD_UART+0x12c>)
 80022b0:	f008 f940 	bl	800a534 <siprintf>
					I2C_LCD_SetCursor(MyI2C_LCD, 7, 1);
 80022b4:	2201      	movs	r2, #1
 80022b6:	2107      	movs	r1, #7
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe ffcf 	bl	800125c <I2C_LCD_SetCursor>
					I2C_LCD_WriteString(MyI2C_LCD, buf);
 80022be:	490f      	ldr	r1, [pc, #60]	@ (80022fc <Function_LCD_UART+0x12c>)
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff f80d 	bl	80012e0 <I2C_LCD_WriteString>
					printf("H = %.1f\r\n",H);
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <Function_LCD_UART+0x140>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f8b6 	bl	800043c <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4810      	ldr	r0, [pc, #64]	@ (8002318 <Function_LCD_UART+0x148>)
 80022d6:	f008 f8bd 	bl	800a454 <iprintf>
					break;
 80022da:	bf00      	nop
      	  	  }
      	  	  osMutexRelease(LCDMutexHandle);
 80022dc:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <Function_LCD_UART+0x120>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 feb8 	bl	8006056 <osMutexRelease>
        if (osMessageQueueGet(LCDQueueHandle, &received_id, NULL, osWaitForever) == osOK) {
 80022e6:	e777      	b.n	80021d8 <Function_LCD_UART+0x8>
 80022e8:	20000370 	.word	0x20000370
 80022ec:	0800d2c0 	.word	0x0800d2c0
 80022f0:	2000037c 	.word	0x2000037c
 80022f4:	20000000 	.word	0x20000000
 80022f8:	0800d2cc 	.word	0x0800d2cc
 80022fc:	20000380 	.word	0x20000380
 8002300:	0800d2d8 	.word	0x0800d2d8
 8002304:	200003a0 	.word	0x200003a0
 8002308:	0800d2e4 	.word	0x0800d2e4
 800230c:	0800d2ec 	.word	0x0800d2ec
 8002310:	200003a4 	.word	0x200003a4
 8002314:	0800d2f8 	.word	0x0800d2f8
 8002318:	0800d300 	.word	0x0800d300

0800231c <CallbackEDF_Scheduler>:
  /* USER CODE END Function_LCD_UART */
}

/* CallbackEDF_Scheduler function */
void CallbackEDF_Scheduler(void *argument)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackEDF_Scheduler */
//	if (osMutexAcquire(UARTMutexHandle, osWaitForever) == osOK) {
//		printf("callback\n");
	if (system_running){
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <CallbackEDF_Scheduler+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <CallbackEDF_Scheduler+0x16>
		EDF_Scheduler();
 800232e:	f7ff faaf 	bl	8001890 <EDF_Scheduler>
//	}

//		osMutexRelease(UARTMutexHandle);
//	}
  /* USER CODE END CallbackEDF_Scheduler */
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200003cc 	.word	0x200003cc

08002340 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	d101      	bne.n	8002356 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002352:	f000 fabd 	bl	80028d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
	...

0800236c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_MspInit+0x68>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <HAL_MspInit+0x68>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6193      	str	r3, [r2, #24]
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_MspInit+0x68>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_MspInit+0x68>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a11      	ldr	r2, [pc, #68]	@ (80023d4 <HAL_MspInit+0x68>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <HAL_MspInit+0x68>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	210f      	movs	r1, #15
 80023a6:	f06f 0001 	mvn.w	r0, #1
 80023aa:	f000 fb86 	bl	8002aba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_MspInit+0x6c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_MspInit+0x6c>)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40010000 	.word	0x40010000

080023dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <HAL_I2C_MspInit+0x70>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d123      	bne.n	8002444 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <HAL_I2C_MspInit+0x74>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4a13      	ldr	r2, [pc, #76]	@ (8002450 <HAL_I2C_MspInit+0x74>)
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <HAL_I2C_MspInit+0x74>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002414:	23c0      	movs	r3, #192	@ 0xc0
 8002416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002418:	2312      	movs	r3, #18
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	4619      	mov	r1, r3
 8002426:	480b      	ldr	r0, [pc, #44]	@ (8002454 <HAL_I2C_MspInit+0x78>)
 8002428:	f000 fc24 	bl	8002c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <HAL_I2C_MspInit+0x74>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_I2C_MspInit+0x74>)
 8002432:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002436:	61d3      	str	r3, [r2, #28]
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <HAL_I2C_MspInit+0x74>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002444:	bf00      	nop
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40005400 	.word	0x40005400
 8002450:	40021000 	.word	0x40021000
 8002454:	40010c00 	.word	0x40010c00

08002458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <HAL_TIM_Base_MspInit+0x58>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10c      	bne.n	8002484 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_TIM_Base_MspInit+0x5c>)
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4a11      	ldr	r2, [pc, #68]	@ (80024b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002470:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002474:	6193      	str	r3, [r2, #24]
 8002476:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002482:	e010      	b.n	80024a6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0b      	ldr	r2, [pc, #44]	@ (80024b8 <HAL_TIM_Base_MspInit+0x60>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10b      	bne.n	80024a6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	61d3      	str	r3, [r2, #28]
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_TIM_Base_MspInit+0x5c>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40000400 	.word	0x40000400

080024bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a20      	ldr	r2, [pc, #128]	@ (8002558 <HAL_UART_MspInit+0x9c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d139      	bne.n	8002550 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <HAL_UART_MspInit+0xa0>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <HAL_UART_MspInit+0xa0>)
 80024e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e6:	61d3      	str	r3, [r2, #28]
 80024e8:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <HAL_UART_MspInit+0xa0>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <HAL_UART_MspInit+0xa0>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	4a18      	ldr	r2, [pc, #96]	@ (800255c <HAL_UART_MspInit+0xa0>)
 80024fa:	f043 0308 	orr.w	r3, r3, #8
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b16      	ldr	r3, [pc, #88]	@ (800255c <HAL_UART_MspInit+0xa0>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800250c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002510:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4619      	mov	r1, r3
 8002520:	480f      	ldr	r0, [pc, #60]	@ (8002560 <HAL_UART_MspInit+0xa4>)
 8002522:	f000 fba7 	bl	8002c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800252a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	4619      	mov	r1, r3
 800253a:	4809      	ldr	r0, [pc, #36]	@ (8002560 <HAL_UART_MspInit+0xa4>)
 800253c:	f000 fb9a 	bl	8002c74 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	2105      	movs	r1, #5
 8002544:	2027      	movs	r0, #39	@ 0x27
 8002546:	f000 fab8 	bl	8002aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800254a:	2027      	movs	r0, #39	@ 0x27
 800254c:	f000 fad1 	bl	8002af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002550:	bf00      	nop
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40004800 	.word	0x40004800
 800255c:	40021000 	.word	0x40021000
 8002560:	40010c00 	.word	0x40010c00

08002564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	@ 0x38
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800257a:	4b34      	ldr	r3, [pc, #208]	@ (800264c <HAL_InitTick+0xe8>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a33      	ldr	r2, [pc, #204]	@ (800264c <HAL_InitTick+0xe8>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b31      	ldr	r3, [pc, #196]	@ (800264c <HAL_InitTick+0xe8>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002592:	f107 0210 	add.w	r2, r7, #16
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f001 fe7f 	bl	80042a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025ac:	f001 fe50 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 80025b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80025b2:	e004      	b.n	80025be <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025b4:	f001 fe4c 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 80025b8:	4603      	mov	r3, r0
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c0:	4a23      	ldr	r2, [pc, #140]	@ (8002650 <HAL_InitTick+0xec>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0c9b      	lsrs	r3, r3, #18
 80025c8:	3b01      	subs	r3, #1
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_InitTick+0xf0>)
 80025ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HAL_InitTick+0xf0>)
 80025d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025da:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80025dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <HAL_InitTick+0xf0>)
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80025e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <HAL_InitTick+0xf0>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <HAL_InitTick+0xf0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ee:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <HAL_InitTick+0xf0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80025f4:	4817      	ldr	r0, [pc, #92]	@ (8002654 <HAL_InitTick+0xf0>)
 80025f6:	f001 fea1 	bl	800433c <HAL_TIM_Base_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002600:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002604:	2b00      	cmp	r3, #0
 8002606:	d11b      	bne.n	8002640 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002608:	4812      	ldr	r0, [pc, #72]	@ (8002654 <HAL_InitTick+0xf0>)
 800260a:	f001 ff57 	bl	80044bc <HAL_TIM_Base_Start_IT>
 800260e:	4603      	mov	r3, r0
 8002610:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002614:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002618:	2b00      	cmp	r3, #0
 800261a:	d111      	bne.n	8002640 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800261c:	201c      	movs	r0, #28
 800261e:	f000 fa68 	bl	8002af2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d808      	bhi.n	800263a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002628:	2200      	movs	r2, #0
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	201c      	movs	r0, #28
 800262e:	f000 fa44 	bl	8002aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002632:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <HAL_InitTick+0xf4>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	e002      	b.n	8002640 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002640:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002644:	4618      	mov	r0, r3
 8002646:	3738      	adds	r7, #56	@ 0x38
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	431bde83 	.word	0x431bde83
 8002654:	200003d0 	.word	0x200003d0
 8002658:	2000003c 	.word	0x2000003c

0800265c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <NMI_Handler+0x4>

08002664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <HardFault_Handler+0x4>

0800266c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <MemManage_Handler+0x4>

08002674 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <UsageFault_Handler+0x4>

08002684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <TIM2_IRQHandler+0x10>)
 8002696:	f001 ff63 	bl	8004560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200003d0 	.word	0x200003d0

080026a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <USART3_IRQHandler+0x10>)
 80026aa:	f002 fba9 	bl	8004e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000318 	.word	0x20000318

080026b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80026bc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80026c0:	f000 fd48 	bl	8003154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return 1;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <_kill>:

int _kill(int pid, int sig)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026e0:	f008 f8f4 	bl	800a8cc <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2216      	movs	r2, #22
 80026e8:	601a      	str	r2, [r3, #0]
  return -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_exit>:

void _exit (int status)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffe7 	bl	80026d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <_exit+0x12>

0800270c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e00a      	b.n	8002734 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800271e:	f3af 8000 	nop.w
 8002722:	4601      	mov	r1, r0
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	60ba      	str	r2, [r7, #8]
 800272a:	b2ca      	uxtb	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf0      	blt.n	800271e <_read+0x12>
  }

  return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e009      	b.n	800276c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	60ba      	str	r2, [r7, #8]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f93b 	bl	80019dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf1      	blt.n	8002758 <_write+0x12>
  }
  return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_close>:

int _close(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027a4:	605a      	str	r2, [r3, #4]
  return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <_isatty>:

int _isatty(int file)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
	...

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	@ (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f008 f85c 	bl	800a8cc <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	@ (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20005000 	.word	0x20005000
 8002840:	00000400 	.word	0x00000400
 8002844:	20000418 	.word	0x20000418
 8002848:	20003d08 	.word	0x20003d08

0800284c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002858:	f7ff fff8 	bl	800284c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800285c:	480b      	ldr	r0, [pc, #44]	@ (800288c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800285e:	490c      	ldr	r1, [pc, #48]	@ (8002890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002860:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002864:	e002      	b.n	800286c <LoopCopyDataInit>

08002866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286a:	3304      	adds	r3, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800286c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800286e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002870:	d3f9      	bcc.n	8002866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002872:	4a09      	ldr	r2, [pc, #36]	@ (8002898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002874:	4c09      	ldr	r4, [pc, #36]	@ (800289c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002878:	e001      	b.n	800287e <LoopFillZerobss>

0800287a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800287c:	3204      	adds	r2, #4

0800287e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800287e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002880:	d3fb      	bcc.n	800287a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002882:	f008 f829 	bl	800a8d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002886:	f7ff f8bb 	bl	8001a00 <main>
  bx lr
 800288a:	4770      	bx	lr
  ldr r0, =_sdata
 800288c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002890:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002894:	0800d7dc 	.word	0x0800d7dc
  ldr r2, =_sbss
 8002898:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800289c:	20003d04 	.word	0x20003d04

080028a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028a0:	e7fe      	b.n	80028a0 <ADC1_2_IRQHandler>
	...

080028a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <HAL_Init+0x28>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a07      	ldr	r2, [pc, #28]	@ (80028cc <HAL_Init+0x28>)
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b4:	2003      	movs	r0, #3
 80028b6:	f000 f8f5 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ba:	200f      	movs	r0, #15
 80028bc:	f7ff fe52 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c0:	f7ff fd54 	bl	800236c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_IncTick+0x1c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_IncTick+0x20>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a03      	ldr	r2, [pc, #12]	@ (80028f0 <HAL_IncTick+0x20>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20000040 	.word	0x20000040
 80028f0:	2000041c 	.word	0x2000041c

080028f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return uwTick;
 80028f8:	4b02      	ldr	r3, [pc, #8]	@ (8002904 <HAL_GetTick+0x10>)
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	2000041c 	.word	0x2000041c

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff fff0 	bl	80028f4 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffe0 	bl	80028f4 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000040 	.word	0x20000040

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4906      	ldr	r1, [pc, #24]	@ (80029e8 <__NVIC_EnableIRQ+0x34>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	@ (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	@ (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	@ 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
         );
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	@ 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff4f 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002acc:	f7ff ff64 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff ffb2 	bl	8002a40 <NVIC_EncodePriority>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff81 	bl	80029ec <__NVIC_SetPriority>
}
 8002aea:	bf00      	nop
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	4603      	mov	r3, r0
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff57 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d008      	beq.n	8002b38 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e020      	b.n	8002b7a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 020e 	bic.w	r2, r2, #14
 8002b46:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d005      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e051      	b.n	8002c4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 020e 	bic.w	r2, r2, #14
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a22      	ldr	r2, [pc, #136]	@ (8002c58 <HAL_DMA_Abort_IT+0xd4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d029      	beq.n	8002c26 <HAL_DMA_Abort_IT+0xa2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	@ (8002c5c <HAL_DMA_Abort_IT+0xd8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x9e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <HAL_DMA_Abort_IT+0xdc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01a      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x98>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1e      	ldr	r2, [pc, #120]	@ (8002c64 <HAL_DMA_Abort_IT+0xe0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d012      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x92>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c68 <HAL_DMA_Abort_IT+0xe4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00a      	beq.n	8002c10 <HAL_DMA_Abort_IT+0x8c>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <HAL_DMA_Abort_IT+0xe8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d102      	bne.n	8002c0a <HAL_DMA_Abort_IT+0x86>
 8002c04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c08:	e00e      	b.n	8002c28 <HAL_DMA_Abort_IT+0xa4>
 8002c0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c0e:	e00b      	b.n	8002c28 <HAL_DMA_Abort_IT+0xa4>
 8002c10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c14:	e008      	b.n	8002c28 <HAL_DMA_Abort_IT+0xa4>
 8002c16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c1a:	e005      	b.n	8002c28 <HAL_DMA_Abort_IT+0xa4>
 8002c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c20:	e002      	b.n	8002c28 <HAL_DMA_Abort_IT+0xa4>
 8002c22:	2310      	movs	r3, #16
 8002c24:	e000      	b.n	8002c28 <HAL_DMA_Abort_IT+0xa4>
 8002c26:	2301      	movs	r3, #1
 8002c28:	4a11      	ldr	r2, [pc, #68]	@ (8002c70 <HAL_DMA_Abort_IT+0xec>)
 8002c2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
    } 
  }
  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40020008 	.word	0x40020008
 8002c5c:	4002001c 	.word	0x4002001c
 8002c60:	40020030 	.word	0x40020030
 8002c64:	40020044 	.word	0x40020044
 8002c68:	40020058 	.word	0x40020058
 8002c6c:	4002006c 	.word	0x4002006c
 8002c70:	40020000 	.word	0x40020000

08002c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b08b      	sub	sp, #44	@ 0x2c
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c86:	e169      	b.n	8002f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	f040 8158 	bne.w	8002f56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4a9a      	ldr	r2, [pc, #616]	@ (8002f14 <HAL_GPIO_Init+0x2a0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d05e      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cb0:	4a98      	ldr	r2, [pc, #608]	@ (8002f14 <HAL_GPIO_Init+0x2a0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d875      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cb6:	4a98      	ldr	r2, [pc, #608]	@ (8002f18 <HAL_GPIO_Init+0x2a4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d058      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cbc:	4a96      	ldr	r2, [pc, #600]	@ (8002f18 <HAL_GPIO_Init+0x2a4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d86f      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cc2:	4a96      	ldr	r2, [pc, #600]	@ (8002f1c <HAL_GPIO_Init+0x2a8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d052      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cc8:	4a94      	ldr	r2, [pc, #592]	@ (8002f1c <HAL_GPIO_Init+0x2a8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d869      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cce:	4a94      	ldr	r2, [pc, #592]	@ (8002f20 <HAL_GPIO_Init+0x2ac>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04c      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002cd4:	4a92      	ldr	r2, [pc, #584]	@ (8002f20 <HAL_GPIO_Init+0x2ac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d863      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cda:	4a92      	ldr	r2, [pc, #584]	@ (8002f24 <HAL_GPIO_Init+0x2b0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d046      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
 8002ce0:	4a90      	ldr	r2, [pc, #576]	@ (8002f24 <HAL_GPIO_Init+0x2b0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d85d      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002ce6:	2b12      	cmp	r3, #18
 8002ce8:	d82a      	bhi.n	8002d40 <HAL_GPIO_Init+0xcc>
 8002cea:	2b12      	cmp	r3, #18
 8002cec:	d859      	bhi.n	8002da2 <HAL_GPIO_Init+0x12e>
 8002cee:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf4 <HAL_GPIO_Init+0x80>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d6f 	.word	0x08002d6f
 8002cf8:	08002d49 	.word	0x08002d49
 8002cfc:	08002d5b 	.word	0x08002d5b
 8002d00:	08002d9d 	.word	0x08002d9d
 8002d04:	08002da3 	.word	0x08002da3
 8002d08:	08002da3 	.word	0x08002da3
 8002d0c:	08002da3 	.word	0x08002da3
 8002d10:	08002da3 	.word	0x08002da3
 8002d14:	08002da3 	.word	0x08002da3
 8002d18:	08002da3 	.word	0x08002da3
 8002d1c:	08002da3 	.word	0x08002da3
 8002d20:	08002da3 	.word	0x08002da3
 8002d24:	08002da3 	.word	0x08002da3
 8002d28:	08002da3 	.word	0x08002da3
 8002d2c:	08002da3 	.word	0x08002da3
 8002d30:	08002da3 	.word	0x08002da3
 8002d34:	08002da3 	.word	0x08002da3
 8002d38:	08002d51 	.word	0x08002d51
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	4a79      	ldr	r2, [pc, #484]	@ (8002f28 <HAL_GPIO_Init+0x2b4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d46:	e02c      	b.n	8002da2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	623b      	str	r3, [r7, #32]
          break;
 8002d4e:	e029      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	3304      	adds	r3, #4
 8002d56:	623b      	str	r3, [r7, #32]
          break;
 8002d58:	e024      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e01f      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	e01a      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d76:	2304      	movs	r3, #4
 8002d78:	623b      	str	r3, [r7, #32]
          break;
 8002d7a:	e013      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d84:	2308      	movs	r3, #8
 8002d86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	611a      	str	r2, [r3, #16]
          break;
 8002d8e:	e009      	b.n	8002da4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d90:	2308      	movs	r3, #8
 8002d92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	615a      	str	r2, [r3, #20]
          break;
 8002d9a:	e003      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
          break;
 8002da0:	e000      	b.n	8002da4 <HAL_GPIO_Init+0x130>
          break;
 8002da2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	@ 0xff
 8002da8:	d801      	bhi.n	8002dae <HAL_GPIO_Init+0x13a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	e001      	b.n	8002db2 <HAL_GPIO_Init+0x13e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3304      	adds	r3, #4
 8002db2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2bff      	cmp	r3, #255	@ 0xff
 8002db8:	d802      	bhi.n	8002dc0 <HAL_GPIO_Init+0x14c>
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	e002      	b.n	8002dc6 <HAL_GPIO_Init+0x152>
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	3b08      	subs	r3, #8
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	210f      	movs	r1, #15
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	431a      	orrs	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80b1 	beq.w	8002f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df4:	4b4d      	ldr	r3, [pc, #308]	@ (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6193      	str	r3, [r2, #24]
 8002e00:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <HAL_GPIO_Init+0x2b8>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e0c:	4a48      	ldr	r2, [pc, #288]	@ (8002f30 <HAL_GPIO_Init+0x2bc>)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a40      	ldr	r2, [pc, #256]	@ (8002f34 <HAL_GPIO_Init+0x2c0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d013      	beq.n	8002e60 <HAL_GPIO_Init+0x1ec>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f38 <HAL_GPIO_Init+0x2c4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00d      	beq.n	8002e5c <HAL_GPIO_Init+0x1e8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3e      	ldr	r2, [pc, #248]	@ (8002f3c <HAL_GPIO_Init+0x2c8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <HAL_GPIO_Init+0x1e4>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f40 <HAL_GPIO_Init+0x2cc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_GPIO_Init+0x1e0>
 8002e50:	2303      	movs	r3, #3
 8002e52:	e006      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e54:	2304      	movs	r3, #4
 8002e56:	e004      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e002      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_GPIO_Init+0x1ee>
 8002e60:	2300      	movs	r3, #0
 8002e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e64:	f002 0203 	and.w	r2, r2, #3
 8002e68:	0092      	lsls	r2, r2, #2
 8002e6a:	4093      	lsls	r3, r2
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e72:	492f      	ldr	r1, [pc, #188]	@ (8002f30 <HAL_GPIO_Init+0x2bc>)
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	089b      	lsrs	r3, r3, #2
 8002e78:	3302      	adds	r3, #2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	492c      	ldr	r1, [pc, #176]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	4928      	ldr	r1, [pc, #160]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002eb4:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4922      	ldr	r1, [pc, #136]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	491e      	ldr	r1, [pc, #120]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002edc:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4918      	ldr	r1, [pc, #96]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eea:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4914      	ldr	r1, [pc, #80]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d021      	beq.n	8002f48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f04:	4b0f      	ldr	r3, [pc, #60]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <HAL_GPIO_Init+0x2d0>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e021      	b.n	8002f56 <HAL_GPIO_Init+0x2e2>
 8002f12:	bf00      	nop
 8002f14:	10320000 	.word	0x10320000
 8002f18:	10310000 	.word	0x10310000
 8002f1c:	10220000 	.word	0x10220000
 8002f20:	10210000 	.word	0x10210000
 8002f24:	10120000 	.word	0x10120000
 8002f28:	10110000 	.word	0x10110000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40010800 	.word	0x40010800
 8002f38:	40010c00 	.word	0x40010c00
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	40011400 	.word	0x40011400
 8002f44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	4909      	ldr	r1, [pc, #36]	@ (8002f78 <HAL_GPIO_Init+0x304>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f ae8e 	bne.w	8002c88 <HAL_GPIO_Init+0x14>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	372c      	adds	r7, #44	@ 0x2c
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	40010400 	.word	0x40010400

08002f7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002f8a:	e09a      	b.n	80030c2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808d 	beq.w	80030bc <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80030dc <HAL_GPIO_DeInit+0x160>)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a46      	ldr	r2, [pc, #280]	@ (80030e0 <HAL_GPIO_DeInit+0x164>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d013      	beq.n	8002ff4 <HAL_GPIO_DeInit+0x78>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a45      	ldr	r2, [pc, #276]	@ (80030e4 <HAL_GPIO_DeInit+0x168>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00d      	beq.n	8002ff0 <HAL_GPIO_DeInit+0x74>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a44      	ldr	r2, [pc, #272]	@ (80030e8 <HAL_GPIO_DeInit+0x16c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <HAL_GPIO_DeInit+0x70>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a43      	ldr	r2, [pc, #268]	@ (80030ec <HAL_GPIO_DeInit+0x170>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_GPIO_DeInit+0x6c>
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e006      	b.n	8002ff6 <HAL_GPIO_DeInit+0x7a>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	e004      	b.n	8002ff6 <HAL_GPIO_DeInit+0x7a>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e002      	b.n	8002ff6 <HAL_GPIO_DeInit+0x7a>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <HAL_GPIO_DeInit+0x7a>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	f002 0203 	and.w	r2, r2, #3
 8002ffc:	0092      	lsls	r2, r2, #2
 8002ffe:	4093      	lsls	r3, r2
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	429a      	cmp	r2, r3
 8003004:	d132      	bne.n	800306c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003006:	4b3a      	ldr	r3, [pc, #232]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	43db      	mvns	r3, r3
 800300e:	4938      	ldr	r1, [pc, #224]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 8003010:	4013      	ands	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003014:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	43db      	mvns	r3, r3
 800301c:	4934      	ldr	r1, [pc, #208]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 800301e:	4013      	ands	r3, r2
 8003020:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003022:	4b33      	ldr	r3, [pc, #204]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	43db      	mvns	r3, r3
 800302a:	4931      	ldr	r1, [pc, #196]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 800302c:	4013      	ands	r3, r2
 800302e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003030:	4b2f      	ldr	r3, [pc, #188]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	43db      	mvns	r3, r3
 8003038:	492d      	ldr	r1, [pc, #180]	@ (80030f0 <HAL_GPIO_DeInit+0x174>)
 800303a:	4013      	ands	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800304e:	4a23      	ldr	r2, [pc, #140]	@ (80030dc <HAL_GPIO_DeInit+0x160>)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	43da      	mvns	r2, r3
 800305e:	481f      	ldr	r0, [pc, #124]	@ (80030dc <HAL_GPIO_DeInit+0x160>)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	400a      	ands	r2, r1
 8003066:	3302      	adds	r3, #2
 8003068:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2bff      	cmp	r3, #255	@ 0xff
 8003070:	d801      	bhi.n	8003076 <HAL_GPIO_DeInit+0xfa>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	e001      	b.n	800307a <HAL_GPIO_DeInit+0xfe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2bff      	cmp	r3, #255	@ 0xff
 8003080:	d802      	bhi.n	8003088 <HAL_GPIO_DeInit+0x10c>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	e002      	b.n	800308e <HAL_GPIO_DeInit+0x112>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3b08      	subs	r3, #8
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	210f      	movs	r1, #15
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	2104      	movs	r1, #4
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	431a      	orrs	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]
    }

    position++;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3301      	adds	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f47f af5e 	bne.w	8002f8c <HAL_GPIO_DeInit+0x10>
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40010800 	.word	0x40010800
 80030e4:	40010c00 	.word	0x40010c00
 80030e8:	40011000 	.word	0x40011000
 80030ec:	40011400 	.word	0x40011400
 80030f0:	40010400 	.word	0x40010400

080030f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	e001      	b.n	8003116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003116:	7bfb      	ldrb	r3, [r7, #15]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	807b      	strh	r3, [r7, #2]
 800312e:	4613      	mov	r3, r2
 8003130:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003132:	787b      	ldrb	r3, [r7, #1]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003138:	887a      	ldrh	r2, [r7, #2]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800313e:	e003      	b.n	8003148 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	041a      	lsls	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	611a      	str	r2, [r3, #16]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
	...

08003154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800315e:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d006      	beq.n	8003178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316a:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fb0c 	bl	8001790 <HAL_GPIO_EXTI_Callback>
  }
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e12b      	b.n	80033ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff f916 	bl	80023dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	@ 0x24
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e8:	f001 f832 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a81      	ldr	r2, [pc, #516]	@ (80033f8 <HAL_I2C_Init+0x274>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d807      	bhi.n	8003208 <HAL_I2C_Init+0x84>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a80      	ldr	r2, [pc, #512]	@ (80033fc <HAL_I2C_Init+0x278>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e006      	b.n	8003216 <HAL_I2C_Init+0x92>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a7d      	ldr	r2, [pc, #500]	@ (8003400 <HAL_I2C_Init+0x27c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0e7      	b.n	80033ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a78      	ldr	r2, [pc, #480]	@ (8003404 <HAL_I2C_Init+0x280>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0c9b      	lsrs	r3, r3, #18
 8003228:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a6a      	ldr	r2, [pc, #424]	@ (80033f8 <HAL_I2C_Init+0x274>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d802      	bhi.n	8003258 <HAL_I2C_Init+0xd4>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3301      	adds	r3, #1
 8003256:	e009      	b.n	800326c <HAL_I2C_Init+0xe8>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	4a69      	ldr	r2, [pc, #420]	@ (8003408 <HAL_I2C_Init+0x284>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	3301      	adds	r3, #1
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	430b      	orrs	r3, r1
 8003272:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800327e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	495c      	ldr	r1, [pc, #368]	@ (80033f8 <HAL_I2C_Init+0x274>)
 8003288:	428b      	cmp	r3, r1
 800328a:	d819      	bhi.n	80032c0 <HAL_I2C_Init+0x13c>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e59      	subs	r1, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fbb1 f3f3 	udiv	r3, r1, r3
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032a0:	400b      	ands	r3, r1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_I2C_Init+0x138>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1e59      	subs	r1, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ba:	e051      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 80032bc:	2304      	movs	r3, #4
 80032be:	e04f      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <HAL_I2C_Init+0x168>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e012      	b.n	8003312 <HAL_I2C_Init+0x18e>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1e58      	subs	r0, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	0099      	lsls	r1, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	3301      	adds	r3, #1
 8003304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_I2C_Init+0x196>
 8003316:	2301      	movs	r3, #1
 8003318:	e022      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10e      	bne.n	8003340 <HAL_I2C_Init+0x1bc>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e58      	subs	r0, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	440b      	add	r3, r1
 8003330:	fbb0 f3f3 	udiv	r3, r0, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800333e:	e00f      	b.n	8003360 <HAL_I2C_Init+0x1dc>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	6809      	ldr	r1, [r1, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800338e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6911      	ldr	r1, [r2, #16]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	4311      	orrs	r1, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	000186a0 	.word	0x000186a0
 80033fc:	001e847f 	.word	0x001e847f
 8003400:	003d08ff 	.word	0x003d08ff
 8003404:	431bde83 	.word	0x431bde83
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	461a      	mov	r2, r3
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
 800341c:	4613      	mov	r3, r2
 800341e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003420:	f7ff fa68 	bl	80028f4 <HAL_GetTick>
 8003424:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	f040 80e0 	bne.w	80035f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2319      	movs	r3, #25
 800343a:	2201      	movs	r2, #1
 800343c:	4970      	ldr	r1, [pc, #448]	@ (8003600 <HAL_I2C_Master_Transmit+0x1f4>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f964 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
 800344c:	e0d3      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_I2C_Master_Transmit+0x50>
 8003458:	2302      	movs	r3, #2
 800345a:	e0cc      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d007      	beq.n	8003482 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003490:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	@ 0x21
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2210      	movs	r2, #16
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	893a      	ldrh	r2, [r7, #8]
 80034b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a50      	ldr	r2, [pc, #320]	@ (8003604 <HAL_I2C_Master_Transmit+0x1f8>)
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034c4:	8979      	ldrh	r1, [r7, #10]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f89c 	bl	8003608 <I2C_MasterRequestWrite>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e08d      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034f0:	e066      	b.n	80035c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	6a39      	ldr	r1, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fa22 	bl	8003940 <I2C_WaitOnTXEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b04      	cmp	r3, #4
 8003508:	d107      	bne.n	800351a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06b      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d11b      	bne.n	8003594 <HAL_I2C_Master_Transmit+0x188>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d017      	beq.n	8003594 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	6a39      	ldr	r1, [r7, #32]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fa19 	bl	80039d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00d      	beq.n	80035c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d107      	bne.n	80035bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e01a      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d194      	bne.n	80034f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	00100002 	.word	0x00100002
 8003604:	ffff0000 	.word	0xffff0000

08003608 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	460b      	mov	r3, r1
 8003616:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d006      	beq.n	8003632 <I2C_MasterRequestWrite+0x2a>
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d003      	beq.n	8003632 <I2C_MasterRequestWrite+0x2a>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003630:	d108      	bne.n	8003644 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e00b      	b.n	800365c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	2b12      	cmp	r3, #18
 800364a:	d107      	bne.n	800365c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800365a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f84f 	bl	800370c <I2C_WaitOnFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003682:	d103      	bne.n	800368c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e035      	b.n	80036fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003698:	d108      	bne.n	80036ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036a8:	611a      	str	r2, [r3, #16]
 80036aa:	e01b      	b.n	80036e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036ac:	897b      	ldrh	r3, [r7, #10]
 80036ae:	11db      	asrs	r3, r3, #7
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 0306 	and.w	r3, r3, #6
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f063 030f 	orn	r3, r3, #15
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	490e      	ldr	r1, [pc, #56]	@ (8003704 <I2C_MasterRequestWrite+0xfc>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f898 	bl	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e010      	b.n	80036fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	4907      	ldr	r1, [pc, #28]	@ (8003708 <I2C_MasterRequestWrite+0x100>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f888 	bl	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00010008 	.word	0x00010008
 8003708:	00010002 	.word	0x00010002

0800370c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	4613      	mov	r3, r2
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800371c:	e048      	b.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d044      	beq.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003726:	f7ff f8e5 	bl	80028f4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d139      	bne.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d10d      	bne.n	8003762 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	43da      	mvns	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4013      	ands	r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	e00c      	b.n	800377c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	429a      	cmp	r2, r3
 8003780:	d116      	bne.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e023      	b.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10d      	bne.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	e00c      	b.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d093      	beq.n	800371e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380e:	e071      	b.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381e:	d123      	bne.n	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003838:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e067      	b.n	8003938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386e:	d041      	beq.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003870:	f7ff f840 	bl	80028f4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d136      	bne.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10c      	bne.n	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	43da      	mvns	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4013      	ands	r3, r2
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	bf14      	ite	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	2300      	moveq	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	e00b      	b.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e021      	b.n	8003938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10c      	bne.n	8003918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	43da      	mvns	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e00b      	b.n	8003930 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4013      	ands	r3, r2
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	f47f af6d 	bne.w	8003810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394c:	e034      	b.n	80039b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f886 	bl	8003a60 <I2C_IsAcknowledgeFailed>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e034      	b.n	80039c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d028      	beq.n	80039b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fe ffc5 	bl	80028f4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d11d      	bne.n	80039b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	2b80      	cmp	r3, #128	@ 0x80
 8003988:	d016      	beq.n	80039b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e007      	b.n	80039c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c2:	2b80      	cmp	r3, #128	@ 0x80
 80039c4:	d1c3      	bne.n	800394e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039dc:	e034      	b.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f83e 	bl	8003a60 <I2C_IsAcknowledgeFailed>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e034      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d028      	beq.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7fe ff7d 	bl	80028f4 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11d      	bne.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d016      	beq.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e007      	b.n	8003a58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d1c3      	bne.n	80039de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a76:	d11b      	bne.n	8003ab0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	f043 0204 	orr.w	r2, r3, #4
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e272      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8087 	beq.w	8003bea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003adc:	4b92      	ldr	r3, [pc, #584]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d00c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ae8:	4b8f      	ldr	r3, [pc, #572]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d112      	bne.n	8003b1a <HAL_RCC_OscConfig+0x5e>
 8003af4:	4b8c      	ldr	r3, [pc, #560]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d10b      	bne.n	8003b1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b02:	4b89      	ldr	r3, [pc, #548]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d06c      	beq.n	8003be8 <HAL_RCC_OscConfig+0x12c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d168      	bne.n	8003be8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e24c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b22:	d106      	bne.n	8003b32 <HAL_RCC_OscConfig+0x76>
 8003b24:	4b80      	ldr	r3, [pc, #512]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a7f      	ldr	r2, [pc, #508]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	e02e      	b.n	8003b90 <HAL_RCC_OscConfig+0xd4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCC_OscConfig+0x98>
 8003b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a7a      	ldr	r2, [pc, #488]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b78      	ldr	r3, [pc, #480]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a77      	ldr	r2, [pc, #476]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e01d      	b.n	8003b90 <HAL_RCC_OscConfig+0xd4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0xbc>
 8003b5e:	4b72      	ldr	r3, [pc, #456]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a71      	ldr	r2, [pc, #452]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e00b      	b.n	8003b90 <HAL_RCC_OscConfig+0xd4>
 8003b78:	4b6b      	ldr	r3, [pc, #428]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6a      	ldr	r2, [pc, #424]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	4b68      	ldr	r3, [pc, #416]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a67      	ldr	r2, [pc, #412]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe feac 	bl	80028f4 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba0:	f7fe fea8 	bl	80028f4 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b64      	cmp	r3, #100	@ 0x64
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e200      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xe4>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fe fe98 	bl	80028f4 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc8:	f7fe fe94 	bl	80028f4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	@ 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1ec      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x10c>
 8003be6:	e000      	b.n	8003bea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c02:	4b49      	ldr	r3, [pc, #292]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x18c>
 8003c0e:	4b46      	ldr	r3, [pc, #280]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	4b43      	ldr	r3, [pc, #268]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x176>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e1c0      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b3d      	ldr	r3, [pc, #244]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4939      	ldr	r1, [pc, #228]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	e03a      	b.n	8003cbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d020      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c50:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe fe4d 	bl	80028f4 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5e:	f7fe fe49 	bl	80028f4 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e1a1      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	4b2d      	ldr	r3, [pc, #180]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4927      	ldr	r1, [pc, #156]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]
 8003c90:	e015      	b.n	8003cbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c92:	4b26      	ldr	r3, [pc, #152]	@ (8003d2c <HAL_RCC_OscConfig+0x270>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c98:	f7fe fe2c 	bl	80028f4 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca0:	f7fe fe28 	bl	80028f4 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e180      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d03a      	beq.n	8003d40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d019      	beq.n	8003d06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd2:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd8:	f7fe fe0c 	bl	80028f4 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fe08 	bl	80028f4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e160      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f000 fafe 	bl	8004300 <RCC_Delay>
 8003d04:	e01c      	b.n	8003d40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d06:	4b0a      	ldr	r3, [pc, #40]	@ (8003d30 <HAL_RCC_OscConfig+0x274>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0c:	f7fe fdf2 	bl	80028f4 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d12:	e00f      	b.n	8003d34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d14:	f7fe fdee 	bl	80028f4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d908      	bls.n	8003d34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e146      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	42420000 	.word	0x42420000
 8003d30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d34:	4b92      	ldr	r3, [pc, #584]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e9      	bne.n	8003d14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a6 	beq.w	8003e9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d52:	4b8b      	ldr	r3, [pc, #556]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5e:	4b88      	ldr	r3, [pc, #544]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4a87      	ldr	r2, [pc, #540]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	61d3      	str	r3, [r2, #28]
 8003d6a:	4b85      	ldr	r3, [pc, #532]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b82      	ldr	r3, [pc, #520]	@ (8003f84 <HAL_RCC_OscConfig+0x4c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d86:	4b7f      	ldr	r3, [pc, #508]	@ (8003f84 <HAL_RCC_OscConfig+0x4c8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f84 <HAL_RCC_OscConfig+0x4c8>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fdaf 	bl	80028f4 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fe fdab 	bl	80028f4 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b64      	cmp	r3, #100	@ 0x64
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e103      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	4b75      	ldr	r3, [pc, #468]	@ (8003f84 <HAL_RCC_OscConfig+0x4c8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x312>
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	4a6e      	ldr	r2, [pc, #440]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6213      	str	r3, [r2, #32]
 8003dcc:	e02d      	b.n	8003e2a <HAL_RCC_OscConfig+0x36e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x334>
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a69      	ldr	r2, [pc, #420]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	f023 0301 	bic.w	r3, r3, #1
 8003de0:	6213      	str	r3, [r2, #32]
 8003de2:	4b67      	ldr	r3, [pc, #412]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4a66      	ldr	r2, [pc, #408]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	6213      	str	r3, [r2, #32]
 8003dee:	e01c      	b.n	8003e2a <HAL_RCC_OscConfig+0x36e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d10c      	bne.n	8003e12 <HAL_RCC_OscConfig+0x356>
 8003df8:	4b61      	ldr	r3, [pc, #388]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a60      	ldr	r2, [pc, #384]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003dfe:	f043 0304 	orr.w	r3, r3, #4
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	4b5e      	ldr	r3, [pc, #376]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	4a5d      	ldr	r2, [pc, #372]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6213      	str	r3, [r2, #32]
 8003e10:	e00b      	b.n	8003e2a <HAL_RCC_OscConfig+0x36e>
 8003e12:	4b5b      	ldr	r3, [pc, #364]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a5a      	ldr	r2, [pc, #360]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6213      	str	r3, [r2, #32]
 8003e1e:	4b58      	ldr	r3, [pc, #352]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4a57      	ldr	r2, [pc, #348]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d015      	beq.n	8003e5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e32:	f7fe fd5f 	bl	80028f4 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3a:	f7fe fd5b 	bl	80028f4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0b1      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e50:	4b4b      	ldr	r3, [pc, #300]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0ee      	beq.n	8003e3a <HAL_RCC_OscConfig+0x37e>
 8003e5c:	e014      	b.n	8003e88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fd49 	bl	80028f4 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe fd45 	bl	80028f4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e09b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	4b40      	ldr	r3, [pc, #256]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ee      	bne.n	8003e66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d105      	bne.n	8003e9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	4a3b      	ldr	r2, [pc, #236]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8087 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea4:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d061      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d146      	bne.n	8003f46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb8:	4b33      	ldr	r3, [pc, #204]	@ (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebe:	f7fe fd19 	bl	80028f4 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec6:	f7fe fd15 	bl	80028f4 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e06d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ed8:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eec:	d108      	bne.n	8003f00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003eee:	4b24      	ldr	r3, [pc, #144]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	4921      	ldr	r1, [pc, #132]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f00:	4b1f      	ldr	r3, [pc, #124]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a19      	ldr	r1, [r3, #32]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	430b      	orrs	r3, r1
 8003f12:	491b      	ldr	r1, [pc, #108]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f18:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fe fce9 	bl	80028f4 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fe fce5 	bl	80028f4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e03d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f38:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x46a>
 8003f44:	e035      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fe fcd2 	bl	80028f4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe fcce 	bl	80028f4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e026      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f66:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x498>
 8003f72:	e01e      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d107      	bne.n	8003f8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e019      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <HAL_RCC_OscConfig+0x500>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d001      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021000 	.word	0x40021000

08003fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0d0      	b.n	8004176 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d910      	bls.n	8004004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b67      	ldr	r3, [pc, #412]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 0207 	bic.w	r2, r3, #7
 8003fea:	4965      	ldr	r1, [pc, #404]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b63      	ldr	r3, [pc, #396]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0b8      	b.n	8004176 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800401c:	4b59      	ldr	r3, [pc, #356]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a58      	ldr	r2, [pc, #352]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004026:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004034:	4b53      	ldr	r3, [pc, #332]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a52      	ldr	r2, [pc, #328]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800403e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b50      	ldr	r3, [pc, #320]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	494d      	ldr	r1, [pc, #308]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d040      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b47      	ldr	r3, [pc, #284]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d115      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	4b41      	ldr	r3, [pc, #260]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e073      	b.n	8004176 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408e:	4b3d      	ldr	r3, [pc, #244]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b39      	ldr	r3, [pc, #228]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4936      	ldr	r1, [pc, #216]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b0:	f7fe fc20 	bl	80028f4 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7fe fc1c 	bl	80028f4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e053      	b.n	8004176 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e0:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d210      	bcs.n	8004110 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 0207 	bic.w	r2, r3, #7
 80040f6:	4922      	ldr	r1, [pc, #136]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b20      	ldr	r3, [pc, #128]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e032      	b.n	8004176 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800411c:	4b19      	ldr	r3, [pc, #100]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4916      	ldr	r1, [pc, #88]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	4313      	orrs	r3, r2
 800412c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800413a:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	490e      	ldr	r1, [pc, #56]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800414e:	f000 f821 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004152:	4602      	mov	r2, r0
 8004154:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	490a      	ldr	r1, [pc, #40]	@ (8004188 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	5ccb      	ldrb	r3, [r1, r3]
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	4a09      	ldr	r2, [pc, #36]	@ (800418c <HAL_RCC_ClockConfig+0x1cc>)
 8004168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800416a:	4b09      	ldr	r3, [pc, #36]	@ (8004190 <HAL_RCC_ClockConfig+0x1d0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe f9f8 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40022000 	.word	0x40022000
 8004184:	40021000 	.word	0x40021000
 8004188:	0800d414 	.word	0x0800d414
 800418c:	20000038 	.word	0x20000038
 8004190:	2000003c 	.word	0x2000003c

08004194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	2300      	movs	r3, #0
 80041a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x94>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d002      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x30>
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d003      	beq.n	80041ca <HAL_RCC_GetSysClockFreq+0x36>
 80041c2:	e027      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_RCC_GetSysClockFreq+0x98>)
 80041c6:	613b      	str	r3, [r7, #16]
      break;
 80041c8:	e027      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0c9b      	lsrs	r3, r3, #18
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	4a17      	ldr	r2, [pc, #92]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041d4:	5cd3      	ldrb	r3, [r2, r3]
 80041d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d010      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041e2:	4b11      	ldr	r3, [pc, #68]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x94>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	0c5b      	lsrs	r3, r3, #17
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	4a11      	ldr	r2, [pc, #68]	@ (8004234 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ee:	5cd3      	ldrb	r3, [r2, r3]
 80041f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <HAL_RCC_GetSysClockFreq+0x98>)
 80041f6:	fb03 f202 	mul.w	r2, r3, r2
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e004      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0c      	ldr	r2, [pc, #48]	@ (8004238 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	613b      	str	r3, [r7, #16]
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCC_GetSysClockFreq+0x98>)
 8004216:	613b      	str	r3, [r7, #16]
      break;
 8004218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421a:	693b      	ldr	r3, [r7, #16]
}
 800421c:	4618      	mov	r0, r3
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
 800422c:	007a1200 	.word	0x007a1200
 8004230:	0800d42c 	.word	0x0800d42c
 8004234:	0800d43c 	.word	0x0800d43c
 8004238:	003d0900 	.word	0x003d0900

0800423c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004240:	4b02      	ldr	r3, [pc, #8]	@ (800424c <HAL_RCC_GetHCLKFreq+0x10>)
 8004242:	681b      	ldr	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	20000038 	.word	0x20000038

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004254:	f7ff fff2 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	0a1b      	lsrs	r3, r3, #8
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	@ (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	0800d424 	.word	0x0800d424

08004278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800427c:	f7ff ffde 	bl	800423c <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	0adb      	lsrs	r3, r3, #11
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4903      	ldr	r1, [pc, #12]	@ (800429c <HAL_RCC_GetPCLK2Freq+0x24>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	0800d424 	.word	0x0800d424

080042a0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	220f      	movs	r2, #15
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0203 	and.w	r2, r3, #3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042bc:	4b0e      	ldr	r3, [pc, #56]	@ (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042d4:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <HAL_RCC_GetClockConfig+0x58>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042e2:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_RCC_GetClockConfig+0x5c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0207 	and.w	r2, r3, #7
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40022000 	.word	0x40022000

08004300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004308:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <RCC_Delay+0x34>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <RCC_Delay+0x38>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800431c:	bf00      	nop
  }
  while (Delay --);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <RCC_Delay+0x1c>
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000038 	.word	0x20000038
 8004338:	10624dd3 	.word	0x10624dd3

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe f878 	bl	8002458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 facc 	bl	8004918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e032      	b.n	800445a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <HAL_TIM_Base_Start+0x88>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_TIM_Base_Start+0x48>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440e:	d009      	beq.n	8004424 <HAL_TIM_Base_Start+0x48>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a14      	ldr	r2, [pc, #80]	@ (8004468 <HAL_TIM_Base_Start+0x8c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIM_Base_Start+0x48>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a13      	ldr	r2, [pc, #76]	@ (800446c <HAL_TIM_Base_Start+0x90>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d111      	bne.n	8004448 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b06      	cmp	r3, #6
 8004434:	d010      	beq.n	8004458 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	e007      	b.n	8004458 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800

08004470 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10f      	bne.n	80044a8 <HAL_TIM_Base_Stop+0x38>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6a1a      	ldr	r2, [r3, #32]
 800448e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_Base_Stop+0x38>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e03a      	b.n	800454a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <HAL_TIM_Base_Start_IT+0x98>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x58>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x58>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <HAL_TIM_Base_Start_IT+0x9c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x58>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a13      	ldr	r2, [pc, #76]	@ (800455c <HAL_TIM_Base_Start_IT+0xa0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d010      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	e007      	b.n	8004548 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800

08004560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01b      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f998 	bl	80048e0 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f98b 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f99a 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0204 	mvn.w	r2, #4
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f972 	bl	80048e0 <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f965 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f974 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d020      	beq.n	800465c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0208 	mvn.w	r2, #8
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2204      	movs	r2, #4
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f94c 	bl	80048e0 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f93f 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f94e 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d020      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01b      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0210 	mvn.w	r2, #16
 8004678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2208      	movs	r2, #8
 800467e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f926 	bl	80048e0 <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f919 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f928 	bl	80048f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0201 	mvn.w	r2, #1
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fd fe3a 	bl	8002340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d007      	beq.n	80046f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fa7f 	bl	8004bee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800470c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8f8 	bl	8004904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d007      	beq.n	8004738 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0220 	mvn.w	r2, #32
 8004730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fa52 	bl	8004bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <HAL_TIM_ConfigClockSource+0x1c>
 8004758:	2302      	movs	r3, #2
 800475a:	e0b4      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x186>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800477a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004794:	d03e      	beq.n	8004814 <HAL_TIM_ConfigClockSource+0xd4>
 8004796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800479a:	f200 8087 	bhi.w	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047a2:	f000 8086 	beq.w	80048b2 <HAL_TIM_ConfigClockSource+0x172>
 80047a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047aa:	d87f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b70      	cmp	r3, #112	@ 0x70
 80047ae:	d01a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xa6>
 80047b0:	2b70      	cmp	r3, #112	@ 0x70
 80047b2:	d87b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d050      	beq.n	800485a <HAL_TIM_ConfigClockSource+0x11a>
 80047b8:	2b60      	cmp	r3, #96	@ 0x60
 80047ba:	d877      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b50      	cmp	r3, #80	@ 0x50
 80047be:	d03c      	beq.n	800483a <HAL_TIM_ConfigClockSource+0xfa>
 80047c0:	2b50      	cmp	r3, #80	@ 0x50
 80047c2:	d873      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d058      	beq.n	800487a <HAL_TIM_ConfigClockSource+0x13a>
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	d86f      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b30      	cmp	r3, #48	@ 0x30
 80047ce:	d064      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d86b      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d060      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d867      	bhi.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05c      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d05a      	beq.n	800489a <HAL_TIM_ConfigClockSource+0x15a>
 80047e4:	e062      	b.n	80048ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047f6:	f000 f974 	bl	8004ae2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	609a      	str	r2, [r3, #8]
      break;
 8004812:	e04f      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004824:	f000 f95d 	bl	8004ae2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004836:	609a      	str	r2, [r3, #8]
      break;
 8004838:	e03c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004846:	461a      	mov	r2, r3
 8004848:	f000 f8d4 	bl	80049f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2150      	movs	r1, #80	@ 0x50
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f92b 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 8004858:	e02c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004866:	461a      	mov	r2, r3
 8004868:	f000 f8f2 	bl	8004a50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2160      	movs	r1, #96	@ 0x60
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f91b 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 8004878:	e01c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	461a      	mov	r2, r3
 8004888:	f000 f8b4 	bl	80049f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2140      	movs	r1, #64	@ 0x40
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f90b 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 8004898:	e00c      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	4610      	mov	r0, r2
 80048a6:	f000 f902 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 80048aa:	e003      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e000      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
	...

08004918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a2f      	ldr	r2, [pc, #188]	@ (80049e8 <TIM_Base_SetConfig+0xd0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00b      	beq.n	8004948 <TIM_Base_SetConfig+0x30>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	d007      	beq.n	8004948 <TIM_Base_SetConfig+0x30>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <TIM_Base_SetConfig+0xd4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0x30>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a2b      	ldr	r2, [pc, #172]	@ (80049f0 <TIM_Base_SetConfig+0xd8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d108      	bne.n	800495a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <TIM_Base_SetConfig+0xd0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00b      	beq.n	800497a <TIM_Base_SetConfig+0x62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004968:	d007      	beq.n	800497a <TIM_Base_SetConfig+0x62>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1f      	ldr	r2, [pc, #124]	@ (80049ec <TIM_Base_SetConfig+0xd4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_Base_SetConfig+0x62>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1e      	ldr	r2, [pc, #120]	@ (80049f0 <TIM_Base_SetConfig+0xd8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d108      	bne.n	800498c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <TIM_Base_SetConfig+0xd0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d103      	bne.n	80049c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f023 0201 	bic.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]
  }
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40000400 	.word	0x40000400
 80049f0:	40000800 	.word	0x40000800

080049f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f023 0201 	bic.w	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 030a 	bic.w	r3, r3, #10
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0210 	bic.w	r2, r3, #16
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	031b      	lsls	r3, r3, #12
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	621a      	str	r2, [r3, #32]
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f043 0307 	orr.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004afc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	021a      	lsls	r2, r3, #8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	609a      	str	r2, [r3, #8]
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e046      	b.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a16      	ldr	r2, [pc, #88]	@ (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b84:	d009      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a12      	ldr	r2, [pc, #72]	@ (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a10      	ldr	r2, [pc, #64]	@ (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10c      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00
 8004bd4:	40000400 	.word	0x40000400
 8004bd8:	40000800 	.word	0x40000800

08004bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e042      	b.n	8004c98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd fc48 	bl	80024bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	@ 0x24
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fdb7 	bl	80057b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d175      	bne.n	8004dac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Transmit+0x2c>
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e06e      	b.n	8004dae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2221      	movs	r2, #33	@ 0x21
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cde:	f7fd fe09 	bl	80028f4 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf8:	d108      	bne.n	8004d0c <HAL_UART_Transmit+0x6c>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e003      	b.n	8004d14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d14:	e02e      	b.n	8004d74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2180      	movs	r1, #128	@ 0x80
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fb1c 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e03a      	b.n	8004dae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	461a      	mov	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	3302      	adds	r3, #2
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e007      	b.n	8004d66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1cb      	bne.n	8004d16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2140      	movs	r1, #64	@ 0x40
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fae8 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e006      	b.n	8004dae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d112      	bne.n	8004df6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_UART_Receive_IT+0x26>
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e00b      	b.n	8004df8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	461a      	mov	r2, r3
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fb0f 	bl	8005410 <UART_Start_Receive_IT>
 8004df2:	4603      	mov	r3, r0
 8004df4:	e000      	b.n	8004df8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
  }
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b0ba      	sub	sp, #232	@ 0xe8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_UART_IRQHandler+0x66>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fbec 	bl	800563c <UART_Receive_IT>
      return;
 8004e64:	e25b      	b.n	800531e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80de 	beq.w	800502c <HAL_UART_IRQHandler+0x22c>
 8004e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80d1 	beq.w	800502c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_UART_IRQHandler+0xae>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xd2>
 8004eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	f043 0202 	orr.w	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xf6>
 8004ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d011      	beq.n	8004f26 <HAL_UART_IRQHandler+0x126>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 81f2 	beq.w	8005314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_UART_IRQHandler+0x14e>
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fb77 	bl	800563c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf14      	ite	ne
 8004f5c:	2301      	movne	r3, #1
 8004f5e:	2300      	moveq	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <HAL_UART_IRQHandler+0x17a>
 8004f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04f      	beq.n	800501a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa81 	bl	8005482 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d041      	beq.n	8005012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3314      	adds	r3, #20
 8004f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1d9      	bne.n	8004f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80051e0 <HAL_UART_IRQHandler+0x3e0>)
 8004fe8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fdc8 	bl	8002b84 <HAL_DMA_Abort_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	e00e      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f993 	bl	8005336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	e00a      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f98f 	bl	8005336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	e006      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f98b 	bl	8005336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005026:	e175      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	bf00      	nop
    return;
 800502a:	e173      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005030:	2b01      	cmp	r3, #1
 8005032:	f040 814f 	bne.w	80052d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8148 	beq.w	80052d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8141 	beq.w	80052d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80b6 	beq.w	80051e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8145 	beq.w	8005318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005096:	429a      	cmp	r2, r3
 8005098:	f080 813e 	bcs.w	8005318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	f000 8088 	beq.w	80051c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	330c      	adds	r3, #12
 80050d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80050dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1d9      	bne.n	80050b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800510c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3314      	adds	r3, #20
 800511c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005120:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005124:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005128:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e1      	bne.n	80050fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3314      	adds	r3, #20
 800513e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800514a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800514e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3314      	adds	r3, #20
 8005158:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800515c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800515e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005162:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800516a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e3      	bne.n	8005138 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800518e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e3      	bne.n	800517e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fd fca7 	bl	8002b0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8b6 	bl	8005348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051dc:	e09c      	b.n	8005318 <HAL_UART_IRQHandler+0x518>
 80051de:	bf00      	nop
 80051e0:	08005547 	.word	0x08005547
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 808e 	beq.w	800531c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8089 	beq.w	800531c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800522e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800523c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e3      	bne.n	800520a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	623b      	str	r3, [r7, #32]
   return(result);
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005266:	633a      	str	r2, [r7, #48]	@ 0x30
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800526c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e3      	bne.n	8005242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	60fb      	str	r3, [r7, #12]
   return(result);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0310 	bic.w	r3, r3, #16
 800529e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052ac:	61fa      	str	r2, [r7, #28]
 80052ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e3      	bne.n	8005288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f83b 	bl	8005348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052d2:	e023      	b.n	800531c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <HAL_UART_IRQHandler+0x4f4>
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f93e 	bl	800556e <UART_Transmit_IT>
    return;
 80052f2:	e014      	b.n	800531e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00e      	beq.n	800531e <HAL_UART_IRQHandler+0x51e>
 8005300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f97d 	bl	800560c <UART_EndTransmit_IT>
    return;
 8005312:	e004      	b.n	800531e <HAL_UART_IRQHandler+0x51e>
    return;
 8005314:	bf00      	nop
 8005316:	e002      	b.n	800531e <HAL_UART_IRQHandler+0x51e>
      return;
 8005318:	bf00      	nop
 800531a:	e000      	b.n	800531e <HAL_UART_IRQHandler+0x51e>
      return;
 800531c:	bf00      	nop
  }
}
 800531e:	37e8      	adds	r7, #232	@ 0xe8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr

08005336 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr

0800535e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b086      	sub	sp, #24
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	e03b      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d037      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005378:	f7fd fabc 	bl	80028f4 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	6a3a      	ldr	r2, [r7, #32]
 8005384:	429a      	cmp	r2, r3
 8005386:	d302      	bcc.n	800538e <UART_WaitOnFlagUntilTimeout+0x30>
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e03a      	b.n	8005408 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d023      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b80      	cmp	r3, #128	@ 0x80
 80053a4:	d020      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b40      	cmp	r3, #64	@ 0x40
 80053aa:	d01d      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d116      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f856 	bl	8005482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2208      	movs	r2, #8
 80053da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e00f      	b.n	8005408 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	d0b4      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	88fa      	ldrh	r2, [r7, #6]
 800542e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2222      	movs	r2, #34	@ 0x22
 800543a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005454:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0201 	orr.w	r2, r2, #1
 8005464:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0220 	orr.w	r2, r2, #32
 8005474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr

08005482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005482:	b480      	push	{r7}
 8005484:	b095      	sub	sp, #84	@ 0x54
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80054ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3314      	adds	r3, #20
 80054c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3314      	adds	r3, #20
 80054dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e5      	bne.n	80054be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d119      	bne.n	800552e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	60bb      	str	r3, [r7, #8]
   return(result);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f023 0310 	bic.w	r3, r3, #16
 8005510:	647b      	str	r3, [r7, #68]	@ 0x44
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800551a:	61ba      	str	r2, [r7, #24]
 800551c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	613b      	str	r3, [r7, #16]
   return(result);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800553c:	bf00      	nop
 800553e:	3754      	adds	r7, #84	@ 0x54
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff fee8 	bl	8005336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b21      	cmp	r3, #33	@ 0x21
 8005580:	d13e      	bne.n	8005600 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558a:	d114      	bne.n	80055b6 <UART_Transmit_IT+0x48>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d110      	bne.n	80055b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	1c9a      	adds	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	621a      	str	r2, [r3, #32]
 80055b4:	e008      	b.n	80055c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6211      	str	r1, [r2, #32]
 80055c0:	781a      	ldrb	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4619      	mov	r1, r3
 80055d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10f      	bne.n	80055fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e000      	b.n	8005602 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005600:	2302      	movs	r3, #2
  }
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005622:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fe79 	bl	8005324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08c      	sub	sp, #48	@ 0x30
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b22      	cmp	r3, #34	@ 0x22
 800564e:	f040 80ae 	bne.w	80057ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565a:	d117      	bne.n	800568c <UART_Receive_IT+0x50>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d113      	bne.n	800568c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567a:	b29a      	uxth	r2, r3
 800567c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	629a      	str	r2, [r3, #40]	@ 0x28
 800568a:	e026      	b.n	80056da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005690:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800569e:	d007      	beq.n	80056b0 <UART_Receive_IT+0x74>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <UART_Receive_IT+0x82>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e008      	b.n	80056d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	1c5a      	adds	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d15d      	bne.n	80057aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0220 	bic.w	r2, r2, #32
 80056fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800570c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695a      	ldr	r2, [r3, #20]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005730:	2b01      	cmp	r3, #1
 8005732:	d135      	bne.n	80057a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	613b      	str	r3, [r7, #16]
   return(result);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f023 0310 	bic.w	r3, r3, #16
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	330c      	adds	r3, #12
 8005758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575a:	623a      	str	r2, [r7, #32]
 800575c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	69f9      	ldr	r1, [r7, #28]
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	61bb      	str	r3, [r7, #24]
   return(result);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e5      	bne.n	800573a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b10      	cmp	r3, #16
 800577a:	d10a      	bne.n	8005792 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fdd5 	bl	8005348 <HAL_UARTEx_RxEventCallback>
 800579e:	e002      	b.n	80057a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fc fba7 	bl	8001ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e002      	b.n	80057b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3730      	adds	r7, #48	@ 0x30
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80057f2:	f023 030c 	bic.w	r3, r3, #12
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2c      	ldr	r2, [pc, #176]	@ (80058cc <UART_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d103      	bne.n	8005828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fe fd2a 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	e002      	b.n	800582e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe fd12 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 800582c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	4a22      	ldr	r2, [pc, #136]	@ (80058d0 <UART_SetConfig+0x118>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	0119      	lsls	r1, r3, #4
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009a      	lsls	r2, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	fbb2 f2f3 	udiv	r2, r2, r3
 8005864:	4b1a      	ldr	r3, [pc, #104]	@ (80058d0 <UART_SetConfig+0x118>)
 8005866:	fba3 0302 	umull	r0, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2064      	movs	r0, #100	@ 0x64
 800586e:	fb00 f303 	mul.w	r3, r0, r3
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	3332      	adds	r3, #50	@ 0x32
 8005878:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <UART_SetConfig+0x118>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005884:	4419      	add	r1, r3
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009a      	lsls	r2, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	fbb2 f2f3 	udiv	r2, r2, r3
 800589c:	4b0c      	ldr	r3, [pc, #48]	@ (80058d0 <UART_SetConfig+0x118>)
 800589e:	fba3 0302 	umull	r0, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2064      	movs	r0, #100	@ 0x64
 80058a6:	fb00 f303 	mul.w	r3, r0, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	3332      	adds	r3, #50	@ 0x32
 80058b0:	4a07      	ldr	r2, [pc, #28]	@ (80058d0 <UART_SetConfig+0x118>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	440a      	add	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40013800 	.word	0x40013800
 80058d0:	51eb851f 	.word	0x51eb851f

080058d4 <__NVIC_SetPriority>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	db0a      	blt.n	80058fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	490c      	ldr	r1, [pc, #48]	@ (8005920 <__NVIC_SetPriority+0x4c>)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	440b      	add	r3, r1
 80058f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058fc:	e00a      	b.n	8005914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	4908      	ldr	r1, [pc, #32]	@ (8005924 <__NVIC_SetPriority+0x50>)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3b04      	subs	r3, #4
 800590c:	0112      	lsls	r2, r2, #4
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	440b      	add	r3, r1
 8005912:	761a      	strb	r2, [r3, #24]
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	e000e100 	.word	0xe000e100
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800592c:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <SysTick_Handler+0x1c>)
 800592e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005930:	f002 fc94 	bl	800825c <xTaskGetSchedulerState>
 8005934:	4603      	mov	r3, r0
 8005936:	2b01      	cmp	r3, #1
 8005938:	d001      	beq.n	800593e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800593a:	f003 fdfd 	bl	8009538 <xPortSysTickHandler>
  }
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	e000e010 	.word	0xe000e010

08005948 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800594c:	2100      	movs	r1, #0
 800594e:	f06f 0004 	mvn.w	r0, #4
 8005952:	f7ff ffbf 	bl	80058d4 <__NVIC_SetPriority>
#endif
}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005962:	f3ef 8305 	mrs	r3, IPSR
 8005966:	603b      	str	r3, [r7, #0]
  return(result);
 8005968:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800596e:	f06f 0305 	mvn.w	r3, #5
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e00c      	b.n	8005990 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005976:	4b09      	ldr	r3, [pc, #36]	@ (800599c <osKernelInitialize+0x40>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800597e:	4b07      	ldr	r3, [pc, #28]	@ (800599c <osKernelInitialize+0x40>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005984:	2300      	movs	r3, #0
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	e002      	b.n	8005990 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800598a:	f04f 33ff 	mov.w	r3, #4294967295
 800598e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005990:	687b      	ldr	r3, [r7, #4]
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	20000420 	.word	0x20000420

080059a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a6:	f3ef 8305 	mrs	r3, IPSR
 80059aa:	603b      	str	r3, [r7, #0]
  return(result);
 80059ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80059b2:	f06f 0305 	mvn.w	r3, #5
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	e010      	b.n	80059dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059ba:	4b0b      	ldr	r3, [pc, #44]	@ (80059e8 <osKernelStart+0x48>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d109      	bne.n	80059d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059c2:	f7ff ffc1 	bl	8005948 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059c6:	4b08      	ldr	r3, [pc, #32]	@ (80059e8 <osKernelStart+0x48>)
 80059c8:	2202      	movs	r2, #2
 80059ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059cc:	f001 ffc6 	bl	800795c <vTaskStartScheduler>
      stat = osOK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	e002      	b.n	80059dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059dc:	687b      	ldr	r3, [r7, #4]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000420 	.word	0x20000420

080059ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f2:	f3ef 8305 	mrs	r3, IPSR
 80059f6:	603b      	str	r3, [r7, #0]
  return(result);
 80059f8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80059fe:	f002 f8d7 	bl	8007bb0 <xTaskGetTickCountFromISR>
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	e002      	b.n	8005a0c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005a06:	f002 f8c5 	bl	8007b94 <xTaskGetTickCount>
 8005a0a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005a0c:	687b      	ldr	r3, [r7, #4]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b08e      	sub	sp, #56	@ 0x38
 8005a1a:	af04      	add	r7, sp, #16
 8005a1c:	60f8      	str	r0, [r7, #12]
 8005a1e:	60b9      	str	r1, [r7, #8]
 8005a20:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a26:	f3ef 8305 	mrs	r3, IPSR
 8005a2a:	617b      	str	r3, [r7, #20]
  return(result);
 8005a2c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d17f      	bne.n	8005b32 <osThreadNew+0x11c>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d07c      	beq.n	8005b32 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a3e:	2318      	movs	r3, #24
 8005a40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d045      	beq.n	8005ade <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <osThreadNew+0x4a>
        name = attr->name;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <osThreadNew+0x70>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b38      	cmp	r3, #56	@ 0x38
 8005a78:	d805      	bhi.n	8005a86 <osThreadNew+0x70>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <osThreadNew+0x74>
        return (NULL);
 8005a86:	2300      	movs	r3, #0
 8005a88:	e054      	b.n	8005b34 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00e      	beq.n	8005ac0 <osThreadNew+0xaa>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2ba7      	cmp	r3, #167	@ 0xa7
 8005aa8:	d90a      	bls.n	8005ac0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <osThreadNew+0xaa>
        mem = 1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e010      	b.n	8005ae2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10c      	bne.n	8005ae2 <osThreadNew+0xcc>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <osThreadNew+0xcc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <osThreadNew+0xcc>
          mem = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e001      	b.n	8005ae2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d110      	bne.n	8005b0a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005af0:	9202      	str	r2, [sp, #8]
 8005af2:	9301      	str	r3, [sp, #4]
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f001 fc92 	bl	8007428 <xTaskCreateStatic>
 8005b04:	4603      	mov	r3, r0
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	e013      	b.n	8005b32 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d110      	bne.n	8005b32 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	f107 0310 	add.w	r3, r7, #16
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f001 fce0 	bl	80074e8 <xTaskCreate>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d001      	beq.n	8005b32 <osThreadNew+0x11c>
            hTask = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b32:	693b      	ldr	r3, [r7, #16]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3728      	adds	r7, #40	@ 0x28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b48:	f3ef 8305 	mrs	r3, IPSR
 8005b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8005b54:	f06f 0305 	mvn.w	r3, #5
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e017      	b.n	8005b8c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8005b62:	f06f 0303 	mvn.w	r3, #3
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e010      	b.n	8005b8c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8005b6a:	6938      	ldr	r0, [r7, #16]
 8005b6c:	f001 fe8e 	bl	800788c <eTaskGetState>
 8005b70:	4603      	mov	r3, r0
 8005b72:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d005      	beq.n	8005b86 <osThreadTerminate+0x4a>
      stat = osOK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8005b7e:	6938      	ldr	r0, [r7, #16]
 8005b80:	f001 fe10 	bl	80077a4 <vTaskDelete>
 8005b84:	e002      	b.n	8005b8c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8005b86:	f06f 0302 	mvn.w	r3, #2
 8005b8a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8005b8c:	697b      	ldr	r3, [r7, #20]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <osThreadFlagsSet+0x1a>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da03      	bge.n	8005bba <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8005bb2:	f06f 0303 	mvn.w	r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e035      	b.n	8005c26 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc0:	f3ef 8305 	mrs	r3, IPSR
 8005bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8005bc6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01f      	beq.n	8005c0c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8005bd0:	f107 0308 	add.w	r3, r7, #8
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2201      	movs	r2, #1
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6978      	ldr	r0, [r7, #20]
 8005bde:	f002 fded 	bl	80087bc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8005be2:	f107 030c 	add.w	r3, r7, #12
 8005be6:	2200      	movs	r2, #0
 8005be8:	9200      	str	r2, [sp, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2100      	movs	r1, #0
 8005bee:	6978      	ldr	r0, [r7, #20]
 8005bf0:	f002 fde4 	bl	80087bc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d015      	beq.n	8005c26 <osThreadFlagsSet+0x8e>
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <osThreadFlagsSet+0x98>)
 8005bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	e00c      	b.n	8005c26 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2201      	movs	r2, #1
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	f002 fd10 	bl	8008638 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8005c18:	f107 030c 	add.w	r3, r7, #12
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2100      	movs	r1, #0
 8005c20:	6978      	ldr	r0, [r7, #20]
 8005c22:	f002 fd09 	bl	8008638 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8005c26:	68fb      	ldr	r3, [r7, #12]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	@ 0x30
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c40:	f3ef 8305 	mrs	r3, IPSR
 8005c44:	617b      	str	r3, [r7, #20]
  return(result);
 8005c46:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8005c4c:	f06f 0305 	mvn.w	r3, #5
 8005c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c52:	e06b      	b.n	8005d2c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da03      	bge.n	8005c62 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8005c5a:	f06f 0303 	mvn.w	r3, #3
 8005c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c60:	e064      	b.n	8005d2c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c70:	e001      	b.n	8005c76 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8005c7e:	f001 ff89 	bl	8007b94 <xTaskGetTickCount>
 8005c82:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8005c84:	f107 0210 	add.w	r2, r7, #16
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f002 fc73 	bl	8008578 <xTaskNotifyWait>
 8005c92:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d137      	bne.n	8005d0a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8005c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb8:	4013      	ands	r3, r2
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d032      	beq.n	8005d26 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10f      	bne.n	8005ce6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005cc6:	f06f 0302 	mvn.w	r3, #2
 8005cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005ccc:	e02e      	b.n	8005d2c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d128      	bne.n	8005d2a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8005cde:	f06f 0302 	mvn.w	r3, #2
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8005ce4:	e022      	b.n	8005d2c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8005ce6:	f001 ff55 	bl	8007b94 <xTaskGetTickCount>
 8005cea:	4602      	mov	r2, r0
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d902      	bls.n	8005d00 <osThreadFlagsWait+0xcc>
          tout  = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cfe:	e00e      	b.n	8005d1e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8005d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d08:	e009      	b.n	8005d1e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8005d10:	f06f 0302 	mvn.w	r3, #2
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d16:	e002      	b.n	8005d1e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8005d18:	f06f 0301 	mvn.w	r3, #1
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1af      	bne.n	8005c84 <osThreadFlagsWait+0x50>
 8005d24:	e002      	b.n	8005d2c <osThreadFlagsWait+0xf8>
            break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <osThreadFlagsWait+0xf8>
            break;
 8005d2a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3730      	adds	r7, #48	@ 0x30
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f003 fa6c 	bl	800921c <pvTimerGetTimerID>
 8005d44:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	6852      	ldr	r2, [r2, #4]
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
  }
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08c      	sub	sp, #48	@ 0x30
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d74:	f3ef 8305 	mrs	r3, IPSR
 8005d78:	613b      	str	r3, [r7, #16]
  return(result);
 8005d7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d163      	bne.n	8005e48 <osTimerNew+0xe8>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d060      	beq.n	8005e48 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005d86:	2008      	movs	r0, #8
 8005d88:	f003 fc5a 	bl	8009640 <pvPortMalloc>
 8005d8c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d059      	beq.n	8005e48 <osTimerNew+0xe8>
      callb->func = func;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005da0:	7afb      	ldrb	r3, [r7, #11]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <osTimerNew+0x4c>
        reload = pdFALSE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e001      	b.n	8005db0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01c      	beq.n	8005dfa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <osTimerNew+0x6e>
          name = attr->name;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d006      	beq.n	8005de4 <osTimerNew+0x84>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b2b      	cmp	r3, #43	@ 0x2b
 8005ddc:	d902      	bls.n	8005de4 <osTimerNew+0x84>
          mem = 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e00c      	b.n	8005dfe <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <osTimerNew+0x9e>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <osTimerNew+0x9e>
            mem = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	e001      	b.n	8005dfe <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10c      	bne.n	8005e1e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <osTimerNew+0xf4>)
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	2101      	movs	r1, #1
 8005e14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e16:	f002 fe76 	bl	8008b06 <xTimerCreateStatic>
 8005e1a:	6238      	str	r0, [r7, #32]
 8005e1c:	e00b      	b.n	8005e36 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d108      	bne.n	8005e36 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005e24:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <osTimerNew+0xf4>)
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e30:	f002 fe48 	bl	8008ac4 <xTimerCreate>
 8005e34:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <osTimerNew+0xe8>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <osTimerNew+0xe8>
        vPortFree (callb);
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f003 fcca 	bl	80097dc <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005e48:	6a3b      	ldr	r3, [r7, #32]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	@ 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	08005d37 	.word	0x08005d37

08005e58 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e66:	f3ef 8305 	mrs	r3, IPSR
 8005e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <osTimerStart+0x22>
    stat = osErrorISR;
 8005e72:	f06f 0305 	mvn.w	r3, #5
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	e017      	b.n	8005eaa <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d103      	bne.n	8005e88 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005e80:	f06f 0303 	mvn.w	r3, #3
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	e010      	b.n	8005eaa <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	2104      	movs	r1, #4
 8005e92:	6938      	ldr	r0, [r7, #16]
 8005e94:	f002 feb4 	bl	8008c00 <xTimerGenericCommand>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d102      	bne.n	8005ea4 <osTimerStart+0x4c>
      stat = osOK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e002      	b.n	8005eaa <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005ea4:	f06f 0302 	mvn.w	r3, #2
 8005ea8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005eaa:	697b      	ldr	r3, [r7, #20]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec0:	f3ef 8305 	mrs	r3, IPSR
 8005ec4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ec6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d174      	bne.n	8005fb6 <osMutexNew+0x102>
    if (attr != NULL) {
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	61bb      	str	r3, [r7, #24]
 8005ed8:	e001      	b.n	8005ede <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <osMutexNew+0x3a>
      rmtx = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	e001      	b.n	8005ef2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d15c      	bne.n	8005fb6 <osMutexNew+0x102>
      mem = -1;
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295
 8005f00:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d006      	beq.n	8005f1e <osMutexNew+0x6a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	2b4f      	cmp	r3, #79	@ 0x4f
 8005f16:	d902      	bls.n	8005f1e <osMutexNew+0x6a>
          mem = 1;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	e00c      	b.n	8005f38 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <osMutexNew+0x84>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <osMutexNew+0x84>
            mem = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	e001      	b.n	8005f38 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d112      	bne.n	8005f64 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	2004      	movs	r0, #4
 8005f4c:	f000 fc4d 	bl	80067ea <xQueueCreateMutexStatic>
 8005f50:	61f8      	str	r0, [r7, #28]
 8005f52:	e016      	b.n	8005f82 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4619      	mov	r1, r3
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	f000 fc45 	bl	80067ea <xQueueCreateMutexStatic>
 8005f60:	61f8      	str	r0, [r7, #28]
 8005f62:	e00e      	b.n	8005f82 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005f70:	2004      	movs	r0, #4
 8005f72:	f000 fc22 	bl	80067ba <xQueueCreateMutex>
 8005f76:	61f8      	str	r0, [r7, #28]
 8005f78:	e003      	b.n	8005f82 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f000 fc1d 	bl	80067ba <xQueueCreateMutex>
 8005f80:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00c      	beq.n	8005fa2 <osMutexNew+0xee>
        if (attr != NULL) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <osMutexNew+0xe2>
          name = attr->name;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e001      	b.n	8005f9a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	69f8      	ldr	r0, [r7, #28]
 8005f9e:	f001 f9e7 	bl	8007370 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d006      	beq.n	8005fb6 <osMutexNew+0x102>
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fde:	f3ef 8305 	mrs	r3, IPSR
 8005fe2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fe4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005fea:	f06f 0305 	mvn.w	r3, #5
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e02c      	b.n	800604c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d103      	bne.n	8006000 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005ff8:	f06f 0303 	mvn.w	r3, #3
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e025      	b.n	800604c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d011      	beq.n	800602a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6938      	ldr	r0, [r7, #16]
 800600a:	f000 fc3e 	bl	800688a <xQueueTakeMutexRecursive>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d01b      	beq.n	800604c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800601a:	f06f 0301 	mvn.w	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e014      	b.n	800604c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006022:	f06f 0302 	mvn.w	r3, #2
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e010      	b.n	800604c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6938      	ldr	r0, [r7, #16]
 800602e:	f000 fee5 	bl	8006dfc <xQueueSemaphoreTake>
 8006032:	4603      	mov	r3, r0
 8006034:	2b01      	cmp	r3, #1
 8006036:	d009      	beq.n	800604c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800603e:	f06f 0301 	mvn.w	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e002      	b.n	800604c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006046:	f06f 0302 	mvn.w	r3, #2
 800604a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800604c:	697b      	ldr	r3, [r7, #20]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006072:	f3ef 8305 	mrs	r3, IPSR
 8006076:	60bb      	str	r3, [r7, #8]
  return(result);
 8006078:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <osMutexRelease+0x30>
    stat = osErrorISR;
 800607e:	f06f 0305 	mvn.w	r3, #5
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e01f      	b.n	80060c6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800608c:	f06f 0303 	mvn.w	r3, #3
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e018      	b.n	80060c6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800609a:	6938      	ldr	r0, [r7, #16]
 800609c:	f000 fbc0 	bl	8006820 <xQueueGiveMutexRecursive>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d00f      	beq.n	80060c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80060a6:	f06f 0302 	mvn.w	r3, #2
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e00b      	b.n	80060c6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80060ae:	2300      	movs	r3, #0
 80060b0:	2200      	movs	r2, #0
 80060b2:	2100      	movs	r1, #0
 80060b4:	6938      	ldr	r0, [r7, #16]
 80060b6:	f000 fc1f 	bl	80068f8 <xQueueGenericSend>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80060c0:	f06f 0302 	mvn.w	r3, #2
 80060c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80060c6:	697b      	ldr	r3, [r7, #20]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	@ 0x28
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e0:	f3ef 8305 	mrs	r3, IPSR
 80060e4:	613b      	str	r3, [r7, #16]
  return(result);
 80060e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d15f      	bne.n	80061ac <osMessageQueueNew+0xdc>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d05c      	beq.n	80061ac <osMessageQueueNew+0xdc>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d059      	beq.n	80061ac <osMessageQueueNew+0xdc>
    mem = -1;
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d029      	beq.n	8006158 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d012      	beq.n	8006132 <osMessageQueueNew+0x62>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b4f      	cmp	r3, #79	@ 0x4f
 8006112:	d90e      	bls.n	8006132 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	429a      	cmp	r2, r3
 800612a:	d302      	bcc.n	8006132 <osMessageQueueNew+0x62>
        mem = 1;
 800612c:	2301      	movs	r3, #1
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e014      	b.n	800615c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d110      	bne.n	800615c <osMessageQueueNew+0x8c>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10c      	bne.n	800615c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006146:	2b00      	cmp	r3, #0
 8006148:	d108      	bne.n	800615c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <osMessageQueueNew+0x8c>
          mem = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	e001      	b.n	800615c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d10b      	bne.n	800617a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2100      	movs	r1, #0
 800616c:	9100      	str	r1, [sp, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fa2d 	bl	80065d0 <xQueueGenericCreateStatic>
 8006176:	61f8      	str	r0, [r7, #28]
 8006178:	e008      	b.n	800618c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006180:	2200      	movs	r2, #0
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 faa0 	bl	80066ca <xQueueGenericCreate>
 800618a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00c      	beq.n	80061ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e001      	b.n	80061a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80061a4:	6979      	ldr	r1, [r7, #20]
 80061a6:	69f8      	ldr	r0, [r7, #28]
 80061a8:	f001 f8e2 	bl	8007370 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80061ac:	69fb      	ldr	r3, [r7, #28]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061d0:	f3ef 8305 	mrs	r3, IPSR
 80061d4:	617b      	str	r3, [r7, #20]
  return(result);
 80061d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d028      	beq.n	800622e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <osMessageQueuePut+0x36>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <osMessageQueuePut+0x36>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80061ee:	f06f 0303 	mvn.w	r3, #3
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e038      	b.n	8006268 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80061fa:	f107 0210 	add.w	r2, r7, #16
 80061fe:	2300      	movs	r3, #0
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	69b8      	ldr	r0, [r7, #24]
 8006204:	f000 fc7a 	bl	8006afc <xQueueGenericSendFromISR>
 8006208:	4603      	mov	r3, r0
 800620a:	2b01      	cmp	r3, #1
 800620c:	d003      	beq.n	8006216 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800620e:	f06f 0302 	mvn.w	r3, #2
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	e028      	b.n	8006268 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d025      	beq.n	8006268 <osMessageQueuePut+0xb0>
 800621c:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <osMessageQueuePut+0xbc>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	e01c      	b.n	8006268 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <osMessageQueuePut+0x82>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d103      	bne.n	8006242 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800623a:	f06f 0303 	mvn.w	r3, #3
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	e012      	b.n	8006268 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006242:	2300      	movs	r3, #0
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	69b8      	ldr	r0, [r7, #24]
 800624a:	f000 fb55 	bl	80068f8 <xQueueGenericSend>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d009      	beq.n	8006268 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800625a:	f06f 0301 	mvn.w	r3, #1
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	e002      	b.n	8006268 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006262:	f06f 0302 	mvn.w	r3, #2
 8006266:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006268:	69fb      	ldr	r3, [r7, #28]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628e:	f3ef 8305 	mrs	r3, IPSR
 8006292:	617b      	str	r3, [r7, #20]
  return(result);
 8006294:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006296:	2b00      	cmp	r3, #0
 8006298:	d028      	beq.n	80062ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <osMessageQueueGet+0x34>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <osMessageQueueGet+0x34>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80062ac:	f06f 0303 	mvn.w	r3, #3
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	e037      	b.n	8006324 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80062b4:	2300      	movs	r3, #0
 80062b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	461a      	mov	r2, r3
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	69b8      	ldr	r0, [r7, #24]
 80062c2:	f000 feab 	bl	800701c <xQueueReceiveFromISR>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d003      	beq.n	80062d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80062cc:	f06f 0302 	mvn.w	r3, #2
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	e027      	b.n	8006324 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d024      	beq.n	8006324 <osMessageQueueGet+0xac>
 80062da:	4b15      	ldr	r3, [pc, #84]	@ (8006330 <osMessageQueueGet+0xb8>)
 80062dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	e01b      	b.n	8006324 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <osMessageQueueGet+0x80>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80062f8:	f06f 0303 	mvn.w	r3, #3
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e011      	b.n	8006324 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	69b8      	ldr	r0, [r7, #24]
 8006306:	f000 fc97 	bl	8006c38 <xQueueReceive>
 800630a:	4603      	mov	r3, r0
 800630c:	2b01      	cmp	r3, #1
 800630e:	d009      	beq.n	8006324 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006316:	f06f 0301 	mvn.w	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e002      	b.n	8006324 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800631e:	f06f 0302 	mvn.w	r3, #2
 8006322:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006324:	69fb      	ldr	r3, [r7, #28]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4a07      	ldr	r2, [pc, #28]	@ (8006360 <vApplicationGetIdleTaskMemory+0x2c>)
 8006344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	4a06      	ldr	r2, [pc, #24]	@ (8006364 <vApplicationGetIdleTaskMemory+0x30>)
 800634a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000424 	.word	0x20000424
 8006364:	200004cc 	.word	0x200004cc

08006368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a07      	ldr	r2, [pc, #28]	@ (8006394 <vApplicationGetTimerTaskMemory+0x2c>)
 8006378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4a06      	ldr	r2, [pc, #24]	@ (8006398 <vApplicationGetTimerTaskMemory+0x30>)
 800637e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006386:	601a      	str	r2, [r3, #0]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	200008cc 	.word	0x200008cc
 8006398:	20000974 	.word	0x20000974

0800639c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f103 0208 	add.w	r2, r3, #8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f103 0208 	add.w	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f103 0208 	add.w	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr

080063da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr

080063f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063f2:	b480      	push	{r7}
 80063f4:	b085      	sub	sp, #20
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	601a      	str	r2, [r3, #0]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d103      	bne.n	8006458 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	e00c      	b.n	8006472 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3308      	adds	r3, #8
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e002      	b.n	8006466 <vListInsert+0x2e>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	d2f6      	bcs.n	8006460 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr

080064a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6892      	ldr	r2, [r2, #8]
 80064be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6852      	ldr	r2, [r2, #4]
 80064c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d103      	bne.n	80064dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr
	...

080064fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006528:	f002 ff88 	bl	800943c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006558:	3b01      	subs	r3, #1
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	22ff      	movs	r2, #255	@ 0xff
 800656c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	22ff      	movs	r2, #255	@ 0xff
 8006574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d114      	bne.n	80065a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01a      	beq.n	80065bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3310      	adds	r3, #16
 800658a:	4618      	mov	r0, r3
 800658c:	f001 fc92 	bl	8007eb4 <xTaskRemoveFromEventList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d012      	beq.n	80065bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006596:	4b0d      	ldr	r3, [pc, #52]	@ (80065cc <xQueueGenericReset+0xd0>)
 8006598:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	e009      	b.n	80065bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3310      	adds	r3, #16
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff fef5 	bl	800639c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3324      	adds	r3, #36	@ 0x24
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fef0 	bl	800639c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065bc:	f002 ff6e 	bl	800949c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065c0:	2301      	movs	r3, #1
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08e      	sub	sp, #56	@ 0x38
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065f6:	bf00      	nop
 80065f8:	bf00      	nop
 80065fa:	e7fd      	b.n	80065f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <xQueueGenericCreateStatic+0x56>
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <xQueueGenericCreateStatic+0x5a>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <xQueueGenericCreateStatic+0x5c>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10b      	bne.n	8006648 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	623b      	str	r3, [r7, #32]
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	e7fd      	b.n	8006644 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <xQueueGenericCreateStatic+0x84>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <xQueueGenericCreateStatic+0x88>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <xQueueGenericCreateStatic+0x8a>
 8006658:	2300      	movs	r3, #0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	61fb      	str	r3, [r7, #28]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006676:	2350      	movs	r3, #80	@ 0x50
 8006678:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b50      	cmp	r3, #80	@ 0x50
 800667e:	d00b      	beq.n	8006698 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	61bb      	str	r3, [r7, #24]
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006698:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800669e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80066b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f840 	bl	8006740 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3730      	adds	r7, #48	@ 0x30
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b08a      	sub	sp, #40	@ 0x28
 80066ce:	af02      	add	r7, sp, #8
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	4613      	mov	r3, r2
 80066d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	613b      	str	r3, [r7, #16]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	3350      	adds	r3, #80	@ 0x50
 8006704:	4618      	mov	r0, r3
 8006706:	f002 ff9b 	bl	8009640 <pvPortMalloc>
 800670a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d011      	beq.n	8006736 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	3350      	adds	r3, #80	@ 0x50
 800671a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006724:	79fa      	ldrb	r2, [r7, #7]
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	4613      	mov	r3, r2
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f805 	bl	8006740 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006736:	69bb      	ldr	r3, [r7, #24]
	}
 8006738:	4618      	mov	r0, r3
 800673a:	3720      	adds	r7, #32
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	e002      	b.n	8006762 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800676e:	2101      	movs	r1, #1
 8006770:	69b8      	ldr	r0, [r7, #24]
 8006772:	f7ff fec3 	bl	80064fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	78fa      	ldrb	r2, [r7, #3]
 800677a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00e      	beq.n	80067b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80067a6:	2300      	movs	r3, #0
 80067a8:	2200      	movs	r2, #0
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8a3 	bl	80068f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af00      	add	r7, sp, #0
 80067c0:	4603      	mov	r3, r0
 80067c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	2300      	movs	r3, #0
 80067ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	461a      	mov	r2, r3
 80067d0:	6939      	ldr	r1, [r7, #16]
 80067d2:	6978      	ldr	r0, [r7, #20]
 80067d4:	f7ff ff79 	bl	80066ca <xQueueGenericCreate>
 80067d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ffd3 	bl	8006786 <prvInitialiseMutex>

		return xNewQueue;
 80067e0:	68fb      	ldr	r3, [r7, #12]
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b088      	sub	sp, #32
 80067ee:	af02      	add	r7, sp, #8
 80067f0:	4603      	mov	r3, r0
 80067f2:	6039      	str	r1, [r7, #0]
 80067f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80067f6:	2301      	movs	r3, #1
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2200      	movs	r2, #0
 8006806:	6939      	ldr	r1, [r7, #16]
 8006808:	6978      	ldr	r0, [r7, #20]
 800680a:	f7ff fee1 	bl	80065d0 <xQueueGenericCreateStatic>
 800680e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff ffb8 	bl	8006786 <prvInitialiseMutex>

		return xNewQueue;
 8006816:	68fb      	ldr	r3, [r7, #12]
	}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60fb      	str	r3, [r7, #12]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	689c      	ldr	r4, [r3, #8]
 800684e:	f001 fcf7 	bl	8008240 <xTaskGetCurrentTaskHandle>
 8006852:	4603      	mov	r3, r0
 8006854:	429c      	cmp	r4, r3
 8006856:	d111      	bne.n	800687c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	1e5a      	subs	r2, r3, #1
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d105      	bne.n	8006876 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800686a:	2300      	movs	r3, #0
 800686c:	2200      	movs	r2, #0
 800686e:	2100      	movs	r1, #0
 8006870:	6938      	ldr	r0, [r7, #16]
 8006872:	f000 f841 	bl	80068f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006876:	2301      	movs	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	e001      	b.n	8006880 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006880:	697b      	ldr	r3, [r7, #20]
	}
 8006882:	4618      	mov	r0, r3
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	bd90      	pop	{r4, r7, pc}

0800688a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800688a:	b590      	push	{r4, r7, lr}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
}
 80068b0:	bf00      	nop
 80068b2:	bf00      	nop
 80068b4:	e7fd      	b.n	80068b2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	689c      	ldr	r4, [r3, #8]
 80068ba:	f001 fcc1 	bl	8008240 <xTaskGetCurrentTaskHandle>
 80068be:	4603      	mov	r3, r0
 80068c0:	429c      	cmp	r4, r3
 80068c2:	d107      	bne.n	80068d4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80068ce:	2301      	movs	r3, #1
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	e00c      	b.n	80068ee <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6938      	ldr	r0, [r7, #16]
 80068d8:	f000 fa90 	bl	8006dfc <xQueueSemaphoreTake>
 80068dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80068ee:	697b      	ldr	r3, [r7, #20]
	}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	@ 0x38
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006906:	2300      	movs	r3, #0
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10b      	bne.n	800692c <xQueueGenericSend+0x34>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	e7fd      	b.n	8006928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <xQueueGenericSend+0x42>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <xQueueGenericSend+0x46>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <xQueueGenericSend+0x48>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <xQueueGenericSend+0x64>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006956:	bf00      	nop
 8006958:	bf00      	nop
 800695a:	e7fd      	b.n	8006958 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d103      	bne.n	800696a <xQueueGenericSend+0x72>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <xQueueGenericSend+0x76>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <xQueueGenericSend+0x78>
 800696e:	2300      	movs	r3, #0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <xQueueGenericSend+0x94>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	623b      	str	r3, [r7, #32]
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800698c:	f001 fc66 	bl	800825c <xTaskGetSchedulerState>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d102      	bne.n	800699c <xQueueGenericSend+0xa4>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <xQueueGenericSend+0xa8>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <xQueueGenericSend+0xaa>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <xQueueGenericSend+0xc6>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	61fb      	str	r3, [r7, #28]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069be:	f002 fd3d 	bl	800943c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d302      	bcc.n	80069d4 <xQueueGenericSend+0xdc>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d129      	bne.n	8006a28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069da:	f000 fbb8 	bl	800714e <prvCopyDataToQueue>
 80069de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d010      	beq.n	8006a0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	3324      	adds	r3, #36	@ 0x24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fa61 	bl	8007eb4 <xTaskRemoveFromEventList>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069f8:	4b3f      	ldr	r3, [pc, #252]	@ (8006af8 <xQueueGenericSend+0x200>)
 80069fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	e00a      	b.n	8006a20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a10:	4b39      	ldr	r3, [pc, #228]	@ (8006af8 <xQueueGenericSend+0x200>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a20:	f002 fd3c 	bl	800949c <vPortExitCritical>
				return pdPASS;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e063      	b.n	8006af0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a2e:	f002 fd35 	bl	800949c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e05c      	b.n	8006af0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d106      	bne.n	8006a4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a3c:	f107 0314 	add.w	r3, r7, #20
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 fa9b 	bl	8007f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a46:	2301      	movs	r3, #1
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a4a:	f002 fd27 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a4e:	f000 fff5 	bl	8007a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a52:	f002 fcf3 	bl	800943c <vPortEnterCritical>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d103      	bne.n	8006a6c <xQueueGenericSend+0x174>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d103      	bne.n	8006a82 <xQueueGenericSend+0x18a>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a82:	f002 fd0b 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a86:	1d3a      	adds	r2, r7, #4
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 fa8a 	bl	8007fa8 <xTaskCheckForTimeOut>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d124      	bne.n	8006ae4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a9c:	f000 fc4f 	bl	800733e <prvIsQueueFull>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d018      	beq.n	8006ad8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	3310      	adds	r3, #16
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 f9ae 	bl	8007e10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ab6:	f000 fbda 	bl	800726e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006aba:	f000 ffcd 	bl	8007a58 <xTaskResumeAll>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f47f af7c 	bne.w	80069be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8006af8 <xQueueGenericSend+0x200>)
 8006ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	e772      	b.n	80069be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ada:	f000 fbc8 	bl	800726e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ade:	f000 ffbb 	bl	8007a58 <xTaskResumeAll>
 8006ae2:	e76c      	b.n	80069be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ae6:	f000 fbc2 	bl	800726e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aea:	f000 ffb5 	bl	8007a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3738      	adds	r7, #56	@ 0x38
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b090      	sub	sp, #64	@ 0x40
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10b      	bne.n	8006b2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <xQueueGenericSendFromISR+0x3e>
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <xQueueGenericSendFromISR+0x42>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <xQueueGenericSendFromISR+0x44>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10b      	bne.n	8006b5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	e7fd      	b.n	8006b58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d103      	bne.n	8006b6a <xQueueGenericSendFromISR+0x6e>
 8006b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <xQueueGenericSendFromISR+0x72>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <xQueueGenericSendFromISR+0x74>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10b      	bne.n	8006b8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	623b      	str	r3, [r7, #32]
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	e7fd      	b.n	8006b88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b8c:	f002 fd18 	bl	80095c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b90:	f3ef 8211 	mrs	r2, BASEPRI
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	61fa      	str	r2, [r7, #28]
 8006ba6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <xQueueGenericSendFromISR+0xc2>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d12f      	bne.n	8006c1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bd4:	f000 fabb 	bl	800714e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bd8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d112      	bne.n	8006c08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d016      	beq.n	8006c18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bec:	3324      	adds	r3, #36	@ 0x24
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 f960 	bl	8007eb4 <xTaskRemoveFromEventList>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00e      	beq.n	8006c18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e007      	b.n	8006c18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	b25a      	sxtb	r2, r3
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006c1c:	e001      	b.n	8006c22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3740      	adds	r7, #64	@ 0x40
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	@ 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c44:	2300      	movs	r3, #0
 8006c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10b      	bne.n	8006c6a <xQueueReceive+0x32>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	623b      	str	r3, [r7, #32]
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	e7fd      	b.n	8006c66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d103      	bne.n	8006c78 <xQueueReceive+0x40>
 8006c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <xQueueReceive+0x44>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <xQueueReceive+0x46>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <xQueueReceive+0x62>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	61fb      	str	r3, [r7, #28]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c9a:	f001 fadf 	bl	800825c <xTaskGetSchedulerState>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <xQueueReceive+0x72>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <xQueueReceive+0x76>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <xQueueReceive+0x78>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <xQueueReceive+0x94>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	61bb      	str	r3, [r7, #24]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ccc:	f002 fbb6 	bl	800943c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01f      	beq.n	8006d1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce0:	f000 fa9f 	bl	8007222 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	1e5a      	subs	r2, r3, #1
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00f      	beq.n	8006d14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 f8db 	bl	8007eb4 <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b3c      	ldr	r3, [pc, #240]	@ (8006df8 <xQueueReceive+0x1c0>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d14:	f002 fbc2 	bl	800949c <vPortExitCritical>
				return pdPASS;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e069      	b.n	8006df0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d22:	f002 fbbb 	bl	800949c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e062      	b.n	8006df0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d30:	f107 0310 	add.w	r3, r7, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	f001 f921 	bl	8007f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d3e:	f002 fbad 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d42:	f000 fe7b 	bl	8007a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d46:	f002 fb79 	bl	800943c <vPortEnterCritical>
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d50:	b25b      	sxtb	r3, r3
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d103      	bne.n	8006d60 <xQueueReceive+0x128>
 8006d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d103      	bne.n	8006d76 <xQueueReceive+0x13e>
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d76:	f002 fb91 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d7a:	1d3a      	adds	r2, r7, #4
 8006d7c:	f107 0310 	add.w	r3, r7, #16
 8006d80:	4611      	mov	r1, r2
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 f910 	bl	8007fa8 <xTaskCheckForTimeOut>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d123      	bne.n	8006dd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d90:	f000 fabf 	bl	8007312 <prvIsQueueEmpty>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9c:	3324      	adds	r3, #36	@ 0x24
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 f834 	bl	8007e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006daa:	f000 fa60 	bl	800726e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dae:	f000 fe53 	bl	8007a58 <xTaskResumeAll>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d189      	bne.n	8006ccc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006db8:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <xQueueReceive+0x1c0>)
 8006dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	e780      	b.n	8006ccc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006dca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dcc:	f000 fa4f 	bl	800726e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd0:	f000 fe42 	bl	8007a58 <xTaskResumeAll>
 8006dd4:	e77a      	b.n	8006ccc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dd8:	f000 fa49 	bl	800726e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ddc:	f000 fe3c 	bl	8007a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006de2:	f000 fa96 	bl	8007312 <prvIsQueueEmpty>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f43f af6f 	beq.w	8006ccc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3730      	adds	r7, #48	@ 0x30
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08e      	sub	sp, #56	@ 0x38
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10b      	bne.n	8006e30 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	623b      	str	r3, [r7, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	61fb      	str	r3, [r7, #28]
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e50:	f001 fa04 	bl	800825c <xTaskGetSchedulerState>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d102      	bne.n	8006e60 <xQueueSemaphoreTake+0x64>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <xQueueSemaphoreTake+0x68>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <xQueueSemaphoreTake+0x6a>
 8006e64:	2300      	movs	r3, #0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	61bb      	str	r3, [r7, #24]
}
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e82:	f002 fadb 	bl	800943c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d024      	beq.n	8006edc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e94:	1e5a      	subs	r2, r3, #1
 8006e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e98:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ea2:	f001 fb55 	bl	8008550 <pvTaskIncrementMutexHeldCount>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eaa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00f      	beq.n	8006ed4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	3310      	adds	r3, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fffb 	bl	8007eb4 <xTaskRemoveFromEventList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b54      	ldr	r3, [pc, #336]	@ (8007018 <xQueueSemaphoreTake+0x21c>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ed4:	f002 fae2 	bl	800949c <vPortExitCritical>
				return pdPASS;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e098      	b.n	800700e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d112      	bne.n	8006f08 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	617b      	str	r3, [r7, #20]
}
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	e7fd      	b.n	8006efc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006f00:	f002 facc 	bl	800949c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e082      	b.n	800700e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d106      	bne.n	8006f1c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f0e:	f107 030c 	add.w	r3, r7, #12
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 f832 	bl	8007f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f1c:	f002 fabe 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f20:	f000 fd8c 	bl	8007a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f24:	f002 fa8a 	bl	800943c <vPortEnterCritical>
 8006f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d103      	bne.n	8006f3e <xQueueSemaphoreTake+0x142>
 8006f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f44:	b25b      	sxtb	r3, r3
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	d103      	bne.n	8006f54 <xQueueSemaphoreTake+0x158>
 8006f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f54:	f002 faa2 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f58:	463a      	mov	r2, r7
 8006f5a:	f107 030c 	add.w	r3, r7, #12
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 f821 	bl	8007fa8 <xTaskCheckForTimeOut>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d132      	bne.n	8006fd2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f6e:	f000 f9d0 	bl	8007312 <prvIsQueueEmpty>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d026      	beq.n	8006fc6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d109      	bne.n	8006f94 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006f80:	f002 fa5c 	bl	800943c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 f985 	bl	8008298 <xTaskPriorityInherit>
 8006f8e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006f90:	f002 fa84 	bl	800949c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	3324      	adds	r3, #36	@ 0x24
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 ff37 	bl	8007e10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fa4:	f000 f963 	bl	800726e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fa8:	f000 fd56 	bl	8007a58 <xTaskResumeAll>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f47f af67 	bne.w	8006e82 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006fb4:	4b18      	ldr	r3, [pc, #96]	@ (8007018 <xQueueSemaphoreTake+0x21c>)
 8006fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	e75d      	b.n	8006e82 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006fc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fc8:	f000 f951 	bl	800726e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fcc:	f000 fd44 	bl	8007a58 <xTaskResumeAll>
 8006fd0:	e757      	b.n	8006e82 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006fd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fd4:	f000 f94b 	bl	800726e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fd8:	f000 fd3e 	bl	8007a58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fde:	f000 f998 	bl	8007312 <prvIsQueueEmpty>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f43f af4c 	beq.w	8006e82 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00d      	beq.n	800700c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006ff0:	f002 fa24 	bl	800943c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ff6:	f000 f893 	bl	8007120 <prvGetDisinheritPriorityAfterTimeout>
 8006ffa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007002:	4618      	mov	r0, r3
 8007004:	f001 fa20 	bl	8008448 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007008:	f002 fa48 	bl	800949c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800700c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800700e:	4618      	mov	r0, r3
 8007010:	3738      	adds	r7, #56	@ 0x38
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	e000ed04 	.word	0xe000ed04

0800701c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08e      	sub	sp, #56	@ 0x38
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	623b      	str	r3, [r7, #32]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <xQueueReceiveFromISR+0x3c>
 8007050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <xQueueReceiveFromISR+0x40>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <xQueueReceiveFromISR+0x42>
 800705c:	2300      	movs	r3, #0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	61fb      	str	r3, [r7, #28]
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	e7fd      	b.n	8007076 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800707a:	f002 faa1 	bl	80095c0 <vPortValidateInterruptPriority>
	__asm volatile
 800707e:	f3ef 8211 	mrs	r2, BASEPRI
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	61ba      	str	r2, [r7, #24]
 8007094:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007096:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007098:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d02f      	beq.n	8007106 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070b0:	68b9      	ldr	r1, [r7, #8]
 80070b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070b4:	f000 f8b5 	bl	8007222 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	1e5a      	subs	r2, r3, #1
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80070c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d112      	bne.n	80070f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d016      	beq.n	8007100 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	3310      	adds	r3, #16
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 feec 	bl	8007eb4 <xTaskRemoveFromEventList>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	e007      	b.n	8007100 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070f4:	3301      	adds	r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	b25a      	sxtb	r2, r3
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007100:	2301      	movs	r3, #1
 8007102:	637b      	str	r3, [r7, #52]	@ 0x34
 8007104:	e001      	b.n	800710a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007106:	2300      	movs	r3, #0
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
 800710a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f383 8811 	msr	BASEPRI, r3
}
 8007114:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007118:	4618      	mov	r0, r3
 800711a:	3738      	adds	r7, #56	@ 0x38
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d006      	beq.n	800713e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	e001      	b.n	8007142 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007142:	68fb      	ldr	r3, [r7, #12]
	}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	bc80      	pop	{r7}
 800714c:	4770      	bx	lr

0800714e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007162:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d14d      	bne.n	8007210 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f8f5 	bl	8008368 <xTaskPriorityDisinherit>
 800717e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	609a      	str	r2, [r3, #8]
 8007186:	e043      	b.n	8007210 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d119      	bne.n	80071c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6858      	ldr	r0, [r3, #4]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	461a      	mov	r2, r3
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	f003 fbd2 	bl	800a942 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a6:	441a      	add	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d32b      	bcc.n	8007210 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	605a      	str	r2, [r3, #4]
 80071c0:	e026      	b.n	8007210 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68d8      	ldr	r0, [r3, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ca:	461a      	mov	r2, r3
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	f003 fbb8 	bl	800a942 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	425b      	negs	r3, r3
 80071dc:	441a      	add	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d207      	bcs.n	80071fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689a      	ldr	r2, [r3, #8]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	425b      	negs	r3, r3
 80071f8:	441a      	add	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d105      	bne.n	8007210 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	3b01      	subs	r3, #1
 800720e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007218:	697b      	ldr	r3, [r7, #20]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d018      	beq.n	8007266 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723c:	441a      	add	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	d303      	bcc.n	8007256 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68d9      	ldr	r1, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	461a      	mov	r2, r3
 8007260:	6838      	ldr	r0, [r7, #0]
 8007262:	f003 fb6e 	bl	800a942 <memcpy>
	}
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007276:	f002 f8e1 	bl	800943c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007280:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007282:	e011      	b.n	80072a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d012      	beq.n	80072b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3324      	adds	r3, #36	@ 0x24
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fe0f 	bl	8007eb4 <xTaskRemoveFromEventList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800729c:	f000 fee8 	bl	8008070 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dce9      	bgt.n	8007284 <prvUnlockQueue+0x16>
 80072b0:	e000      	b.n	80072b4 <prvUnlockQueue+0x46>
					break;
 80072b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	22ff      	movs	r2, #255	@ 0xff
 80072b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80072bc:	f002 f8ee 	bl	800949c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072c0:	f002 f8bc 	bl	800943c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072cc:	e011      	b.n	80072f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d012      	beq.n	80072fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3310      	adds	r3, #16
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fdea 	bl	8007eb4 <xTaskRemoveFromEventList>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072e6:	f000 fec3 	bl	8008070 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dce9      	bgt.n	80072ce <prvUnlockQueue+0x60>
 80072fa:	e000      	b.n	80072fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	22ff      	movs	r2, #255	@ 0xff
 8007302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007306:	f002 f8c9 	bl	800949c <vPortExitCritical>
}
 800730a:	bf00      	nop
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800731a:	f002 f88f 	bl	800943c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007326:	2301      	movs	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e001      	b.n	8007330 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007330:	f002 f8b4 	bl	800949c <vPortExitCritical>

	return xReturn;
 8007334:	68fb      	ldr	r3, [r7, #12]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007346:	f002 f879 	bl	800943c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007352:	429a      	cmp	r2, r3
 8007354:	d102      	bne.n	800735c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007356:	2301      	movs	r3, #1
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	e001      	b.n	8007360 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007360:	f002 f89c 	bl	800949c <vPortExitCritical>

	return xReturn;
 8007364:	68fb      	ldr	r3, [r7, #12]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e014      	b.n	80073aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007380:	4a0e      	ldr	r2, [pc, #56]	@ (80073bc <vQueueAddToRegistry+0x4c>)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10b      	bne.n	80073a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800738c:	490b      	ldr	r1, [pc, #44]	@ (80073bc <vQueueAddToRegistry+0x4c>)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007396:	4a09      	ldr	r2, [pc, #36]	@ (80073bc <vQueueAddToRegistry+0x4c>)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073a2:	e006      	b.n	80073b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	3301      	adds	r3, #1
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b0f      	cmp	r3, #15
 80073ae:	d9e7      	bls.n	8007380 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bc80      	pop	{r7}
 80073ba:	4770      	bx	lr
 80073bc:	20000d74 	.word	0x20000d74

080073c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073d0:	f002 f834 	bl	800943c <vPortEnterCritical>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073da:	b25b      	sxtb	r3, r3
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e0:	d103      	bne.n	80073ea <vQueueWaitForMessageRestricted+0x2a>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073f0:	b25b      	sxtb	r3, r3
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d103      	bne.n	8007400 <vQueueWaitForMessageRestricted+0x40>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007400:	f002 f84c 	bl	800949c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d106      	bne.n	800741a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3324      	adds	r3, #36	@ 0x24
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fd21 	bl	8007e5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800741a:	6978      	ldr	r0, [r7, #20]
 800741c:	f7ff ff27 	bl	800726e <prvUnlockQueue>
	}
 8007420:	bf00      	nop
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	@ 0x38
 800742c:	af04      	add	r7, sp, #16
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10b      	bne.n	8007454 <xTaskCreateStatic+0x2c>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	623b      	str	r3, [r7, #32]
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <xTaskCreateStatic+0x4a>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	61fb      	str	r3, [r7, #28]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007472:	23a8      	movs	r3, #168	@ 0xa8
 8007474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2ba8      	cmp	r3, #168	@ 0xa8
 800747a:	d00b      	beq.n	8007494 <xTaskCreateStatic+0x6c>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	61bb      	str	r3, [r7, #24]
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	e7fd      	b.n	8007490 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007494:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01e      	beq.n	80074da <xTaskCreateStatic+0xb2>
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01b      	beq.n	80074da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074b4:	2300      	movs	r3, #0
 80074b6:	9303      	str	r3, [sp, #12]
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	9302      	str	r3, [sp, #8]
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68b9      	ldr	r1, [r7, #8]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f851 	bl	8007574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074d4:	f000 f8f6 	bl	80076c4 <prvAddNewTaskToReadyList>
 80074d8:	e001      	b.n	80074de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074de:	697b      	ldr	r3, [r7, #20]
	}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3728      	adds	r7, #40	@ 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08c      	sub	sp, #48	@ 0x30
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f002 f89f 	bl	8009640 <pvPortMalloc>
 8007502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00e      	beq.n	8007528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800750a:	20a8      	movs	r0, #168	@ 0xa8
 800750c:	f002 f898 	bl	8009640 <pvPortMalloc>
 8007510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	631a      	str	r2, [r3, #48]	@ 0x30
 800751e:	e005      	b.n	800752c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f002 f95b 	bl	80097dc <vPortFree>
 8007526:	e001      	b.n	800752c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007528:	2300      	movs	r3, #0
 800752a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d017      	beq.n	8007562 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f80f 	bl	8007574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f000 f8b4 	bl	80076c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e002      	b.n	8007568 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295
 8007566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007568:	69bb      	ldr	r3, [r7, #24]
	}
 800756a:	4618      	mov	r0, r3
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b088      	sub	sp, #32
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	461a      	mov	r2, r3
 800758c:	21a5      	movs	r1, #165	@ 0xa5
 800758e:	f003 f8f5 	bl	800a77c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759c:	3b01      	subs	r3, #1
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f023 0307 	bic.w	r3, r3, #7
 80075aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	617b      	str	r3, [r7, #20]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01f      	beq.n	8007614 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d4:	2300      	movs	r3, #0
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	e012      	b.n	8007600 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	7819      	ldrb	r1, [r3, #0]
 80075e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	3334      	adds	r3, #52	@ 0x34
 80075ea:	460a      	mov	r2, r1
 80075ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	4413      	add	r3, r2
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d006      	beq.n	8007608 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	3301      	adds	r3, #1
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	2b0f      	cmp	r3, #15
 8007604:	d9e9      	bls.n	80075da <prvInitialiseNewTask+0x66>
 8007606:	e000      	b.n	800760a <prvInitialiseNewTask+0x96>
			{
				break;
 8007608:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007612:	e003      	b.n	800761c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	2b37      	cmp	r3, #55	@ 0x37
 8007620:	d901      	bls.n	8007626 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007622:	2337      	movs	r3, #55	@ 0x37
 8007624:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800762a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007630:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	2200      	movs	r2, #0
 8007636:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	3304      	adds	r3, #4
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe fecc 	bl	80063da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	3318      	adds	r3, #24
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fec7 	bl	80063da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007650:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800765c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007660:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	2200      	movs	r2, #0
 800766e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	3354      	adds	r3, #84	@ 0x54
 8007676:	224c      	movs	r2, #76	@ 0x4c
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f003 f87e 	bl	800a77c <memset>
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	4a0d      	ldr	r2, [pc, #52]	@ (80076b8 <prvInitialiseNewTask+0x144>)
 8007684:	659a      	str	r2, [r3, #88]	@ 0x58
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	4a0c      	ldr	r2, [pc, #48]	@ (80076bc <prvInitialiseNewTask+0x148>)
 800768a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	4a0c      	ldr	r2, [pc, #48]	@ (80076c0 <prvInitialiseNewTask+0x14c>)
 8007690:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	69b8      	ldr	r0, [r7, #24]
 8007698:	f001 fde2 	bl	8009260 <pxPortInitialiseStack>
 800769c:	4602      	mov	r2, r0
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ae:	bf00      	nop
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20003bb8 	.word	0x20003bb8
 80076bc:	20003c20 	.word	0x20003c20
 80076c0:	20003c88 	.word	0x20003c88

080076c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076cc:	f001 feb6 	bl	800943c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007788 <prvAddNewTaskToReadyList+0xc4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3301      	adds	r3, #1
 80076d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007788 <prvAddNewTaskToReadyList+0xc4>)
 80076d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076da:	4b2c      	ldr	r3, [pc, #176]	@ (800778c <prvAddNewTaskToReadyList+0xc8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076e2:	4a2a      	ldr	r2, [pc, #168]	@ (800778c <prvAddNewTaskToReadyList+0xc8>)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076e8:	4b27      	ldr	r3, [pc, #156]	@ (8007788 <prvAddNewTaskToReadyList+0xc4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d110      	bne.n	8007712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076f0:	f000 fce2 	bl	80080b8 <prvInitialiseTaskLists>
 80076f4:	e00d      	b.n	8007712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076f6:	4b26      	ldr	r3, [pc, #152]	@ (8007790 <prvAddNewTaskToReadyList+0xcc>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076fe:	4b23      	ldr	r3, [pc, #140]	@ (800778c <prvAddNewTaskToReadyList+0xc8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	429a      	cmp	r2, r3
 800770a:	d802      	bhi.n	8007712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800770c:	4a1f      	ldr	r2, [pc, #124]	@ (800778c <prvAddNewTaskToReadyList+0xc8>)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007712:	4b20      	ldr	r3, [pc, #128]	@ (8007794 <prvAddNewTaskToReadyList+0xd0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3301      	adds	r3, #1
 8007718:	4a1e      	ldr	r2, [pc, #120]	@ (8007794 <prvAddNewTaskToReadyList+0xd0>)
 800771a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800771c:	4b1d      	ldr	r3, [pc, #116]	@ (8007794 <prvAddNewTaskToReadyList+0xd0>)
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007728:	4b1b      	ldr	r3, [pc, #108]	@ (8007798 <prvAddNewTaskToReadyList+0xd4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d903      	bls.n	8007738 <prvAddNewTaskToReadyList+0x74>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007734:	4a18      	ldr	r2, [pc, #96]	@ (8007798 <prvAddNewTaskToReadyList+0xd4>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4a15      	ldr	r2, [pc, #84]	@ (800779c <prvAddNewTaskToReadyList+0xd8>)
 8007746:	441a      	add	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f7fe fe4f 	bl	80063f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007754:	f001 fea2 	bl	800949c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007758:	4b0d      	ldr	r3, [pc, #52]	@ (8007790 <prvAddNewTaskToReadyList+0xcc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00e      	beq.n	800777e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007760:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <prvAddNewTaskToReadyList+0xc8>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776a:	429a      	cmp	r2, r3
 800776c:	d207      	bcs.n	800777e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800776e:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <prvAddNewTaskToReadyList+0xdc>)
 8007770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800777e:	bf00      	nop
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200012c8 	.word	0x200012c8
 800778c:	20000df4 	.word	0x20000df4
 8007790:	200012d4 	.word	0x200012d4
 8007794:	200012e4 	.word	0x200012e4
 8007798:	200012d0 	.word	0x200012d0
 800779c:	20000df8 	.word	0x20000df8
 80077a0:	e000ed04 	.word	0xe000ed04

080077a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80077ac:	f001 fe46 	bl	800943c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <vTaskDelete+0x18>
 80077b6:	4b2d      	ldr	r3, [pc, #180]	@ (800786c <vTaskDelete+0xc8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	e000      	b.n	80077be <vTaskDelete+0x1a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe fe6f 	bl	80064a8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3318      	adds	r3, #24
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fe66 	bl	80064a8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80077dc:	4b24      	ldr	r3, [pc, #144]	@ (8007870 <vTaskDelete+0xcc>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3301      	adds	r3, #1
 80077e2:	4a23      	ldr	r2, [pc, #140]	@ (8007870 <vTaskDelete+0xcc>)
 80077e4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80077e6:	4b21      	ldr	r3, [pc, #132]	@ (800786c <vTaskDelete+0xc8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d10b      	bne.n	8007808 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	481f      	ldr	r0, [pc, #124]	@ (8007874 <vTaskDelete+0xd0>)
 80077f8:	f7fe fdfb 	bl	80063f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80077fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007878 <vTaskDelete+0xd4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	4a1d      	ldr	r2, [pc, #116]	@ (8007878 <vTaskDelete+0xd4>)
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	e009      	b.n	800781c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007808:	4b1c      	ldr	r3, [pc, #112]	@ (800787c <vTaskDelete+0xd8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3b01      	subs	r3, #1
 800780e:	4a1b      	ldr	r2, [pc, #108]	@ (800787c <vTaskDelete+0xd8>)
 8007810:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fcbe 	bl	8008194 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007818:	f000 fcf2 	bl	8008200 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800781c:	f001 fe3e 	bl	800949c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007820:	4b17      	ldr	r3, [pc, #92]	@ (8007880 <vTaskDelete+0xdc>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01c      	beq.n	8007862 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8007828:	4b10      	ldr	r3, [pc, #64]	@ (800786c <vTaskDelete+0xc8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	429a      	cmp	r2, r3
 8007830:	d117      	bne.n	8007862 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007832:	4b14      	ldr	r3, [pc, #80]	@ (8007884 <vTaskDelete+0xe0>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00b      	beq.n	8007852 <vTaskDelete+0xae>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	60bb      	str	r3, [r7, #8]
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	e7fd      	b.n	800784e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007852:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <vTaskDelete+0xe4>)
 8007854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007862:	bf00      	nop
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000df4 	.word	0x20000df4
 8007870:	200012e4 	.word	0x200012e4
 8007874:	2000129c 	.word	0x2000129c
 8007878:	200012b0 	.word	0x200012b0
 800787c:	200012c8 	.word	0x200012c8
 8007880:	200012d4 	.word	0x200012d4
 8007884:	200012f0 	.word	0x200012f0
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10b      	bne.n	80078b6 <eTaskGetState+0x2a>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	60bb      	str	r3, [r7, #8]
}
 80078b0:	bf00      	nop
 80078b2:	bf00      	nop
 80078b4:	e7fd      	b.n	80078b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80078b6:	4b24      	ldr	r3, [pc, #144]	@ (8007948 <eTaskGetState+0xbc>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d102      	bne.n	80078c6 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80078c0:	2300      	movs	r3, #0
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e03a      	b.n	800793c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 80078c6:	f001 fdb9 	bl	800943c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80078d0:	4b1e      	ldr	r3, [pc, #120]	@ (800794c <eTaskGetState+0xc0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80078d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007950 <eTaskGetState+0xc4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80078dc:	f001 fdde 	bl	800949c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d003      	beq.n	80078f0 <eTaskGetState+0x64>
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d102      	bne.n	80078f6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80078f0:	2302      	movs	r3, #2
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e022      	b.n	800793c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	4a16      	ldr	r2, [pc, #88]	@ (8007954 <eTaskGetState+0xc8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d112      	bne.n	8007924 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10b      	bne.n	800791e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	d102      	bne.n	8007918 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8007912:	2302      	movs	r3, #2
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e011      	b.n	800793c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8007918:	2303      	movs	r3, #3
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e00e      	b.n	800793c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800791e:	2302      	movs	r3, #2
 8007920:	77fb      	strb	r3, [r7, #31]
 8007922:	e00b      	b.n	800793c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	4a0c      	ldr	r2, [pc, #48]	@ (8007958 <eTaskGetState+0xcc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d002      	beq.n	8007932 <eTaskGetState+0xa6>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007932:	2304      	movs	r3, #4
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e001      	b.n	800793c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007938:	2301      	movs	r3, #1
 800793a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800793c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800793e:	4618      	mov	r0, r3
 8007940:	3720      	adds	r7, #32
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000df4 	.word	0x20000df4
 800794c:	20001280 	.word	0x20001280
 8007950:	20001284 	.word	0x20001284
 8007954:	200012b4 	.word	0x200012b4
 8007958:	2000129c 	.word	0x2000129c

0800795c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	@ 0x28
 8007960:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800796a:	463a      	mov	r2, r7
 800796c:	1d39      	adds	r1, r7, #4
 800796e:	f107 0308 	add.w	r3, r7, #8
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fcde 	bl	8006334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	9202      	str	r2, [sp, #8]
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	2300      	movs	r3, #0
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	2300      	movs	r3, #0
 8007988:	460a      	mov	r2, r1
 800798a:	4924      	ldr	r1, [pc, #144]	@ (8007a1c <vTaskStartScheduler+0xc0>)
 800798c:	4824      	ldr	r0, [pc, #144]	@ (8007a20 <vTaskStartScheduler+0xc4>)
 800798e:	f7ff fd4b 	bl	8007428 <xTaskCreateStatic>
 8007992:	4603      	mov	r3, r0
 8007994:	4a23      	ldr	r2, [pc, #140]	@ (8007a24 <vTaskStartScheduler+0xc8>)
 8007996:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007998:	4b22      	ldr	r3, [pc, #136]	@ (8007a24 <vTaskStartScheduler+0xc8>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e001      	b.n	80079aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d102      	bne.n	80079b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80079b0:	f001 f83e 	bl	8008a30 <xTimerCreateTimerTask>
 80079b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d11b      	bne.n	80079f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	613b      	str	r3, [r7, #16]
}
 80079ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079d0:	4b15      	ldr	r3, [pc, #84]	@ (8007a28 <vTaskStartScheduler+0xcc>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3354      	adds	r3, #84	@ 0x54
 80079d6:	4a15      	ldr	r2, [pc, #84]	@ (8007a2c <vTaskStartScheduler+0xd0>)
 80079d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079da:	4b15      	ldr	r3, [pc, #84]	@ (8007a30 <vTaskStartScheduler+0xd4>)
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079e2:	4b14      	ldr	r3, [pc, #80]	@ (8007a34 <vTaskStartScheduler+0xd8>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079e8:	4b13      	ldr	r3, [pc, #76]	@ (8007a38 <vTaskStartScheduler+0xdc>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079ee:	f001 fcb3 	bl	8009358 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079f2:	e00f      	b.n	8007a14 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d10b      	bne.n	8007a14 <vTaskStartScheduler+0xb8>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <vTaskStartScheduler+0xb4>
}
 8007a14:	bf00      	nop
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	0800d30c 	.word	0x0800d30c
 8007a20:	08008089 	.word	0x08008089
 8007a24:	200012ec 	.word	0x200012ec
 8007a28:	20000df4 	.word	0x20000df4
 8007a2c:	20000054 	.word	0x20000054
 8007a30:	200012e8 	.word	0x200012e8
 8007a34:	200012d4 	.word	0x200012d4
 8007a38:	200012cc 	.word	0x200012cc

08007a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a40:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <vTaskSuspendAll+0x18>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	4a03      	ldr	r2, [pc, #12]	@ (8007a54 <vTaskSuspendAll+0x18>)
 8007a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a4a:	bf00      	nop
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	200012f0 	.word	0x200012f0

08007a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a66:	4b42      	ldr	r3, [pc, #264]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <xTaskResumeAll+0x2e>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	603b      	str	r3, [r7, #0]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a86:	f001 fcd9 	bl	800943c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a8a:	4b39      	ldr	r3, [pc, #228]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	4a37      	ldr	r2, [pc, #220]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a94:	4b36      	ldr	r3, [pc, #216]	@ (8007b70 <xTaskResumeAll+0x118>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d162      	bne.n	8007b62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a9c:	4b35      	ldr	r3, [pc, #212]	@ (8007b74 <xTaskResumeAll+0x11c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d05e      	beq.n	8007b62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa4:	e02f      	b.n	8007b06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa6:	4b34      	ldr	r3, [pc, #208]	@ (8007b78 <xTaskResumeAll+0x120>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3318      	adds	r3, #24
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fcf8 	bl	80064a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe fcf3 	bl	80064a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b7c <xTaskResumeAll+0x124>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d903      	bls.n	8007ad6 <xTaskResumeAll+0x7e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8007b7c <xTaskResumeAll+0x124>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4a27      	ldr	r2, [pc, #156]	@ (8007b80 <xTaskResumeAll+0x128>)
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe fc80 	bl	80063f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af6:	4b23      	ldr	r3, [pc, #140]	@ (8007b84 <xTaskResumeAll+0x12c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d302      	bcc.n	8007b06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b00:	4b21      	ldr	r3, [pc, #132]	@ (8007b88 <xTaskResumeAll+0x130>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b06:	4b1c      	ldr	r3, [pc, #112]	@ (8007b78 <xTaskResumeAll+0x120>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1cb      	bne.n	8007aa6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b14:	f000 fb74 	bl	8008200 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b18:	4b1c      	ldr	r3, [pc, #112]	@ (8007b8c <xTaskResumeAll+0x134>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d010      	beq.n	8007b46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b24:	f000 f856 	bl	8007bd4 <xTaskIncrementTick>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007b2e:	4b16      	ldr	r3, [pc, #88]	@ (8007b88 <xTaskResumeAll+0x130>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f1      	bne.n	8007b24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007b40:	4b12      	ldr	r3, [pc, #72]	@ (8007b8c <xTaskResumeAll+0x134>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b46:	4b10      	ldr	r3, [pc, #64]	@ (8007b88 <xTaskResumeAll+0x130>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b52:	4b0f      	ldr	r3, [pc, #60]	@ (8007b90 <xTaskResumeAll+0x138>)
 8007b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b62:	f001 fc9b 	bl	800949c <vPortExitCritical>

	return xAlreadyYielded;
 8007b66:	68bb      	ldr	r3, [r7, #8]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200012f0 	.word	0x200012f0
 8007b74:	200012c8 	.word	0x200012c8
 8007b78:	20001288 	.word	0x20001288
 8007b7c:	200012d0 	.word	0x200012d0
 8007b80:	20000df8 	.word	0x20000df8
 8007b84:	20000df4 	.word	0x20000df4
 8007b88:	200012dc 	.word	0x200012dc
 8007b8c:	200012d8 	.word	0x200012d8
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b9a:	4b04      	ldr	r3, [pc, #16]	@ (8007bac <xTaskGetTickCount+0x18>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ba0:	687b      	ldr	r3, [r7, #4]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr
 8007bac:	200012cc 	.word	0x200012cc

08007bb0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bb6:	f001 fd03 	bl	80095c0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007bba:	2300      	movs	r3, #0
 8007bbc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007bbe:	4b04      	ldr	r3, [pc, #16]	@ (8007bd0 <xTaskGetTickCountFromISR+0x20>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bc4:	683b      	ldr	r3, [r7, #0]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	200012cc 	.word	0x200012cc

08007bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bde:	4b4f      	ldr	r3, [pc, #316]	@ (8007d1c <xTaskIncrementTick+0x148>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f040 8090 	bne.w	8007d08 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007be8:	4b4d      	ldr	r3, [pc, #308]	@ (8007d20 <xTaskIncrementTick+0x14c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3301      	adds	r3, #1
 8007bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8007d20 <xTaskIncrementTick+0x14c>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d121      	bne.n	8007c40 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bfc:	4b49      	ldr	r3, [pc, #292]	@ (8007d24 <xTaskIncrementTick+0x150>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d00b      	beq.n	8007c1e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	603b      	str	r3, [r7, #0]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <xTaskIncrementTick+0x46>
 8007c1e:	4b41      	ldr	r3, [pc, #260]	@ (8007d24 <xTaskIncrementTick+0x150>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	4b40      	ldr	r3, [pc, #256]	@ (8007d28 <xTaskIncrementTick+0x154>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a3e      	ldr	r2, [pc, #248]	@ (8007d24 <xTaskIncrementTick+0x150>)
 8007c2a:	6013      	str	r3, [r2, #0]
 8007c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8007d28 <xTaskIncrementTick+0x154>)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4b3e      	ldr	r3, [pc, #248]	@ (8007d2c <xTaskIncrementTick+0x158>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3301      	adds	r3, #1
 8007c38:	4a3c      	ldr	r2, [pc, #240]	@ (8007d2c <xTaskIncrementTick+0x158>)
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	f000 fae0 	bl	8008200 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c40:	4b3b      	ldr	r3, [pc, #236]	@ (8007d30 <xTaskIncrementTick+0x15c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d349      	bcc.n	8007cde <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c4a:	4b36      	ldr	r3, [pc, #216]	@ (8007d24 <xTaskIncrementTick+0x150>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d104      	bne.n	8007c5e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c54:	4b36      	ldr	r3, [pc, #216]	@ (8007d30 <xTaskIncrementTick+0x15c>)
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5a:	601a      	str	r2, [r3, #0]
					break;
 8007c5c:	e03f      	b.n	8007cde <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c5e:	4b31      	ldr	r3, [pc, #196]	@ (8007d24 <xTaskIncrementTick+0x150>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d203      	bcs.n	8007c7e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c76:	4a2e      	ldr	r2, [pc, #184]	@ (8007d30 <xTaskIncrementTick+0x15c>)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c7c:	e02f      	b.n	8007cde <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe fc10 	bl	80064a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	3318      	adds	r3, #24
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fc07 	bl	80064a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9e:	4b25      	ldr	r3, [pc, #148]	@ (8007d34 <xTaskIncrementTick+0x160>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d903      	bls.n	8007cae <xTaskIncrementTick+0xda>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	4a22      	ldr	r2, [pc, #136]	@ (8007d34 <xTaskIncrementTick+0x160>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4a1f      	ldr	r2, [pc, #124]	@ (8007d38 <xTaskIncrementTick+0x164>)
 8007cbc:	441a      	add	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7fe fb94 	bl	80063f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cce:	4b1b      	ldr	r3, [pc, #108]	@ (8007d3c <xTaskIncrementTick+0x168>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d3b8      	bcc.n	8007c4a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cdc:	e7b5      	b.n	8007c4a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cde:	4b17      	ldr	r3, [pc, #92]	@ (8007d3c <xTaskIncrementTick+0x168>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce4:	4914      	ldr	r1, [pc, #80]	@ (8007d38 <xTaskIncrementTick+0x164>)
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d901      	bls.n	8007cfa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cfa:	4b11      	ldr	r3, [pc, #68]	@ (8007d40 <xTaskIncrementTick+0x16c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007d02:	2301      	movs	r3, #1
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e004      	b.n	8007d12 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d08:	4b0e      	ldr	r3, [pc, #56]	@ (8007d44 <xTaskIncrementTick+0x170>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8007d44 <xTaskIncrementTick+0x170>)
 8007d10:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d12:	697b      	ldr	r3, [r7, #20]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200012f0 	.word	0x200012f0
 8007d20:	200012cc 	.word	0x200012cc
 8007d24:	20001280 	.word	0x20001280
 8007d28:	20001284 	.word	0x20001284
 8007d2c:	200012e0 	.word	0x200012e0
 8007d30:	200012e8 	.word	0x200012e8
 8007d34:	200012d0 	.word	0x200012d0
 8007d38:	20000df8 	.word	0x20000df8
 8007d3c:	20000df4 	.word	0x20000df4
 8007d40:	200012dc 	.word	0x200012dc
 8007d44:	200012d8 	.word	0x200012d8

08007d48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8007df8 <vTaskSwitchContext+0xb0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d56:	4b29      	ldr	r3, [pc, #164]	@ (8007dfc <vTaskSwitchContext+0xb4>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d5c:	e047      	b.n	8007dee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007d5e:	4b27      	ldr	r3, [pc, #156]	@ (8007dfc <vTaskSwitchContext+0xb4>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d64:	4b26      	ldr	r3, [pc, #152]	@ (8007e00 <vTaskSwitchContext+0xb8>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e011      	b.n	8007d90 <vTaskSwitchContext+0x48>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10b      	bne.n	8007d8a <vTaskSwitchContext+0x42>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	607b      	str	r3, [r7, #4]
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	e7fd      	b.n	8007d86 <vTaskSwitchContext+0x3e>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	491c      	ldr	r1, [pc, #112]	@ (8007e04 <vTaskSwitchContext+0xbc>)
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4613      	mov	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0e3      	beq.n	8007d6c <vTaskSwitchContext+0x24>
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4613      	mov	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4a15      	ldr	r2, [pc, #84]	@ (8007e04 <vTaskSwitchContext+0xbc>)
 8007db0:	4413      	add	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	605a      	str	r2, [r3, #4]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d104      	bne.n	8007dd4 <vTaskSwitchContext+0x8c>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	605a      	str	r2, [r3, #4]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	4a0b      	ldr	r2, [pc, #44]	@ (8007e08 <vTaskSwitchContext+0xc0>)
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	4a08      	ldr	r2, [pc, #32]	@ (8007e00 <vTaskSwitchContext+0xb8>)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007de4:	4b08      	ldr	r3, [pc, #32]	@ (8007e08 <vTaskSwitchContext+0xc0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3354      	adds	r3, #84	@ 0x54
 8007dea:	4a08      	ldr	r2, [pc, #32]	@ (8007e0c <vTaskSwitchContext+0xc4>)
 8007dec:	6013      	str	r3, [r2, #0]
}
 8007dee:	bf00      	nop
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr
 8007df8:	200012f0 	.word	0x200012f0
 8007dfc:	200012dc 	.word	0x200012dc
 8007e00:	200012d0 	.word	0x200012d0
 8007e04:	20000df8 	.word	0x20000df8
 8007e08:	20000df4 	.word	0x20000df4
 8007e0c:	20000054 	.word	0x20000054

08007e10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	60fb      	str	r3, [r7, #12]
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	e7fd      	b.n	8007e34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e38:	4b07      	ldr	r3, [pc, #28]	@ (8007e58 <vTaskPlaceOnEventList+0x48>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3318      	adds	r3, #24
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fe faf9 	bl	8006438 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e46:	2101      	movs	r1, #1
 8007e48:	6838      	ldr	r0, [r7, #0]
 8007e4a:	f000 fd9d 	bl	8008988 <prvAddCurrentTaskToDelayedList>
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000df4 	.word	0x20000df4

08007e5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10b      	bne.n	8007e86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	617b      	str	r3, [r7, #20]
}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	e7fd      	b.n	8007e82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e86:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3318      	adds	r3, #24
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f7fe faaf 	bl	80063f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	68b8      	ldr	r0, [r7, #8]
 8007ea4:	f000 fd70 	bl	8008988 <prvAddCurrentTaskToDelayedList>
	}
 8007ea8:	bf00      	nop
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20000df4 	.word	0x20000df4

08007eb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	60fb      	str	r3, [r7, #12]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	3318      	adds	r3, #24
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe fade 	bl	80064a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eec:	4b1d      	ldr	r3, [pc, #116]	@ (8007f64 <xTaskRemoveFromEventList+0xb0>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11d      	bne.n	8007f30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fad5 	bl	80064a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f02:	4b19      	ldr	r3, [pc, #100]	@ (8007f68 <xTaskRemoveFromEventList+0xb4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d903      	bls.n	8007f12 <xTaskRemoveFromEventList+0x5e>
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0e:	4a16      	ldr	r2, [pc, #88]	@ (8007f68 <xTaskRemoveFromEventList+0xb4>)
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4a13      	ldr	r2, [pc, #76]	@ (8007f6c <xTaskRemoveFromEventList+0xb8>)
 8007f20:	441a      	add	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7fe fa62 	bl	80063f2 <vListInsertEnd>
 8007f2e:	e005      	b.n	8007f3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	3318      	adds	r3, #24
 8007f34:	4619      	mov	r1, r3
 8007f36:	480e      	ldr	r0, [pc, #56]	@ (8007f70 <xTaskRemoveFromEventList+0xbc>)
 8007f38:	f7fe fa5b 	bl	80063f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f40:	4b0c      	ldr	r3, [pc, #48]	@ (8007f74 <xTaskRemoveFromEventList+0xc0>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d905      	bls.n	8007f56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f78 <xTaskRemoveFromEventList+0xc4>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	e001      	b.n	8007f5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f5a:	697b      	ldr	r3, [r7, #20]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	200012f0 	.word	0x200012f0
 8007f68:	200012d0 	.word	0x200012d0
 8007f6c:	20000df8 	.word	0x20000df8
 8007f70:	20001288 	.word	0x20001288
 8007f74:	20000df4 	.word	0x20000df4
 8007f78:	200012dc 	.word	0x200012dc

08007f7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f84:	4b06      	ldr	r3, [pc, #24]	@ (8007fa0 <vTaskInternalSetTimeOutState+0x24>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f8c:	4b05      	ldr	r3, [pc, #20]	@ (8007fa4 <vTaskInternalSetTimeOutState+0x28>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	605a      	str	r2, [r3, #4]
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	200012e0 	.word	0x200012e0
 8007fa4:	200012cc 	.word	0x200012cc

08007fa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10b      	bne.n	8007fd0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	613b      	str	r3, [r7, #16]
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	e7fd      	b.n	8007fcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10b      	bne.n	8007fee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	60fb      	str	r3, [r7, #12]
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	e7fd      	b.n	8007fea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007fee:	f001 fa25 	bl	800943c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8008068 <xTaskCheckForTimeOut+0xc0>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d102      	bne.n	8008012 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800800c:	2300      	movs	r3, #0
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	e023      	b.n	800805a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <xTaskCheckForTimeOut+0xc4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d007      	beq.n	800802e <xTaskCheckForTimeOut+0x86>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	429a      	cmp	r2, r3
 8008026:	d302      	bcc.n	800802e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008028:	2301      	movs	r3, #1
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	e015      	b.n	800805a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	429a      	cmp	r2, r3
 8008036:	d20b      	bcs.n	8008050 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff ff99 	bl	8007f7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	e004      	b.n	800805a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008056:	2301      	movs	r3, #1
 8008058:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800805a:	f001 fa1f 	bl	800949c <vPortExitCritical>

	return xReturn;
 800805e:	69fb      	ldr	r3, [r7, #28]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	200012cc 	.word	0x200012cc
 800806c:	200012e0 	.word	0x200012e0

08008070 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008070:	b480      	push	{r7}
 8008072:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008074:	4b03      	ldr	r3, [pc, #12]	@ (8008084 <vTaskMissedYield+0x14>)
 8008076:	2201      	movs	r2, #1
 8008078:	601a      	str	r2, [r3, #0]
}
 800807a:	bf00      	nop
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	200012dc 	.word	0x200012dc

08008088 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008090:	f000 f852 	bl	8008138 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008094:	4b06      	ldr	r3, [pc, #24]	@ (80080b0 <prvIdleTask+0x28>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d9f9      	bls.n	8008090 <prvIdleTask+0x8>
			{
				taskYIELD();
 800809c:	4b05      	ldr	r3, [pc, #20]	@ (80080b4 <prvIdleTask+0x2c>)
 800809e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080ac:	e7f0      	b.n	8008090 <prvIdleTask+0x8>
 80080ae:	bf00      	nop
 80080b0:	20000df8 	.word	0x20000df8
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	e00c      	b.n	80080de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4a12      	ldr	r2, [pc, #72]	@ (8008118 <prvInitialiseTaskLists+0x60>)
 80080d0:	4413      	add	r3, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe f962 	bl	800639c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3301      	adds	r3, #1
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b37      	cmp	r3, #55	@ 0x37
 80080e2:	d9ef      	bls.n	80080c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080e4:	480d      	ldr	r0, [pc, #52]	@ (800811c <prvInitialiseTaskLists+0x64>)
 80080e6:	f7fe f959 	bl	800639c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080ea:	480d      	ldr	r0, [pc, #52]	@ (8008120 <prvInitialiseTaskLists+0x68>)
 80080ec:	f7fe f956 	bl	800639c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080f0:	480c      	ldr	r0, [pc, #48]	@ (8008124 <prvInitialiseTaskLists+0x6c>)
 80080f2:	f7fe f953 	bl	800639c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080f6:	480c      	ldr	r0, [pc, #48]	@ (8008128 <prvInitialiseTaskLists+0x70>)
 80080f8:	f7fe f950 	bl	800639c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080fc:	480b      	ldr	r0, [pc, #44]	@ (800812c <prvInitialiseTaskLists+0x74>)
 80080fe:	f7fe f94d 	bl	800639c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008102:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <prvInitialiseTaskLists+0x78>)
 8008104:	4a05      	ldr	r2, [pc, #20]	@ (800811c <prvInitialiseTaskLists+0x64>)
 8008106:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008108:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <prvInitialiseTaskLists+0x7c>)
 800810a:	4a05      	ldr	r2, [pc, #20]	@ (8008120 <prvInitialiseTaskLists+0x68>)
 800810c:	601a      	str	r2, [r3, #0]
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000df8 	.word	0x20000df8
 800811c:	20001258 	.word	0x20001258
 8008120:	2000126c 	.word	0x2000126c
 8008124:	20001288 	.word	0x20001288
 8008128:	2000129c 	.word	0x2000129c
 800812c:	200012b4 	.word	0x200012b4
 8008130:	20001280 	.word	0x20001280
 8008134:	20001284 	.word	0x20001284

08008138 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800813e:	e019      	b.n	8008174 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008140:	f001 f97c 	bl	800943c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008144:	4b10      	ldr	r3, [pc, #64]	@ (8008188 <prvCheckTasksWaitingTermination+0x50>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe f9a9 	bl	80064a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008156:	4b0d      	ldr	r3, [pc, #52]	@ (800818c <prvCheckTasksWaitingTermination+0x54>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3b01      	subs	r3, #1
 800815c:	4a0b      	ldr	r2, [pc, #44]	@ (800818c <prvCheckTasksWaitingTermination+0x54>)
 800815e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008160:	4b0b      	ldr	r3, [pc, #44]	@ (8008190 <prvCheckTasksWaitingTermination+0x58>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3b01      	subs	r3, #1
 8008166:	4a0a      	ldr	r2, [pc, #40]	@ (8008190 <prvCheckTasksWaitingTermination+0x58>)
 8008168:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800816a:	f001 f997 	bl	800949c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f810 	bl	8008194 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008174:	4b06      	ldr	r3, [pc, #24]	@ (8008190 <prvCheckTasksWaitingTermination+0x58>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e1      	bne.n	8008140 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	2000129c 	.word	0x2000129c
 800818c:	200012c8 	.word	0x200012c8
 8008190:	200012b0 	.word	0x200012b0

08008194 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3354      	adds	r3, #84	@ 0x54
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 fb07 	bl	800a7b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d108      	bne.n	80081c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 fb11 	bl	80097dc <vPortFree>
				vPortFree( pxTCB );
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f001 fb0e 	bl	80097dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081c0:	e019      	b.n	80081f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d103      	bne.n	80081d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fb05 	bl	80097dc <vPortFree>
	}
 80081d2:	e010      	b.n	80081f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d00b      	beq.n	80081f6 <prvDeleteTCB+0x62>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	60fb      	str	r3, [r7, #12]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <prvDeleteTCB+0x5e>
	}
 80081f6:	bf00      	nop
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008206:	4b0c      	ldr	r3, [pc, #48]	@ (8008238 <prvResetNextTaskUnblockTime+0x38>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008210:	4b0a      	ldr	r3, [pc, #40]	@ (800823c <prvResetNextTaskUnblockTime+0x3c>)
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008218:	e008      	b.n	800822c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800821a:	4b07      	ldr	r3, [pc, #28]	@ (8008238 <prvResetNextTaskUnblockTime+0x38>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4a04      	ldr	r2, [pc, #16]	@ (800823c <prvResetNextTaskUnblockTime+0x3c>)
 800822a:	6013      	str	r3, [r2, #0]
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20001280 	.word	0x20001280
 800823c:	200012e8 	.word	0x200012e8

08008240 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008246:	4b04      	ldr	r3, [pc, #16]	@ (8008258 <xTaskGetCurrentTaskHandle+0x18>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800824c:	687b      	ldr	r3, [r7, #4]
	}
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr
 8008258:	20000df4 	.word	0x20000df4

0800825c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008262:	4b0b      	ldr	r3, [pc, #44]	@ (8008290 <xTaskGetSchedulerState+0x34>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d102      	bne.n	8008270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800826a:	2301      	movs	r3, #1
 800826c:	607b      	str	r3, [r7, #4]
 800826e:	e008      	b.n	8008282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008270:	4b08      	ldr	r3, [pc, #32]	@ (8008294 <xTaskGetSchedulerState+0x38>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008278:	2302      	movs	r3, #2
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e001      	b.n	8008282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800827e:	2300      	movs	r3, #0
 8008280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008282:	687b      	ldr	r3, [r7, #4]
	}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	200012d4 	.word	0x200012d4
 8008294:	200012f0 	.word	0x200012f0

08008298 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d051      	beq.n	8008352 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082b2:	4b2a      	ldr	r3, [pc, #168]	@ (800835c <xTaskPriorityInherit+0xc4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d241      	bcs.n	8008340 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	db06      	blt.n	80082d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c4:	4b25      	ldr	r3, [pc, #148]	@ (800835c <xTaskPriorityInherit+0xc4>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6959      	ldr	r1, [r3, #20]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008360 <xTaskPriorityInherit+0xc8>)
 80082e4:	4413      	add	r3, r2
 80082e6:	4299      	cmp	r1, r3
 80082e8:	d122      	bne.n	8008330 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe f8da 	bl	80064a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082f4:	4b19      	ldr	r3, [pc, #100]	@ (800835c <xTaskPriorityInherit+0xc4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008302:	4b18      	ldr	r3, [pc, #96]	@ (8008364 <xTaskPriorityInherit+0xcc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d903      	bls.n	8008312 <xTaskPriorityInherit+0x7a>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830e:	4a15      	ldr	r2, [pc, #84]	@ (8008364 <xTaskPriorityInherit+0xcc>)
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4a10      	ldr	r2, [pc, #64]	@ (8008360 <xTaskPriorityInherit+0xc8>)
 8008320:	441a      	add	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe f862 	bl	80063f2 <vListInsertEnd>
 800832e:	e004      	b.n	800833a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008330:	4b0a      	ldr	r3, [pc, #40]	@ (800835c <xTaskPriorityInherit+0xc4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800833a:	2301      	movs	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	e008      	b.n	8008352 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008344:	4b05      	ldr	r3, [pc, #20]	@ (800835c <xTaskPriorityInherit+0xc4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	429a      	cmp	r2, r3
 800834c:	d201      	bcs.n	8008352 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800834e:	2301      	movs	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008352:	68fb      	ldr	r3, [r7, #12]
	}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	20000df4 	.word	0x20000df4
 8008360:	20000df8 	.word	0x20000df8
 8008364:	200012d0 	.word	0x200012d0

08008368 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d058      	beq.n	8008430 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800837e:	4b2f      	ldr	r3, [pc, #188]	@ (800843c <xTaskPriorityDisinherit+0xd4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d00b      	beq.n	80083a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	60fb      	str	r3, [r7, #12]
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10b      	bne.n	80083c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	60bb      	str	r3, [r7, #8]
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	e7fd      	b.n	80083bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c4:	1e5a      	subs	r2, r3, #1
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d02c      	beq.n	8008430 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d128      	bne.n	8008430 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	3304      	adds	r3, #4
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe f860 	bl	80064a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008400:	4b0f      	ldr	r3, [pc, #60]	@ (8008440 <xTaskPriorityDisinherit+0xd8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	429a      	cmp	r2, r3
 8008406:	d903      	bls.n	8008410 <xTaskPriorityDisinherit+0xa8>
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	4a0c      	ldr	r2, [pc, #48]	@ (8008440 <xTaskPriorityDisinherit+0xd8>)
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4a09      	ldr	r2, [pc, #36]	@ (8008444 <xTaskPriorityDisinherit+0xdc>)
 800841e:	441a      	add	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	3304      	adds	r3, #4
 8008424:	4619      	mov	r1, r3
 8008426:	4610      	mov	r0, r2
 8008428:	f7fd ffe3 	bl	80063f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800842c:	2301      	movs	r3, #1
 800842e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008430:	697b      	ldr	r3, [r7, #20]
	}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000df4 	.word	0x20000df4
 8008440:	200012d0 	.word	0x200012d0
 8008444:	20000df8 	.word	0x20000df8

08008448 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008456:	2301      	movs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d06c      	beq.n	800853a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10b      	bne.n	8008480 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	60fb      	str	r3, [r7, #12]
}
 800847a:	bf00      	nop
 800847c:	bf00      	nop
 800847e:	e7fd      	b.n	800847c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d902      	bls.n	8008490 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	e002      	b.n	8008496 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008494:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	429a      	cmp	r2, r3
 800849e:	d04c      	beq.n	800853a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d147      	bne.n	800853a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80084aa:	4b26      	ldr	r3, [pc, #152]	@ (8008544 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69ba      	ldr	r2, [r7, #24]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d10b      	bne.n	80084cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60bb      	str	r3, [r7, #8]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	69fa      	ldr	r2, [r7, #28]
 80084d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	db04      	blt.n	80084ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	6959      	ldr	r1, [r3, #20]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4a13      	ldr	r2, [pc, #76]	@ (8008548 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80084fa:	4413      	add	r3, r2
 80084fc:	4299      	cmp	r1, r3
 80084fe:	d11c      	bne.n	800853a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	3304      	adds	r3, #4
 8008504:	4618      	mov	r0, r3
 8008506:	f7fd ffcf 	bl	80064a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800850e:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	429a      	cmp	r2, r3
 8008514:	d903      	bls.n	800851e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800851a:	4a0c      	ldr	r2, [pc, #48]	@ (800854c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4a07      	ldr	r2, [pc, #28]	@ (8008548 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800852c:	441a      	add	r2, r3
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	3304      	adds	r3, #4
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f7fd ff5c 	bl	80063f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800853a:	bf00      	nop
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000df4 	.word	0x20000df4
 8008548:	20000df8 	.word	0x20000df8
 800854c:	200012d0 	.word	0x200012d0

08008550 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008554:	4b07      	ldr	r3, [pc, #28]	@ (8008574 <pvTaskIncrementMutexHeldCount+0x24>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800855c:	4b05      	ldr	r3, [pc, #20]	@ (8008574 <pvTaskIncrementMutexHeldCount+0x24>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008562:	3201      	adds	r2, #1
 8008564:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008566:	4b03      	ldr	r3, [pc, #12]	@ (8008574 <pvTaskIncrementMutexHeldCount+0x24>)
 8008568:	681b      	ldr	r3, [r3, #0]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20000df4 	.word	0x20000df4

08008578 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008586:	f000 ff59 	bl	800943c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800858a:	4b29      	ldr	r3, [pc, #164]	@ (8008630 <xTaskNotifyWait+0xb8>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b02      	cmp	r3, #2
 8008596:	d01c      	beq.n	80085d2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008598:	4b25      	ldr	r3, [pc, #148]	@ (8008630 <xTaskNotifyWait+0xb8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	43d2      	mvns	r2, r2
 80085a4:	400a      	ands	r2, r1
 80085a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80085aa:	4b21      	ldr	r3, [pc, #132]	@ (8008630 <xTaskNotifyWait+0xb8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80085ba:	2101      	movs	r1, #1
 80085bc:	6838      	ldr	r0, [r7, #0]
 80085be:	f000 f9e3 	bl	8008988 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80085c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008634 <xTaskNotifyWait+0xbc>)
 80085c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80085d2:	f000 ff63 	bl	800949c <vPortExitCritical>

		taskENTER_CRITICAL();
 80085d6:	f000 ff31 	bl	800943c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80085e0:	4b13      	ldr	r3, [pc, #76]	@ (8008630 <xTaskNotifyWait+0xb8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80085ec:	4b10      	ldr	r3, [pc, #64]	@ (8008630 <xTaskNotifyWait+0xb8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d002      	beq.n	8008600 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e00a      	b.n	8008616 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008600:	4b0b      	ldr	r3, [pc, #44]	@ (8008630 <xTaskNotifyWait+0xb8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	43d2      	mvns	r2, r2
 800860c:	400a      	ands	r2, r1
 800860e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8008612:	2301      	movs	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008616:	4b06      	ldr	r3, [pc, #24]	@ (8008630 <xTaskNotifyWait+0xb8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8008620:	f000 ff3c 	bl	800949c <vPortExitCritical>

		return xReturn;
 8008624:	697b      	ldr	r3, [r7, #20]
	}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000df4 	.word	0x20000df4
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	@ 0x28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	4613      	mov	r3, r2
 8008646:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008648:	2301      	movs	r3, #1
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <xTaskGenericNotify+0x32>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	61bb      	str	r3, [r7, #24]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800866e:	f000 fee5 	bl	800943c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d004      	beq.n	8008682 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008688:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	2202      	movs	r2, #2
 800868e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	2b04      	cmp	r3, #4
 8008696:	d82e      	bhi.n	80086f6 <xTaskGenericNotify+0xbe>
 8008698:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <xTaskGenericNotify+0x68>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	0800871b 	.word	0x0800871b
 80086a4:	080086b5 	.word	0x080086b5
 80086a8:	080086c7 	.word	0x080086c7
 80086ac:	080086d7 	.word	0x080086d7
 80086b0:	080086e1 	.word	0x080086e1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	431a      	orrs	r2, r3
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80086c4:	e02c      	b.n	8008720 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80086d4:	e024      	b.n	8008720 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80086de:	e01f      	b.n	8008720 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80086e0:	7ffb      	ldrb	r3, [r7, #31]
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d004      	beq.n	80086f0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80086ee:	e017      	b.n	8008720 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80086f0:	2300      	movs	r3, #0
 80086f2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80086f4:	e014      	b.n	8008720 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d00d      	beq.n	800871e <xTaskGenericNotify+0xe6>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	617b      	str	r3, [r7, #20]
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	e7fd      	b.n	8008716 <xTaskGenericNotify+0xde>
					break;
 800871a:	bf00      	nop
 800871c:	e000      	b.n	8008720 <xTaskGenericNotify+0xe8>

					break;
 800871e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008720:	7ffb      	ldrb	r3, [r7, #31]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d13b      	bne.n	800879e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008726:	6a3b      	ldr	r3, [r7, #32]
 8008728:	3304      	adds	r3, #4
 800872a:	4618      	mov	r0, r3
 800872c:	f7fd febc 	bl	80064a8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008734:	4b1d      	ldr	r3, [pc, #116]	@ (80087ac <xTaskGenericNotify+0x174>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d903      	bls.n	8008744 <xTaskGenericNotify+0x10c>
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008740:	4a1a      	ldr	r2, [pc, #104]	@ (80087ac <xTaskGenericNotify+0x174>)
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4a17      	ldr	r2, [pc, #92]	@ (80087b0 <xTaskGenericNotify+0x178>)
 8008752:	441a      	add	r2, r3
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	3304      	adds	r3, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7fd fe49 	bl	80063f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <xTaskGenericNotify+0x148>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	613b      	str	r3, [r7, #16]
}
 800877a:	bf00      	nop
 800877c:	bf00      	nop
 800877e:	e7fd      	b.n	800877c <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008784:	4b0b      	ldr	r3, [pc, #44]	@ (80087b4 <xTaskGenericNotify+0x17c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	429a      	cmp	r2, r3
 800878c:	d907      	bls.n	800879e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800878e:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <xTaskGenericNotify+0x180>)
 8008790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800879e:	f000 fe7d 	bl	800949c <vPortExitCritical>

		return xReturn;
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3728      	adds	r7, #40	@ 0x28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200012d0 	.word	0x200012d0
 80087b0:	20000df8 	.word	0x20000df8
 80087b4:	20000df4 	.word	0x20000df4
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08e      	sub	sp, #56	@ 0x38
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	4613      	mov	r3, r2
 80087ca:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80087cc:	2301      	movs	r3, #1
 80087ce:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ee:	f000 fee7 	bl	80095c0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80087f6:	f3ef 8211 	mrs	r2, BASEPRI
 80087fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	623a      	str	r2, [r7, #32]
 800880c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800880e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008810:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d004      	beq.n	8008822 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8008828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	2202      	movs	r2, #2
 8008830:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b04      	cmp	r3, #4
 8008838:	d82e      	bhi.n	8008898 <xTaskGenericNotifyFromISR+0xdc>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <xTaskGenericNotifyFromISR+0x84>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	080088bd 	.word	0x080088bd
 8008844:	08008855 	.word	0x08008855
 8008848:	08008867 	.word	0x08008867
 800884c:	08008877 	.word	0x08008877
 8008850:	08008881 	.word	0x08008881
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	431a      	orrs	r2, r3
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008864:	e02d      	b.n	80088c2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8008874:	e025      	b.n	80088c2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800887e:	e020      	b.n	80088c2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008880:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008884:	2b02      	cmp	r3, #2
 8008886:	d004      	beq.n	8008892 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008890:	e017      	b.n	80088c2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8008892:	2300      	movs	r3, #0
 8008894:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8008896:	e014      	b.n	80088c2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d00d      	beq.n	80088c0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	61bb      	str	r3, [r7, #24]
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80088bc:	bf00      	nop
 80088be:	e000      	b.n	80088c2 <xTaskGenericNotifyFromISR+0x106>
					break;
 80088c0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80088c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d147      	bne.n	800895a <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	617b      	str	r3, [r7, #20]
}
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
 80088e8:	e7fd      	b.n	80088e6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ea:	4b21      	ldr	r3, [pc, #132]	@ (8008970 <xTaskGenericNotifyFromISR+0x1b4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d11d      	bne.n	800892e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fd fdd6 	bl	80064a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008900:	4b1c      	ldr	r3, [pc, #112]	@ (8008974 <xTaskGenericNotifyFromISR+0x1b8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d903      	bls.n	8008910 <xTaskGenericNotifyFromISR+0x154>
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890c:	4a19      	ldr	r2, [pc, #100]	@ (8008974 <xTaskGenericNotifyFromISR+0x1b8>)
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4a16      	ldr	r2, [pc, #88]	@ (8008978 <xTaskGenericNotifyFromISR+0x1bc>)
 800891e:	441a      	add	r2, r3
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	3304      	adds	r3, #4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7fd fd63 	bl	80063f2 <vListInsertEnd>
 800892c:	e005      	b.n	800893a <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	3318      	adds	r3, #24
 8008932:	4619      	mov	r1, r3
 8008934:	4811      	ldr	r0, [pc, #68]	@ (800897c <xTaskGenericNotifyFromISR+0x1c0>)
 8008936:	f7fd fd5c 	bl	80063f2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893e:	4b10      	ldr	r3, [pc, #64]	@ (8008980 <xTaskGenericNotifyFromISR+0x1c4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008944:	429a      	cmp	r2, r3
 8008946:	d908      	bls.n	800895a <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800894e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008950:	2201      	movs	r2, #1
 8008952:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008954:	4b0b      	ldr	r3, [pc, #44]	@ (8008984 <xTaskGenericNotifyFromISR+0x1c8>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f383 8811 	msr	BASEPRI, r3
}
 8008964:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8008968:	4618      	mov	r0, r3
 800896a:	3738      	adds	r7, #56	@ 0x38
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	200012f0 	.word	0x200012f0
 8008974:	200012d0 	.word	0x200012d0
 8008978:	20000df8 	.word	0x20000df8
 800897c:	20001288 	.word	0x20001288
 8008980:	20000df4 	.word	0x20000df4
 8008984:	200012dc 	.word	0x200012dc

08008988 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008992:	4b21      	ldr	r3, [pc, #132]	@ (8008a18 <prvAddCurrentTaskToDelayedList+0x90>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008998:	4b20      	ldr	r3, [pc, #128]	@ (8008a1c <prvAddCurrentTaskToDelayedList+0x94>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3304      	adds	r3, #4
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd fd82 	bl	80064a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d10a      	bne.n	80089c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d007      	beq.n	80089c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089b2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3304      	adds	r3, #4
 80089b8:	4619      	mov	r1, r3
 80089ba:	4819      	ldr	r0, [pc, #100]	@ (8008a20 <prvAddCurrentTaskToDelayedList+0x98>)
 80089bc:	f7fd fd19 	bl	80063f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089c0:	e026      	b.n	8008a10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4413      	add	r3, r2
 80089c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089ca:	4b14      	ldr	r3, [pc, #80]	@ (8008a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d209      	bcs.n	80089ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089da:	4b12      	ldr	r3, [pc, #72]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0x9c>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	4b0f      	ldr	r3, [pc, #60]	@ (8008a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7fd fd26 	bl	8006438 <vListInsert>
}
 80089ec:	e010      	b.n	8008a10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008a28 <prvAddCurrentTaskToDelayedList+0xa0>)
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3304      	adds	r3, #4
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7fd fd1c 	bl	8006438 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a00:	4b0a      	ldr	r3, [pc, #40]	@ (8008a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d202      	bcs.n	8008a10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a0a:	4a08      	ldr	r2, [pc, #32]	@ (8008a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6013      	str	r3, [r2, #0]
}
 8008a10:	bf00      	nop
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	200012cc 	.word	0x200012cc
 8008a1c:	20000df4 	.word	0x20000df4
 8008a20:	200012b4 	.word	0x200012b4
 8008a24:	20001284 	.word	0x20001284
 8008a28:	20001280 	.word	0x20001280
 8008a2c:	200012e8 	.word	0x200012e8

08008a30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b08a      	sub	sp, #40	@ 0x28
 8008a34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008a3a:	f000 fbaf 	bl	800919c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab4 <xTimerCreateTimerTask+0x84>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d021      	beq.n	8008a8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008a4e:	1d3a      	adds	r2, r7, #4
 8008a50:	f107 0108 	add.w	r1, r7, #8
 8008a54:	f107 030c 	add.w	r3, r7, #12
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd fc85 	bl	8006368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	9202      	str	r2, [sp, #8]
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	2302      	movs	r3, #2
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	460a      	mov	r2, r1
 8008a70:	4911      	ldr	r1, [pc, #68]	@ (8008ab8 <xTimerCreateTimerTask+0x88>)
 8008a72:	4812      	ldr	r0, [pc, #72]	@ (8008abc <xTimerCreateTimerTask+0x8c>)
 8008a74:	f7fe fcd8 	bl	8007428 <xTaskCreateStatic>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	4a11      	ldr	r2, [pc, #68]	@ (8008ac0 <xTimerCreateTimerTask+0x90>)
 8008a7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008a7e:	4b10      	ldr	r3, [pc, #64]	@ (8008ac0 <xTimerCreateTimerTask+0x90>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008a86:	2301      	movs	r3, #1
 8008a88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10b      	bne.n	8008aa8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008aa8:	697b      	ldr	r3, [r7, #20]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20001324 	.word	0x20001324
 8008ab8:	0800d314 	.word	0x0800d314
 8008abc:	08008d39 	.word	0x08008d39
 8008ac0:	20001328 	.word	0x20001328

08008ac4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008ad2:	202c      	movs	r0, #44	@ 0x2c
 8008ad4:	f000 fdb4 	bl	8009640 <pvPortMalloc>
 8008ad8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00d      	beq.n	8008afc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f845 	bl	8008b86 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008afc:	697b      	ldr	r3, [r7, #20]
	}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b08a      	sub	sp, #40	@ 0x28
 8008b0a:	af02      	add	r7, sp, #8
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008b14:	232c      	movs	r3, #44	@ 0x2c
 8008b16:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b2c      	cmp	r3, #44	@ 0x2c
 8008b1c:	d00b      	beq.n	8008b36 <xTimerCreateStatic+0x30>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	61bb      	str	r3, [r7, #24]
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	e7fd      	b.n	8008b32 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10b      	bne.n	8008b56 <xTimerCreateStatic+0x50>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	617b      	str	r3, [r7, #20]
}
 8008b50:	bf00      	nop
 8008b52:	bf00      	nop
 8008b54:	e7fd      	b.n	8008b52 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b58:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00d      	beq.n	8008b7c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f805 	bl	8008b86 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
	}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	60f8      	str	r0, [r7, #12]
 8008b8e:	60b9      	str	r1, [r7, #8]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10b      	bne.n	8008bb2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	617b      	str	r3, [r7, #20]
}
 8008bac:	bf00      	nop
 8008bae:	bf00      	nop
 8008bb0:	e7fd      	b.n	8008bae <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d01e      	beq.n	8008bf6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008bb8:	f000 faf0 	bl	800919c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	6a3a      	ldr	r2, [r7, #32]
 8008bd2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fd fbfe 	bl	80063da <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d008      	beq.n	8008bf6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bea:	f043 0304 	orr.w	r3, r3, #4
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08a      	sub	sp, #40	@ 0x28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xTimerGenericCommand+0x30>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	623b      	str	r3, [r7, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c30:	4b19      	ldr	r3, [pc, #100]	@ (8008c98 <xTimerGenericCommand+0x98>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d02a      	beq.n	8008c8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	dc18      	bgt.n	8008c7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c4a:	f7ff fb07 	bl	800825c <xTaskGetSchedulerState>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d109      	bne.n	8008c68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c54:	4b10      	ldr	r3, [pc, #64]	@ (8008c98 <xTimerGenericCommand+0x98>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	f107 0110 	add.w	r1, r7, #16
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c60:	f7fd fe4a 	bl	80068f8 <xQueueGenericSend>
 8008c64:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c66:	e012      	b.n	8008c8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c68:	4b0b      	ldr	r3, [pc, #44]	@ (8008c98 <xTimerGenericCommand+0x98>)
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	f107 0110 	add.w	r1, r7, #16
 8008c70:	2300      	movs	r3, #0
 8008c72:	2200      	movs	r2, #0
 8008c74:	f7fd fe40 	bl	80068f8 <xQueueGenericSend>
 8008c78:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c7a:	e008      	b.n	8008c8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c7c:	4b06      	ldr	r3, [pc, #24]	@ (8008c98 <xTimerGenericCommand+0x98>)
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	f107 0110 	add.w	r1, r7, #16
 8008c84:	2300      	movs	r3, #0
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	f7fd ff38 	bl	8006afc <xQueueGenericSendFromISR>
 8008c8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3728      	adds	r7, #40	@ 0x28
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	20001324 	.word	0x20001324

08008c9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca6:	4b23      	ldr	r3, [pc, #140]	@ (8008d34 <prvProcessExpiredTimer+0x98>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fd fbf7 	bl	80064a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d023      	beq.n	8008d10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	699a      	ldr	r2, [r3, #24]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	18d1      	adds	r1, r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	6978      	ldr	r0, [r7, #20]
 8008cd6:	f000 f8d3 	bl	8008e80 <prvInsertTimerInActiveList>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d020      	beq.n	8008d22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	6978      	ldr	r0, [r7, #20]
 8008cec:	f7ff ff88 	bl	8008c00 <xTimerGenericCommand>
 8008cf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d114      	bne.n	8008d22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	60fb      	str	r3, [r7, #12]
}
 8008d0a:	bf00      	nop
 8008d0c:	bf00      	nop
 8008d0e:	e7fd      	b.n	8008d0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d16:	f023 0301 	bic.w	r3, r3, #1
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	6978      	ldr	r0, [r7, #20]
 8008d28:	4798      	blx	r3
}
 8008d2a:	bf00      	nop
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	2000131c 	.word	0x2000131c

08008d38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d40:	f107 0308 	add.w	r3, r7, #8
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f859 	bl	8008dfc <prvGetNextExpireTime>
 8008d4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f805 	bl	8008d60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d56:	f000 f8d5 	bl	8008f04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d5a:	bf00      	nop
 8008d5c:	e7f0      	b.n	8008d40 <prvTimerTask+0x8>
	...

08008d60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d6a:	f7fe fe67 	bl	8007a3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d6e:	f107 0308 	add.w	r3, r7, #8
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f864 	bl	8008e40 <prvSampleTimeNow>
 8008d78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d130      	bne.n	8008de2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <prvProcessTimerOrBlockTask+0x3c>
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d806      	bhi.n	8008d9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d8e:	f7fe fe63 	bl	8007a58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff ff81 	bl	8008c9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d9a:	e024      	b.n	8008de6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d008      	beq.n	8008db4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008da2:	4b13      	ldr	r3, [pc, #76]	@ (8008df0 <prvProcessTimerOrBlockTask+0x90>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <prvProcessTimerOrBlockTask+0x50>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <prvProcessTimerOrBlockTask+0x52>
 8008db0:	2300      	movs	r3, #0
 8008db2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008db4:	4b0f      	ldr	r3, [pc, #60]	@ (8008df4 <prvProcessTimerOrBlockTask+0x94>)
 8008db6:	6818      	ldr	r0, [r3, #0]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7fe fafd 	bl	80073c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008dc6:	f7fe fe47 	bl	8007a58 <xTaskResumeAll>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008dd0:	4b09      	ldr	r3, [pc, #36]	@ (8008df8 <prvProcessTimerOrBlockTask+0x98>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
}
 8008de0:	e001      	b.n	8008de6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008de2:	f7fe fe39 	bl	8007a58 <xTaskResumeAll>
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	20001320 	.word	0x20001320
 8008df4:	20001324 	.word	0x20001324
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e04:	4b0d      	ldr	r3, [pc, #52]	@ (8008e3c <prvGetNextExpireTime+0x40>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <prvGetNextExpireTime+0x16>
 8008e0e:	2201      	movs	r2, #1
 8008e10:	e000      	b.n	8008e14 <prvGetNextExpireTime+0x18>
 8008e12:	2200      	movs	r2, #0
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e20:	4b06      	ldr	r3, [pc, #24]	@ (8008e3c <prvGetNextExpireTime+0x40>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	e001      	b.n	8008e30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e30:	68fb      	ldr	r3, [r7, #12]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr
 8008e3c:	2000131c 	.word	0x2000131c

08008e40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e48:	f7fe fea4 	bl	8007b94 <xTaskGetTickCount>
 8008e4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e7c <prvSampleTimeNow+0x3c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d205      	bcs.n	8008e64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e58:	f000 f93a 	bl	80090d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	e002      	b.n	8008e6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e6a:	4a04      	ldr	r2, [pc, #16]	@ (8008e7c <prvSampleTimeNow+0x3c>)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e70:	68fb      	ldr	r3, [r7, #12]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	2000132c 	.word	0x2000132c

08008e80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e9e:	68ba      	ldr	r2, [r7, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d812      	bhi.n	8008ecc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d302      	bcc.n	8008eba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e01b      	b.n	8008ef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008eba:	4b10      	ldr	r3, [pc, #64]	@ (8008efc <prvInsertTimerInActiveList+0x7c>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	f7fd fab7 	bl	8006438 <vListInsert>
 8008eca:	e012      	b.n	8008ef2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d206      	bcs.n	8008ee2 <prvInsertTimerInActiveList+0x62>
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d302      	bcc.n	8008ee2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008edc:	2301      	movs	r3, #1
 8008ede:	617b      	str	r3, [r7, #20]
 8008ee0:	e007      	b.n	8008ef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ee2:	4b07      	ldr	r3, [pc, #28]	@ (8008f00 <prvInsertTimerInActiveList+0x80>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f7fd faa3 	bl	8006438 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ef2:	697b      	ldr	r3, [r7, #20]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20001320 	.word	0x20001320
 8008f00:	2000131c 	.word	0x2000131c

08008f04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08e      	sub	sp, #56	@ 0x38
 8008f08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f0a:	e0ce      	b.n	80090aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da19      	bge.n	8008f46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	3304      	adds	r3, #4
 8008f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10b      	bne.n	8008f36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	61fb      	str	r3, [r7, #28]
}
 8008f30:	bf00      	nop
 8008f32:	bf00      	nop
 8008f34:	e7fd      	b.n	8008f32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f3c:	6850      	ldr	r0, [r2, #4]
 8008f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f40:	6892      	ldr	r2, [r2, #8]
 8008f42:	4611      	mov	r1, r2
 8008f44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f2c0 80ae 	blt.w	80090aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d004      	beq.n	8008f64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fd faa2 	bl	80064a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f64:	463b      	mov	r3, r7
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff ff6a 	bl	8008e40 <prvSampleTimeNow>
 8008f6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b09      	cmp	r3, #9
 8008f72:	f200 8097 	bhi.w	80090a4 <prvProcessReceivedCommands+0x1a0>
 8008f76:	a201      	add	r2, pc, #4	@ (adr r2, 8008f7c <prvProcessReceivedCommands+0x78>)
 8008f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7c:	08008fa5 	.word	0x08008fa5
 8008f80:	08008fa5 	.word	0x08008fa5
 8008f84:	08008fa5 	.word	0x08008fa5
 8008f88:	0800901b 	.word	0x0800901b
 8008f8c:	0800902f 	.word	0x0800902f
 8008f90:	0800907b 	.word	0x0800907b
 8008f94:	08008fa5 	.word	0x08008fa5
 8008f98:	08008fa5 	.word	0x08008fa5
 8008f9c:	0800901b 	.word	0x0800901b
 8008fa0:	0800902f 	.word	0x0800902f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008faa:	f043 0301 	orr.w	r3, r3, #1
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	18d1      	adds	r1, r2, r3
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fc4:	f7ff ff5c 	bl	8008e80 <prvInsertTimerInActiveList>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d06c      	beq.n	80090a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d061      	beq.n	80090a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	441a      	add	r2, r3
 8008fec:	2300      	movs	r3, #0
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ff6:	f7ff fe03 	bl	8008c00 <xTimerGenericCommand>
 8008ffa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d152      	bne.n	80090a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	61bb      	str	r3, [r7, #24]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009020:	f023 0301 	bic.w	r3, r3, #1
 8009024:	b2da      	uxtb	r2, r3
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800902c:	e03d      	b.n	80090aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800902e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	b2da      	uxtb	r2, r3
 800903a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	617b      	str	r3, [r7, #20]
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	e7fd      	b.n	8009062 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	18d1      	adds	r1, r2, r3
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009074:	f7ff ff04 	bl	8008e80 <prvInsertTimerInActiveList>
					break;
 8009078:	e017      	b.n	80090aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d103      	bne.n	8009090 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800908a:	f000 fba7 	bl	80097dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800908e:	e00c      	b.n	80090aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009096:	f023 0301 	bic.w	r3, r3, #1
 800909a:	b2da      	uxtb	r2, r3
 800909c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800909e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090a2:	e002      	b.n	80090aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80090a4:	bf00      	nop
 80090a6:	e000      	b.n	80090aa <prvProcessReceivedCommands+0x1a6>
					break;
 80090a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090aa:	4b08      	ldr	r3, [pc, #32]	@ (80090cc <prvProcessReceivedCommands+0x1c8>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	1d39      	adds	r1, r7, #4
 80090b0:	2200      	movs	r2, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd fdc0 	bl	8006c38 <xQueueReceive>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f47f af26 	bne.w	8008f0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	3730      	adds	r7, #48	@ 0x30
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20001324 	.word	0x20001324

080090d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090d6:	e049      	b.n	800916c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009194 <prvSwitchTimerLists+0xc4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e2:	4b2c      	ldr	r3, [pc, #176]	@ (8009194 <prvSwitchTimerLists+0xc4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3304      	adds	r3, #4
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fd f9d9 	bl	80064a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b00      	cmp	r3, #0
 800910a:	d02f      	beq.n	800916c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	429a      	cmp	r2, r3
 800911c:	d90e      	bls.n	800913c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800912a:	4b1a      	ldr	r3, [pc, #104]	@ (8009194 <prvSwitchTimerLists+0xc4>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3304      	adds	r3, #4
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f7fd f97f 	bl	8006438 <vListInsert>
 800913a:	e017      	b.n	800916c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800913c:	2300      	movs	r3, #0
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2300      	movs	r3, #0
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	2100      	movs	r1, #0
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f7ff fd5a 	bl	8008c00 <xTimerGenericCommand>
 800914c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10b      	bne.n	800916c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	603b      	str	r3, [r7, #0]
}
 8009166:	bf00      	nop
 8009168:	bf00      	nop
 800916a:	e7fd      	b.n	8009168 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800916c:	4b09      	ldr	r3, [pc, #36]	@ (8009194 <prvSwitchTimerLists+0xc4>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1b0      	bne.n	80090d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009176:	4b07      	ldr	r3, [pc, #28]	@ (8009194 <prvSwitchTimerLists+0xc4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800917c:	4b06      	ldr	r3, [pc, #24]	@ (8009198 <prvSwitchTimerLists+0xc8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a04      	ldr	r2, [pc, #16]	@ (8009194 <prvSwitchTimerLists+0xc4>)
 8009182:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009184:	4a04      	ldr	r2, [pc, #16]	@ (8009198 <prvSwitchTimerLists+0xc8>)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	6013      	str	r3, [r2, #0]
}
 800918a:	bf00      	nop
 800918c:	3718      	adds	r7, #24
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	2000131c 	.word	0x2000131c
 8009198:	20001320 	.word	0x20001320

0800919c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091a2:	f000 f94b 	bl	800943c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091a6:	4b15      	ldr	r3, [pc, #84]	@ (80091fc <prvCheckForValidListAndQueue+0x60>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d120      	bne.n	80091f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091ae:	4814      	ldr	r0, [pc, #80]	@ (8009200 <prvCheckForValidListAndQueue+0x64>)
 80091b0:	f7fd f8f4 	bl	800639c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091b4:	4813      	ldr	r0, [pc, #76]	@ (8009204 <prvCheckForValidListAndQueue+0x68>)
 80091b6:	f7fd f8f1 	bl	800639c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091ba:	4b13      	ldr	r3, [pc, #76]	@ (8009208 <prvCheckForValidListAndQueue+0x6c>)
 80091bc:	4a10      	ldr	r2, [pc, #64]	@ (8009200 <prvCheckForValidListAndQueue+0x64>)
 80091be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091c0:	4b12      	ldr	r3, [pc, #72]	@ (800920c <prvCheckForValidListAndQueue+0x70>)
 80091c2:	4a10      	ldr	r2, [pc, #64]	@ (8009204 <prvCheckForValidListAndQueue+0x68>)
 80091c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091c6:	2300      	movs	r3, #0
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	4b11      	ldr	r3, [pc, #68]	@ (8009210 <prvCheckForValidListAndQueue+0x74>)
 80091cc:	4a11      	ldr	r2, [pc, #68]	@ (8009214 <prvCheckForValidListAndQueue+0x78>)
 80091ce:	2110      	movs	r1, #16
 80091d0:	2010      	movs	r0, #16
 80091d2:	f7fd f9fd 	bl	80065d0 <xQueueGenericCreateStatic>
 80091d6:	4603      	mov	r3, r0
 80091d8:	4a08      	ldr	r2, [pc, #32]	@ (80091fc <prvCheckForValidListAndQueue+0x60>)
 80091da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091dc:	4b07      	ldr	r3, [pc, #28]	@ (80091fc <prvCheckForValidListAndQueue+0x60>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091e4:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <prvCheckForValidListAndQueue+0x60>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	490b      	ldr	r1, [pc, #44]	@ (8009218 <prvCheckForValidListAndQueue+0x7c>)
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe f8c0 	bl	8007370 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091f0:	f000 f954 	bl	800949c <vPortExitCritical>
}
 80091f4:	bf00      	nop
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20001324 	.word	0x20001324
 8009200:	200012f4 	.word	0x200012f4
 8009204:	20001308 	.word	0x20001308
 8009208:	2000131c 	.word	0x2000131c
 800920c:	20001320 	.word	0x20001320
 8009210:	20001430 	.word	0x20001430
 8009214:	20001330 	.word	0x20001330
 8009218:	0800d31c 	.word	0x0800d31c

0800921c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	60fb      	str	r3, [r7, #12]
}
 8009240:	bf00      	nop
 8009242:	bf00      	nop
 8009244:	e7fd      	b.n	8009242 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009246:	f000 f8f9 	bl	800943c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009250:	f000 f924 	bl	800949c <vPortExitCritical>

	return pvReturn;
 8009254:	693b      	ldr	r3, [r7, #16]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3b04      	subs	r3, #4
 8009270:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3b04      	subs	r3, #4
 800927e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f023 0201 	bic.w	r2, r3, #1
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3b04      	subs	r3, #4
 800928e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009290:	4a08      	ldr	r2, [pc, #32]	@ (80092b4 <pxPortInitialiseStack+0x54>)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3b14      	subs	r3, #20
 800929a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3b20      	subs	r3, #32
 80092a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092a8:	68fb      	ldr	r3, [r7, #12]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bc80      	pop	{r7}
 80092b2:	4770      	bx	lr
 80092b4:	080092b9 	.word	0x080092b9

080092b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80092be:	2300      	movs	r3, #0
 80092c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092c2:	4b12      	ldr	r3, [pc, #72]	@ (800930c <prvTaskExitError+0x54>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ca:	d00b      	beq.n	80092e4 <prvTaskExitError+0x2c>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	60fb      	str	r3, [r7, #12]
}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	e7fd      	b.n	80092e0 <prvTaskExitError+0x28>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	60bb      	str	r3, [r7, #8]
}
 80092f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092f8:	bf00      	nop
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0fc      	beq.n	80092fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	bc80      	pop	{r7}
 800930a:	4770      	bx	lr
 800930c:	20000044 	.word	0x20000044

08009310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009310:	4b07      	ldr	r3, [pc, #28]	@ (8009330 <pxCurrentTCBConst2>)
 8009312:	6819      	ldr	r1, [r3, #0]
 8009314:	6808      	ldr	r0, [r1, #0]
 8009316:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800931a:	f380 8809 	msr	PSP, r0
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f04f 0000 	mov.w	r0, #0
 8009326:	f380 8811 	msr	BASEPRI, r0
 800932a:	f04e 0e0d 	orr.w	lr, lr, #13
 800932e:	4770      	bx	lr

08009330 <pxCurrentTCBConst2>:
 8009330:	20000df4 	.word	0x20000df4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop

08009338 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009338:	4806      	ldr	r0, [pc, #24]	@ (8009354 <prvPortStartFirstTask+0x1c>)
 800933a:	6800      	ldr	r0, [r0, #0]
 800933c:	6800      	ldr	r0, [r0, #0]
 800933e:	f380 8808 	msr	MSP, r0
 8009342:	b662      	cpsie	i
 8009344:	b661      	cpsie	f
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	f3bf 8f6f 	isb	sy
 800934e:	df00      	svc	0
 8009350:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009352:	bf00      	nop
 8009354:	e000ed08 	.word	0xe000ed08

08009358 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800935e:	4b32      	ldr	r3, [pc, #200]	@ (8009428 <xPortStartScheduler+0xd0>)
 8009360:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	22ff      	movs	r2, #255	@ 0xff
 800936e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	b2db      	uxtb	r3, r3
 8009376:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009378:	78fb      	ldrb	r3, [r7, #3]
 800937a:	b2db      	uxtb	r3, r3
 800937c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009380:	b2da      	uxtb	r2, r3
 8009382:	4b2a      	ldr	r3, [pc, #168]	@ (800942c <xPortStartScheduler+0xd4>)
 8009384:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009386:	4b2a      	ldr	r3, [pc, #168]	@ (8009430 <xPortStartScheduler+0xd8>)
 8009388:	2207      	movs	r2, #7
 800938a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800938c:	e009      	b.n	80093a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800938e:	4b28      	ldr	r3, [pc, #160]	@ (8009430 <xPortStartScheduler+0xd8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3b01      	subs	r3, #1
 8009394:	4a26      	ldr	r2, [pc, #152]	@ (8009430 <xPortStartScheduler+0xd8>)
 8009396:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009398:	78fb      	ldrb	r3, [r7, #3]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093aa:	2b80      	cmp	r3, #128	@ 0x80
 80093ac:	d0ef      	beq.n	800938e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093ae:	4b20      	ldr	r3, [pc, #128]	@ (8009430 <xPortStartScheduler+0xd8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f1c3 0307 	rsb	r3, r3, #7
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	d00b      	beq.n	80093d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60bb      	str	r3, [r7, #8]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093d2:	4b17      	ldr	r3, [pc, #92]	@ (8009430 <xPortStartScheduler+0xd8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	4a15      	ldr	r2, [pc, #84]	@ (8009430 <xPortStartScheduler+0xd8>)
 80093da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093dc:	4b14      	ldr	r3, [pc, #80]	@ (8009430 <xPortStartScheduler+0xd8>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093e4:	4a12      	ldr	r2, [pc, #72]	@ (8009430 <xPortStartScheduler+0xd8>)
 80093e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093f0:	4b10      	ldr	r3, [pc, #64]	@ (8009434 <xPortStartScheduler+0xdc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009434 <xPortStartScheduler+0xdc>)
 80093f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009434 <xPortStartScheduler+0xdc>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a0c      	ldr	r2, [pc, #48]	@ (8009434 <xPortStartScheduler+0xdc>)
 8009402:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009406:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009408:	f000 f8b8 	bl	800957c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800940c:	4b0a      	ldr	r3, [pc, #40]	@ (8009438 <xPortStartScheduler+0xe0>)
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009412:	f7ff ff91 	bl	8009338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009416:	f7fe fc97 	bl	8007d48 <vTaskSwitchContext>
	prvTaskExitError();
 800941a:	f7ff ff4d 	bl	80092b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	e000e400 	.word	0xe000e400
 800942c:	20001480 	.word	0x20001480
 8009430:	20001484 	.word	0x20001484
 8009434:	e000ed20 	.word	0xe000ed20
 8009438:	20000044 	.word	0x20000044

0800943c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	607b      	str	r3, [r7, #4]
}
 8009454:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009456:	4b0f      	ldr	r3, [pc, #60]	@ (8009494 <vPortEnterCritical+0x58>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	4a0d      	ldr	r2, [pc, #52]	@ (8009494 <vPortEnterCritical+0x58>)
 800945e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009460:	4b0c      	ldr	r3, [pc, #48]	@ (8009494 <vPortEnterCritical+0x58>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b01      	cmp	r3, #1
 8009466:	d110      	bne.n	800948a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009468:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <vPortEnterCritical+0x5c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <vPortEnterCritical+0x4e>
	__asm volatile
 8009472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009476:	f383 8811 	msr	BASEPRI, r3
 800947a:	f3bf 8f6f 	isb	sy
 800947e:	f3bf 8f4f 	dsb	sy
 8009482:	603b      	str	r3, [r7, #0]
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	e7fd      	b.n	8009486 <vPortEnterCritical+0x4a>
	}
}
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	bc80      	pop	{r7}
 8009492:	4770      	bx	lr
 8009494:	20000044 	.word	0x20000044
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094a2:	4b12      	ldr	r3, [pc, #72]	@ (80094ec <vPortExitCritical+0x50>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10b      	bne.n	80094c2 <vPortExitCritical+0x26>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	607b      	str	r3, [r7, #4]
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	e7fd      	b.n	80094be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094c2:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <vPortExitCritical+0x50>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a08      	ldr	r2, [pc, #32]	@ (80094ec <vPortExitCritical+0x50>)
 80094ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <vPortExitCritical+0x50>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <vPortExitCritical+0x44>
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f383 8811 	msr	BASEPRI, r3
}
 80094de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bc80      	pop	{r7}
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	20000044 	.word	0x20000044

080094f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094f0:	f3ef 8009 	mrs	r0, PSP
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4b0d      	ldr	r3, [pc, #52]	@ (8009530 <pxCurrentTCBConst>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009500:	6010      	str	r0, [r2, #0]
 8009502:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009506:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800950a:	f380 8811 	msr	BASEPRI, r0
 800950e:	f7fe fc1b 	bl	8007d48 <vTaskSwitchContext>
 8009512:	f04f 0000 	mov.w	r0, #0
 8009516:	f380 8811 	msr	BASEPRI, r0
 800951a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800951e:	6819      	ldr	r1, [r3, #0]
 8009520:	6808      	ldr	r0, [r1, #0]
 8009522:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009526:	f380 8809 	msr	PSP, r0
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	4770      	bx	lr

08009530 <pxCurrentTCBConst>:
 8009530:	20000df4 	.word	0x20000df4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop

08009538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	607b      	str	r3, [r7, #4]
}
 8009550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009552:	f7fe fb3f 	bl	8007bd4 <xTaskIncrementTick>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800955c:	4b06      	ldr	r3, [pc, #24]	@ (8009578 <xPortSysTickHandler+0x40>)
 800955e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	2300      	movs	r3, #0
 8009566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f383 8811 	msr	BASEPRI, r3
}
 800956e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009580:	4b0a      	ldr	r3, [pc, #40]	@ (80095ac <vPortSetupTimerInterrupt+0x30>)
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009586:	4b0a      	ldr	r3, [pc, #40]	@ (80095b0 <vPortSetupTimerInterrupt+0x34>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800958c:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <vPortSetupTimerInterrupt+0x38>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a09      	ldr	r2, [pc, #36]	@ (80095b8 <vPortSetupTimerInterrupt+0x3c>)
 8009592:	fba2 2303 	umull	r2, r3, r2, r3
 8009596:	099b      	lsrs	r3, r3, #6
 8009598:	4a08      	ldr	r2, [pc, #32]	@ (80095bc <vPortSetupTimerInterrupt+0x40>)
 800959a:	3b01      	subs	r3, #1
 800959c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800959e:	4b03      	ldr	r3, [pc, #12]	@ (80095ac <vPortSetupTimerInterrupt+0x30>)
 80095a0:	2207      	movs	r2, #7
 80095a2:	601a      	str	r2, [r3, #0]
}
 80095a4:	bf00      	nop
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr
 80095ac:	e000e010 	.word	0xe000e010
 80095b0:	e000e018 	.word	0xe000e018
 80095b4:	20000038 	.word	0x20000038
 80095b8:	10624dd3 	.word	0x10624dd3
 80095bc:	e000e014 	.word	0xe000e014

080095c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095c6:	f3ef 8305 	mrs	r3, IPSR
 80095ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b0f      	cmp	r3, #15
 80095d0:	d915      	bls.n	80095fe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095d2:	4a17      	ldr	r2, [pc, #92]	@ (8009630 <vPortValidateInterruptPriority+0x70>)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095dc:	4b15      	ldr	r3, [pc, #84]	@ (8009634 <vPortValidateInterruptPriority+0x74>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	7afa      	ldrb	r2, [r7, #11]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d20b      	bcs.n	80095fe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	607b      	str	r3, [r7, #4]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009638 <vPortValidateInterruptPriority+0x78>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009606:	4b0d      	ldr	r3, [pc, #52]	@ (800963c <vPortValidateInterruptPriority+0x7c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d90b      	bls.n	8009626 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	603b      	str	r3, [r7, #0]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <vPortValidateInterruptPriority+0x62>
	}
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr
 8009630:	e000e3f0 	.word	0xe000e3f0
 8009634:	20001480 	.word	0x20001480
 8009638:	e000ed0c 	.word	0xe000ed0c
 800963c:	20001484 	.word	0x20001484

08009640 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08a      	sub	sp, #40	@ 0x28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800964c:	f7fe f9f6 	bl	8007a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009650:	4b5c      	ldr	r3, [pc, #368]	@ (80097c4 <pvPortMalloc+0x184>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009658:	f000 f924 	bl	80098a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800965c:	4b5a      	ldr	r3, [pc, #360]	@ (80097c8 <pvPortMalloc+0x188>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4013      	ands	r3, r2
 8009664:	2b00      	cmp	r3, #0
 8009666:	f040 8095 	bne.w	8009794 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01e      	beq.n	80096ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009670:	2208      	movs	r2, #8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4413      	add	r3, r2
 8009676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f003 0307 	and.w	r3, r3, #7
 800967e:	2b00      	cmp	r3, #0
 8009680:	d015      	beq.n	80096ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f023 0307 	bic.w	r3, r3, #7
 8009688:	3308      	adds	r3, #8
 800968a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00b      	beq.n	80096ae <pvPortMalloc+0x6e>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	617b      	str	r3, [r7, #20]
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	e7fd      	b.n	80096aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d06f      	beq.n	8009794 <pvPortMalloc+0x154>
 80096b4:	4b45      	ldr	r3, [pc, #276]	@ (80097cc <pvPortMalloc+0x18c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d86a      	bhi.n	8009794 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096be:	4b44      	ldr	r3, [pc, #272]	@ (80097d0 <pvPortMalloc+0x190>)
 80096c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096c2:	4b43      	ldr	r3, [pc, #268]	@ (80097d0 <pvPortMalloc+0x190>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096c8:	e004      	b.n	80096d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d903      	bls.n	80096e6 <pvPortMalloc+0xa6>
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1f1      	bne.n	80096ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096e6:	4b37      	ldr	r3, [pc, #220]	@ (80097c4 <pvPortMalloc+0x184>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d051      	beq.n	8009794 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2208      	movs	r2, #8
 80096f6:	4413      	add	r3, r2
 80096f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	1ad2      	subs	r2, r2, r3
 800970a:	2308      	movs	r3, #8
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	429a      	cmp	r2, r3
 8009710:	d920      	bls.n	8009754 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	f003 0307 	and.w	r3, r3, #7
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <pvPortMalloc+0xfc>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	613b      	str	r3, [r7, #16]
}
 8009736:	bf00      	nop
 8009738:	bf00      	nop
 800973a:	e7fd      	b.n	8009738 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	1ad2      	subs	r2, r2, r3
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800974e:	69b8      	ldr	r0, [r7, #24]
 8009750:	f000 f90a 	bl	8009968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009754:	4b1d      	ldr	r3, [pc, #116]	@ (80097cc <pvPortMalloc+0x18c>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	4a1b      	ldr	r2, [pc, #108]	@ (80097cc <pvPortMalloc+0x18c>)
 8009760:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009762:	4b1a      	ldr	r3, [pc, #104]	@ (80097cc <pvPortMalloc+0x18c>)
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	4b1b      	ldr	r3, [pc, #108]	@ (80097d4 <pvPortMalloc+0x194>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d203      	bcs.n	8009776 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800976e:	4b17      	ldr	r3, [pc, #92]	@ (80097cc <pvPortMalloc+0x18c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a18      	ldr	r2, [pc, #96]	@ (80097d4 <pvPortMalloc+0x194>)
 8009774:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	4b13      	ldr	r3, [pc, #76]	@ (80097c8 <pvPortMalloc+0x188>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	431a      	orrs	r2, r3
 8009780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009782:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800978a:	4b13      	ldr	r3, [pc, #76]	@ (80097d8 <pvPortMalloc+0x198>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3301      	adds	r3, #1
 8009790:	4a11      	ldr	r2, [pc, #68]	@ (80097d8 <pvPortMalloc+0x198>)
 8009792:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009794:	f7fe f960 	bl	8007a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	f003 0307 	and.w	r3, r3, #7
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d00b      	beq.n	80097ba <pvPortMalloc+0x17a>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	60fb      	str	r3, [r7, #12]
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	e7fd      	b.n	80097b6 <pvPortMalloc+0x176>
	return pvReturn;
 80097ba:	69fb      	ldr	r3, [r7, #28]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3728      	adds	r7, #40	@ 0x28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20003ba0 	.word	0x20003ba0
 80097c8:	20003bb4 	.word	0x20003bb4
 80097cc:	20003ba4 	.word	0x20003ba4
 80097d0:	20003b98 	.word	0x20003b98
 80097d4:	20003ba8 	.word	0x20003ba8
 80097d8:	20003bac 	.word	0x20003bac

080097dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d04f      	beq.n	800988e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ee:	2308      	movs	r3, #8
 80097f0:	425b      	negs	r3, r3
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4413      	add	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	4b25      	ldr	r3, [pc, #148]	@ (8009898 <vPortFree+0xbc>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4013      	ands	r3, r2
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <vPortFree+0x46>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	60fb      	str	r3, [r7, #12]
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	e7fd      	b.n	800981e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <vPortFree+0x66>
	__asm volatile
 800982a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	60bb      	str	r3, [r7, #8]
}
 800983c:	bf00      	nop
 800983e:	bf00      	nop
 8009840:	e7fd      	b.n	800983e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	4b14      	ldr	r3, [pc, #80]	@ (8009898 <vPortFree+0xbc>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4013      	ands	r3, r2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01e      	beq.n	800988e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11a      	bne.n	800988e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <vPortFree+0xbc>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	43db      	mvns	r3, r3
 8009862:	401a      	ands	r2, r3
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009868:	f7fe f8e8 	bl	8007a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <vPortFree+0xc0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4413      	add	r3, r2
 8009876:	4a09      	ldr	r2, [pc, #36]	@ (800989c <vPortFree+0xc0>)
 8009878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800987a:	6938      	ldr	r0, [r7, #16]
 800987c:	f000 f874 	bl	8009968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009880:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <vPortFree+0xc4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	3301      	adds	r3, #1
 8009886:	4a06      	ldr	r2, [pc, #24]	@ (80098a0 <vPortFree+0xc4>)
 8009888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800988a:	f7fe f8e5 	bl	8007a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800988e:	bf00      	nop
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20003bb4 	.word	0x20003bb4
 800989c:	20003ba4 	.word	0x20003ba4
 80098a0:	20003bb0 	.word	0x20003bb0

080098a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098aa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80098ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098b0:	4b27      	ldr	r3, [pc, #156]	@ (8009950 <prvHeapInit+0xac>)
 80098b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00c      	beq.n	80098d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3307      	adds	r3, #7
 80098c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f023 0307 	bic.w	r3, r3, #7
 80098ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009950 <prvHeapInit+0xac>)
 80098d4:	4413      	add	r3, r2
 80098d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009954 <prvHeapInit+0xb0>)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009954 <prvHeapInit+0xb0>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	4413      	add	r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098f0:	2208      	movs	r2, #8
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	1a9b      	subs	r3, r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0307 	bic.w	r3, r3, #7
 80098fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4a15      	ldr	r2, [pc, #84]	@ (8009958 <prvHeapInit+0xb4>)
 8009904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009906:	4b14      	ldr	r3, [pc, #80]	@ (8009958 <prvHeapInit+0xb4>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800990e:	4b12      	ldr	r3, [pc, #72]	@ (8009958 <prvHeapInit+0xb4>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2200      	movs	r2, #0
 8009914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009924:	4b0c      	ldr	r3, [pc, #48]	@ (8009958 <prvHeapInit+0xb4>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	4a0a      	ldr	r2, [pc, #40]	@ (800995c <prvHeapInit+0xb8>)
 8009932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4a09      	ldr	r2, [pc, #36]	@ (8009960 <prvHeapInit+0xbc>)
 800993a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800993c:	4b09      	ldr	r3, [pc, #36]	@ (8009964 <prvHeapInit+0xc0>)
 800993e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009942:	601a      	str	r2, [r3, #0]
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	20001488 	.word	0x20001488
 8009954:	20003b98 	.word	0x20003b98
 8009958:	20003ba0 	.word	0x20003ba0
 800995c:	20003ba8 	.word	0x20003ba8
 8009960:	20003ba4 	.word	0x20003ba4
 8009964:	20003bb4 	.word	0x20003bb4

08009968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009970:	4b27      	ldr	r3, [pc, #156]	@ (8009a10 <prvInsertBlockIntoFreeList+0xa8>)
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	e002      	b.n	800997c <prvInsertBlockIntoFreeList+0x14>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	429a      	cmp	r2, r3
 8009984:	d8f7      	bhi.n	8009976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	4413      	add	r3, r2
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	d108      	bne.n	80099aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	441a      	add	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	441a      	add	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d118      	bne.n	80099f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4b14      	ldr	r3, [pc, #80]	@ (8009a14 <prvInsertBlockIntoFreeList+0xac>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d00d      	beq.n	80099e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	441a      	add	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	e008      	b.n	80099f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a14 <prvInsertBlockIntoFreeList+0xac>)
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	e003      	b.n	80099f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d002      	beq.n	8009a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a06:	bf00      	nop
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bc80      	pop	{r7}
 8009a0e:	4770      	bx	lr
 8009a10:	20003b98 	.word	0x20003b98
 8009a14:	20003ba0 	.word	0x20003ba0

08009a18 <__cvt>:
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a1e:	461d      	mov	r5, r3
 8009a20:	bfbb      	ittet	lt
 8009a22:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009a26:	461d      	movlt	r5, r3
 8009a28:	2300      	movge	r3, #0
 8009a2a:	232d      	movlt	r3, #45	@ 0x2d
 8009a2c:	b088      	sub	sp, #32
 8009a2e:	4614      	mov	r4, r2
 8009a30:	bfb8      	it	lt
 8009a32:	4614      	movlt	r4, r2
 8009a34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009a38:	7013      	strb	r3, [r2, #0]
 8009a3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009a40:	f023 0820 	bic.w	r8, r3, #32
 8009a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a48:	d005      	beq.n	8009a56 <__cvt+0x3e>
 8009a4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a4e:	d100      	bne.n	8009a52 <__cvt+0x3a>
 8009a50:	3601      	adds	r6, #1
 8009a52:	2302      	movs	r3, #2
 8009a54:	e000      	b.n	8009a58 <__cvt+0x40>
 8009a56:	2303      	movs	r3, #3
 8009a58:	aa07      	add	r2, sp, #28
 8009a5a:	9204      	str	r2, [sp, #16]
 8009a5c:	aa06      	add	r2, sp, #24
 8009a5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009a62:	e9cd 3600 	strd	r3, r6, [sp]
 8009a66:	4622      	mov	r2, r4
 8009a68:	462b      	mov	r3, r5
 8009a6a:	f001 f801 	bl	800aa70 <_dtoa_r>
 8009a6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a72:	4607      	mov	r7, r0
 8009a74:	d119      	bne.n	8009aaa <__cvt+0x92>
 8009a76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a78:	07db      	lsls	r3, r3, #31
 8009a7a:	d50e      	bpl.n	8009a9a <__cvt+0x82>
 8009a7c:	eb00 0906 	add.w	r9, r0, r6
 8009a80:	2200      	movs	r2, #0
 8009a82:	2300      	movs	r3, #0
 8009a84:	4620      	mov	r0, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 ff98 	bl	80009bc <__aeabi_dcmpeq>
 8009a8c:	b108      	cbz	r0, 8009a92 <__cvt+0x7a>
 8009a8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a92:	2230      	movs	r2, #48	@ 0x30
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	454b      	cmp	r3, r9
 8009a98:	d31e      	bcc.n	8009ad8 <__cvt+0xc0>
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	9b07      	ldr	r3, [sp, #28]
 8009a9e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009aa0:	1bdb      	subs	r3, r3, r7
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	b008      	add	sp, #32
 8009aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aaa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009aae:	eb00 0906 	add.w	r9, r0, r6
 8009ab2:	d1e5      	bne.n	8009a80 <__cvt+0x68>
 8009ab4:	7803      	ldrb	r3, [r0, #0]
 8009ab6:	2b30      	cmp	r3, #48	@ 0x30
 8009ab8:	d10a      	bne.n	8009ad0 <__cvt+0xb8>
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	f7f6 ff7b 	bl	80009bc <__aeabi_dcmpeq>
 8009ac6:	b918      	cbnz	r0, 8009ad0 <__cvt+0xb8>
 8009ac8:	f1c6 0601 	rsb	r6, r6, #1
 8009acc:	f8ca 6000 	str.w	r6, [sl]
 8009ad0:	f8da 3000 	ldr.w	r3, [sl]
 8009ad4:	4499      	add	r9, r3
 8009ad6:	e7d3      	b.n	8009a80 <__cvt+0x68>
 8009ad8:	1c59      	adds	r1, r3, #1
 8009ada:	9107      	str	r1, [sp, #28]
 8009adc:	701a      	strb	r2, [r3, #0]
 8009ade:	e7d9      	b.n	8009a94 <__cvt+0x7c>

08009ae0 <__exponent>:
 8009ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ae2:	2900      	cmp	r1, #0
 8009ae4:	bfb6      	itet	lt
 8009ae6:	232d      	movlt	r3, #45	@ 0x2d
 8009ae8:	232b      	movge	r3, #43	@ 0x2b
 8009aea:	4249      	neglt	r1, r1
 8009aec:	2909      	cmp	r1, #9
 8009aee:	7002      	strb	r2, [r0, #0]
 8009af0:	7043      	strb	r3, [r0, #1]
 8009af2:	dd29      	ble.n	8009b48 <__exponent+0x68>
 8009af4:	f10d 0307 	add.w	r3, sp, #7
 8009af8:	461d      	mov	r5, r3
 8009afa:	270a      	movs	r7, #10
 8009afc:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b00:	461a      	mov	r2, r3
 8009b02:	fb07 1416 	mls	r4, r7, r6, r1
 8009b06:	3430      	adds	r4, #48	@ 0x30
 8009b08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	2c63      	cmp	r4, #99	@ 0x63
 8009b10:	4631      	mov	r1, r6
 8009b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b16:	dcf1      	bgt.n	8009afc <__exponent+0x1c>
 8009b18:	3130      	adds	r1, #48	@ 0x30
 8009b1a:	1e94      	subs	r4, r2, #2
 8009b1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b20:	4623      	mov	r3, r4
 8009b22:	1c41      	adds	r1, r0, #1
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	d30a      	bcc.n	8009b3e <__exponent+0x5e>
 8009b28:	f10d 0309 	add.w	r3, sp, #9
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	42ac      	cmp	r4, r5
 8009b30:	bf88      	it	hi
 8009b32:	2300      	movhi	r3, #0
 8009b34:	3302      	adds	r3, #2
 8009b36:	4403      	add	r3, r0
 8009b38:	1a18      	subs	r0, r3, r0
 8009b3a:	b003      	add	sp, #12
 8009b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b46:	e7ed      	b.n	8009b24 <__exponent+0x44>
 8009b48:	2330      	movs	r3, #48	@ 0x30
 8009b4a:	3130      	adds	r1, #48	@ 0x30
 8009b4c:	7083      	strb	r3, [r0, #2]
 8009b4e:	70c1      	strb	r1, [r0, #3]
 8009b50:	1d03      	adds	r3, r0, #4
 8009b52:	e7f1      	b.n	8009b38 <__exponent+0x58>

08009b54 <_printf_float>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	b091      	sub	sp, #68	@ 0x44
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009b60:	4616      	mov	r6, r2
 8009b62:	461f      	mov	r7, r3
 8009b64:	4605      	mov	r5, r0
 8009b66:	f000 fe11 	bl	800a78c <_localeconv_r>
 8009b6a:	6803      	ldr	r3, [r0, #0]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	9308      	str	r3, [sp, #32]
 8009b70:	f7f6 faf8 	bl	8000164 <strlen>
 8009b74:	2300      	movs	r3, #0
 8009b76:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b78:	f8d8 3000 	ldr.w	r3, [r8]
 8009b7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009b7e:	3307      	adds	r3, #7
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	f103 0208 	add.w	r2, r3, #8
 8009b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b90:	f8c8 2000 	str.w	r2, [r8]
 8009b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b9e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009baa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009bae:	4b9c      	ldr	r3, [pc, #624]	@ (8009e20 <_printf_float+0x2cc>)
 8009bb0:	f7f6 ff36 	bl	8000a20 <__aeabi_dcmpun>
 8009bb4:	bb70      	cbnz	r0, 8009c14 <_printf_float+0xc0>
 8009bb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009bba:	f04f 32ff 	mov.w	r2, #4294967295
 8009bbe:	4b98      	ldr	r3, [pc, #608]	@ (8009e20 <_printf_float+0x2cc>)
 8009bc0:	f7f6 ff10 	bl	80009e4 <__aeabi_dcmple>
 8009bc4:	bb30      	cbnz	r0, 8009c14 <_printf_float+0xc0>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	f7f6 feff 	bl	80009d0 <__aeabi_dcmplt>
 8009bd2:	b110      	cbz	r0, 8009bda <_printf_float+0x86>
 8009bd4:	232d      	movs	r3, #45	@ 0x2d
 8009bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bda:	4a92      	ldr	r2, [pc, #584]	@ (8009e24 <_printf_float+0x2d0>)
 8009bdc:	4b92      	ldr	r3, [pc, #584]	@ (8009e28 <_printf_float+0x2d4>)
 8009bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009be2:	bf94      	ite	ls
 8009be4:	4690      	movls	r8, r2
 8009be6:	4698      	movhi	r8, r3
 8009be8:	2303      	movs	r3, #3
 8009bea:	f04f 0900 	mov.w	r9, #0
 8009bee:	6123      	str	r3, [r4, #16]
 8009bf0:	f02b 0304 	bic.w	r3, fp, #4
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	4633      	mov	r3, r6
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	9700      	str	r7, [sp, #0]
 8009bfe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009c00:	f000 f9d4 	bl	8009fac <_printf_common>
 8009c04:	3001      	adds	r0, #1
 8009c06:	f040 8090 	bne.w	8009d2a <_printf_float+0x1d6>
 8009c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0e:	b011      	add	sp, #68	@ 0x44
 8009c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c14:	4642      	mov	r2, r8
 8009c16:	464b      	mov	r3, r9
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 ff00 	bl	8000a20 <__aeabi_dcmpun>
 8009c20:	b148      	cbz	r0, 8009c36 <_printf_float+0xe2>
 8009c22:	464b      	mov	r3, r9
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	bfb8      	it	lt
 8009c28:	232d      	movlt	r3, #45	@ 0x2d
 8009c2a:	4a80      	ldr	r2, [pc, #512]	@ (8009e2c <_printf_float+0x2d8>)
 8009c2c:	bfb8      	it	lt
 8009c2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c32:	4b7f      	ldr	r3, [pc, #508]	@ (8009e30 <_printf_float+0x2dc>)
 8009c34:	e7d3      	b.n	8009bde <_printf_float+0x8a>
 8009c36:	6863      	ldr	r3, [r4, #4]
 8009c38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	d13f      	bne.n	8009cc0 <_printf_float+0x16c>
 8009c40:	2306      	movs	r3, #6
 8009c42:	6063      	str	r3, [r4, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	9206      	str	r2, [sp, #24]
 8009c4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009c50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009c54:	aa0d      	add	r2, sp, #52	@ 0x34
 8009c56:	9203      	str	r2, [sp, #12]
 8009c58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009c5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	4642      	mov	r2, r8
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	4628      	mov	r0, r5
 8009c68:	464b      	mov	r3, r9
 8009c6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8009c6c:	f7ff fed4 	bl	8009a18 <__cvt>
 8009c70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c72:	4680      	mov	r8, r0
 8009c74:	2947      	cmp	r1, #71	@ 0x47
 8009c76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009c78:	d128      	bne.n	8009ccc <_printf_float+0x178>
 8009c7a:	1cc8      	adds	r0, r1, #3
 8009c7c:	db02      	blt.n	8009c84 <_printf_float+0x130>
 8009c7e:	6863      	ldr	r3, [r4, #4]
 8009c80:	4299      	cmp	r1, r3
 8009c82:	dd40      	ble.n	8009d06 <_printf_float+0x1b2>
 8009c84:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c88:	fa5f fa8a 	uxtb.w	sl, sl
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	3901      	subs	r1, #1
 8009c90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c94:	910d      	str	r1, [sp, #52]	@ 0x34
 8009c96:	f7ff ff23 	bl	8009ae0 <__exponent>
 8009c9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c9c:	4681      	mov	r9, r0
 8009c9e:	1813      	adds	r3, r2, r0
 8009ca0:	2a01      	cmp	r2, #1
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	dc02      	bgt.n	8009cac <_printf_float+0x158>
 8009ca6:	6822      	ldr	r2, [r4, #0]
 8009ca8:	07d2      	lsls	r2, r2, #31
 8009caa:	d501      	bpl.n	8009cb0 <_printf_float+0x15c>
 8009cac:	3301      	adds	r3, #1
 8009cae:	6123      	str	r3, [r4, #16]
 8009cb0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d09e      	beq.n	8009bf6 <_printf_float+0xa2>
 8009cb8:	232d      	movs	r3, #45	@ 0x2d
 8009cba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cbe:	e79a      	b.n	8009bf6 <_printf_float+0xa2>
 8009cc0:	2947      	cmp	r1, #71	@ 0x47
 8009cc2:	d1bf      	bne.n	8009c44 <_printf_float+0xf0>
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1bd      	bne.n	8009c44 <_printf_float+0xf0>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e7ba      	b.n	8009c42 <_printf_float+0xee>
 8009ccc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cd0:	d9dc      	bls.n	8009c8c <_printf_float+0x138>
 8009cd2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009cd6:	d118      	bne.n	8009d0a <_printf_float+0x1b6>
 8009cd8:	2900      	cmp	r1, #0
 8009cda:	6863      	ldr	r3, [r4, #4]
 8009cdc:	dd0b      	ble.n	8009cf6 <_printf_float+0x1a2>
 8009cde:	6121      	str	r1, [r4, #16]
 8009ce0:	b913      	cbnz	r3, 8009ce8 <_printf_float+0x194>
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	07d0      	lsls	r0, r2, #31
 8009ce6:	d502      	bpl.n	8009cee <_printf_float+0x19a>
 8009ce8:	3301      	adds	r3, #1
 8009cea:	440b      	add	r3, r1
 8009cec:	6123      	str	r3, [r4, #16]
 8009cee:	f04f 0900 	mov.w	r9, #0
 8009cf2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009cf4:	e7dc      	b.n	8009cb0 <_printf_float+0x15c>
 8009cf6:	b913      	cbnz	r3, 8009cfe <_printf_float+0x1aa>
 8009cf8:	6822      	ldr	r2, [r4, #0]
 8009cfa:	07d2      	lsls	r2, r2, #31
 8009cfc:	d501      	bpl.n	8009d02 <_printf_float+0x1ae>
 8009cfe:	3302      	adds	r3, #2
 8009d00:	e7f4      	b.n	8009cec <_printf_float+0x198>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e7f2      	b.n	8009cec <_printf_float+0x198>
 8009d06:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d0c:	4299      	cmp	r1, r3
 8009d0e:	db05      	blt.n	8009d1c <_printf_float+0x1c8>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	6121      	str	r1, [r4, #16]
 8009d14:	07d8      	lsls	r0, r3, #31
 8009d16:	d5ea      	bpl.n	8009cee <_printf_float+0x19a>
 8009d18:	1c4b      	adds	r3, r1, #1
 8009d1a:	e7e7      	b.n	8009cec <_printf_float+0x198>
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	bfcc      	ite	gt
 8009d20:	2201      	movgt	r2, #1
 8009d22:	f1c1 0202 	rsble	r2, r1, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	e7e0      	b.n	8009cec <_printf_float+0x198>
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	055a      	lsls	r2, r3, #21
 8009d2e:	d407      	bmi.n	8009d40 <_printf_float+0x1ec>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	4642      	mov	r2, r8
 8009d34:	4631      	mov	r1, r6
 8009d36:	4628      	mov	r0, r5
 8009d38:	47b8      	blx	r7
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	d12b      	bne.n	8009d96 <_printf_float+0x242>
 8009d3e:	e764      	b.n	8009c0a <_printf_float+0xb6>
 8009d40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d44:	f240 80dc 	bls.w	8009f00 <_printf_float+0x3ac>
 8009d48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f7f6 fe34 	bl	80009bc <__aeabi_dcmpeq>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d033      	beq.n	8009dc0 <_printf_float+0x26c>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	4a35      	ldr	r2, [pc, #212]	@ (8009e34 <_printf_float+0x2e0>)
 8009d60:	47b8      	blx	r7
 8009d62:	3001      	adds	r0, #1
 8009d64:	f43f af51 	beq.w	8009c0a <_printf_float+0xb6>
 8009d68:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009d6c:	4543      	cmp	r3, r8
 8009d6e:	db02      	blt.n	8009d76 <_printf_float+0x222>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	07d8      	lsls	r0, r3, #31
 8009d74:	d50f      	bpl.n	8009d96 <_printf_float+0x242>
 8009d76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b8      	blx	r7
 8009d80:	3001      	adds	r0, #1
 8009d82:	f43f af42 	beq.w	8009c0a <_printf_float+0xb6>
 8009d86:	f04f 0900 	mov.w	r9, #0
 8009d8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d8e:	f104 0a1a 	add.w	sl, r4, #26
 8009d92:	45c8      	cmp	r8, r9
 8009d94:	dc09      	bgt.n	8009daa <_printf_float+0x256>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	079b      	lsls	r3, r3, #30
 8009d9a:	f100 8102 	bmi.w	8009fa2 <_printf_float+0x44e>
 8009d9e:	68e0      	ldr	r0, [r4, #12]
 8009da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009da2:	4298      	cmp	r0, r3
 8009da4:	bfb8      	it	lt
 8009da6:	4618      	movlt	r0, r3
 8009da8:	e731      	b.n	8009c0e <_printf_float+0xba>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4652      	mov	r2, sl
 8009dae:	4631      	mov	r1, r6
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	f43f af28 	beq.w	8009c0a <_printf_float+0xb6>
 8009dba:	f109 0901 	add.w	r9, r9, #1
 8009dbe:	e7e8      	b.n	8009d92 <_printf_float+0x23e>
 8009dc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dc38      	bgt.n	8009e38 <_printf_float+0x2e4>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4628      	mov	r0, r5
 8009dcc:	4a19      	ldr	r2, [pc, #100]	@ (8009e34 <_printf_float+0x2e0>)
 8009dce:	47b8      	blx	r7
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f43f af1a 	beq.w	8009c0a <_printf_float+0xb6>
 8009dd6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009dda:	ea59 0303 	orrs.w	r3, r9, r3
 8009dde:	d102      	bne.n	8009de6 <_printf_float+0x292>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	07d9      	lsls	r1, r3, #31
 8009de4:	d5d7      	bpl.n	8009d96 <_printf_float+0x242>
 8009de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009dea:	4631      	mov	r1, r6
 8009dec:	4628      	mov	r0, r5
 8009dee:	47b8      	blx	r7
 8009df0:	3001      	adds	r0, #1
 8009df2:	f43f af0a 	beq.w	8009c0a <_printf_float+0xb6>
 8009df6:	f04f 0a00 	mov.w	sl, #0
 8009dfa:	f104 0b1a 	add.w	fp, r4, #26
 8009dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e00:	425b      	negs	r3, r3
 8009e02:	4553      	cmp	r3, sl
 8009e04:	dc01      	bgt.n	8009e0a <_printf_float+0x2b6>
 8009e06:	464b      	mov	r3, r9
 8009e08:	e793      	b.n	8009d32 <_printf_float+0x1de>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	465a      	mov	r2, fp
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	f43f aef8 	beq.w	8009c0a <_printf_float+0xb6>
 8009e1a:	f10a 0a01 	add.w	sl, sl, #1
 8009e1e:	e7ee      	b.n	8009dfe <_printf_float+0x2aa>
 8009e20:	7fefffff 	.word	0x7fefffff
 8009e24:	0800d43e 	.word	0x0800d43e
 8009e28:	0800d442 	.word	0x0800d442
 8009e2c:	0800d446 	.word	0x0800d446
 8009e30:	0800d44a 	.word	0x0800d44a
 8009e34:	0800d67f 	.word	0x0800d67f
 8009e38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e3a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009e3e:	4553      	cmp	r3, sl
 8009e40:	bfa8      	it	ge
 8009e42:	4653      	movge	r3, sl
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	4699      	mov	r9, r3
 8009e48:	dc36      	bgt.n	8009eb8 <_printf_float+0x364>
 8009e4a:	f04f 0b00 	mov.w	fp, #0
 8009e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e52:	f104 021a 	add.w	r2, r4, #26
 8009e56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e5a:	eba3 0309 	sub.w	r3, r3, r9
 8009e5e:	455b      	cmp	r3, fp
 8009e60:	dc31      	bgt.n	8009ec6 <_printf_float+0x372>
 8009e62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e64:	459a      	cmp	sl, r3
 8009e66:	dc3a      	bgt.n	8009ede <_printf_float+0x38a>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	07da      	lsls	r2, r3, #31
 8009e6c:	d437      	bmi.n	8009ede <_printf_float+0x38a>
 8009e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e70:	ebaa 0903 	sub.w	r9, sl, r3
 8009e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e76:	ebaa 0303 	sub.w	r3, sl, r3
 8009e7a:	4599      	cmp	r9, r3
 8009e7c:	bfa8      	it	ge
 8009e7e:	4699      	movge	r9, r3
 8009e80:	f1b9 0f00 	cmp.w	r9, #0
 8009e84:	dc33      	bgt.n	8009eee <_printf_float+0x39a>
 8009e86:	f04f 0800 	mov.w	r8, #0
 8009e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e8e:	f104 0b1a 	add.w	fp, r4, #26
 8009e92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e94:	ebaa 0303 	sub.w	r3, sl, r3
 8009e98:	eba3 0309 	sub.w	r3, r3, r9
 8009e9c:	4543      	cmp	r3, r8
 8009e9e:	f77f af7a 	ble.w	8009d96 <_printf_float+0x242>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	465a      	mov	r2, fp
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	f43f aeac 	beq.w	8009c0a <_printf_float+0xb6>
 8009eb2:	f108 0801 	add.w	r8, r8, #1
 8009eb6:	e7ec      	b.n	8009e92 <_printf_float+0x33e>
 8009eb8:	4642      	mov	r2, r8
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	47b8      	blx	r7
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d1c2      	bne.n	8009e4a <_printf_float+0x2f6>
 8009ec4:	e6a1      	b.n	8009c0a <_printf_float+0xb6>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4628      	mov	r0, r5
 8009ecc:	920a      	str	r2, [sp, #40]	@ 0x28
 8009ece:	47b8      	blx	r7
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	f43f ae9a 	beq.w	8009c0a <_printf_float+0xb6>
 8009ed6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ed8:	f10b 0b01 	add.w	fp, fp, #1
 8009edc:	e7bb      	b.n	8009e56 <_printf_float+0x302>
 8009ede:	4631      	mov	r1, r6
 8009ee0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	d1c0      	bne.n	8009e6e <_printf_float+0x31a>
 8009eec:	e68d      	b.n	8009c0a <_printf_float+0xb6>
 8009eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ef0:	464b      	mov	r3, r9
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	4442      	add	r2, r8
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	d1c3      	bne.n	8009e86 <_printf_float+0x332>
 8009efe:	e684      	b.n	8009c0a <_printf_float+0xb6>
 8009f00:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009f04:	f1ba 0f01 	cmp.w	sl, #1
 8009f08:	dc01      	bgt.n	8009f0e <_printf_float+0x3ba>
 8009f0a:	07db      	lsls	r3, r3, #31
 8009f0c:	d536      	bpl.n	8009f7c <_printf_float+0x428>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4642      	mov	r2, r8
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae76 	beq.w	8009c0a <_printf_float+0xb6>
 8009f1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f ae6e 	beq.w	8009c0a <_printf_float+0xb6>
 8009f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f32:	2200      	movs	r2, #0
 8009f34:	2300      	movs	r3, #0
 8009f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f3a:	f7f6 fd3f 	bl	80009bc <__aeabi_dcmpeq>
 8009f3e:	b9c0      	cbnz	r0, 8009f72 <_printf_float+0x41e>
 8009f40:	4653      	mov	r3, sl
 8009f42:	f108 0201 	add.w	r2, r8, #1
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d10c      	bne.n	8009f6a <_printf_float+0x416>
 8009f50:	e65b      	b.n	8009c0a <_printf_float+0xb6>
 8009f52:	2301      	movs	r3, #1
 8009f54:	465a      	mov	r2, fp
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b8      	blx	r7
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	f43f ae54 	beq.w	8009c0a <_printf_float+0xb6>
 8009f62:	f108 0801 	add.w	r8, r8, #1
 8009f66:	45d0      	cmp	r8, sl
 8009f68:	dbf3      	blt.n	8009f52 <_printf_float+0x3fe>
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f70:	e6e0      	b.n	8009d34 <_printf_float+0x1e0>
 8009f72:	f04f 0800 	mov.w	r8, #0
 8009f76:	f104 0b1a 	add.w	fp, r4, #26
 8009f7a:	e7f4      	b.n	8009f66 <_printf_float+0x412>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	4642      	mov	r2, r8
 8009f80:	e7e1      	b.n	8009f46 <_printf_float+0x3f2>
 8009f82:	2301      	movs	r3, #1
 8009f84:	464a      	mov	r2, r9
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f43f ae3c 	beq.w	8009c0a <_printf_float+0xb6>
 8009f92:	f108 0801 	add.w	r8, r8, #1
 8009f96:	68e3      	ldr	r3, [r4, #12]
 8009f98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f9a:	1a5b      	subs	r3, r3, r1
 8009f9c:	4543      	cmp	r3, r8
 8009f9e:	dcf0      	bgt.n	8009f82 <_printf_float+0x42e>
 8009fa0:	e6fd      	b.n	8009d9e <_printf_float+0x24a>
 8009fa2:	f04f 0800 	mov.w	r8, #0
 8009fa6:	f104 0919 	add.w	r9, r4, #25
 8009faa:	e7f4      	b.n	8009f96 <_printf_float+0x442>

08009fac <_printf_common>:
 8009fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	4698      	mov	r8, r3
 8009fb4:	688a      	ldr	r2, [r1, #8]
 8009fb6:	690b      	ldr	r3, [r1, #16]
 8009fb8:	4607      	mov	r7, r0
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	bfb8      	it	lt
 8009fbe:	4613      	movlt	r3, r2
 8009fc0:	6033      	str	r3, [r6, #0]
 8009fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009fcc:	b10a      	cbz	r2, 8009fd2 <_printf_common+0x26>
 8009fce:	3301      	adds	r3, #1
 8009fd0:	6033      	str	r3, [r6, #0]
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	0699      	lsls	r1, r3, #26
 8009fd6:	bf42      	ittt	mi
 8009fd8:	6833      	ldrmi	r3, [r6, #0]
 8009fda:	3302      	addmi	r3, #2
 8009fdc:	6033      	strmi	r3, [r6, #0]
 8009fde:	6825      	ldr	r5, [r4, #0]
 8009fe0:	f015 0506 	ands.w	r5, r5, #6
 8009fe4:	d106      	bne.n	8009ff4 <_printf_common+0x48>
 8009fe6:	f104 0a19 	add.w	sl, r4, #25
 8009fea:	68e3      	ldr	r3, [r4, #12]
 8009fec:	6832      	ldr	r2, [r6, #0]
 8009fee:	1a9b      	subs	r3, r3, r2
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	dc2b      	bgt.n	800a04c <_printf_common+0xa0>
 8009ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ff8:	6822      	ldr	r2, [r4, #0]
 8009ffa:	3b00      	subs	r3, #0
 8009ffc:	bf18      	it	ne
 8009ffe:	2301      	movne	r3, #1
 800a000:	0692      	lsls	r2, r2, #26
 800a002:	d430      	bmi.n	800a066 <_printf_common+0xba>
 800a004:	4641      	mov	r1, r8
 800a006:	4638      	mov	r0, r7
 800a008:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a00c:	47c8      	blx	r9
 800a00e:	3001      	adds	r0, #1
 800a010:	d023      	beq.n	800a05a <_printf_common+0xae>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	6922      	ldr	r2, [r4, #16]
 800a016:	f003 0306 	and.w	r3, r3, #6
 800a01a:	2b04      	cmp	r3, #4
 800a01c:	bf14      	ite	ne
 800a01e:	2500      	movne	r5, #0
 800a020:	6833      	ldreq	r3, [r6, #0]
 800a022:	f04f 0600 	mov.w	r6, #0
 800a026:	bf08      	it	eq
 800a028:	68e5      	ldreq	r5, [r4, #12]
 800a02a:	f104 041a 	add.w	r4, r4, #26
 800a02e:	bf08      	it	eq
 800a030:	1aed      	subeq	r5, r5, r3
 800a032:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a036:	bf08      	it	eq
 800a038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a03c:	4293      	cmp	r3, r2
 800a03e:	bfc4      	itt	gt
 800a040:	1a9b      	subgt	r3, r3, r2
 800a042:	18ed      	addgt	r5, r5, r3
 800a044:	42b5      	cmp	r5, r6
 800a046:	d11a      	bne.n	800a07e <_printf_common+0xd2>
 800a048:	2000      	movs	r0, #0
 800a04a:	e008      	b.n	800a05e <_printf_common+0xb2>
 800a04c:	2301      	movs	r3, #1
 800a04e:	4652      	mov	r2, sl
 800a050:	4641      	mov	r1, r8
 800a052:	4638      	mov	r0, r7
 800a054:	47c8      	blx	r9
 800a056:	3001      	adds	r0, #1
 800a058:	d103      	bne.n	800a062 <_printf_common+0xb6>
 800a05a:	f04f 30ff 	mov.w	r0, #4294967295
 800a05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a062:	3501      	adds	r5, #1
 800a064:	e7c1      	b.n	8009fea <_printf_common+0x3e>
 800a066:	2030      	movs	r0, #48	@ 0x30
 800a068:	18e1      	adds	r1, r4, r3
 800a06a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a074:	4422      	add	r2, r4
 800a076:	3302      	adds	r3, #2
 800a078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a07c:	e7c2      	b.n	800a004 <_printf_common+0x58>
 800a07e:	2301      	movs	r3, #1
 800a080:	4622      	mov	r2, r4
 800a082:	4641      	mov	r1, r8
 800a084:	4638      	mov	r0, r7
 800a086:	47c8      	blx	r9
 800a088:	3001      	adds	r0, #1
 800a08a:	d0e6      	beq.n	800a05a <_printf_common+0xae>
 800a08c:	3601      	adds	r6, #1
 800a08e:	e7d9      	b.n	800a044 <_printf_common+0x98>

0800a090 <_printf_i>:
 800a090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a094:	7e0f      	ldrb	r7, [r1, #24]
 800a096:	4691      	mov	r9, r2
 800a098:	2f78      	cmp	r7, #120	@ 0x78
 800a09a:	4680      	mov	r8, r0
 800a09c:	460c      	mov	r4, r1
 800a09e:	469a      	mov	sl, r3
 800a0a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a0a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a0a6:	d807      	bhi.n	800a0b8 <_printf_i+0x28>
 800a0a8:	2f62      	cmp	r7, #98	@ 0x62
 800a0aa:	d80a      	bhi.n	800a0c2 <_printf_i+0x32>
 800a0ac:	2f00      	cmp	r7, #0
 800a0ae:	f000 80d3 	beq.w	800a258 <_printf_i+0x1c8>
 800a0b2:	2f58      	cmp	r7, #88	@ 0x58
 800a0b4:	f000 80ba 	beq.w	800a22c <_printf_i+0x19c>
 800a0b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a0c0:	e03a      	b.n	800a138 <_printf_i+0xa8>
 800a0c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a0c6:	2b15      	cmp	r3, #21
 800a0c8:	d8f6      	bhi.n	800a0b8 <_printf_i+0x28>
 800a0ca:	a101      	add	r1, pc, #4	@ (adr r1, 800a0d0 <_printf_i+0x40>)
 800a0cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d0:	0800a129 	.word	0x0800a129
 800a0d4:	0800a13d 	.word	0x0800a13d
 800a0d8:	0800a0b9 	.word	0x0800a0b9
 800a0dc:	0800a0b9 	.word	0x0800a0b9
 800a0e0:	0800a0b9 	.word	0x0800a0b9
 800a0e4:	0800a0b9 	.word	0x0800a0b9
 800a0e8:	0800a13d 	.word	0x0800a13d
 800a0ec:	0800a0b9 	.word	0x0800a0b9
 800a0f0:	0800a0b9 	.word	0x0800a0b9
 800a0f4:	0800a0b9 	.word	0x0800a0b9
 800a0f8:	0800a0b9 	.word	0x0800a0b9
 800a0fc:	0800a23f 	.word	0x0800a23f
 800a100:	0800a167 	.word	0x0800a167
 800a104:	0800a1f9 	.word	0x0800a1f9
 800a108:	0800a0b9 	.word	0x0800a0b9
 800a10c:	0800a0b9 	.word	0x0800a0b9
 800a110:	0800a261 	.word	0x0800a261
 800a114:	0800a0b9 	.word	0x0800a0b9
 800a118:	0800a167 	.word	0x0800a167
 800a11c:	0800a0b9 	.word	0x0800a0b9
 800a120:	0800a0b9 	.word	0x0800a0b9
 800a124:	0800a201 	.word	0x0800a201
 800a128:	6833      	ldr	r3, [r6, #0]
 800a12a:	1d1a      	adds	r2, r3, #4
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6032      	str	r2, [r6, #0]
 800a130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a138:	2301      	movs	r3, #1
 800a13a:	e09e      	b.n	800a27a <_printf_i+0x1ea>
 800a13c:	6833      	ldr	r3, [r6, #0]
 800a13e:	6820      	ldr	r0, [r4, #0]
 800a140:	1d19      	adds	r1, r3, #4
 800a142:	6031      	str	r1, [r6, #0]
 800a144:	0606      	lsls	r6, r0, #24
 800a146:	d501      	bpl.n	800a14c <_printf_i+0xbc>
 800a148:	681d      	ldr	r5, [r3, #0]
 800a14a:	e003      	b.n	800a154 <_printf_i+0xc4>
 800a14c:	0645      	lsls	r5, r0, #25
 800a14e:	d5fb      	bpl.n	800a148 <_printf_i+0xb8>
 800a150:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a154:	2d00      	cmp	r5, #0
 800a156:	da03      	bge.n	800a160 <_printf_i+0xd0>
 800a158:	232d      	movs	r3, #45	@ 0x2d
 800a15a:	426d      	negs	r5, r5
 800a15c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a160:	230a      	movs	r3, #10
 800a162:	4859      	ldr	r0, [pc, #356]	@ (800a2c8 <_printf_i+0x238>)
 800a164:	e011      	b.n	800a18a <_printf_i+0xfa>
 800a166:	6821      	ldr	r1, [r4, #0]
 800a168:	6833      	ldr	r3, [r6, #0]
 800a16a:	0608      	lsls	r0, r1, #24
 800a16c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a170:	d402      	bmi.n	800a178 <_printf_i+0xe8>
 800a172:	0649      	lsls	r1, r1, #25
 800a174:	bf48      	it	mi
 800a176:	b2ad      	uxthmi	r5, r5
 800a178:	2f6f      	cmp	r7, #111	@ 0x6f
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	bf14      	ite	ne
 800a17e:	230a      	movne	r3, #10
 800a180:	2308      	moveq	r3, #8
 800a182:	4851      	ldr	r0, [pc, #324]	@ (800a2c8 <_printf_i+0x238>)
 800a184:	2100      	movs	r1, #0
 800a186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a18a:	6866      	ldr	r6, [r4, #4]
 800a18c:	2e00      	cmp	r6, #0
 800a18e:	bfa8      	it	ge
 800a190:	6821      	ldrge	r1, [r4, #0]
 800a192:	60a6      	str	r6, [r4, #8]
 800a194:	bfa4      	itt	ge
 800a196:	f021 0104 	bicge.w	r1, r1, #4
 800a19a:	6021      	strge	r1, [r4, #0]
 800a19c:	b90d      	cbnz	r5, 800a1a2 <_printf_i+0x112>
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d04b      	beq.n	800a23a <_printf_i+0x1aa>
 800a1a2:	4616      	mov	r6, r2
 800a1a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1a8:	fb03 5711 	mls	r7, r3, r1, r5
 800a1ac:	5dc7      	ldrb	r7, [r0, r7]
 800a1ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1b2:	462f      	mov	r7, r5
 800a1b4:	42bb      	cmp	r3, r7
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	d9f4      	bls.n	800a1a4 <_printf_i+0x114>
 800a1ba:	2b08      	cmp	r3, #8
 800a1bc:	d10b      	bne.n	800a1d6 <_printf_i+0x146>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	07df      	lsls	r7, r3, #31
 800a1c2:	d508      	bpl.n	800a1d6 <_printf_i+0x146>
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	6861      	ldr	r1, [r4, #4]
 800a1c8:	4299      	cmp	r1, r3
 800a1ca:	bfde      	ittt	le
 800a1cc:	2330      	movle	r3, #48	@ 0x30
 800a1ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1d6:	1b92      	subs	r2, r2, r6
 800a1d8:	6122      	str	r2, [r4, #16]
 800a1da:	464b      	mov	r3, r9
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4640      	mov	r0, r8
 800a1e0:	f8cd a000 	str.w	sl, [sp]
 800a1e4:	aa03      	add	r2, sp, #12
 800a1e6:	f7ff fee1 	bl	8009fac <_printf_common>
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	d14a      	bne.n	800a284 <_printf_i+0x1f4>
 800a1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f2:	b004      	add	sp, #16
 800a1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	f043 0320 	orr.w	r3, r3, #32
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	2778      	movs	r7, #120	@ 0x78
 800a202:	4832      	ldr	r0, [pc, #200]	@ (800a2cc <_printf_i+0x23c>)
 800a204:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	6831      	ldr	r1, [r6, #0]
 800a20c:	061f      	lsls	r7, r3, #24
 800a20e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a212:	d402      	bmi.n	800a21a <_printf_i+0x18a>
 800a214:	065f      	lsls	r7, r3, #25
 800a216:	bf48      	it	mi
 800a218:	b2ad      	uxthmi	r5, r5
 800a21a:	6031      	str	r1, [r6, #0]
 800a21c:	07d9      	lsls	r1, r3, #31
 800a21e:	bf44      	itt	mi
 800a220:	f043 0320 	orrmi.w	r3, r3, #32
 800a224:	6023      	strmi	r3, [r4, #0]
 800a226:	b11d      	cbz	r5, 800a230 <_printf_i+0x1a0>
 800a228:	2310      	movs	r3, #16
 800a22a:	e7ab      	b.n	800a184 <_printf_i+0xf4>
 800a22c:	4826      	ldr	r0, [pc, #152]	@ (800a2c8 <_printf_i+0x238>)
 800a22e:	e7e9      	b.n	800a204 <_printf_i+0x174>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	f023 0320 	bic.w	r3, r3, #32
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	e7f6      	b.n	800a228 <_printf_i+0x198>
 800a23a:	4616      	mov	r6, r2
 800a23c:	e7bd      	b.n	800a1ba <_printf_i+0x12a>
 800a23e:	6833      	ldr	r3, [r6, #0]
 800a240:	6825      	ldr	r5, [r4, #0]
 800a242:	1d18      	adds	r0, r3, #4
 800a244:	6961      	ldr	r1, [r4, #20]
 800a246:	6030      	str	r0, [r6, #0]
 800a248:	062e      	lsls	r6, r5, #24
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	d501      	bpl.n	800a252 <_printf_i+0x1c2>
 800a24e:	6019      	str	r1, [r3, #0]
 800a250:	e002      	b.n	800a258 <_printf_i+0x1c8>
 800a252:	0668      	lsls	r0, r5, #25
 800a254:	d5fb      	bpl.n	800a24e <_printf_i+0x1be>
 800a256:	8019      	strh	r1, [r3, #0]
 800a258:	2300      	movs	r3, #0
 800a25a:	4616      	mov	r6, r2
 800a25c:	6123      	str	r3, [r4, #16]
 800a25e:	e7bc      	b.n	800a1da <_printf_i+0x14a>
 800a260:	6833      	ldr	r3, [r6, #0]
 800a262:	2100      	movs	r1, #0
 800a264:	1d1a      	adds	r2, r3, #4
 800a266:	6032      	str	r2, [r6, #0]
 800a268:	681e      	ldr	r6, [r3, #0]
 800a26a:	6862      	ldr	r2, [r4, #4]
 800a26c:	4630      	mov	r0, r6
 800a26e:	f000 fb5a 	bl	800a926 <memchr>
 800a272:	b108      	cbz	r0, 800a278 <_printf_i+0x1e8>
 800a274:	1b80      	subs	r0, r0, r6
 800a276:	6060      	str	r0, [r4, #4]
 800a278:	6863      	ldr	r3, [r4, #4]
 800a27a:	6123      	str	r3, [r4, #16]
 800a27c:	2300      	movs	r3, #0
 800a27e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a282:	e7aa      	b.n	800a1da <_printf_i+0x14a>
 800a284:	4632      	mov	r2, r6
 800a286:	4649      	mov	r1, r9
 800a288:	4640      	mov	r0, r8
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	47d0      	blx	sl
 800a28e:	3001      	adds	r0, #1
 800a290:	d0ad      	beq.n	800a1ee <_printf_i+0x15e>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	079b      	lsls	r3, r3, #30
 800a296:	d413      	bmi.n	800a2c0 <_printf_i+0x230>
 800a298:	68e0      	ldr	r0, [r4, #12]
 800a29a:	9b03      	ldr	r3, [sp, #12]
 800a29c:	4298      	cmp	r0, r3
 800a29e:	bfb8      	it	lt
 800a2a0:	4618      	movlt	r0, r3
 800a2a2:	e7a6      	b.n	800a1f2 <_printf_i+0x162>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	47d0      	blx	sl
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	d09d      	beq.n	800a1ee <_printf_i+0x15e>
 800a2b2:	3501      	adds	r5, #1
 800a2b4:	68e3      	ldr	r3, [r4, #12]
 800a2b6:	9903      	ldr	r1, [sp, #12]
 800a2b8:	1a5b      	subs	r3, r3, r1
 800a2ba:	42ab      	cmp	r3, r5
 800a2bc:	dcf2      	bgt.n	800a2a4 <_printf_i+0x214>
 800a2be:	e7eb      	b.n	800a298 <_printf_i+0x208>
 800a2c0:	2500      	movs	r5, #0
 800a2c2:	f104 0619 	add.w	r6, r4, #25
 800a2c6:	e7f5      	b.n	800a2b4 <_printf_i+0x224>
 800a2c8:	0800d44e 	.word	0x0800d44e
 800a2cc:	0800d45f 	.word	0x0800d45f

0800a2d0 <std>:
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	b510      	push	{r4, lr}
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a2da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2de:	6083      	str	r3, [r0, #8]
 800a2e0:	8181      	strh	r1, [r0, #12]
 800a2e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2e4:	81c2      	strh	r2, [r0, #14]
 800a2e6:	6183      	str	r3, [r0, #24]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	2208      	movs	r2, #8
 800a2ec:	305c      	adds	r0, #92	@ 0x5c
 800a2ee:	f000 fa45 	bl	800a77c <memset>
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <std+0x58>)
 800a2f4:	6224      	str	r4, [r4, #32]
 800a2f6:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a32c <std+0x5c>)
 800a2fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a330 <std+0x60>)
 800a2fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a300:	4b0c      	ldr	r3, [pc, #48]	@ (800a334 <std+0x64>)
 800a302:	6323      	str	r3, [r4, #48]	@ 0x30
 800a304:	4b0c      	ldr	r3, [pc, #48]	@ (800a338 <std+0x68>)
 800a306:	429c      	cmp	r4, r3
 800a308:	d006      	beq.n	800a318 <std+0x48>
 800a30a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a30e:	4294      	cmp	r4, r2
 800a310:	d002      	beq.n	800a318 <std+0x48>
 800a312:	33d0      	adds	r3, #208	@ 0xd0
 800a314:	429c      	cmp	r4, r3
 800a316:	d105      	bne.n	800a324 <std+0x54>
 800a318:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a320:	f000 bafe 	b.w	800a920 <__retarget_lock_init_recursive>
 800a324:	bd10      	pop	{r4, pc}
 800a326:	bf00      	nop
 800a328:	0800a5c9 	.word	0x0800a5c9
 800a32c:	0800a5ef 	.word	0x0800a5ef
 800a330:	0800a627 	.word	0x0800a627
 800a334:	0800a64b 	.word	0x0800a64b
 800a338:	20003bb8 	.word	0x20003bb8

0800a33c <stdio_exit_handler>:
 800a33c:	4a02      	ldr	r2, [pc, #8]	@ (800a348 <stdio_exit_handler+0xc>)
 800a33e:	4903      	ldr	r1, [pc, #12]	@ (800a34c <stdio_exit_handler+0x10>)
 800a340:	4803      	ldr	r0, [pc, #12]	@ (800a350 <stdio_exit_handler+0x14>)
 800a342:	f000 b869 	b.w	800a418 <_fwalk_sglue>
 800a346:	bf00      	nop
 800a348:	20000048 	.word	0x20000048
 800a34c:	0800cb59 	.word	0x0800cb59
 800a350:	20000058 	.word	0x20000058

0800a354 <cleanup_stdio>:
 800a354:	6841      	ldr	r1, [r0, #4]
 800a356:	4b0c      	ldr	r3, [pc, #48]	@ (800a388 <cleanup_stdio+0x34>)
 800a358:	b510      	push	{r4, lr}
 800a35a:	4299      	cmp	r1, r3
 800a35c:	4604      	mov	r4, r0
 800a35e:	d001      	beq.n	800a364 <cleanup_stdio+0x10>
 800a360:	f002 fbfa 	bl	800cb58 <_fflush_r>
 800a364:	68a1      	ldr	r1, [r4, #8]
 800a366:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <cleanup_stdio+0x38>)
 800a368:	4299      	cmp	r1, r3
 800a36a:	d002      	beq.n	800a372 <cleanup_stdio+0x1e>
 800a36c:	4620      	mov	r0, r4
 800a36e:	f002 fbf3 	bl	800cb58 <_fflush_r>
 800a372:	68e1      	ldr	r1, [r4, #12]
 800a374:	4b06      	ldr	r3, [pc, #24]	@ (800a390 <cleanup_stdio+0x3c>)
 800a376:	4299      	cmp	r1, r3
 800a378:	d004      	beq.n	800a384 <cleanup_stdio+0x30>
 800a37a:	4620      	mov	r0, r4
 800a37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a380:	f002 bbea 	b.w	800cb58 <_fflush_r>
 800a384:	bd10      	pop	{r4, pc}
 800a386:	bf00      	nop
 800a388:	20003bb8 	.word	0x20003bb8
 800a38c:	20003c20 	.word	0x20003c20
 800a390:	20003c88 	.word	0x20003c88

0800a394 <global_stdio_init.part.0>:
 800a394:	b510      	push	{r4, lr}
 800a396:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c4 <global_stdio_init.part.0+0x30>)
 800a398:	4c0b      	ldr	r4, [pc, #44]	@ (800a3c8 <global_stdio_init.part.0+0x34>)
 800a39a:	4a0c      	ldr	r2, [pc, #48]	@ (800a3cc <global_stdio_init.part.0+0x38>)
 800a39c:	4620      	mov	r0, r4
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	2104      	movs	r1, #4
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f7ff ff94 	bl	800a2d0 <std>
 800a3a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	2109      	movs	r1, #9
 800a3b0:	f7ff ff8e 	bl	800a2d0 <std>
 800a3b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3be:	2112      	movs	r1, #18
 800a3c0:	f7ff bf86 	b.w	800a2d0 <std>
 800a3c4:	20003cf0 	.word	0x20003cf0
 800a3c8:	20003bb8 	.word	0x20003bb8
 800a3cc:	0800a33d 	.word	0x0800a33d

0800a3d0 <__sfp_lock_acquire>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	@ (800a3d8 <__sfp_lock_acquire+0x8>)
 800a3d2:	f000 baa6 	b.w	800a922 <__retarget_lock_acquire_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	20003cf9 	.word	0x20003cf9

0800a3dc <__sfp_lock_release>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	@ (800a3e4 <__sfp_lock_release+0x8>)
 800a3de:	f000 baa1 	b.w	800a924 <__retarget_lock_release_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	20003cf9 	.word	0x20003cf9

0800a3e8 <__sinit>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	f7ff fff0 	bl	800a3d0 <__sfp_lock_acquire>
 800a3f0:	6a23      	ldr	r3, [r4, #32]
 800a3f2:	b11b      	cbz	r3, 800a3fc <__sinit+0x14>
 800a3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f8:	f7ff bff0 	b.w	800a3dc <__sfp_lock_release>
 800a3fc:	4b04      	ldr	r3, [pc, #16]	@ (800a410 <__sinit+0x28>)
 800a3fe:	6223      	str	r3, [r4, #32]
 800a400:	4b04      	ldr	r3, [pc, #16]	@ (800a414 <__sinit+0x2c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f5      	bne.n	800a3f4 <__sinit+0xc>
 800a408:	f7ff ffc4 	bl	800a394 <global_stdio_init.part.0>
 800a40c:	e7f2      	b.n	800a3f4 <__sinit+0xc>
 800a40e:	bf00      	nop
 800a410:	0800a355 	.word	0x0800a355
 800a414:	20003cf0 	.word	0x20003cf0

0800a418 <_fwalk_sglue>:
 800a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a41c:	4607      	mov	r7, r0
 800a41e:	4688      	mov	r8, r1
 800a420:	4614      	mov	r4, r2
 800a422:	2600      	movs	r6, #0
 800a424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a428:	f1b9 0901 	subs.w	r9, r9, #1
 800a42c:	d505      	bpl.n	800a43a <_fwalk_sglue+0x22>
 800a42e:	6824      	ldr	r4, [r4, #0]
 800a430:	2c00      	cmp	r4, #0
 800a432:	d1f7      	bne.n	800a424 <_fwalk_sglue+0xc>
 800a434:	4630      	mov	r0, r6
 800a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d907      	bls.n	800a450 <_fwalk_sglue+0x38>
 800a440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a444:	3301      	adds	r3, #1
 800a446:	d003      	beq.n	800a450 <_fwalk_sglue+0x38>
 800a448:	4629      	mov	r1, r5
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c0      	blx	r8
 800a44e:	4306      	orrs	r6, r0
 800a450:	3568      	adds	r5, #104	@ 0x68
 800a452:	e7e9      	b.n	800a428 <_fwalk_sglue+0x10>

0800a454 <iprintf>:
 800a454:	b40f      	push	{r0, r1, r2, r3}
 800a456:	b507      	push	{r0, r1, r2, lr}
 800a458:	4906      	ldr	r1, [pc, #24]	@ (800a474 <iprintf+0x20>)
 800a45a:	ab04      	add	r3, sp, #16
 800a45c:	6808      	ldr	r0, [r1, #0]
 800a45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a462:	6881      	ldr	r1, [r0, #8]
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	f002 f893 	bl	800c590 <_vfiprintf_r>
 800a46a:	b003      	add	sp, #12
 800a46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a470:	b004      	add	sp, #16
 800a472:	4770      	bx	lr
 800a474:	20000054 	.word	0x20000054

0800a478 <_puts_r>:
 800a478:	6a03      	ldr	r3, [r0, #32]
 800a47a:	b570      	push	{r4, r5, r6, lr}
 800a47c:	4605      	mov	r5, r0
 800a47e:	460e      	mov	r6, r1
 800a480:	6884      	ldr	r4, [r0, #8]
 800a482:	b90b      	cbnz	r3, 800a488 <_puts_r+0x10>
 800a484:	f7ff ffb0 	bl	800a3e8 <__sinit>
 800a488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a48a:	07db      	lsls	r3, r3, #31
 800a48c:	d405      	bmi.n	800a49a <_puts_r+0x22>
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	0598      	lsls	r0, r3, #22
 800a492:	d402      	bmi.n	800a49a <_puts_r+0x22>
 800a494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a496:	f000 fa44 	bl	800a922 <__retarget_lock_acquire_recursive>
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	0719      	lsls	r1, r3, #28
 800a49e:	d502      	bpl.n	800a4a6 <_puts_r+0x2e>
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d135      	bne.n	800a512 <_puts_r+0x9a>
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f000 f911 	bl	800a6d0 <__swsetup_r>
 800a4ae:	b380      	cbz	r0, 800a512 <_puts_r+0x9a>
 800a4b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a4b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4b6:	07da      	lsls	r2, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_puts_r+0x4e>
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	059b      	lsls	r3, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_puts_r+0x4e>
 800a4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4c2:	f000 fa2f 	bl	800a924 <__retarget_lock_release_recursive>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	da04      	bge.n	800a4d8 <_puts_r+0x60>
 800a4ce:	69a2      	ldr	r2, [r4, #24]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	dc17      	bgt.n	800a504 <_puts_r+0x8c>
 800a4d4:	290a      	cmp	r1, #10
 800a4d6:	d015      	beq.n	800a504 <_puts_r+0x8c>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	7019      	strb	r1, [r3, #0]
 800a4e0:	68a3      	ldr	r3, [r4, #8]
 800a4e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	2900      	cmp	r1, #0
 800a4ec:	d1ed      	bne.n	800a4ca <_puts_r+0x52>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	da11      	bge.n	800a516 <_puts_r+0x9e>
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	210a      	movs	r1, #10
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f000 f8ab 	bl	800a652 <__swbuf_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d0d7      	beq.n	800a4b0 <_puts_r+0x38>
 800a500:	250a      	movs	r5, #10
 800a502:	e7d7      	b.n	800a4b4 <_puts_r+0x3c>
 800a504:	4622      	mov	r2, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f000 f8a3 	bl	800a652 <__swbuf_r>
 800a50c:	3001      	adds	r0, #1
 800a50e:	d1e7      	bne.n	800a4e0 <_puts_r+0x68>
 800a510:	e7ce      	b.n	800a4b0 <_puts_r+0x38>
 800a512:	3e01      	subs	r6, #1
 800a514:	e7e4      	b.n	800a4e0 <_puts_r+0x68>
 800a516:	6823      	ldr	r3, [r4, #0]
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	6022      	str	r2, [r4, #0]
 800a51c:	220a      	movs	r2, #10
 800a51e:	701a      	strb	r2, [r3, #0]
 800a520:	e7ee      	b.n	800a500 <_puts_r+0x88>
	...

0800a524 <puts>:
 800a524:	4b02      	ldr	r3, [pc, #8]	@ (800a530 <puts+0xc>)
 800a526:	4601      	mov	r1, r0
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	f7ff bfa5 	b.w	800a478 <_puts_r>
 800a52e:	bf00      	nop
 800a530:	20000054 	.word	0x20000054

0800a534 <siprintf>:
 800a534:	b40e      	push	{r1, r2, r3}
 800a536:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a53a:	b500      	push	{lr}
 800a53c:	b09c      	sub	sp, #112	@ 0x70
 800a53e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a540:	9002      	str	r0, [sp, #8]
 800a542:	9006      	str	r0, [sp, #24]
 800a544:	9107      	str	r1, [sp, #28]
 800a546:	9104      	str	r1, [sp, #16]
 800a548:	4808      	ldr	r0, [pc, #32]	@ (800a56c <siprintf+0x38>)
 800a54a:	4909      	ldr	r1, [pc, #36]	@ (800a570 <siprintf+0x3c>)
 800a54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a550:	9105      	str	r1, [sp, #20]
 800a552:	6800      	ldr	r0, [r0, #0]
 800a554:	a902      	add	r1, sp, #8
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	f001 fd2c 	bl	800bfb4 <_svfiprintf_r>
 800a55c:	2200      	movs	r2, #0
 800a55e:	9b02      	ldr	r3, [sp, #8]
 800a560:	701a      	strb	r2, [r3, #0]
 800a562:	b01c      	add	sp, #112	@ 0x70
 800a564:	f85d eb04 	ldr.w	lr, [sp], #4
 800a568:	b003      	add	sp, #12
 800a56a:	4770      	bx	lr
 800a56c:	20000054 	.word	0x20000054
 800a570:	ffff0208 	.word	0xffff0208

0800a574 <siscanf>:
 800a574:	b40e      	push	{r1, r2, r3}
 800a576:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a57a:	b530      	push	{r4, r5, lr}
 800a57c:	b09c      	sub	sp, #112	@ 0x70
 800a57e:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a580:	f854 5b04 	ldr.w	r5, [r4], #4
 800a584:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a588:	9002      	str	r0, [sp, #8]
 800a58a:	9006      	str	r0, [sp, #24]
 800a58c:	f7f5 fdea 	bl	8000164 <strlen>
 800a590:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c0 <siscanf+0x4c>)
 800a592:	9003      	str	r0, [sp, #12]
 800a594:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a596:	2300      	movs	r3, #0
 800a598:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a59a:	9314      	str	r3, [sp, #80]	@ 0x50
 800a59c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a5a0:	9007      	str	r0, [sp, #28]
 800a5a2:	4808      	ldr	r0, [pc, #32]	@ (800a5c4 <siscanf+0x50>)
 800a5a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	4623      	mov	r3, r4
 800a5ac:	a902      	add	r1, sp, #8
 800a5ae:	6800      	ldr	r0, [r0, #0]
 800a5b0:	9401      	str	r4, [sp, #4]
 800a5b2:	f001 fe53 	bl	800c25c <__ssvfiscanf_r>
 800a5b6:	b01c      	add	sp, #112	@ 0x70
 800a5b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5bc:	b003      	add	sp, #12
 800a5be:	4770      	bx	lr
 800a5c0:	0800a5eb 	.word	0x0800a5eb
 800a5c4:	20000054 	.word	0x20000054

0800a5c8 <__sread>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d0:	f000 f958 	bl	800a884 <_read_r>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	bfab      	itete	ge
 800a5d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5da:	89a3      	ldrhlt	r3, [r4, #12]
 800a5dc:	181b      	addge	r3, r3, r0
 800a5de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5e2:	bfac      	ite	ge
 800a5e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5e6:	81a3      	strhlt	r3, [r4, #12]
 800a5e8:	bd10      	pop	{r4, pc}

0800a5ea <__seofread>:
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	4770      	bx	lr

0800a5ee <__swrite>:
 800a5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f2:	461f      	mov	r7, r3
 800a5f4:	898b      	ldrh	r3, [r1, #12]
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	05db      	lsls	r3, r3, #23
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	4616      	mov	r6, r2
 800a5fe:	d505      	bpl.n	800a60c <__swrite+0x1e>
 800a600:	2302      	movs	r3, #2
 800a602:	2200      	movs	r2, #0
 800a604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a608:	f000 f92a 	bl	800a860 <_lseek_r>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	4632      	mov	r2, r6
 800a610:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a614:	81a3      	strh	r3, [r4, #12]
 800a616:	4628      	mov	r0, r5
 800a618:	463b      	mov	r3, r7
 800a61a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a61e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a622:	f000 b941 	b.w	800a8a8 <_write_r>

0800a626 <__sseek>:
 800a626:	b510      	push	{r4, lr}
 800a628:	460c      	mov	r4, r1
 800a62a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62e:	f000 f917 	bl	800a860 <_lseek_r>
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	89a3      	ldrh	r3, [r4, #12]
 800a636:	bf15      	itete	ne
 800a638:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a63a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a63e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a642:	81a3      	strheq	r3, [r4, #12]
 800a644:	bf18      	it	ne
 800a646:	81a3      	strhne	r3, [r4, #12]
 800a648:	bd10      	pop	{r4, pc}

0800a64a <__sclose>:
 800a64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64e:	f000 b8a1 	b.w	800a794 <_close_r>

0800a652 <__swbuf_r>:
 800a652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a654:	460e      	mov	r6, r1
 800a656:	4614      	mov	r4, r2
 800a658:	4605      	mov	r5, r0
 800a65a:	b118      	cbz	r0, 800a664 <__swbuf_r+0x12>
 800a65c:	6a03      	ldr	r3, [r0, #32]
 800a65e:	b90b      	cbnz	r3, 800a664 <__swbuf_r+0x12>
 800a660:	f7ff fec2 	bl	800a3e8 <__sinit>
 800a664:	69a3      	ldr	r3, [r4, #24]
 800a666:	60a3      	str	r3, [r4, #8]
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	071a      	lsls	r2, r3, #28
 800a66c:	d501      	bpl.n	800a672 <__swbuf_r+0x20>
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	b943      	cbnz	r3, 800a684 <__swbuf_r+0x32>
 800a672:	4621      	mov	r1, r4
 800a674:	4628      	mov	r0, r5
 800a676:	f000 f82b 	bl	800a6d0 <__swsetup_r>
 800a67a:	b118      	cbz	r0, 800a684 <__swbuf_r+0x32>
 800a67c:	f04f 37ff 	mov.w	r7, #4294967295
 800a680:	4638      	mov	r0, r7
 800a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	6922      	ldr	r2, [r4, #16]
 800a688:	b2f6      	uxtb	r6, r6
 800a68a:	1a98      	subs	r0, r3, r2
 800a68c:	6963      	ldr	r3, [r4, #20]
 800a68e:	4637      	mov	r7, r6
 800a690:	4283      	cmp	r3, r0
 800a692:	dc05      	bgt.n	800a6a0 <__swbuf_r+0x4e>
 800a694:	4621      	mov	r1, r4
 800a696:	4628      	mov	r0, r5
 800a698:	f002 fa5e 	bl	800cb58 <_fflush_r>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d1ed      	bne.n	800a67c <__swbuf_r+0x2a>
 800a6a0:	68a3      	ldr	r3, [r4, #8]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	60a3      	str	r3, [r4, #8]
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	701e      	strb	r6, [r3, #0]
 800a6ae:	6962      	ldr	r2, [r4, #20]
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d004      	beq.n	800a6c0 <__swbuf_r+0x6e>
 800a6b6:	89a3      	ldrh	r3, [r4, #12]
 800a6b8:	07db      	lsls	r3, r3, #31
 800a6ba:	d5e1      	bpl.n	800a680 <__swbuf_r+0x2e>
 800a6bc:	2e0a      	cmp	r6, #10
 800a6be:	d1df      	bne.n	800a680 <__swbuf_r+0x2e>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f002 fa48 	bl	800cb58 <_fflush_r>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d0d9      	beq.n	800a680 <__swbuf_r+0x2e>
 800a6cc:	e7d6      	b.n	800a67c <__swbuf_r+0x2a>
	...

0800a6d0 <__swsetup_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4b29      	ldr	r3, [pc, #164]	@ (800a778 <__swsetup_r+0xa8>)
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	6818      	ldr	r0, [r3, #0]
 800a6d8:	460c      	mov	r4, r1
 800a6da:	b118      	cbz	r0, 800a6e4 <__swsetup_r+0x14>
 800a6dc:	6a03      	ldr	r3, [r0, #32]
 800a6de:	b90b      	cbnz	r3, 800a6e4 <__swsetup_r+0x14>
 800a6e0:	f7ff fe82 	bl	800a3e8 <__sinit>
 800a6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e8:	0719      	lsls	r1, r3, #28
 800a6ea:	d422      	bmi.n	800a732 <__swsetup_r+0x62>
 800a6ec:	06da      	lsls	r2, r3, #27
 800a6ee:	d407      	bmi.n	800a700 <__swsetup_r+0x30>
 800a6f0:	2209      	movs	r2, #9
 800a6f2:	602a      	str	r2, [r5, #0]
 800a6f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	e033      	b.n	800a768 <__swsetup_r+0x98>
 800a700:	0758      	lsls	r0, r3, #29
 800a702:	d512      	bpl.n	800a72a <__swsetup_r+0x5a>
 800a704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a706:	b141      	cbz	r1, 800a71a <__swsetup_r+0x4a>
 800a708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a70c:	4299      	cmp	r1, r3
 800a70e:	d002      	beq.n	800a716 <__swsetup_r+0x46>
 800a710:	4628      	mov	r0, r5
 800a712:	f000 ff75 	bl	800b600 <_free_r>
 800a716:	2300      	movs	r3, #0
 800a718:	6363      	str	r3, [r4, #52]	@ 0x34
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	2300      	movs	r3, #0
 800a724:	6063      	str	r3, [r4, #4]
 800a726:	6923      	ldr	r3, [r4, #16]
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f043 0308 	orr.w	r3, r3, #8
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	6923      	ldr	r3, [r4, #16]
 800a734:	b94b      	cbnz	r3, 800a74a <__swsetup_r+0x7a>
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a73c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a740:	d003      	beq.n	800a74a <__swsetup_r+0x7a>
 800a742:	4621      	mov	r1, r4
 800a744:	4628      	mov	r0, r5
 800a746:	f002 fa54 	bl	800cbf2 <__smakebuf_r>
 800a74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74e:	f013 0201 	ands.w	r2, r3, #1
 800a752:	d00a      	beq.n	800a76a <__swsetup_r+0x9a>
 800a754:	2200      	movs	r2, #0
 800a756:	60a2      	str	r2, [r4, #8]
 800a758:	6962      	ldr	r2, [r4, #20]
 800a75a:	4252      	negs	r2, r2
 800a75c:	61a2      	str	r2, [r4, #24]
 800a75e:	6922      	ldr	r2, [r4, #16]
 800a760:	b942      	cbnz	r2, 800a774 <__swsetup_r+0xa4>
 800a762:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a766:	d1c5      	bne.n	800a6f4 <__swsetup_r+0x24>
 800a768:	bd38      	pop	{r3, r4, r5, pc}
 800a76a:	0799      	lsls	r1, r3, #30
 800a76c:	bf58      	it	pl
 800a76e:	6962      	ldrpl	r2, [r4, #20]
 800a770:	60a2      	str	r2, [r4, #8]
 800a772:	e7f4      	b.n	800a75e <__swsetup_r+0x8e>
 800a774:	2000      	movs	r0, #0
 800a776:	e7f7      	b.n	800a768 <__swsetup_r+0x98>
 800a778:	20000054 	.word	0x20000054

0800a77c <memset>:
 800a77c:	4603      	mov	r3, r0
 800a77e:	4402      	add	r2, r0
 800a780:	4293      	cmp	r3, r2
 800a782:	d100      	bne.n	800a786 <memset+0xa>
 800a784:	4770      	bx	lr
 800a786:	f803 1b01 	strb.w	r1, [r3], #1
 800a78a:	e7f9      	b.n	800a780 <memset+0x4>

0800a78c <_localeconv_r>:
 800a78c:	4800      	ldr	r0, [pc, #0]	@ (800a790 <_localeconv_r+0x4>)
 800a78e:	4770      	bx	lr
 800a790:	20000194 	.word	0x20000194

0800a794 <_close_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	2300      	movs	r3, #0
 800a798:	4d05      	ldr	r5, [pc, #20]	@ (800a7b0 <_close_r+0x1c>)
 800a79a:	4604      	mov	r4, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	602b      	str	r3, [r5, #0]
 800a7a0:	f7f7 ffed 	bl	800277e <_close>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d102      	bne.n	800a7ae <_close_r+0x1a>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	b103      	cbz	r3, 800a7ae <_close_r+0x1a>
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	20003cf4 	.word	0x20003cf4

0800a7b4 <_reclaim_reent>:
 800a7b4:	4b29      	ldr	r3, [pc, #164]	@ (800a85c <_reclaim_reent+0xa8>)
 800a7b6:	b570      	push	{r4, r5, r6, lr}
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4283      	cmp	r3, r0
 800a7be:	d04b      	beq.n	800a858 <_reclaim_reent+0xa4>
 800a7c0:	69c3      	ldr	r3, [r0, #28]
 800a7c2:	b1ab      	cbz	r3, 800a7f0 <_reclaim_reent+0x3c>
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	b16b      	cbz	r3, 800a7e4 <_reclaim_reent+0x30>
 800a7c8:	2500      	movs	r5, #0
 800a7ca:	69e3      	ldr	r3, [r4, #28]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	5959      	ldr	r1, [r3, r5]
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	d13b      	bne.n	800a84c <_reclaim_reent+0x98>
 800a7d4:	3504      	adds	r5, #4
 800a7d6:	2d80      	cmp	r5, #128	@ 0x80
 800a7d8:	d1f7      	bne.n	800a7ca <_reclaim_reent+0x16>
 800a7da:	69e3      	ldr	r3, [r4, #28]
 800a7dc:	4620      	mov	r0, r4
 800a7de:	68d9      	ldr	r1, [r3, #12]
 800a7e0:	f000 ff0e 	bl	800b600 <_free_r>
 800a7e4:	69e3      	ldr	r3, [r4, #28]
 800a7e6:	6819      	ldr	r1, [r3, #0]
 800a7e8:	b111      	cbz	r1, 800a7f0 <_reclaim_reent+0x3c>
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 ff08 	bl	800b600 <_free_r>
 800a7f0:	6961      	ldr	r1, [r4, #20]
 800a7f2:	b111      	cbz	r1, 800a7fa <_reclaim_reent+0x46>
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 ff03 	bl	800b600 <_free_r>
 800a7fa:	69e1      	ldr	r1, [r4, #28]
 800a7fc:	b111      	cbz	r1, 800a804 <_reclaim_reent+0x50>
 800a7fe:	4620      	mov	r0, r4
 800a800:	f000 fefe 	bl	800b600 <_free_r>
 800a804:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a806:	b111      	cbz	r1, 800a80e <_reclaim_reent+0x5a>
 800a808:	4620      	mov	r0, r4
 800a80a:	f000 fef9 	bl	800b600 <_free_r>
 800a80e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a810:	b111      	cbz	r1, 800a818 <_reclaim_reent+0x64>
 800a812:	4620      	mov	r0, r4
 800a814:	f000 fef4 	bl	800b600 <_free_r>
 800a818:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a81a:	b111      	cbz	r1, 800a822 <_reclaim_reent+0x6e>
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 feef 	bl	800b600 <_free_r>
 800a822:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a824:	b111      	cbz	r1, 800a82c <_reclaim_reent+0x78>
 800a826:	4620      	mov	r0, r4
 800a828:	f000 feea 	bl	800b600 <_free_r>
 800a82c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a82e:	b111      	cbz	r1, 800a836 <_reclaim_reent+0x82>
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fee5 	bl	800b600 <_free_r>
 800a836:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a838:	b111      	cbz	r1, 800a840 <_reclaim_reent+0x8c>
 800a83a:	4620      	mov	r0, r4
 800a83c:	f000 fee0 	bl	800b600 <_free_r>
 800a840:	6a23      	ldr	r3, [r4, #32]
 800a842:	b14b      	cbz	r3, 800a858 <_reclaim_reent+0xa4>
 800a844:	4620      	mov	r0, r4
 800a846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a84a:	4718      	bx	r3
 800a84c:	680e      	ldr	r6, [r1, #0]
 800a84e:	4620      	mov	r0, r4
 800a850:	f000 fed6 	bl	800b600 <_free_r>
 800a854:	4631      	mov	r1, r6
 800a856:	e7bb      	b.n	800a7d0 <_reclaim_reent+0x1c>
 800a858:	bd70      	pop	{r4, r5, r6, pc}
 800a85a:	bf00      	nop
 800a85c:	20000054 	.word	0x20000054

0800a860 <_lseek_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	2200      	movs	r2, #0
 800a86a:	4d05      	ldr	r5, [pc, #20]	@ (800a880 <_lseek_r+0x20>)
 800a86c:	602a      	str	r2, [r5, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f7f7 ffa9 	bl	80027c6 <_lseek>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_lseek_r+0x1e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_lseek_r+0x1e>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20003cf4 	.word	0x20003cf4

0800a884 <_read_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4604      	mov	r4, r0
 800a888:	4608      	mov	r0, r1
 800a88a:	4611      	mov	r1, r2
 800a88c:	2200      	movs	r2, #0
 800a88e:	4d05      	ldr	r5, [pc, #20]	@ (800a8a4 <_read_r+0x20>)
 800a890:	602a      	str	r2, [r5, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	f7f7 ff3a 	bl	800270c <_read>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_read_r+0x1e>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_read_r+0x1e>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	20003cf4 	.word	0x20003cf4

0800a8a8 <_write_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4d05      	ldr	r5, [pc, #20]	@ (800a8c8 <_write_r+0x20>)
 800a8b4:	602a      	str	r2, [r5, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f7f7 ff45 	bl	8002746 <_write>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_write_r+0x1e>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_write_r+0x1e>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	20003cf4 	.word	0x20003cf4

0800a8cc <__errno>:
 800a8cc:	4b01      	ldr	r3, [pc, #4]	@ (800a8d4 <__errno+0x8>)
 800a8ce:	6818      	ldr	r0, [r3, #0]
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	20000054 	.word	0x20000054

0800a8d8 <__libc_init_array>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	2600      	movs	r6, #0
 800a8dc:	4d0c      	ldr	r5, [pc, #48]	@ (800a910 <__libc_init_array+0x38>)
 800a8de:	4c0d      	ldr	r4, [pc, #52]	@ (800a914 <__libc_init_array+0x3c>)
 800a8e0:	1b64      	subs	r4, r4, r5
 800a8e2:	10a4      	asrs	r4, r4, #2
 800a8e4:	42a6      	cmp	r6, r4
 800a8e6:	d109      	bne.n	800a8fc <__libc_init_array+0x24>
 800a8e8:	f002 fc4e 	bl	800d188 <_init>
 800a8ec:	2600      	movs	r6, #0
 800a8ee:	4d0a      	ldr	r5, [pc, #40]	@ (800a918 <__libc_init_array+0x40>)
 800a8f0:	4c0a      	ldr	r4, [pc, #40]	@ (800a91c <__libc_init_array+0x44>)
 800a8f2:	1b64      	subs	r4, r4, r5
 800a8f4:	10a4      	asrs	r4, r4, #2
 800a8f6:	42a6      	cmp	r6, r4
 800a8f8:	d105      	bne.n	800a906 <__libc_init_array+0x2e>
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}
 800a8fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a900:	4798      	blx	r3
 800a902:	3601      	adds	r6, #1
 800a904:	e7ee      	b.n	800a8e4 <__libc_init_array+0xc>
 800a906:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90a:	4798      	blx	r3
 800a90c:	3601      	adds	r6, #1
 800a90e:	e7f2      	b.n	800a8f6 <__libc_init_array+0x1e>
 800a910:	0800d7d4 	.word	0x0800d7d4
 800a914:	0800d7d4 	.word	0x0800d7d4
 800a918:	0800d7d4 	.word	0x0800d7d4
 800a91c:	0800d7d8 	.word	0x0800d7d8

0800a920 <__retarget_lock_init_recursive>:
 800a920:	4770      	bx	lr

0800a922 <__retarget_lock_acquire_recursive>:
 800a922:	4770      	bx	lr

0800a924 <__retarget_lock_release_recursive>:
 800a924:	4770      	bx	lr

0800a926 <memchr>:
 800a926:	4603      	mov	r3, r0
 800a928:	b510      	push	{r4, lr}
 800a92a:	b2c9      	uxtb	r1, r1
 800a92c:	4402      	add	r2, r0
 800a92e:	4293      	cmp	r3, r2
 800a930:	4618      	mov	r0, r3
 800a932:	d101      	bne.n	800a938 <memchr+0x12>
 800a934:	2000      	movs	r0, #0
 800a936:	e003      	b.n	800a940 <memchr+0x1a>
 800a938:	7804      	ldrb	r4, [r0, #0]
 800a93a:	3301      	adds	r3, #1
 800a93c:	428c      	cmp	r4, r1
 800a93e:	d1f6      	bne.n	800a92e <memchr+0x8>
 800a940:	bd10      	pop	{r4, pc}

0800a942 <memcpy>:
 800a942:	440a      	add	r2, r1
 800a944:	4291      	cmp	r1, r2
 800a946:	f100 33ff 	add.w	r3, r0, #4294967295
 800a94a:	d100      	bne.n	800a94e <memcpy+0xc>
 800a94c:	4770      	bx	lr
 800a94e:	b510      	push	{r4, lr}
 800a950:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a954:	4291      	cmp	r1, r2
 800a956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a95a:	d1f9      	bne.n	800a950 <memcpy+0xe>
 800a95c:	bd10      	pop	{r4, pc}

0800a95e <quorem>:
 800a95e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a962:	6903      	ldr	r3, [r0, #16]
 800a964:	690c      	ldr	r4, [r1, #16]
 800a966:	4607      	mov	r7, r0
 800a968:	42a3      	cmp	r3, r4
 800a96a:	db7e      	blt.n	800aa6a <quorem+0x10c>
 800a96c:	3c01      	subs	r4, #1
 800a96e:	00a3      	lsls	r3, r4, #2
 800a970:	f100 0514 	add.w	r5, r0, #20
 800a974:	f101 0814 	add.w	r8, r1, #20
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a984:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a988:	3301      	adds	r3, #1
 800a98a:	429a      	cmp	r2, r3
 800a98c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a990:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a994:	d32e      	bcc.n	800a9f4 <quorem+0x96>
 800a996:	f04f 0a00 	mov.w	sl, #0
 800a99a:	46c4      	mov	ip, r8
 800a99c:	46ae      	mov	lr, r5
 800a99e:	46d3      	mov	fp, sl
 800a9a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9a4:	b298      	uxth	r0, r3
 800a9a6:	fb06 a000 	mla	r0, r6, r0, sl
 800a9aa:	0c1b      	lsrs	r3, r3, #16
 800a9ac:	0c02      	lsrs	r2, r0, #16
 800a9ae:	fb06 2303 	mla	r3, r6, r3, r2
 800a9b2:	f8de 2000 	ldr.w	r2, [lr]
 800a9b6:	b280      	uxth	r0, r0
 800a9b8:	b292      	uxth	r2, r2
 800a9ba:	1a12      	subs	r2, r2, r0
 800a9bc:	445a      	add	r2, fp
 800a9be:	f8de 0000 	ldr.w	r0, [lr]
 800a9c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a9cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a9d0:	b292      	uxth	r2, r2
 800a9d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9d6:	45e1      	cmp	r9, ip
 800a9d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a9dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a9e0:	d2de      	bcs.n	800a9a0 <quorem+0x42>
 800a9e2:	9b00      	ldr	r3, [sp, #0]
 800a9e4:	58eb      	ldr	r3, [r5, r3]
 800a9e6:	b92b      	cbnz	r3, 800a9f4 <quorem+0x96>
 800a9e8:	9b01      	ldr	r3, [sp, #4]
 800a9ea:	3b04      	subs	r3, #4
 800a9ec:	429d      	cmp	r5, r3
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	d32f      	bcc.n	800aa52 <quorem+0xf4>
 800a9f2:	613c      	str	r4, [r7, #16]
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f001 f979 	bl	800bcec <__mcmp>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	db25      	blt.n	800aa4a <quorem+0xec>
 800a9fe:	4629      	mov	r1, r5
 800aa00:	2000      	movs	r0, #0
 800aa02:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa06:	f8d1 c000 	ldr.w	ip, [r1]
 800aa0a:	fa1f fe82 	uxth.w	lr, r2
 800aa0e:	fa1f f38c 	uxth.w	r3, ip
 800aa12:	eba3 030e 	sub.w	r3, r3, lr
 800aa16:	4403      	add	r3, r0
 800aa18:	0c12      	lsrs	r2, r2, #16
 800aa1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa28:	45c1      	cmp	r9, r8
 800aa2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa2e:	f841 3b04 	str.w	r3, [r1], #4
 800aa32:	d2e6      	bcs.n	800aa02 <quorem+0xa4>
 800aa34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa3c:	b922      	cbnz	r2, 800aa48 <quorem+0xea>
 800aa3e:	3b04      	subs	r3, #4
 800aa40:	429d      	cmp	r5, r3
 800aa42:	461a      	mov	r2, r3
 800aa44:	d30b      	bcc.n	800aa5e <quorem+0x100>
 800aa46:	613c      	str	r4, [r7, #16]
 800aa48:	3601      	adds	r6, #1
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	b003      	add	sp, #12
 800aa4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa52:	6812      	ldr	r2, [r2, #0]
 800aa54:	3b04      	subs	r3, #4
 800aa56:	2a00      	cmp	r2, #0
 800aa58:	d1cb      	bne.n	800a9f2 <quorem+0x94>
 800aa5a:	3c01      	subs	r4, #1
 800aa5c:	e7c6      	b.n	800a9ec <quorem+0x8e>
 800aa5e:	6812      	ldr	r2, [r2, #0]
 800aa60:	3b04      	subs	r3, #4
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	d1ef      	bne.n	800aa46 <quorem+0xe8>
 800aa66:	3c01      	subs	r4, #1
 800aa68:	e7ea      	b.n	800aa40 <quorem+0xe2>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e7ee      	b.n	800aa4c <quorem+0xee>
	...

0800aa70 <_dtoa_r>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	4614      	mov	r4, r2
 800aa76:	461d      	mov	r5, r3
 800aa78:	69c7      	ldr	r7, [r0, #28]
 800aa7a:	b097      	sub	sp, #92	@ 0x5c
 800aa7c:	4683      	mov	fp, r0
 800aa7e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aa82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800aa84:	b97f      	cbnz	r7, 800aaa6 <_dtoa_r+0x36>
 800aa86:	2010      	movs	r0, #16
 800aa88:	f000 fe02 	bl	800b690 <malloc>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	f8cb 001c 	str.w	r0, [fp, #28]
 800aa92:	b920      	cbnz	r0, 800aa9e <_dtoa_r+0x2e>
 800aa94:	21ef      	movs	r1, #239	@ 0xef
 800aa96:	4ba8      	ldr	r3, [pc, #672]	@ (800ad38 <_dtoa_r+0x2c8>)
 800aa98:	48a8      	ldr	r0, [pc, #672]	@ (800ad3c <_dtoa_r+0x2cc>)
 800aa9a:	f002 f9a3 	bl	800cde4 <__assert_func>
 800aa9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aaa2:	6007      	str	r7, [r0, #0]
 800aaa4:	60c7      	str	r7, [r0, #12]
 800aaa6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aaaa:	6819      	ldr	r1, [r3, #0]
 800aaac:	b159      	cbz	r1, 800aac6 <_dtoa_r+0x56>
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	2301      	movs	r3, #1
 800aab2:	4093      	lsls	r3, r2
 800aab4:	604a      	str	r2, [r1, #4]
 800aab6:	608b      	str	r3, [r1, #8]
 800aab8:	4658      	mov	r0, fp
 800aaba:	f000 fedf 	bl	800b87c <_Bfree>
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aac4:	601a      	str	r2, [r3, #0]
 800aac6:	1e2b      	subs	r3, r5, #0
 800aac8:	bfaf      	iteee	ge
 800aaca:	2300      	movge	r3, #0
 800aacc:	2201      	movlt	r2, #1
 800aace:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aad2:	9303      	strlt	r3, [sp, #12]
 800aad4:	bfa8      	it	ge
 800aad6:	6033      	strge	r3, [r6, #0]
 800aad8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aadc:	4b98      	ldr	r3, [pc, #608]	@ (800ad40 <_dtoa_r+0x2d0>)
 800aade:	bfb8      	it	lt
 800aae0:	6032      	strlt	r2, [r6, #0]
 800aae2:	ea33 0308 	bics.w	r3, r3, r8
 800aae6:	d112      	bne.n	800ab0e <_dtoa_r+0x9e>
 800aae8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aaec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aaf4:	4323      	orrs	r3, r4
 800aaf6:	f000 8550 	beq.w	800b59a <_dtoa_r+0xb2a>
 800aafa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aafc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800ad44 <_dtoa_r+0x2d4>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 8552 	beq.w	800b5aa <_dtoa_r+0xb3a>
 800ab06:	f10a 0303 	add.w	r3, sl, #3
 800ab0a:	f000 bd4c 	b.w	800b5a6 <_dtoa_r+0xb36>
 800ab0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f7f5 ff4d 	bl	80009bc <__aeabi_dcmpeq>
 800ab22:	4607      	mov	r7, r0
 800ab24:	b158      	cbz	r0, 800ab3e <_dtoa_r+0xce>
 800ab26:	2301      	movs	r3, #1
 800ab28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ab2e:	b113      	cbz	r3, 800ab36 <_dtoa_r+0xc6>
 800ab30:	4b85      	ldr	r3, [pc, #532]	@ (800ad48 <_dtoa_r+0x2d8>)
 800ab32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800ad4c <_dtoa_r+0x2dc>
 800ab3a:	f000 bd36 	b.w	800b5aa <_dtoa_r+0xb3a>
 800ab3e:	ab14      	add	r3, sp, #80	@ 0x50
 800ab40:	9301      	str	r3, [sp, #4]
 800ab42:	ab15      	add	r3, sp, #84	@ 0x54
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	4658      	mov	r0, fp
 800ab48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ab4c:	f001 f97e 	bl	800be4c <__d2b>
 800ab50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ab54:	4681      	mov	r9, r0
 800ab56:	2e00      	cmp	r6, #0
 800ab58:	d077      	beq.n	800ac4a <_dtoa_r+0x1da>
 800ab5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab70:	9712      	str	r7, [sp, #72]	@ 0x48
 800ab72:	4619      	mov	r1, r3
 800ab74:	2200      	movs	r2, #0
 800ab76:	4b76      	ldr	r3, [pc, #472]	@ (800ad50 <_dtoa_r+0x2e0>)
 800ab78:	f7f5 fb00 	bl	800017c <__aeabi_dsub>
 800ab7c:	a368      	add	r3, pc, #416	@ (adr r3, 800ad20 <_dtoa_r+0x2b0>)
 800ab7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab82:	f7f5 fcb3 	bl	80004ec <__aeabi_dmul>
 800ab86:	a368      	add	r3, pc, #416	@ (adr r3, 800ad28 <_dtoa_r+0x2b8>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 faf8 	bl	8000180 <__adddf3>
 800ab90:	4604      	mov	r4, r0
 800ab92:	4630      	mov	r0, r6
 800ab94:	460d      	mov	r5, r1
 800ab96:	f7f5 fc3f 	bl	8000418 <__aeabi_i2d>
 800ab9a:	a365      	add	r3, pc, #404	@ (adr r3, 800ad30 <_dtoa_r+0x2c0>)
 800ab9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba0:	f7f5 fca4 	bl	80004ec <__aeabi_dmul>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4620      	mov	r0, r4
 800abaa:	4629      	mov	r1, r5
 800abac:	f7f5 fae8 	bl	8000180 <__adddf3>
 800abb0:	4604      	mov	r4, r0
 800abb2:	460d      	mov	r5, r1
 800abb4:	f7f5 ff4a 	bl	8000a4c <__aeabi_d2iz>
 800abb8:	2200      	movs	r2, #0
 800abba:	4607      	mov	r7, r0
 800abbc:	2300      	movs	r3, #0
 800abbe:	4620      	mov	r0, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	f7f5 ff05 	bl	80009d0 <__aeabi_dcmplt>
 800abc6:	b140      	cbz	r0, 800abda <_dtoa_r+0x16a>
 800abc8:	4638      	mov	r0, r7
 800abca:	f7f5 fc25 	bl	8000418 <__aeabi_i2d>
 800abce:	4622      	mov	r2, r4
 800abd0:	462b      	mov	r3, r5
 800abd2:	f7f5 fef3 	bl	80009bc <__aeabi_dcmpeq>
 800abd6:	b900      	cbnz	r0, 800abda <_dtoa_r+0x16a>
 800abd8:	3f01      	subs	r7, #1
 800abda:	2f16      	cmp	r7, #22
 800abdc:	d853      	bhi.n	800ac86 <_dtoa_r+0x216>
 800abde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abe2:	4b5c      	ldr	r3, [pc, #368]	@ (800ad54 <_dtoa_r+0x2e4>)
 800abe4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	f7f5 fef0 	bl	80009d0 <__aeabi_dcmplt>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d04a      	beq.n	800ac8a <_dtoa_r+0x21a>
 800abf4:	2300      	movs	r3, #0
 800abf6:	3f01      	subs	r7, #1
 800abf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abfa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abfc:	1b9b      	subs	r3, r3, r6
 800abfe:	1e5a      	subs	r2, r3, #1
 800ac00:	bf46      	itte	mi
 800ac02:	f1c3 0801 	rsbmi	r8, r3, #1
 800ac06:	2300      	movmi	r3, #0
 800ac08:	f04f 0800 	movpl.w	r8, #0
 800ac0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac0e:	bf48      	it	mi
 800ac10:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ac12:	2f00      	cmp	r7, #0
 800ac14:	db3b      	blt.n	800ac8e <_dtoa_r+0x21e>
 800ac16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac18:	970e      	str	r7, [sp, #56]	@ 0x38
 800ac1a:	443b      	add	r3, r7
 800ac1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac1e:	2300      	movs	r3, #0
 800ac20:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac24:	2b09      	cmp	r3, #9
 800ac26:	d866      	bhi.n	800acf6 <_dtoa_r+0x286>
 800ac28:	2b05      	cmp	r3, #5
 800ac2a:	bfc4      	itt	gt
 800ac2c:	3b04      	subgt	r3, #4
 800ac2e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ac30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ac32:	bfc8      	it	gt
 800ac34:	2400      	movgt	r4, #0
 800ac36:	f1a3 0302 	sub.w	r3, r3, #2
 800ac3a:	bfd8      	it	le
 800ac3c:	2401      	movle	r4, #1
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d864      	bhi.n	800ad0c <_dtoa_r+0x29c>
 800ac42:	e8df f003 	tbb	[pc, r3]
 800ac46:	382b      	.short	0x382b
 800ac48:	5636      	.short	0x5636
 800ac4a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ac4e:	441e      	add	r6, r3
 800ac50:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ac54:	2b20      	cmp	r3, #32
 800ac56:	bfc1      	itttt	gt
 800ac58:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ac5c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ac60:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac64:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac68:	bfd6      	itet	le
 800ac6a:	f1c3 0320 	rsble	r3, r3, #32
 800ac6e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ac72:	fa04 f003 	lslle.w	r0, r4, r3
 800ac76:	f7f5 fbbf 	bl	80003f8 <__aeabi_ui2d>
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac80:	3e01      	subs	r6, #1
 800ac82:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac84:	e775      	b.n	800ab72 <_dtoa_r+0x102>
 800ac86:	2301      	movs	r3, #1
 800ac88:	e7b6      	b.n	800abf8 <_dtoa_r+0x188>
 800ac8a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ac8c:	e7b5      	b.n	800abfa <_dtoa_r+0x18a>
 800ac8e:	427b      	negs	r3, r7
 800ac90:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac92:	2300      	movs	r3, #0
 800ac94:	eba8 0807 	sub.w	r8, r8, r7
 800ac98:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac9a:	e7c2      	b.n	800ac22 <_dtoa_r+0x1b2>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aca0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dc35      	bgt.n	800ad12 <_dtoa_r+0x2a2>
 800aca6:	2301      	movs	r3, #1
 800aca8:	461a      	mov	r2, r3
 800acaa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800acae:	9221      	str	r2, [sp, #132]	@ 0x84
 800acb0:	e00b      	b.n	800acca <_dtoa_r+0x25a>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e7f3      	b.n	800ac9e <_dtoa_r+0x22e>
 800acb6:	2300      	movs	r3, #0
 800acb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800acbc:	18fb      	adds	r3, r7, r3
 800acbe:	9308      	str	r3, [sp, #32]
 800acc0:	3301      	adds	r3, #1
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	9307      	str	r3, [sp, #28]
 800acc6:	bfb8      	it	lt
 800acc8:	2301      	movlt	r3, #1
 800acca:	2100      	movs	r1, #0
 800accc:	2204      	movs	r2, #4
 800acce:	f8db 001c 	ldr.w	r0, [fp, #28]
 800acd2:	f102 0514 	add.w	r5, r2, #20
 800acd6:	429d      	cmp	r5, r3
 800acd8:	d91f      	bls.n	800ad1a <_dtoa_r+0x2aa>
 800acda:	6041      	str	r1, [r0, #4]
 800acdc:	4658      	mov	r0, fp
 800acde:	f000 fd8d 	bl	800b7fc <_Balloc>
 800ace2:	4682      	mov	sl, r0
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d139      	bne.n	800ad5c <_dtoa_r+0x2ec>
 800ace8:	4602      	mov	r2, r0
 800acea:	f240 11af 	movw	r1, #431	@ 0x1af
 800acee:	4b1a      	ldr	r3, [pc, #104]	@ (800ad58 <_dtoa_r+0x2e8>)
 800acf0:	e6d2      	b.n	800aa98 <_dtoa_r+0x28>
 800acf2:	2301      	movs	r3, #1
 800acf4:	e7e0      	b.n	800acb8 <_dtoa_r+0x248>
 800acf6:	2401      	movs	r4, #1
 800acf8:	2300      	movs	r3, #0
 800acfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800acfc:	9320      	str	r3, [sp, #128]	@ 0x80
 800acfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ad02:	2200      	movs	r2, #0
 800ad04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ad08:	2312      	movs	r3, #18
 800ad0a:	e7d0      	b.n	800acae <_dtoa_r+0x23e>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad10:	e7f5      	b.n	800acfe <_dtoa_r+0x28e>
 800ad12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800ad18:	e7d7      	b.n	800acca <_dtoa_r+0x25a>
 800ad1a:	3101      	adds	r1, #1
 800ad1c:	0052      	lsls	r2, r2, #1
 800ad1e:	e7d8      	b.n	800acd2 <_dtoa_r+0x262>
 800ad20:	636f4361 	.word	0x636f4361
 800ad24:	3fd287a7 	.word	0x3fd287a7
 800ad28:	8b60c8b3 	.word	0x8b60c8b3
 800ad2c:	3fc68a28 	.word	0x3fc68a28
 800ad30:	509f79fb 	.word	0x509f79fb
 800ad34:	3fd34413 	.word	0x3fd34413
 800ad38:	0800d47d 	.word	0x0800d47d
 800ad3c:	0800d494 	.word	0x0800d494
 800ad40:	7ff00000 	.word	0x7ff00000
 800ad44:	0800d479 	.word	0x0800d479
 800ad48:	0800d680 	.word	0x0800d680
 800ad4c:	0800d67f 	.word	0x0800d67f
 800ad50:	3ff80000 	.word	0x3ff80000
 800ad54:	0800d590 	.word	0x0800d590
 800ad58:	0800d4ec 	.word	0x0800d4ec
 800ad5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad60:	6018      	str	r0, [r3, #0]
 800ad62:	9b07      	ldr	r3, [sp, #28]
 800ad64:	2b0e      	cmp	r3, #14
 800ad66:	f200 80a4 	bhi.w	800aeb2 <_dtoa_r+0x442>
 800ad6a:	2c00      	cmp	r4, #0
 800ad6c:	f000 80a1 	beq.w	800aeb2 <_dtoa_r+0x442>
 800ad70:	2f00      	cmp	r7, #0
 800ad72:	dd33      	ble.n	800addc <_dtoa_r+0x36c>
 800ad74:	4b86      	ldr	r3, [pc, #536]	@ (800af90 <_dtoa_r+0x520>)
 800ad76:	f007 020f 	and.w	r2, r7, #15
 800ad7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad7e:	05f8      	lsls	r0, r7, #23
 800ad80:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad84:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad8c:	d516      	bpl.n	800adbc <_dtoa_r+0x34c>
 800ad8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad92:	4b80      	ldr	r3, [pc, #512]	@ (800af94 <_dtoa_r+0x524>)
 800ad94:	2603      	movs	r6, #3
 800ad96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad9a:	f7f5 fcd1 	bl	8000740 <__aeabi_ddiv>
 800ad9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada2:	f004 040f 	and.w	r4, r4, #15
 800ada6:	4d7b      	ldr	r5, [pc, #492]	@ (800af94 <_dtoa_r+0x524>)
 800ada8:	b954      	cbnz	r4, 800adc0 <_dtoa_r+0x350>
 800adaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adb2:	f7f5 fcc5 	bl	8000740 <__aeabi_ddiv>
 800adb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adba:	e028      	b.n	800ae0e <_dtoa_r+0x39e>
 800adbc:	2602      	movs	r6, #2
 800adbe:	e7f2      	b.n	800ada6 <_dtoa_r+0x336>
 800adc0:	07e1      	lsls	r1, r4, #31
 800adc2:	d508      	bpl.n	800add6 <_dtoa_r+0x366>
 800adc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800adcc:	f7f5 fb8e 	bl	80004ec <__aeabi_dmul>
 800add0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800add4:	3601      	adds	r6, #1
 800add6:	1064      	asrs	r4, r4, #1
 800add8:	3508      	adds	r5, #8
 800adda:	e7e5      	b.n	800ada8 <_dtoa_r+0x338>
 800addc:	f000 80d2 	beq.w	800af84 <_dtoa_r+0x514>
 800ade0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ade4:	427c      	negs	r4, r7
 800ade6:	4b6a      	ldr	r3, [pc, #424]	@ (800af90 <_dtoa_r+0x520>)
 800ade8:	f004 020f 	and.w	r2, r4, #15
 800adec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	f7f5 fb7a 	bl	80004ec <__aeabi_dmul>
 800adf8:	2602      	movs	r6, #2
 800adfa:	2300      	movs	r3, #0
 800adfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae00:	4d64      	ldr	r5, [pc, #400]	@ (800af94 <_dtoa_r+0x524>)
 800ae02:	1124      	asrs	r4, r4, #4
 800ae04:	2c00      	cmp	r4, #0
 800ae06:	f040 80b2 	bne.w	800af6e <_dtoa_r+0x4fe>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1d3      	bne.n	800adb6 <_dtoa_r+0x346>
 800ae0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f000 80b7 	beq.w	800af88 <_dtoa_r+0x518>
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	4629      	mov	r1, r5
 800ae20:	4b5d      	ldr	r3, [pc, #372]	@ (800af98 <_dtoa_r+0x528>)
 800ae22:	f7f5 fdd5 	bl	80009d0 <__aeabi_dcmplt>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f000 80ae 	beq.w	800af88 <_dtoa_r+0x518>
 800ae2c:	9b07      	ldr	r3, [sp, #28]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 80aa 	beq.w	800af88 <_dtoa_r+0x518>
 800ae34:	9b08      	ldr	r3, [sp, #32]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dd37      	ble.n	800aeaa <_dtoa_r+0x43a>
 800ae3a:	1e7b      	subs	r3, r7, #1
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	2200      	movs	r2, #0
 800ae42:	4629      	mov	r1, r5
 800ae44:	4b55      	ldr	r3, [pc, #340]	@ (800af9c <_dtoa_r+0x52c>)
 800ae46:	f7f5 fb51 	bl	80004ec <__aeabi_dmul>
 800ae4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae4e:	9c08      	ldr	r4, [sp, #32]
 800ae50:	3601      	adds	r6, #1
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7f5 fae0 	bl	8000418 <__aeabi_i2d>
 800ae58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae5c:	f7f5 fb46 	bl	80004ec <__aeabi_dmul>
 800ae60:	2200      	movs	r2, #0
 800ae62:	4b4f      	ldr	r3, [pc, #316]	@ (800afa0 <_dtoa_r+0x530>)
 800ae64:	f7f5 f98c 	bl	8000180 <__adddf3>
 800ae68:	4605      	mov	r5, r0
 800ae6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae6e:	2c00      	cmp	r4, #0
 800ae70:	f040 809a 	bne.w	800afa8 <_dtoa_r+0x538>
 800ae74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	4b4a      	ldr	r3, [pc, #296]	@ (800afa4 <_dtoa_r+0x534>)
 800ae7c:	f7f5 f97e 	bl	800017c <__aeabi_dsub>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae88:	462a      	mov	r2, r5
 800ae8a:	4633      	mov	r3, r6
 800ae8c:	f7f5 fdbe 	bl	8000a0c <__aeabi_dcmpgt>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	f040 828e 	bne.w	800b3b2 <_dtoa_r+0x942>
 800ae96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aea0:	f7f5 fd96 	bl	80009d0 <__aeabi_dcmplt>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	f040 8127 	bne.w	800b0f8 <_dtoa_r+0x688>
 800aeaa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aeae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aeb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f2c0 8163 	blt.w	800b180 <_dtoa_r+0x710>
 800aeba:	2f0e      	cmp	r7, #14
 800aebc:	f300 8160 	bgt.w	800b180 <_dtoa_r+0x710>
 800aec0:	4b33      	ldr	r3, [pc, #204]	@ (800af90 <_dtoa_r+0x520>)
 800aec2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aeca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aece:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	da03      	bge.n	800aedc <_dtoa_r+0x46c>
 800aed4:	9b07      	ldr	r3, [sp, #28]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f340 8100 	ble.w	800b0dc <_dtoa_r+0x66c>
 800aedc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aee0:	4656      	mov	r6, sl
 800aee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 fc29 	bl	8000740 <__aeabi_ddiv>
 800aeee:	f7f5 fdad 	bl	8000a4c <__aeabi_d2iz>
 800aef2:	4680      	mov	r8, r0
 800aef4:	f7f5 fa90 	bl	8000418 <__aeabi_i2d>
 800aef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aefc:	f7f5 faf6 	bl	80004ec <__aeabi_dmul>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	4620      	mov	r0, r4
 800af06:	4629      	mov	r1, r5
 800af08:	f7f5 f938 	bl	800017c <__aeabi_dsub>
 800af0c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af10:	9d07      	ldr	r5, [sp, #28]
 800af12:	f806 4b01 	strb.w	r4, [r6], #1
 800af16:	eba6 040a 	sub.w	r4, r6, sl
 800af1a:	42a5      	cmp	r5, r4
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	f040 8116 	bne.w	800b150 <_dtoa_r+0x6e0>
 800af24:	f7f5 f92c 	bl	8000180 <__adddf3>
 800af28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af2c:	4604      	mov	r4, r0
 800af2e:	460d      	mov	r5, r1
 800af30:	f7f5 fd6c 	bl	8000a0c <__aeabi_dcmpgt>
 800af34:	2800      	cmp	r0, #0
 800af36:	f040 80f8 	bne.w	800b12a <_dtoa_r+0x6ba>
 800af3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af3e:	4620      	mov	r0, r4
 800af40:	4629      	mov	r1, r5
 800af42:	f7f5 fd3b 	bl	80009bc <__aeabi_dcmpeq>
 800af46:	b118      	cbz	r0, 800af50 <_dtoa_r+0x4e0>
 800af48:	f018 0f01 	tst.w	r8, #1
 800af4c:	f040 80ed 	bne.w	800b12a <_dtoa_r+0x6ba>
 800af50:	4649      	mov	r1, r9
 800af52:	4658      	mov	r0, fp
 800af54:	f000 fc92 	bl	800b87c <_Bfree>
 800af58:	2300      	movs	r3, #0
 800af5a:	7033      	strb	r3, [r6, #0]
 800af5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af5e:	3701      	adds	r7, #1
 800af60:	601f      	str	r7, [r3, #0]
 800af62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 8320 	beq.w	800b5aa <_dtoa_r+0xb3a>
 800af6a:	601e      	str	r6, [r3, #0]
 800af6c:	e31d      	b.n	800b5aa <_dtoa_r+0xb3a>
 800af6e:	07e2      	lsls	r2, r4, #31
 800af70:	d505      	bpl.n	800af7e <_dtoa_r+0x50e>
 800af72:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af76:	f7f5 fab9 	bl	80004ec <__aeabi_dmul>
 800af7a:	2301      	movs	r3, #1
 800af7c:	3601      	adds	r6, #1
 800af7e:	1064      	asrs	r4, r4, #1
 800af80:	3508      	adds	r5, #8
 800af82:	e73f      	b.n	800ae04 <_dtoa_r+0x394>
 800af84:	2602      	movs	r6, #2
 800af86:	e742      	b.n	800ae0e <_dtoa_r+0x39e>
 800af88:	9c07      	ldr	r4, [sp, #28]
 800af8a:	9704      	str	r7, [sp, #16]
 800af8c:	e761      	b.n	800ae52 <_dtoa_r+0x3e2>
 800af8e:	bf00      	nop
 800af90:	0800d590 	.word	0x0800d590
 800af94:	0800d568 	.word	0x0800d568
 800af98:	3ff00000 	.word	0x3ff00000
 800af9c:	40240000 	.word	0x40240000
 800afa0:	401c0000 	.word	0x401c0000
 800afa4:	40140000 	.word	0x40140000
 800afa8:	4b70      	ldr	r3, [pc, #448]	@ (800b16c <_dtoa_r+0x6fc>)
 800afaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800afb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800afb4:	4454      	add	r4, sl
 800afb6:	2900      	cmp	r1, #0
 800afb8:	d045      	beq.n	800b046 <_dtoa_r+0x5d6>
 800afba:	2000      	movs	r0, #0
 800afbc:	496c      	ldr	r1, [pc, #432]	@ (800b170 <_dtoa_r+0x700>)
 800afbe:	f7f5 fbbf 	bl	8000740 <__aeabi_ddiv>
 800afc2:	4633      	mov	r3, r6
 800afc4:	462a      	mov	r2, r5
 800afc6:	f7f5 f8d9 	bl	800017c <__aeabi_dsub>
 800afca:	4656      	mov	r6, sl
 800afcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800afd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd4:	f7f5 fd3a 	bl	8000a4c <__aeabi_d2iz>
 800afd8:	4605      	mov	r5, r0
 800afda:	f7f5 fa1d 	bl	8000418 <__aeabi_i2d>
 800afde:	4602      	mov	r2, r0
 800afe0:	460b      	mov	r3, r1
 800afe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe6:	f7f5 f8c9 	bl	800017c <__aeabi_dsub>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	3530      	adds	r5, #48	@ 0x30
 800aff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aff4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aff8:	f806 5b01 	strb.w	r5, [r6], #1
 800affc:	f7f5 fce8 	bl	80009d0 <__aeabi_dcmplt>
 800b000:	2800      	cmp	r0, #0
 800b002:	d163      	bne.n	800b0cc <_dtoa_r+0x65c>
 800b004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b008:	2000      	movs	r0, #0
 800b00a:	495a      	ldr	r1, [pc, #360]	@ (800b174 <_dtoa_r+0x704>)
 800b00c:	f7f5 f8b6 	bl	800017c <__aeabi_dsub>
 800b010:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b014:	f7f5 fcdc 	bl	80009d0 <__aeabi_dcmplt>
 800b018:	2800      	cmp	r0, #0
 800b01a:	f040 8087 	bne.w	800b12c <_dtoa_r+0x6bc>
 800b01e:	42a6      	cmp	r6, r4
 800b020:	f43f af43 	beq.w	800aeaa <_dtoa_r+0x43a>
 800b024:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b028:	2200      	movs	r2, #0
 800b02a:	4b53      	ldr	r3, [pc, #332]	@ (800b178 <_dtoa_r+0x708>)
 800b02c:	f7f5 fa5e 	bl	80004ec <__aeabi_dmul>
 800b030:	2200      	movs	r2, #0
 800b032:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b03a:	4b4f      	ldr	r3, [pc, #316]	@ (800b178 <_dtoa_r+0x708>)
 800b03c:	f7f5 fa56 	bl	80004ec <__aeabi_dmul>
 800b040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b044:	e7c4      	b.n	800afd0 <_dtoa_r+0x560>
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	f7f5 fa4f 	bl	80004ec <__aeabi_dmul>
 800b04e:	4656      	mov	r6, sl
 800b050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b054:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b05a:	f7f5 fcf7 	bl	8000a4c <__aeabi_d2iz>
 800b05e:	4605      	mov	r5, r0
 800b060:	f7f5 f9da 	bl	8000418 <__aeabi_i2d>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b06c:	f7f5 f886 	bl	800017c <__aeabi_dsub>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	3530      	adds	r5, #48	@ 0x30
 800b076:	f806 5b01 	strb.w	r5, [r6], #1
 800b07a:	42a6      	cmp	r6, r4
 800b07c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b080:	f04f 0200 	mov.w	r2, #0
 800b084:	d124      	bne.n	800b0d0 <_dtoa_r+0x660>
 800b086:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b08a:	4b39      	ldr	r3, [pc, #228]	@ (800b170 <_dtoa_r+0x700>)
 800b08c:	f7f5 f878 	bl	8000180 <__adddf3>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b098:	f7f5 fcb8 	bl	8000a0c <__aeabi_dcmpgt>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d145      	bne.n	800b12c <_dtoa_r+0x6bc>
 800b0a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	4932      	ldr	r1, [pc, #200]	@ (800b170 <_dtoa_r+0x700>)
 800b0a8:	f7f5 f868 	bl	800017c <__aeabi_dsub>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0b4:	f7f5 fc8c 	bl	80009d0 <__aeabi_dcmplt>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	f43f aef6 	beq.w	800aeaa <_dtoa_r+0x43a>
 800b0be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b0c0:	1e73      	subs	r3, r6, #1
 800b0c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0c8:	2b30      	cmp	r3, #48	@ 0x30
 800b0ca:	d0f8      	beq.n	800b0be <_dtoa_r+0x64e>
 800b0cc:	9f04      	ldr	r7, [sp, #16]
 800b0ce:	e73f      	b.n	800af50 <_dtoa_r+0x4e0>
 800b0d0:	4b29      	ldr	r3, [pc, #164]	@ (800b178 <_dtoa_r+0x708>)
 800b0d2:	f7f5 fa0b 	bl	80004ec <__aeabi_dmul>
 800b0d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0da:	e7bc      	b.n	800b056 <_dtoa_r+0x5e6>
 800b0dc:	d10c      	bne.n	800b0f8 <_dtoa_r+0x688>
 800b0de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4b25      	ldr	r3, [pc, #148]	@ (800b17c <_dtoa_r+0x70c>)
 800b0e6:	f7f5 fa01 	bl	80004ec <__aeabi_dmul>
 800b0ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0ee:	f7f5 fc83 	bl	80009f8 <__aeabi_dcmpge>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	f000 815b 	beq.w	800b3ae <_dtoa_r+0x93e>
 800b0f8:	2400      	movs	r4, #0
 800b0fa:	4625      	mov	r5, r4
 800b0fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0fe:	4656      	mov	r6, sl
 800b100:	43db      	mvns	r3, r3
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	2700      	movs	r7, #0
 800b106:	4621      	mov	r1, r4
 800b108:	4658      	mov	r0, fp
 800b10a:	f000 fbb7 	bl	800b87c <_Bfree>
 800b10e:	2d00      	cmp	r5, #0
 800b110:	d0dc      	beq.n	800b0cc <_dtoa_r+0x65c>
 800b112:	b12f      	cbz	r7, 800b120 <_dtoa_r+0x6b0>
 800b114:	42af      	cmp	r7, r5
 800b116:	d003      	beq.n	800b120 <_dtoa_r+0x6b0>
 800b118:	4639      	mov	r1, r7
 800b11a:	4658      	mov	r0, fp
 800b11c:	f000 fbae 	bl	800b87c <_Bfree>
 800b120:	4629      	mov	r1, r5
 800b122:	4658      	mov	r0, fp
 800b124:	f000 fbaa 	bl	800b87c <_Bfree>
 800b128:	e7d0      	b.n	800b0cc <_dtoa_r+0x65c>
 800b12a:	9704      	str	r7, [sp, #16]
 800b12c:	4633      	mov	r3, r6
 800b12e:	461e      	mov	r6, r3
 800b130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b134:	2a39      	cmp	r2, #57	@ 0x39
 800b136:	d107      	bne.n	800b148 <_dtoa_r+0x6d8>
 800b138:	459a      	cmp	sl, r3
 800b13a:	d1f8      	bne.n	800b12e <_dtoa_r+0x6be>
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	3201      	adds	r2, #1
 800b140:	9204      	str	r2, [sp, #16]
 800b142:	2230      	movs	r2, #48	@ 0x30
 800b144:	f88a 2000 	strb.w	r2, [sl]
 800b148:	781a      	ldrb	r2, [r3, #0]
 800b14a:	3201      	adds	r2, #1
 800b14c:	701a      	strb	r2, [r3, #0]
 800b14e:	e7bd      	b.n	800b0cc <_dtoa_r+0x65c>
 800b150:	2200      	movs	r2, #0
 800b152:	4b09      	ldr	r3, [pc, #36]	@ (800b178 <_dtoa_r+0x708>)
 800b154:	f7f5 f9ca 	bl	80004ec <__aeabi_dmul>
 800b158:	2200      	movs	r2, #0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4604      	mov	r4, r0
 800b15e:	460d      	mov	r5, r1
 800b160:	f7f5 fc2c 	bl	80009bc <__aeabi_dcmpeq>
 800b164:	2800      	cmp	r0, #0
 800b166:	f43f aebc 	beq.w	800aee2 <_dtoa_r+0x472>
 800b16a:	e6f1      	b.n	800af50 <_dtoa_r+0x4e0>
 800b16c:	0800d590 	.word	0x0800d590
 800b170:	3fe00000 	.word	0x3fe00000
 800b174:	3ff00000 	.word	0x3ff00000
 800b178:	40240000 	.word	0x40240000
 800b17c:	40140000 	.word	0x40140000
 800b180:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b182:	2a00      	cmp	r2, #0
 800b184:	f000 80db 	beq.w	800b33e <_dtoa_r+0x8ce>
 800b188:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b18a:	2a01      	cmp	r2, #1
 800b18c:	f300 80bf 	bgt.w	800b30e <_dtoa_r+0x89e>
 800b190:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b192:	2a00      	cmp	r2, #0
 800b194:	f000 80b7 	beq.w	800b306 <_dtoa_r+0x896>
 800b198:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b19c:	4646      	mov	r6, r8
 800b19e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	441a      	add	r2, r3
 800b1a6:	4658      	mov	r0, fp
 800b1a8:	4498      	add	r8, r3
 800b1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1ac:	f000 fc1a 	bl	800b9e4 <__i2b>
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	b15e      	cbz	r6, 800b1cc <_dtoa_r+0x75c>
 800b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dd08      	ble.n	800b1cc <_dtoa_r+0x75c>
 800b1ba:	42b3      	cmp	r3, r6
 800b1bc:	bfa8      	it	ge
 800b1be:	4633      	movge	r3, r6
 800b1c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1c2:	eba8 0803 	sub.w	r8, r8, r3
 800b1c6:	1af6      	subs	r6, r6, r3
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ce:	b1f3      	cbz	r3, 800b20e <_dtoa_r+0x79e>
 800b1d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 80b7 	beq.w	800b346 <_dtoa_r+0x8d6>
 800b1d8:	b18c      	cbz	r4, 800b1fe <_dtoa_r+0x78e>
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4658      	mov	r0, fp
 800b1e0:	f000 fcbe 	bl	800bb60 <__pow5mult>
 800b1e4:	464a      	mov	r2, r9
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	4658      	mov	r0, fp
 800b1ec:	f000 fc10 	bl	800ba10 <__multiply>
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	9004      	str	r0, [sp, #16]
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	f000 fb41 	bl	800b87c <_Bfree>
 800b1fa:	9b04      	ldr	r3, [sp, #16]
 800b1fc:	4699      	mov	r9, r3
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b200:	1b1a      	subs	r2, r3, r4
 800b202:	d004      	beq.n	800b20e <_dtoa_r+0x79e>
 800b204:	4649      	mov	r1, r9
 800b206:	4658      	mov	r0, fp
 800b208:	f000 fcaa 	bl	800bb60 <__pow5mult>
 800b20c:	4681      	mov	r9, r0
 800b20e:	2101      	movs	r1, #1
 800b210:	4658      	mov	r0, fp
 800b212:	f000 fbe7 	bl	800b9e4 <__i2b>
 800b216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b218:	4604      	mov	r4, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 81c9 	beq.w	800b5b2 <_dtoa_r+0xb42>
 800b220:	461a      	mov	r2, r3
 800b222:	4601      	mov	r1, r0
 800b224:	4658      	mov	r0, fp
 800b226:	f000 fc9b 	bl	800bb60 <__pow5mult>
 800b22a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b22c:	4604      	mov	r4, r0
 800b22e:	2b01      	cmp	r3, #1
 800b230:	f300 808f 	bgt.w	800b352 <_dtoa_r+0x8e2>
 800b234:	9b02      	ldr	r3, [sp, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f040 8087 	bne.w	800b34a <_dtoa_r+0x8da>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b242:	2b00      	cmp	r3, #0
 800b244:	f040 8083 	bne.w	800b34e <_dtoa_r+0x8de>
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b24e:	0d1b      	lsrs	r3, r3, #20
 800b250:	051b      	lsls	r3, r3, #20
 800b252:	b12b      	cbz	r3, 800b260 <_dtoa_r+0x7f0>
 800b254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b256:	f108 0801 	add.w	r8, r8, #1
 800b25a:	3301      	adds	r3, #1
 800b25c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b25e:	2301      	movs	r3, #1
 800b260:	930a      	str	r3, [sp, #40]	@ 0x28
 800b262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 81aa 	beq.w	800b5be <_dtoa_r+0xb4e>
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b270:	6918      	ldr	r0, [r3, #16]
 800b272:	f000 fb6b 	bl	800b94c <__hi0bits>
 800b276:	f1c0 0020 	rsb	r0, r0, #32
 800b27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b27c:	4418      	add	r0, r3
 800b27e:	f010 001f 	ands.w	r0, r0, #31
 800b282:	d071      	beq.n	800b368 <_dtoa_r+0x8f8>
 800b284:	f1c0 0320 	rsb	r3, r0, #32
 800b288:	2b04      	cmp	r3, #4
 800b28a:	dd65      	ble.n	800b358 <_dtoa_r+0x8e8>
 800b28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28e:	f1c0 001c 	rsb	r0, r0, #28
 800b292:	4403      	add	r3, r0
 800b294:	4480      	add	r8, r0
 800b296:	4406      	add	r6, r0
 800b298:	9309      	str	r3, [sp, #36]	@ 0x24
 800b29a:	f1b8 0f00 	cmp.w	r8, #0
 800b29e:	dd05      	ble.n	800b2ac <_dtoa_r+0x83c>
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	4642      	mov	r2, r8
 800b2a4:	4658      	mov	r0, fp
 800b2a6:	f000 fcb5 	bl	800bc14 <__lshift>
 800b2aa:	4681      	mov	r9, r0
 800b2ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	dd05      	ble.n	800b2be <_dtoa_r+0x84e>
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4658      	mov	r0, fp
 800b2b8:	f000 fcac 	bl	800bc14 <__lshift>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d053      	beq.n	800b36c <_dtoa_r+0x8fc>
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4648      	mov	r0, r9
 800b2c8:	f000 fd10 	bl	800bcec <__mcmp>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	da4d      	bge.n	800b36c <_dtoa_r+0x8fc>
 800b2d0:	1e7b      	subs	r3, r7, #1
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	9304      	str	r3, [sp, #16]
 800b2d6:	220a      	movs	r2, #10
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4658      	mov	r0, fp
 800b2dc:	f000 faf0 	bl	800b8c0 <__multadd>
 800b2e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e2:	4681      	mov	r9, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 816c 	beq.w	800b5c2 <_dtoa_r+0xb52>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	220a      	movs	r2, #10
 800b2f0:	4658      	mov	r0, fp
 800b2f2:	f000 fae5 	bl	800b8c0 <__multadd>
 800b2f6:	9b08      	ldr	r3, [sp, #32]
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dc61      	bgt.n	800b3c2 <_dtoa_r+0x952>
 800b2fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b300:	2b02      	cmp	r3, #2
 800b302:	dc3b      	bgt.n	800b37c <_dtoa_r+0x90c>
 800b304:	e05d      	b.n	800b3c2 <_dtoa_r+0x952>
 800b306:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b308:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b30c:	e746      	b.n	800b19c <_dtoa_r+0x72c>
 800b30e:	9b07      	ldr	r3, [sp, #28]
 800b310:	1e5c      	subs	r4, r3, #1
 800b312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b314:	42a3      	cmp	r3, r4
 800b316:	bfbf      	itttt	lt
 800b318:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b31a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b31c:	1ae3      	sublt	r3, r4, r3
 800b31e:	18d2      	addlt	r2, r2, r3
 800b320:	bfa8      	it	ge
 800b322:	1b1c      	subge	r4, r3, r4
 800b324:	9b07      	ldr	r3, [sp, #28]
 800b326:	bfbe      	ittt	lt
 800b328:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b32a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b32c:	2400      	movlt	r4, #0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfb5      	itete	lt
 800b332:	eba8 0603 	sublt.w	r6, r8, r3
 800b336:	4646      	movge	r6, r8
 800b338:	2300      	movlt	r3, #0
 800b33a:	9b07      	ldrge	r3, [sp, #28]
 800b33c:	e730      	b.n	800b1a0 <_dtoa_r+0x730>
 800b33e:	4646      	mov	r6, r8
 800b340:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b342:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b344:	e735      	b.n	800b1b2 <_dtoa_r+0x742>
 800b346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b348:	e75c      	b.n	800b204 <_dtoa_r+0x794>
 800b34a:	2300      	movs	r3, #0
 800b34c:	e788      	b.n	800b260 <_dtoa_r+0x7f0>
 800b34e:	9b02      	ldr	r3, [sp, #8]
 800b350:	e786      	b.n	800b260 <_dtoa_r+0x7f0>
 800b352:	2300      	movs	r3, #0
 800b354:	930a      	str	r3, [sp, #40]	@ 0x28
 800b356:	e788      	b.n	800b26a <_dtoa_r+0x7fa>
 800b358:	d09f      	beq.n	800b29a <_dtoa_r+0x82a>
 800b35a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b35c:	331c      	adds	r3, #28
 800b35e:	441a      	add	r2, r3
 800b360:	4498      	add	r8, r3
 800b362:	441e      	add	r6, r3
 800b364:	9209      	str	r2, [sp, #36]	@ 0x24
 800b366:	e798      	b.n	800b29a <_dtoa_r+0x82a>
 800b368:	4603      	mov	r3, r0
 800b36a:	e7f6      	b.n	800b35a <_dtoa_r+0x8ea>
 800b36c:	9b07      	ldr	r3, [sp, #28]
 800b36e:	9704      	str	r7, [sp, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	dc20      	bgt.n	800b3b6 <_dtoa_r+0x946>
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b378:	2b02      	cmp	r3, #2
 800b37a:	dd1e      	ble.n	800b3ba <_dtoa_r+0x94a>
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f47f aebc 	bne.w	800b0fc <_dtoa_r+0x68c>
 800b384:	4621      	mov	r1, r4
 800b386:	2205      	movs	r2, #5
 800b388:	4658      	mov	r0, fp
 800b38a:	f000 fa99 	bl	800b8c0 <__multadd>
 800b38e:	4601      	mov	r1, r0
 800b390:	4604      	mov	r4, r0
 800b392:	4648      	mov	r0, r9
 800b394:	f000 fcaa 	bl	800bcec <__mcmp>
 800b398:	2800      	cmp	r0, #0
 800b39a:	f77f aeaf 	ble.w	800b0fc <_dtoa_r+0x68c>
 800b39e:	2331      	movs	r3, #49	@ 0x31
 800b3a0:	4656      	mov	r6, sl
 800b3a2:	f806 3b01 	strb.w	r3, [r6], #1
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	e6aa      	b.n	800b104 <_dtoa_r+0x694>
 800b3ae:	9c07      	ldr	r4, [sp, #28]
 800b3b0:	9704      	str	r7, [sp, #16]
 800b3b2:	4625      	mov	r5, r4
 800b3b4:	e7f3      	b.n	800b39e <_dtoa_r+0x92e>
 800b3b6:	9b07      	ldr	r3, [sp, #28]
 800b3b8:	9308      	str	r3, [sp, #32]
 800b3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 8104 	beq.w	800b5ca <_dtoa_r+0xb5a>
 800b3c2:	2e00      	cmp	r6, #0
 800b3c4:	dd05      	ble.n	800b3d2 <_dtoa_r+0x962>
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	4632      	mov	r2, r6
 800b3ca:	4658      	mov	r0, fp
 800b3cc:	f000 fc22 	bl	800bc14 <__lshift>
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d05a      	beq.n	800b48e <_dtoa_r+0xa1e>
 800b3d8:	4658      	mov	r0, fp
 800b3da:	6869      	ldr	r1, [r5, #4]
 800b3dc:	f000 fa0e 	bl	800b7fc <_Balloc>
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	b928      	cbnz	r0, 800b3f0 <_dtoa_r+0x980>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b3ea:	4b83      	ldr	r3, [pc, #524]	@ (800b5f8 <_dtoa_r+0xb88>)
 800b3ec:	f7ff bb54 	b.w	800aa98 <_dtoa_r+0x28>
 800b3f0:	692a      	ldr	r2, [r5, #16]
 800b3f2:	f105 010c 	add.w	r1, r5, #12
 800b3f6:	3202      	adds	r2, #2
 800b3f8:	0092      	lsls	r2, r2, #2
 800b3fa:	300c      	adds	r0, #12
 800b3fc:	f7ff faa1 	bl	800a942 <memcpy>
 800b400:	2201      	movs	r2, #1
 800b402:	4631      	mov	r1, r6
 800b404:	4658      	mov	r0, fp
 800b406:	f000 fc05 	bl	800bc14 <__lshift>
 800b40a:	462f      	mov	r7, r5
 800b40c:	4605      	mov	r5, r0
 800b40e:	f10a 0301 	add.w	r3, sl, #1
 800b412:	9307      	str	r3, [sp, #28]
 800b414:	9b08      	ldr	r3, [sp, #32]
 800b416:	4453      	add	r3, sl
 800b418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b41a:	9b02      	ldr	r3, [sp, #8]
 800b41c:	f003 0301 	and.w	r3, r3, #1
 800b420:	930a      	str	r3, [sp, #40]	@ 0x28
 800b422:	9b07      	ldr	r3, [sp, #28]
 800b424:	4621      	mov	r1, r4
 800b426:	3b01      	subs	r3, #1
 800b428:	4648      	mov	r0, r9
 800b42a:	9302      	str	r3, [sp, #8]
 800b42c:	f7ff fa97 	bl	800a95e <quorem>
 800b430:	4639      	mov	r1, r7
 800b432:	9008      	str	r0, [sp, #32]
 800b434:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b438:	4648      	mov	r0, r9
 800b43a:	f000 fc57 	bl	800bcec <__mcmp>
 800b43e:	462a      	mov	r2, r5
 800b440:	9009      	str	r0, [sp, #36]	@ 0x24
 800b442:	4621      	mov	r1, r4
 800b444:	4658      	mov	r0, fp
 800b446:	f000 fc6d 	bl	800bd24 <__mdiff>
 800b44a:	68c2      	ldr	r2, [r0, #12]
 800b44c:	4606      	mov	r6, r0
 800b44e:	bb02      	cbnz	r2, 800b492 <_dtoa_r+0xa22>
 800b450:	4601      	mov	r1, r0
 800b452:	4648      	mov	r0, r9
 800b454:	f000 fc4a 	bl	800bcec <__mcmp>
 800b458:	4602      	mov	r2, r0
 800b45a:	4631      	mov	r1, r6
 800b45c:	4658      	mov	r0, fp
 800b45e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b460:	f000 fa0c 	bl	800b87c <_Bfree>
 800b464:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b466:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b468:	9e07      	ldr	r6, [sp, #28]
 800b46a:	ea43 0102 	orr.w	r1, r3, r2
 800b46e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b470:	4319      	orrs	r1, r3
 800b472:	d110      	bne.n	800b496 <_dtoa_r+0xa26>
 800b474:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b478:	d029      	beq.n	800b4ce <_dtoa_r+0xa5e>
 800b47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dd02      	ble.n	800b486 <_dtoa_r+0xa16>
 800b480:	9b08      	ldr	r3, [sp, #32]
 800b482:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b486:	9b02      	ldr	r3, [sp, #8]
 800b488:	f883 8000 	strb.w	r8, [r3]
 800b48c:	e63b      	b.n	800b106 <_dtoa_r+0x696>
 800b48e:	4628      	mov	r0, r5
 800b490:	e7bb      	b.n	800b40a <_dtoa_r+0x99a>
 800b492:	2201      	movs	r2, #1
 800b494:	e7e1      	b.n	800b45a <_dtoa_r+0x9ea>
 800b496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	db04      	blt.n	800b4a6 <_dtoa_r+0xa36>
 800b49c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4a2:	430b      	orrs	r3, r1
 800b4a4:	d120      	bne.n	800b4e8 <_dtoa_r+0xa78>
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	dded      	ble.n	800b486 <_dtoa_r+0xa16>
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	4658      	mov	r0, fp
 800b4b0:	f000 fbb0 	bl	800bc14 <__lshift>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	4681      	mov	r9, r0
 800b4b8:	f000 fc18 	bl	800bcec <__mcmp>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	dc03      	bgt.n	800b4c8 <_dtoa_r+0xa58>
 800b4c0:	d1e1      	bne.n	800b486 <_dtoa_r+0xa16>
 800b4c2:	f018 0f01 	tst.w	r8, #1
 800b4c6:	d0de      	beq.n	800b486 <_dtoa_r+0xa16>
 800b4c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b4cc:	d1d8      	bne.n	800b480 <_dtoa_r+0xa10>
 800b4ce:	2339      	movs	r3, #57	@ 0x39
 800b4d0:	9a02      	ldr	r2, [sp, #8]
 800b4d2:	7013      	strb	r3, [r2, #0]
 800b4d4:	4633      	mov	r3, r6
 800b4d6:	461e      	mov	r6, r3
 800b4d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	2a39      	cmp	r2, #57	@ 0x39
 800b4e0:	d052      	beq.n	800b588 <_dtoa_r+0xb18>
 800b4e2:	3201      	adds	r2, #1
 800b4e4:	701a      	strb	r2, [r3, #0]
 800b4e6:	e60e      	b.n	800b106 <_dtoa_r+0x696>
 800b4e8:	2a00      	cmp	r2, #0
 800b4ea:	dd07      	ble.n	800b4fc <_dtoa_r+0xa8c>
 800b4ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b4f0:	d0ed      	beq.n	800b4ce <_dtoa_r+0xa5e>
 800b4f2:	9a02      	ldr	r2, [sp, #8]
 800b4f4:	f108 0301 	add.w	r3, r8, #1
 800b4f8:	7013      	strb	r3, [r2, #0]
 800b4fa:	e604      	b.n	800b106 <_dtoa_r+0x696>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	9a07      	ldr	r2, [sp, #28]
 800b500:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b504:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b506:	4293      	cmp	r3, r2
 800b508:	d028      	beq.n	800b55c <_dtoa_r+0xaec>
 800b50a:	4649      	mov	r1, r9
 800b50c:	2300      	movs	r3, #0
 800b50e:	220a      	movs	r2, #10
 800b510:	4658      	mov	r0, fp
 800b512:	f000 f9d5 	bl	800b8c0 <__multadd>
 800b516:	42af      	cmp	r7, r5
 800b518:	4681      	mov	r9, r0
 800b51a:	f04f 0300 	mov.w	r3, #0
 800b51e:	f04f 020a 	mov.w	r2, #10
 800b522:	4639      	mov	r1, r7
 800b524:	4658      	mov	r0, fp
 800b526:	d107      	bne.n	800b538 <_dtoa_r+0xac8>
 800b528:	f000 f9ca 	bl	800b8c0 <__multadd>
 800b52c:	4607      	mov	r7, r0
 800b52e:	4605      	mov	r5, r0
 800b530:	9b07      	ldr	r3, [sp, #28]
 800b532:	3301      	adds	r3, #1
 800b534:	9307      	str	r3, [sp, #28]
 800b536:	e774      	b.n	800b422 <_dtoa_r+0x9b2>
 800b538:	f000 f9c2 	bl	800b8c0 <__multadd>
 800b53c:	4629      	mov	r1, r5
 800b53e:	4607      	mov	r7, r0
 800b540:	2300      	movs	r3, #0
 800b542:	220a      	movs	r2, #10
 800b544:	4658      	mov	r0, fp
 800b546:	f000 f9bb 	bl	800b8c0 <__multadd>
 800b54a:	4605      	mov	r5, r0
 800b54c:	e7f0      	b.n	800b530 <_dtoa_r+0xac0>
 800b54e:	9b08      	ldr	r3, [sp, #32]
 800b550:	2700      	movs	r7, #0
 800b552:	2b00      	cmp	r3, #0
 800b554:	bfcc      	ite	gt
 800b556:	461e      	movgt	r6, r3
 800b558:	2601      	movle	r6, #1
 800b55a:	4456      	add	r6, sl
 800b55c:	4649      	mov	r1, r9
 800b55e:	2201      	movs	r2, #1
 800b560:	4658      	mov	r0, fp
 800b562:	f000 fb57 	bl	800bc14 <__lshift>
 800b566:	4621      	mov	r1, r4
 800b568:	4681      	mov	r9, r0
 800b56a:	f000 fbbf 	bl	800bcec <__mcmp>
 800b56e:	2800      	cmp	r0, #0
 800b570:	dcb0      	bgt.n	800b4d4 <_dtoa_r+0xa64>
 800b572:	d102      	bne.n	800b57a <_dtoa_r+0xb0a>
 800b574:	f018 0f01 	tst.w	r8, #1
 800b578:	d1ac      	bne.n	800b4d4 <_dtoa_r+0xa64>
 800b57a:	4633      	mov	r3, r6
 800b57c:	461e      	mov	r6, r3
 800b57e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b582:	2a30      	cmp	r2, #48	@ 0x30
 800b584:	d0fa      	beq.n	800b57c <_dtoa_r+0xb0c>
 800b586:	e5be      	b.n	800b106 <_dtoa_r+0x696>
 800b588:	459a      	cmp	sl, r3
 800b58a:	d1a4      	bne.n	800b4d6 <_dtoa_r+0xa66>
 800b58c:	9b04      	ldr	r3, [sp, #16]
 800b58e:	3301      	adds	r3, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	2331      	movs	r3, #49	@ 0x31
 800b594:	f88a 3000 	strb.w	r3, [sl]
 800b598:	e5b5      	b.n	800b106 <_dtoa_r+0x696>
 800b59a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b59c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b5fc <_dtoa_r+0xb8c>
 800b5a0:	b11b      	cbz	r3, 800b5aa <_dtoa_r+0xb3a>
 800b5a2:	f10a 0308 	add.w	r3, sl, #8
 800b5a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	b017      	add	sp, #92	@ 0x5c
 800b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	f77f ae3d 	ble.w	800b234 <_dtoa_r+0x7c4>
 800b5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5be:	2001      	movs	r0, #1
 800b5c0:	e65b      	b.n	800b27a <_dtoa_r+0x80a>
 800b5c2:	9b08      	ldr	r3, [sp, #32]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f77f aed6 	ble.w	800b376 <_dtoa_r+0x906>
 800b5ca:	4656      	mov	r6, sl
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4648      	mov	r0, r9
 800b5d0:	f7ff f9c5 	bl	800a95e <quorem>
 800b5d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b5d8:	9b08      	ldr	r3, [sp, #32]
 800b5da:	f806 8b01 	strb.w	r8, [r6], #1
 800b5de:	eba6 020a 	sub.w	r2, r6, sl
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	ddb3      	ble.n	800b54e <_dtoa_r+0xade>
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	220a      	movs	r2, #10
 800b5ec:	4658      	mov	r0, fp
 800b5ee:	f000 f967 	bl	800b8c0 <__multadd>
 800b5f2:	4681      	mov	r9, r0
 800b5f4:	e7ea      	b.n	800b5cc <_dtoa_r+0xb5c>
 800b5f6:	bf00      	nop
 800b5f8:	0800d4ec 	.word	0x0800d4ec
 800b5fc:	0800d470 	.word	0x0800d470

0800b600 <_free_r>:
 800b600:	b538      	push	{r3, r4, r5, lr}
 800b602:	4605      	mov	r5, r0
 800b604:	2900      	cmp	r1, #0
 800b606:	d040      	beq.n	800b68a <_free_r+0x8a>
 800b608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b60c:	1f0c      	subs	r4, r1, #4
 800b60e:	2b00      	cmp	r3, #0
 800b610:	bfb8      	it	lt
 800b612:	18e4      	addlt	r4, r4, r3
 800b614:	f000 f8e6 	bl	800b7e4 <__malloc_lock>
 800b618:	4a1c      	ldr	r2, [pc, #112]	@ (800b68c <_free_r+0x8c>)
 800b61a:	6813      	ldr	r3, [r2, #0]
 800b61c:	b933      	cbnz	r3, 800b62c <_free_r+0x2c>
 800b61e:	6063      	str	r3, [r4, #4]
 800b620:	6014      	str	r4, [r2, #0]
 800b622:	4628      	mov	r0, r5
 800b624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b628:	f000 b8e2 	b.w	800b7f0 <__malloc_unlock>
 800b62c:	42a3      	cmp	r3, r4
 800b62e:	d908      	bls.n	800b642 <_free_r+0x42>
 800b630:	6820      	ldr	r0, [r4, #0]
 800b632:	1821      	adds	r1, r4, r0
 800b634:	428b      	cmp	r3, r1
 800b636:	bf01      	itttt	eq
 800b638:	6819      	ldreq	r1, [r3, #0]
 800b63a:	685b      	ldreq	r3, [r3, #4]
 800b63c:	1809      	addeq	r1, r1, r0
 800b63e:	6021      	streq	r1, [r4, #0]
 800b640:	e7ed      	b.n	800b61e <_free_r+0x1e>
 800b642:	461a      	mov	r2, r3
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	b10b      	cbz	r3, 800b64c <_free_r+0x4c>
 800b648:	42a3      	cmp	r3, r4
 800b64a:	d9fa      	bls.n	800b642 <_free_r+0x42>
 800b64c:	6811      	ldr	r1, [r2, #0]
 800b64e:	1850      	adds	r0, r2, r1
 800b650:	42a0      	cmp	r0, r4
 800b652:	d10b      	bne.n	800b66c <_free_r+0x6c>
 800b654:	6820      	ldr	r0, [r4, #0]
 800b656:	4401      	add	r1, r0
 800b658:	1850      	adds	r0, r2, r1
 800b65a:	4283      	cmp	r3, r0
 800b65c:	6011      	str	r1, [r2, #0]
 800b65e:	d1e0      	bne.n	800b622 <_free_r+0x22>
 800b660:	6818      	ldr	r0, [r3, #0]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	4408      	add	r0, r1
 800b666:	6010      	str	r0, [r2, #0]
 800b668:	6053      	str	r3, [r2, #4]
 800b66a:	e7da      	b.n	800b622 <_free_r+0x22>
 800b66c:	d902      	bls.n	800b674 <_free_r+0x74>
 800b66e:	230c      	movs	r3, #12
 800b670:	602b      	str	r3, [r5, #0]
 800b672:	e7d6      	b.n	800b622 <_free_r+0x22>
 800b674:	6820      	ldr	r0, [r4, #0]
 800b676:	1821      	adds	r1, r4, r0
 800b678:	428b      	cmp	r3, r1
 800b67a:	bf01      	itttt	eq
 800b67c:	6819      	ldreq	r1, [r3, #0]
 800b67e:	685b      	ldreq	r3, [r3, #4]
 800b680:	1809      	addeq	r1, r1, r0
 800b682:	6021      	streq	r1, [r4, #0]
 800b684:	6063      	str	r3, [r4, #4]
 800b686:	6054      	str	r4, [r2, #4]
 800b688:	e7cb      	b.n	800b622 <_free_r+0x22>
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20003d00 	.word	0x20003d00

0800b690 <malloc>:
 800b690:	4b02      	ldr	r3, [pc, #8]	@ (800b69c <malloc+0xc>)
 800b692:	4601      	mov	r1, r0
 800b694:	6818      	ldr	r0, [r3, #0]
 800b696:	f000 b825 	b.w	800b6e4 <_malloc_r>
 800b69a:	bf00      	nop
 800b69c:	20000054 	.word	0x20000054

0800b6a0 <sbrk_aligned>:
 800b6a0:	b570      	push	{r4, r5, r6, lr}
 800b6a2:	4e0f      	ldr	r6, [pc, #60]	@ (800b6e0 <sbrk_aligned+0x40>)
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	6831      	ldr	r1, [r6, #0]
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	b911      	cbnz	r1, 800b6b2 <sbrk_aligned+0x12>
 800b6ac:	f001 fb8a 	bl	800cdc4 <_sbrk_r>
 800b6b0:	6030      	str	r0, [r6, #0]
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f001 fb85 	bl	800cdc4 <_sbrk_r>
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	d103      	bne.n	800b6c6 <sbrk_aligned+0x26>
 800b6be:	f04f 34ff 	mov.w	r4, #4294967295
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	bd70      	pop	{r4, r5, r6, pc}
 800b6c6:	1cc4      	adds	r4, r0, #3
 800b6c8:	f024 0403 	bic.w	r4, r4, #3
 800b6cc:	42a0      	cmp	r0, r4
 800b6ce:	d0f8      	beq.n	800b6c2 <sbrk_aligned+0x22>
 800b6d0:	1a21      	subs	r1, r4, r0
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f001 fb76 	bl	800cdc4 <_sbrk_r>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	d1f2      	bne.n	800b6c2 <sbrk_aligned+0x22>
 800b6dc:	e7ef      	b.n	800b6be <sbrk_aligned+0x1e>
 800b6de:	bf00      	nop
 800b6e0:	20003cfc 	.word	0x20003cfc

0800b6e4 <_malloc_r>:
 800b6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6e8:	1ccd      	adds	r5, r1, #3
 800b6ea:	f025 0503 	bic.w	r5, r5, #3
 800b6ee:	3508      	adds	r5, #8
 800b6f0:	2d0c      	cmp	r5, #12
 800b6f2:	bf38      	it	cc
 800b6f4:	250c      	movcc	r5, #12
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	db01      	blt.n	800b700 <_malloc_r+0x1c>
 800b6fc:	42a9      	cmp	r1, r5
 800b6fe:	d904      	bls.n	800b70a <_malloc_r+0x26>
 800b700:	230c      	movs	r3, #12
 800b702:	6033      	str	r3, [r6, #0]
 800b704:	2000      	movs	r0, #0
 800b706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b70a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7e0 <_malloc_r+0xfc>
 800b70e:	f000 f869 	bl	800b7e4 <__malloc_lock>
 800b712:	f8d8 3000 	ldr.w	r3, [r8]
 800b716:	461c      	mov	r4, r3
 800b718:	bb44      	cbnz	r4, 800b76c <_malloc_r+0x88>
 800b71a:	4629      	mov	r1, r5
 800b71c:	4630      	mov	r0, r6
 800b71e:	f7ff ffbf 	bl	800b6a0 <sbrk_aligned>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	4604      	mov	r4, r0
 800b726:	d158      	bne.n	800b7da <_malloc_r+0xf6>
 800b728:	f8d8 4000 	ldr.w	r4, [r8]
 800b72c:	4627      	mov	r7, r4
 800b72e:	2f00      	cmp	r7, #0
 800b730:	d143      	bne.n	800b7ba <_malloc_r+0xd6>
 800b732:	2c00      	cmp	r4, #0
 800b734:	d04b      	beq.n	800b7ce <_malloc_r+0xea>
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	4639      	mov	r1, r7
 800b73a:	4630      	mov	r0, r6
 800b73c:	eb04 0903 	add.w	r9, r4, r3
 800b740:	f001 fb40 	bl	800cdc4 <_sbrk_r>
 800b744:	4581      	cmp	r9, r0
 800b746:	d142      	bne.n	800b7ce <_malloc_r+0xea>
 800b748:	6821      	ldr	r1, [r4, #0]
 800b74a:	4630      	mov	r0, r6
 800b74c:	1a6d      	subs	r5, r5, r1
 800b74e:	4629      	mov	r1, r5
 800b750:	f7ff ffa6 	bl	800b6a0 <sbrk_aligned>
 800b754:	3001      	adds	r0, #1
 800b756:	d03a      	beq.n	800b7ce <_malloc_r+0xea>
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	442b      	add	r3, r5
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	f8d8 3000 	ldr.w	r3, [r8]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	bb62      	cbnz	r2, 800b7c0 <_malloc_r+0xdc>
 800b766:	f8c8 7000 	str.w	r7, [r8]
 800b76a:	e00f      	b.n	800b78c <_malloc_r+0xa8>
 800b76c:	6822      	ldr	r2, [r4, #0]
 800b76e:	1b52      	subs	r2, r2, r5
 800b770:	d420      	bmi.n	800b7b4 <_malloc_r+0xd0>
 800b772:	2a0b      	cmp	r2, #11
 800b774:	d917      	bls.n	800b7a6 <_malloc_r+0xc2>
 800b776:	1961      	adds	r1, r4, r5
 800b778:	42a3      	cmp	r3, r4
 800b77a:	6025      	str	r5, [r4, #0]
 800b77c:	bf18      	it	ne
 800b77e:	6059      	strne	r1, [r3, #4]
 800b780:	6863      	ldr	r3, [r4, #4]
 800b782:	bf08      	it	eq
 800b784:	f8c8 1000 	streq.w	r1, [r8]
 800b788:	5162      	str	r2, [r4, r5]
 800b78a:	604b      	str	r3, [r1, #4]
 800b78c:	4630      	mov	r0, r6
 800b78e:	f000 f82f 	bl	800b7f0 <__malloc_unlock>
 800b792:	f104 000b 	add.w	r0, r4, #11
 800b796:	1d23      	adds	r3, r4, #4
 800b798:	f020 0007 	bic.w	r0, r0, #7
 800b79c:	1ac2      	subs	r2, r0, r3
 800b79e:	bf1c      	itt	ne
 800b7a0:	1a1b      	subne	r3, r3, r0
 800b7a2:	50a3      	strne	r3, [r4, r2]
 800b7a4:	e7af      	b.n	800b706 <_malloc_r+0x22>
 800b7a6:	6862      	ldr	r2, [r4, #4]
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	bf0c      	ite	eq
 800b7ac:	f8c8 2000 	streq.w	r2, [r8]
 800b7b0:	605a      	strne	r2, [r3, #4]
 800b7b2:	e7eb      	b.n	800b78c <_malloc_r+0xa8>
 800b7b4:	4623      	mov	r3, r4
 800b7b6:	6864      	ldr	r4, [r4, #4]
 800b7b8:	e7ae      	b.n	800b718 <_malloc_r+0x34>
 800b7ba:	463c      	mov	r4, r7
 800b7bc:	687f      	ldr	r7, [r7, #4]
 800b7be:	e7b6      	b.n	800b72e <_malloc_r+0x4a>
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	d1fb      	bne.n	800b7c0 <_malloc_r+0xdc>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6053      	str	r3, [r2, #4]
 800b7cc:	e7de      	b.n	800b78c <_malloc_r+0xa8>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	6033      	str	r3, [r6, #0]
 800b7d4:	f000 f80c 	bl	800b7f0 <__malloc_unlock>
 800b7d8:	e794      	b.n	800b704 <_malloc_r+0x20>
 800b7da:	6005      	str	r5, [r0, #0]
 800b7dc:	e7d6      	b.n	800b78c <_malloc_r+0xa8>
 800b7de:	bf00      	nop
 800b7e0:	20003d00 	.word	0x20003d00

0800b7e4 <__malloc_lock>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	@ (800b7ec <__malloc_lock+0x8>)
 800b7e6:	f7ff b89c 	b.w	800a922 <__retarget_lock_acquire_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	20003cf8 	.word	0x20003cf8

0800b7f0 <__malloc_unlock>:
 800b7f0:	4801      	ldr	r0, [pc, #4]	@ (800b7f8 <__malloc_unlock+0x8>)
 800b7f2:	f7ff b897 	b.w	800a924 <__retarget_lock_release_recursive>
 800b7f6:	bf00      	nop
 800b7f8:	20003cf8 	.word	0x20003cf8

0800b7fc <_Balloc>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	69c6      	ldr	r6, [r0, #28]
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	b976      	cbnz	r6, 800b824 <_Balloc+0x28>
 800b806:	2010      	movs	r0, #16
 800b808:	f7ff ff42 	bl	800b690 <malloc>
 800b80c:	4602      	mov	r2, r0
 800b80e:	61e0      	str	r0, [r4, #28]
 800b810:	b920      	cbnz	r0, 800b81c <_Balloc+0x20>
 800b812:	216b      	movs	r1, #107	@ 0x6b
 800b814:	4b17      	ldr	r3, [pc, #92]	@ (800b874 <_Balloc+0x78>)
 800b816:	4818      	ldr	r0, [pc, #96]	@ (800b878 <_Balloc+0x7c>)
 800b818:	f001 fae4 	bl	800cde4 <__assert_func>
 800b81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b820:	6006      	str	r6, [r0, #0]
 800b822:	60c6      	str	r6, [r0, #12]
 800b824:	69e6      	ldr	r6, [r4, #28]
 800b826:	68f3      	ldr	r3, [r6, #12]
 800b828:	b183      	cbz	r3, 800b84c <_Balloc+0x50>
 800b82a:	69e3      	ldr	r3, [r4, #28]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b832:	b9b8      	cbnz	r0, 800b864 <_Balloc+0x68>
 800b834:	2101      	movs	r1, #1
 800b836:	fa01 f605 	lsl.w	r6, r1, r5
 800b83a:	1d72      	adds	r2, r6, #5
 800b83c:	4620      	mov	r0, r4
 800b83e:	0092      	lsls	r2, r2, #2
 800b840:	f001 faee 	bl	800ce20 <_calloc_r>
 800b844:	b160      	cbz	r0, 800b860 <_Balloc+0x64>
 800b846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b84a:	e00e      	b.n	800b86a <_Balloc+0x6e>
 800b84c:	2221      	movs	r2, #33	@ 0x21
 800b84e:	2104      	movs	r1, #4
 800b850:	4620      	mov	r0, r4
 800b852:	f001 fae5 	bl	800ce20 <_calloc_r>
 800b856:	69e3      	ldr	r3, [r4, #28]
 800b858:	60f0      	str	r0, [r6, #12]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e4      	bne.n	800b82a <_Balloc+0x2e>
 800b860:	2000      	movs	r0, #0
 800b862:	bd70      	pop	{r4, r5, r6, pc}
 800b864:	6802      	ldr	r2, [r0, #0]
 800b866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b86a:	2300      	movs	r3, #0
 800b86c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b870:	e7f7      	b.n	800b862 <_Balloc+0x66>
 800b872:	bf00      	nop
 800b874:	0800d47d 	.word	0x0800d47d
 800b878:	0800d4fd 	.word	0x0800d4fd

0800b87c <_Bfree>:
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	69c6      	ldr	r6, [r0, #28]
 800b880:	4605      	mov	r5, r0
 800b882:	460c      	mov	r4, r1
 800b884:	b976      	cbnz	r6, 800b8a4 <_Bfree+0x28>
 800b886:	2010      	movs	r0, #16
 800b888:	f7ff ff02 	bl	800b690 <malloc>
 800b88c:	4602      	mov	r2, r0
 800b88e:	61e8      	str	r0, [r5, #28]
 800b890:	b920      	cbnz	r0, 800b89c <_Bfree+0x20>
 800b892:	218f      	movs	r1, #143	@ 0x8f
 800b894:	4b08      	ldr	r3, [pc, #32]	@ (800b8b8 <_Bfree+0x3c>)
 800b896:	4809      	ldr	r0, [pc, #36]	@ (800b8bc <_Bfree+0x40>)
 800b898:	f001 faa4 	bl	800cde4 <__assert_func>
 800b89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8a0:	6006      	str	r6, [r0, #0]
 800b8a2:	60c6      	str	r6, [r0, #12]
 800b8a4:	b13c      	cbz	r4, 800b8b6 <_Bfree+0x3a>
 800b8a6:	69eb      	ldr	r3, [r5, #28]
 800b8a8:	6862      	ldr	r2, [r4, #4]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8b0:	6021      	str	r1, [r4, #0]
 800b8b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
 800b8b8:	0800d47d 	.word	0x0800d47d
 800b8bc:	0800d4fd 	.word	0x0800d4fd

0800b8c0 <__multadd>:
 800b8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	460c      	mov	r4, r1
 800b8c8:	461e      	mov	r6, r3
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	690d      	ldr	r5, [r1, #16]
 800b8ce:	f101 0c14 	add.w	ip, r1, #20
 800b8d2:	f8dc 3000 	ldr.w	r3, [ip]
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	b299      	uxth	r1, r3
 800b8da:	fb02 6101 	mla	r1, r2, r1, r6
 800b8de:	0c1e      	lsrs	r6, r3, #16
 800b8e0:	0c0b      	lsrs	r3, r1, #16
 800b8e2:	fb02 3306 	mla	r3, r2, r6, r3
 800b8e6:	b289      	uxth	r1, r1
 800b8e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8ec:	4285      	cmp	r5, r0
 800b8ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b8f6:	dcec      	bgt.n	800b8d2 <__multadd+0x12>
 800b8f8:	b30e      	cbz	r6, 800b93e <__multadd+0x7e>
 800b8fa:	68a3      	ldr	r3, [r4, #8]
 800b8fc:	42ab      	cmp	r3, r5
 800b8fe:	dc19      	bgt.n	800b934 <__multadd+0x74>
 800b900:	6861      	ldr	r1, [r4, #4]
 800b902:	4638      	mov	r0, r7
 800b904:	3101      	adds	r1, #1
 800b906:	f7ff ff79 	bl	800b7fc <_Balloc>
 800b90a:	4680      	mov	r8, r0
 800b90c:	b928      	cbnz	r0, 800b91a <__multadd+0x5a>
 800b90e:	4602      	mov	r2, r0
 800b910:	21ba      	movs	r1, #186	@ 0xba
 800b912:	4b0c      	ldr	r3, [pc, #48]	@ (800b944 <__multadd+0x84>)
 800b914:	480c      	ldr	r0, [pc, #48]	@ (800b948 <__multadd+0x88>)
 800b916:	f001 fa65 	bl	800cde4 <__assert_func>
 800b91a:	6922      	ldr	r2, [r4, #16]
 800b91c:	f104 010c 	add.w	r1, r4, #12
 800b920:	3202      	adds	r2, #2
 800b922:	0092      	lsls	r2, r2, #2
 800b924:	300c      	adds	r0, #12
 800b926:	f7ff f80c 	bl	800a942 <memcpy>
 800b92a:	4621      	mov	r1, r4
 800b92c:	4638      	mov	r0, r7
 800b92e:	f7ff ffa5 	bl	800b87c <_Bfree>
 800b932:	4644      	mov	r4, r8
 800b934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b938:	3501      	adds	r5, #1
 800b93a:	615e      	str	r6, [r3, #20]
 800b93c:	6125      	str	r5, [r4, #16]
 800b93e:	4620      	mov	r0, r4
 800b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b944:	0800d4ec 	.word	0x0800d4ec
 800b948:	0800d4fd 	.word	0x0800d4fd

0800b94c <__hi0bits>:
 800b94c:	4603      	mov	r3, r0
 800b94e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b952:	bf3a      	itte	cc
 800b954:	0403      	lslcc	r3, r0, #16
 800b956:	2010      	movcc	r0, #16
 800b958:	2000      	movcs	r0, #0
 800b95a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b95e:	bf3c      	itt	cc
 800b960:	021b      	lslcc	r3, r3, #8
 800b962:	3008      	addcc	r0, #8
 800b964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b968:	bf3c      	itt	cc
 800b96a:	011b      	lslcc	r3, r3, #4
 800b96c:	3004      	addcc	r0, #4
 800b96e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b972:	bf3c      	itt	cc
 800b974:	009b      	lslcc	r3, r3, #2
 800b976:	3002      	addcc	r0, #2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	db05      	blt.n	800b988 <__hi0bits+0x3c>
 800b97c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b980:	f100 0001 	add.w	r0, r0, #1
 800b984:	bf08      	it	eq
 800b986:	2020      	moveq	r0, #32
 800b988:	4770      	bx	lr

0800b98a <__lo0bits>:
 800b98a:	6803      	ldr	r3, [r0, #0]
 800b98c:	4602      	mov	r2, r0
 800b98e:	f013 0007 	ands.w	r0, r3, #7
 800b992:	d00b      	beq.n	800b9ac <__lo0bits+0x22>
 800b994:	07d9      	lsls	r1, r3, #31
 800b996:	d421      	bmi.n	800b9dc <__lo0bits+0x52>
 800b998:	0798      	lsls	r0, r3, #30
 800b99a:	bf49      	itett	mi
 800b99c:	085b      	lsrmi	r3, r3, #1
 800b99e:	089b      	lsrpl	r3, r3, #2
 800b9a0:	2001      	movmi	r0, #1
 800b9a2:	6013      	strmi	r3, [r2, #0]
 800b9a4:	bf5c      	itt	pl
 800b9a6:	2002      	movpl	r0, #2
 800b9a8:	6013      	strpl	r3, [r2, #0]
 800b9aa:	4770      	bx	lr
 800b9ac:	b299      	uxth	r1, r3
 800b9ae:	b909      	cbnz	r1, 800b9b4 <__lo0bits+0x2a>
 800b9b0:	2010      	movs	r0, #16
 800b9b2:	0c1b      	lsrs	r3, r3, #16
 800b9b4:	b2d9      	uxtb	r1, r3
 800b9b6:	b909      	cbnz	r1, 800b9bc <__lo0bits+0x32>
 800b9b8:	3008      	adds	r0, #8
 800b9ba:	0a1b      	lsrs	r3, r3, #8
 800b9bc:	0719      	lsls	r1, r3, #28
 800b9be:	bf04      	itt	eq
 800b9c0:	091b      	lsreq	r3, r3, #4
 800b9c2:	3004      	addeq	r0, #4
 800b9c4:	0799      	lsls	r1, r3, #30
 800b9c6:	bf04      	itt	eq
 800b9c8:	089b      	lsreq	r3, r3, #2
 800b9ca:	3002      	addeq	r0, #2
 800b9cc:	07d9      	lsls	r1, r3, #31
 800b9ce:	d403      	bmi.n	800b9d8 <__lo0bits+0x4e>
 800b9d0:	085b      	lsrs	r3, r3, #1
 800b9d2:	f100 0001 	add.w	r0, r0, #1
 800b9d6:	d003      	beq.n	800b9e0 <__lo0bits+0x56>
 800b9d8:	6013      	str	r3, [r2, #0]
 800b9da:	4770      	bx	lr
 800b9dc:	2000      	movs	r0, #0
 800b9de:	4770      	bx	lr
 800b9e0:	2020      	movs	r0, #32
 800b9e2:	4770      	bx	lr

0800b9e4 <__i2b>:
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	f7ff ff07 	bl	800b7fc <_Balloc>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	b928      	cbnz	r0, 800b9fe <__i2b+0x1a>
 800b9f2:	f240 1145 	movw	r1, #325	@ 0x145
 800b9f6:	4b04      	ldr	r3, [pc, #16]	@ (800ba08 <__i2b+0x24>)
 800b9f8:	4804      	ldr	r0, [pc, #16]	@ (800ba0c <__i2b+0x28>)
 800b9fa:	f001 f9f3 	bl	800cde4 <__assert_func>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	6144      	str	r4, [r0, #20]
 800ba02:	6103      	str	r3, [r0, #16]
 800ba04:	bd10      	pop	{r4, pc}
 800ba06:	bf00      	nop
 800ba08:	0800d4ec 	.word	0x0800d4ec
 800ba0c:	0800d4fd 	.word	0x0800d4fd

0800ba10 <__multiply>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	4614      	mov	r4, r2
 800ba16:	690a      	ldr	r2, [r1, #16]
 800ba18:	6923      	ldr	r3, [r4, #16]
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	bfa2      	ittt	ge
 800ba20:	4623      	movge	r3, r4
 800ba22:	460c      	movge	r4, r1
 800ba24:	461f      	movge	r7, r3
 800ba26:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba2a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba2e:	68a3      	ldr	r3, [r4, #8]
 800ba30:	6861      	ldr	r1, [r4, #4]
 800ba32:	eb0a 0609 	add.w	r6, sl, r9
 800ba36:	42b3      	cmp	r3, r6
 800ba38:	b085      	sub	sp, #20
 800ba3a:	bfb8      	it	lt
 800ba3c:	3101      	addlt	r1, #1
 800ba3e:	f7ff fedd 	bl	800b7fc <_Balloc>
 800ba42:	b930      	cbnz	r0, 800ba52 <__multiply+0x42>
 800ba44:	4602      	mov	r2, r0
 800ba46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba4a:	4b43      	ldr	r3, [pc, #268]	@ (800bb58 <__multiply+0x148>)
 800ba4c:	4843      	ldr	r0, [pc, #268]	@ (800bb5c <__multiply+0x14c>)
 800ba4e:	f001 f9c9 	bl	800cde4 <__assert_func>
 800ba52:	f100 0514 	add.w	r5, r0, #20
 800ba56:	462b      	mov	r3, r5
 800ba58:	2200      	movs	r2, #0
 800ba5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba5e:	4543      	cmp	r3, r8
 800ba60:	d321      	bcc.n	800baa6 <__multiply+0x96>
 800ba62:	f107 0114 	add.w	r1, r7, #20
 800ba66:	f104 0214 	add.w	r2, r4, #20
 800ba6a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba6e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba72:	9302      	str	r3, [sp, #8]
 800ba74:	1b13      	subs	r3, r2, r4
 800ba76:	3b15      	subs	r3, #21
 800ba78:	f023 0303 	bic.w	r3, r3, #3
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	f104 0715 	add.w	r7, r4, #21
 800ba82:	42ba      	cmp	r2, r7
 800ba84:	bf38      	it	cc
 800ba86:	2304      	movcc	r3, #4
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	9b02      	ldr	r3, [sp, #8]
 800ba8c:	9103      	str	r1, [sp, #12]
 800ba8e:	428b      	cmp	r3, r1
 800ba90:	d80c      	bhi.n	800baac <__multiply+0x9c>
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	dd03      	ble.n	800ba9e <__multiply+0x8e>
 800ba96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d05a      	beq.n	800bb54 <__multiply+0x144>
 800ba9e:	6106      	str	r6, [r0, #16]
 800baa0:	b005      	add	sp, #20
 800baa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa6:	f843 2b04 	str.w	r2, [r3], #4
 800baaa:	e7d8      	b.n	800ba5e <__multiply+0x4e>
 800baac:	f8b1 a000 	ldrh.w	sl, [r1]
 800bab0:	f1ba 0f00 	cmp.w	sl, #0
 800bab4:	d023      	beq.n	800bafe <__multiply+0xee>
 800bab6:	46a9      	mov	r9, r5
 800bab8:	f04f 0c00 	mov.w	ip, #0
 800babc:	f104 0e14 	add.w	lr, r4, #20
 800bac0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bac4:	f8d9 3000 	ldr.w	r3, [r9]
 800bac8:	fa1f fb87 	uxth.w	fp, r7
 800bacc:	b29b      	uxth	r3, r3
 800bace:	fb0a 330b 	mla	r3, sl, fp, r3
 800bad2:	4463      	add	r3, ip
 800bad4:	f8d9 c000 	ldr.w	ip, [r9]
 800bad8:	0c3f      	lsrs	r7, r7, #16
 800bada:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bade:	fb0a c707 	mla	r7, sl, r7, ip
 800bae2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800baec:	4572      	cmp	r2, lr
 800baee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800baf2:	f849 3b04 	str.w	r3, [r9], #4
 800baf6:	d8e3      	bhi.n	800bac0 <__multiply+0xb0>
 800baf8:	9b01      	ldr	r3, [sp, #4]
 800bafa:	f845 c003 	str.w	ip, [r5, r3]
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	3104      	adds	r1, #4
 800bb02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb06:	f1b9 0f00 	cmp.w	r9, #0
 800bb0a:	d021      	beq.n	800bb50 <__multiply+0x140>
 800bb0c:	46ae      	mov	lr, r5
 800bb0e:	f04f 0a00 	mov.w	sl, #0
 800bb12:	682b      	ldr	r3, [r5, #0]
 800bb14:	f104 0c14 	add.w	ip, r4, #20
 800bb18:	f8bc b000 	ldrh.w	fp, [ip]
 800bb1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	fb09 770b 	mla	r7, r9, fp, r7
 800bb26:	4457      	add	r7, sl
 800bb28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb2c:	f84e 3b04 	str.w	r3, [lr], #4
 800bb30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb38:	f8be 3000 	ldrh.w	r3, [lr]
 800bb3c:	4562      	cmp	r2, ip
 800bb3e:	fb09 330a 	mla	r3, r9, sl, r3
 800bb42:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb4a:	d8e5      	bhi.n	800bb18 <__multiply+0x108>
 800bb4c:	9f01      	ldr	r7, [sp, #4]
 800bb4e:	51eb      	str	r3, [r5, r7]
 800bb50:	3504      	adds	r5, #4
 800bb52:	e79a      	b.n	800ba8a <__multiply+0x7a>
 800bb54:	3e01      	subs	r6, #1
 800bb56:	e79c      	b.n	800ba92 <__multiply+0x82>
 800bb58:	0800d4ec 	.word	0x0800d4ec
 800bb5c:	0800d4fd 	.word	0x0800d4fd

0800bb60 <__pow5mult>:
 800bb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	4615      	mov	r5, r2
 800bb66:	f012 0203 	ands.w	r2, r2, #3
 800bb6a:	4607      	mov	r7, r0
 800bb6c:	460e      	mov	r6, r1
 800bb6e:	d007      	beq.n	800bb80 <__pow5mult+0x20>
 800bb70:	4c25      	ldr	r4, [pc, #148]	@ (800bc08 <__pow5mult+0xa8>)
 800bb72:	3a01      	subs	r2, #1
 800bb74:	2300      	movs	r3, #0
 800bb76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb7a:	f7ff fea1 	bl	800b8c0 <__multadd>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	10ad      	asrs	r5, r5, #2
 800bb82:	d03d      	beq.n	800bc00 <__pow5mult+0xa0>
 800bb84:	69fc      	ldr	r4, [r7, #28]
 800bb86:	b97c      	cbnz	r4, 800bba8 <__pow5mult+0x48>
 800bb88:	2010      	movs	r0, #16
 800bb8a:	f7ff fd81 	bl	800b690 <malloc>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	61f8      	str	r0, [r7, #28]
 800bb92:	b928      	cbnz	r0, 800bba0 <__pow5mult+0x40>
 800bb94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb98:	4b1c      	ldr	r3, [pc, #112]	@ (800bc0c <__pow5mult+0xac>)
 800bb9a:	481d      	ldr	r0, [pc, #116]	@ (800bc10 <__pow5mult+0xb0>)
 800bb9c:	f001 f922 	bl	800cde4 <__assert_func>
 800bba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bba4:	6004      	str	r4, [r0, #0]
 800bba6:	60c4      	str	r4, [r0, #12]
 800bba8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbb0:	b94c      	cbnz	r4, 800bbc6 <__pow5mult+0x66>
 800bbb2:	f240 2171 	movw	r1, #625	@ 0x271
 800bbb6:	4638      	mov	r0, r7
 800bbb8:	f7ff ff14 	bl	800b9e4 <__i2b>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbc4:	6003      	str	r3, [r0, #0]
 800bbc6:	f04f 0900 	mov.w	r9, #0
 800bbca:	07eb      	lsls	r3, r5, #31
 800bbcc:	d50a      	bpl.n	800bbe4 <__pow5mult+0x84>
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	f7ff ff1c 	bl	800ba10 <__multiply>
 800bbd8:	4680      	mov	r8, r0
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f7ff fe4d 	bl	800b87c <_Bfree>
 800bbe2:	4646      	mov	r6, r8
 800bbe4:	106d      	asrs	r5, r5, #1
 800bbe6:	d00b      	beq.n	800bc00 <__pow5mult+0xa0>
 800bbe8:	6820      	ldr	r0, [r4, #0]
 800bbea:	b938      	cbnz	r0, 800bbfc <__pow5mult+0x9c>
 800bbec:	4622      	mov	r2, r4
 800bbee:	4621      	mov	r1, r4
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	f7ff ff0d 	bl	800ba10 <__multiply>
 800bbf6:	6020      	str	r0, [r4, #0]
 800bbf8:	f8c0 9000 	str.w	r9, [r0]
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	e7e4      	b.n	800bbca <__pow5mult+0x6a>
 800bc00:	4630      	mov	r0, r6
 800bc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc06:	bf00      	nop
 800bc08:	0800d558 	.word	0x0800d558
 800bc0c:	0800d47d 	.word	0x0800d47d
 800bc10:	0800d4fd 	.word	0x0800d4fd

0800bc14 <__lshift>:
 800bc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc18:	460c      	mov	r4, r1
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	4691      	mov	r9, r2
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	6849      	ldr	r1, [r1, #4]
 800bc22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc26:	68a3      	ldr	r3, [r4, #8]
 800bc28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc2c:	f108 0601 	add.w	r6, r8, #1
 800bc30:	42b3      	cmp	r3, r6
 800bc32:	db0b      	blt.n	800bc4c <__lshift+0x38>
 800bc34:	4638      	mov	r0, r7
 800bc36:	f7ff fde1 	bl	800b7fc <_Balloc>
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	b948      	cbnz	r0, 800bc52 <__lshift+0x3e>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc44:	4b27      	ldr	r3, [pc, #156]	@ (800bce4 <__lshift+0xd0>)
 800bc46:	4828      	ldr	r0, [pc, #160]	@ (800bce8 <__lshift+0xd4>)
 800bc48:	f001 f8cc 	bl	800cde4 <__assert_func>
 800bc4c:	3101      	adds	r1, #1
 800bc4e:	005b      	lsls	r3, r3, #1
 800bc50:	e7ee      	b.n	800bc30 <__lshift+0x1c>
 800bc52:	2300      	movs	r3, #0
 800bc54:	f100 0114 	add.w	r1, r0, #20
 800bc58:	f100 0210 	add.w	r2, r0, #16
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	4553      	cmp	r3, sl
 800bc60:	db33      	blt.n	800bcca <__lshift+0xb6>
 800bc62:	6920      	ldr	r0, [r4, #16]
 800bc64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc68:	f104 0314 	add.w	r3, r4, #20
 800bc6c:	f019 091f 	ands.w	r9, r9, #31
 800bc70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc78:	d02b      	beq.n	800bcd2 <__lshift+0xbe>
 800bc7a:	468a      	mov	sl, r1
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f1c9 0e20 	rsb	lr, r9, #32
 800bc82:	6818      	ldr	r0, [r3, #0]
 800bc84:	fa00 f009 	lsl.w	r0, r0, r9
 800bc88:	4310      	orrs	r0, r2
 800bc8a:	f84a 0b04 	str.w	r0, [sl], #4
 800bc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc92:	459c      	cmp	ip, r3
 800bc94:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc98:	d8f3      	bhi.n	800bc82 <__lshift+0x6e>
 800bc9a:	ebac 0304 	sub.w	r3, ip, r4
 800bc9e:	3b15      	subs	r3, #21
 800bca0:	f023 0303 	bic.w	r3, r3, #3
 800bca4:	3304      	adds	r3, #4
 800bca6:	f104 0015 	add.w	r0, r4, #21
 800bcaa:	4584      	cmp	ip, r0
 800bcac:	bf38      	it	cc
 800bcae:	2304      	movcc	r3, #4
 800bcb0:	50ca      	str	r2, [r1, r3]
 800bcb2:	b10a      	cbz	r2, 800bcb8 <__lshift+0xa4>
 800bcb4:	f108 0602 	add.w	r6, r8, #2
 800bcb8:	3e01      	subs	r6, #1
 800bcba:	4638      	mov	r0, r7
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	612e      	str	r6, [r5, #16]
 800bcc0:	f7ff fddc 	bl	800b87c <_Bfree>
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcca:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcce:	3301      	adds	r3, #1
 800bcd0:	e7c5      	b.n	800bc5e <__lshift+0x4a>
 800bcd2:	3904      	subs	r1, #4
 800bcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd8:	459c      	cmp	ip, r3
 800bcda:	f841 2f04 	str.w	r2, [r1, #4]!
 800bcde:	d8f9      	bhi.n	800bcd4 <__lshift+0xc0>
 800bce0:	e7ea      	b.n	800bcb8 <__lshift+0xa4>
 800bce2:	bf00      	nop
 800bce4:	0800d4ec 	.word	0x0800d4ec
 800bce8:	0800d4fd 	.word	0x0800d4fd

0800bcec <__mcmp>:
 800bcec:	4603      	mov	r3, r0
 800bcee:	690a      	ldr	r2, [r1, #16]
 800bcf0:	6900      	ldr	r0, [r0, #16]
 800bcf2:	b530      	push	{r4, r5, lr}
 800bcf4:	1a80      	subs	r0, r0, r2
 800bcf6:	d10e      	bne.n	800bd16 <__mcmp+0x2a>
 800bcf8:	3314      	adds	r3, #20
 800bcfa:	3114      	adds	r1, #20
 800bcfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd0c:	4295      	cmp	r5, r2
 800bd0e:	d003      	beq.n	800bd18 <__mcmp+0x2c>
 800bd10:	d205      	bcs.n	800bd1e <__mcmp+0x32>
 800bd12:	f04f 30ff 	mov.w	r0, #4294967295
 800bd16:	bd30      	pop	{r4, r5, pc}
 800bd18:	42a3      	cmp	r3, r4
 800bd1a:	d3f3      	bcc.n	800bd04 <__mcmp+0x18>
 800bd1c:	e7fb      	b.n	800bd16 <__mcmp+0x2a>
 800bd1e:	2001      	movs	r0, #1
 800bd20:	e7f9      	b.n	800bd16 <__mcmp+0x2a>
	...

0800bd24 <__mdiff>:
 800bd24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd28:	4689      	mov	r9, r1
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4648      	mov	r0, r9
 800bd30:	4614      	mov	r4, r2
 800bd32:	f7ff ffdb 	bl	800bcec <__mcmp>
 800bd36:	1e05      	subs	r5, r0, #0
 800bd38:	d112      	bne.n	800bd60 <__mdiff+0x3c>
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff fd5d 	bl	800b7fc <_Balloc>
 800bd42:	4602      	mov	r2, r0
 800bd44:	b928      	cbnz	r0, 800bd52 <__mdiff+0x2e>
 800bd46:	f240 2137 	movw	r1, #567	@ 0x237
 800bd4a:	4b3e      	ldr	r3, [pc, #248]	@ (800be44 <__mdiff+0x120>)
 800bd4c:	483e      	ldr	r0, [pc, #248]	@ (800be48 <__mdiff+0x124>)
 800bd4e:	f001 f849 	bl	800cde4 <__assert_func>
 800bd52:	2301      	movs	r3, #1
 800bd54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd58:	4610      	mov	r0, r2
 800bd5a:	b003      	add	sp, #12
 800bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd60:	bfbc      	itt	lt
 800bd62:	464b      	movlt	r3, r9
 800bd64:	46a1      	movlt	r9, r4
 800bd66:	4630      	mov	r0, r6
 800bd68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd6c:	bfba      	itte	lt
 800bd6e:	461c      	movlt	r4, r3
 800bd70:	2501      	movlt	r5, #1
 800bd72:	2500      	movge	r5, #0
 800bd74:	f7ff fd42 	bl	800b7fc <_Balloc>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	b918      	cbnz	r0, 800bd84 <__mdiff+0x60>
 800bd7c:	f240 2145 	movw	r1, #581	@ 0x245
 800bd80:	4b30      	ldr	r3, [pc, #192]	@ (800be44 <__mdiff+0x120>)
 800bd82:	e7e3      	b.n	800bd4c <__mdiff+0x28>
 800bd84:	f100 0b14 	add.w	fp, r0, #20
 800bd88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd8c:	f109 0310 	add.w	r3, r9, #16
 800bd90:	60c5      	str	r5, [r0, #12]
 800bd92:	f04f 0c00 	mov.w	ip, #0
 800bd96:	f109 0514 	add.w	r5, r9, #20
 800bd9a:	46d9      	mov	r9, fp
 800bd9c:	6926      	ldr	r6, [r4, #16]
 800bd9e:	f104 0e14 	add.w	lr, r4, #20
 800bda2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bda6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdaa:	9301      	str	r3, [sp, #4]
 800bdac:	9b01      	ldr	r3, [sp, #4]
 800bdae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdb6:	b281      	uxth	r1, r0
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	fa1f f38a 	uxth.w	r3, sl
 800bdbe:	1a5b      	subs	r3, r3, r1
 800bdc0:	0c00      	lsrs	r0, r0, #16
 800bdc2:	4463      	add	r3, ip
 800bdc4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdc8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdd2:	4576      	cmp	r6, lr
 800bdd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bdd8:	f849 3b04 	str.w	r3, [r9], #4
 800bddc:	d8e6      	bhi.n	800bdac <__mdiff+0x88>
 800bdde:	1b33      	subs	r3, r6, r4
 800bde0:	3b15      	subs	r3, #21
 800bde2:	f023 0303 	bic.w	r3, r3, #3
 800bde6:	3415      	adds	r4, #21
 800bde8:	3304      	adds	r3, #4
 800bdea:	42a6      	cmp	r6, r4
 800bdec:	bf38      	it	cc
 800bdee:	2304      	movcc	r3, #4
 800bdf0:	441d      	add	r5, r3
 800bdf2:	445b      	add	r3, fp
 800bdf4:	461e      	mov	r6, r3
 800bdf6:	462c      	mov	r4, r5
 800bdf8:	4544      	cmp	r4, r8
 800bdfa:	d30e      	bcc.n	800be1a <__mdiff+0xf6>
 800bdfc:	f108 0103 	add.w	r1, r8, #3
 800be00:	1b49      	subs	r1, r1, r5
 800be02:	f021 0103 	bic.w	r1, r1, #3
 800be06:	3d03      	subs	r5, #3
 800be08:	45a8      	cmp	r8, r5
 800be0a:	bf38      	it	cc
 800be0c:	2100      	movcc	r1, #0
 800be0e:	440b      	add	r3, r1
 800be10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be14:	b199      	cbz	r1, 800be3e <__mdiff+0x11a>
 800be16:	6117      	str	r7, [r2, #16]
 800be18:	e79e      	b.n	800bd58 <__mdiff+0x34>
 800be1a:	46e6      	mov	lr, ip
 800be1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800be20:	fa1f fc81 	uxth.w	ip, r1
 800be24:	44f4      	add	ip, lr
 800be26:	0c08      	lsrs	r0, r1, #16
 800be28:	4471      	add	r1, lr
 800be2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be2e:	b289      	uxth	r1, r1
 800be30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be38:	f846 1b04 	str.w	r1, [r6], #4
 800be3c:	e7dc      	b.n	800bdf8 <__mdiff+0xd4>
 800be3e:	3f01      	subs	r7, #1
 800be40:	e7e6      	b.n	800be10 <__mdiff+0xec>
 800be42:	bf00      	nop
 800be44:	0800d4ec 	.word	0x0800d4ec
 800be48:	0800d4fd 	.word	0x0800d4fd

0800be4c <__d2b>:
 800be4c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800be50:	2101      	movs	r1, #1
 800be52:	4690      	mov	r8, r2
 800be54:	4699      	mov	r9, r3
 800be56:	9e08      	ldr	r6, [sp, #32]
 800be58:	f7ff fcd0 	bl	800b7fc <_Balloc>
 800be5c:	4604      	mov	r4, r0
 800be5e:	b930      	cbnz	r0, 800be6e <__d2b+0x22>
 800be60:	4602      	mov	r2, r0
 800be62:	f240 310f 	movw	r1, #783	@ 0x30f
 800be66:	4b23      	ldr	r3, [pc, #140]	@ (800bef4 <__d2b+0xa8>)
 800be68:	4823      	ldr	r0, [pc, #140]	@ (800bef8 <__d2b+0xac>)
 800be6a:	f000 ffbb 	bl	800cde4 <__assert_func>
 800be6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be76:	b10d      	cbz	r5, 800be7c <__d2b+0x30>
 800be78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be7c:	9301      	str	r3, [sp, #4]
 800be7e:	f1b8 0300 	subs.w	r3, r8, #0
 800be82:	d024      	beq.n	800bece <__d2b+0x82>
 800be84:	4668      	mov	r0, sp
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	f7ff fd7f 	bl	800b98a <__lo0bits>
 800be8c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be90:	b1d8      	cbz	r0, 800beca <__d2b+0x7e>
 800be92:	f1c0 0320 	rsb	r3, r0, #32
 800be96:	fa02 f303 	lsl.w	r3, r2, r3
 800be9a:	430b      	orrs	r3, r1
 800be9c:	40c2      	lsrs	r2, r0
 800be9e:	6163      	str	r3, [r4, #20]
 800bea0:	9201      	str	r2, [sp, #4]
 800bea2:	9b01      	ldr	r3, [sp, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	bf0c      	ite	eq
 800bea8:	2201      	moveq	r2, #1
 800beaa:	2202      	movne	r2, #2
 800beac:	61a3      	str	r3, [r4, #24]
 800beae:	6122      	str	r2, [r4, #16]
 800beb0:	b1ad      	cbz	r5, 800bede <__d2b+0x92>
 800beb2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800beb6:	4405      	add	r5, r0
 800beb8:	6035      	str	r5, [r6, #0]
 800beba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec0:	6018      	str	r0, [r3, #0]
 800bec2:	4620      	mov	r0, r4
 800bec4:	b002      	add	sp, #8
 800bec6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800beca:	6161      	str	r1, [r4, #20]
 800becc:	e7e9      	b.n	800bea2 <__d2b+0x56>
 800bece:	a801      	add	r0, sp, #4
 800bed0:	f7ff fd5b 	bl	800b98a <__lo0bits>
 800bed4:	9b01      	ldr	r3, [sp, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	6163      	str	r3, [r4, #20]
 800beda:	3020      	adds	r0, #32
 800bedc:	e7e7      	b.n	800beae <__d2b+0x62>
 800bede:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bee2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bee6:	6030      	str	r0, [r6, #0]
 800bee8:	6918      	ldr	r0, [r3, #16]
 800beea:	f7ff fd2f 	bl	800b94c <__hi0bits>
 800beee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bef2:	e7e4      	b.n	800bebe <__d2b+0x72>
 800bef4:	0800d4ec 	.word	0x0800d4ec
 800bef8:	0800d4fd 	.word	0x0800d4fd

0800befc <__ssputs_r>:
 800befc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf00:	461f      	mov	r7, r3
 800bf02:	688e      	ldr	r6, [r1, #8]
 800bf04:	4682      	mov	sl, r0
 800bf06:	42be      	cmp	r6, r7
 800bf08:	460c      	mov	r4, r1
 800bf0a:	4690      	mov	r8, r2
 800bf0c:	680b      	ldr	r3, [r1, #0]
 800bf0e:	d82d      	bhi.n	800bf6c <__ssputs_r+0x70>
 800bf10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf18:	d026      	beq.n	800bf68 <__ssputs_r+0x6c>
 800bf1a:	6965      	ldr	r5, [r4, #20]
 800bf1c:	6909      	ldr	r1, [r1, #16]
 800bf1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf22:	eba3 0901 	sub.w	r9, r3, r1
 800bf26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf2a:	1c7b      	adds	r3, r7, #1
 800bf2c:	444b      	add	r3, r9
 800bf2e:	106d      	asrs	r5, r5, #1
 800bf30:	429d      	cmp	r5, r3
 800bf32:	bf38      	it	cc
 800bf34:	461d      	movcc	r5, r3
 800bf36:	0553      	lsls	r3, r2, #21
 800bf38:	d527      	bpl.n	800bf8a <__ssputs_r+0x8e>
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	f7ff fbd2 	bl	800b6e4 <_malloc_r>
 800bf40:	4606      	mov	r6, r0
 800bf42:	b360      	cbz	r0, 800bf9e <__ssputs_r+0xa2>
 800bf44:	464a      	mov	r2, r9
 800bf46:	6921      	ldr	r1, [r4, #16]
 800bf48:	f7fe fcfb 	bl	800a942 <memcpy>
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bf52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	6126      	str	r6, [r4, #16]
 800bf5a:	444e      	add	r6, r9
 800bf5c:	6026      	str	r6, [r4, #0]
 800bf5e:	463e      	mov	r6, r7
 800bf60:	6165      	str	r5, [r4, #20]
 800bf62:	eba5 0509 	sub.w	r5, r5, r9
 800bf66:	60a5      	str	r5, [r4, #8]
 800bf68:	42be      	cmp	r6, r7
 800bf6a:	d900      	bls.n	800bf6e <__ssputs_r+0x72>
 800bf6c:	463e      	mov	r6, r7
 800bf6e:	4632      	mov	r2, r6
 800bf70:	4641      	mov	r1, r8
 800bf72:	6820      	ldr	r0, [r4, #0]
 800bf74:	f000 feea 	bl	800cd4c <memmove>
 800bf78:	2000      	movs	r0, #0
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	1b9b      	subs	r3, r3, r6
 800bf7e:	60a3      	str	r3, [r4, #8]
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	4433      	add	r3, r6
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8a:	462a      	mov	r2, r5
 800bf8c:	f000 ff6e 	bl	800ce6c <_realloc_r>
 800bf90:	4606      	mov	r6, r0
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d1e0      	bne.n	800bf58 <__ssputs_r+0x5c>
 800bf96:	4650      	mov	r0, sl
 800bf98:	6921      	ldr	r1, [r4, #16]
 800bf9a:	f7ff fb31 	bl	800b600 <_free_r>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	f8ca 3000 	str.w	r3, [sl]
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfae:	81a3      	strh	r3, [r4, #12]
 800bfb0:	e7e9      	b.n	800bf86 <__ssputs_r+0x8a>
	...

0800bfb4 <_svfiprintf_r>:
 800bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	4698      	mov	r8, r3
 800bfba:	898b      	ldrh	r3, [r1, #12]
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	061b      	lsls	r3, r3, #24
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	4614      	mov	r4, r2
 800bfc4:	b09d      	sub	sp, #116	@ 0x74
 800bfc6:	d510      	bpl.n	800bfea <_svfiprintf_r+0x36>
 800bfc8:	690b      	ldr	r3, [r1, #16]
 800bfca:	b973      	cbnz	r3, 800bfea <_svfiprintf_r+0x36>
 800bfcc:	2140      	movs	r1, #64	@ 0x40
 800bfce:	f7ff fb89 	bl	800b6e4 <_malloc_r>
 800bfd2:	6028      	str	r0, [r5, #0]
 800bfd4:	6128      	str	r0, [r5, #16]
 800bfd6:	b930      	cbnz	r0, 800bfe6 <_svfiprintf_r+0x32>
 800bfd8:	230c      	movs	r3, #12
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	b01d      	add	sp, #116	@ 0x74
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	2340      	movs	r3, #64	@ 0x40
 800bfe8:	616b      	str	r3, [r5, #20]
 800bfea:	2300      	movs	r3, #0
 800bfec:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfee:	2320      	movs	r3, #32
 800bff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bff4:	2330      	movs	r3, #48	@ 0x30
 800bff6:	f04f 0901 	mov.w	r9, #1
 800bffa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bffe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c198 <_svfiprintf_r+0x1e4>
 800c002:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c006:	4623      	mov	r3, r4
 800c008:	469a      	mov	sl, r3
 800c00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c00e:	b10a      	cbz	r2, 800c014 <_svfiprintf_r+0x60>
 800c010:	2a25      	cmp	r2, #37	@ 0x25
 800c012:	d1f9      	bne.n	800c008 <_svfiprintf_r+0x54>
 800c014:	ebba 0b04 	subs.w	fp, sl, r4
 800c018:	d00b      	beq.n	800c032 <_svfiprintf_r+0x7e>
 800c01a:	465b      	mov	r3, fp
 800c01c:	4622      	mov	r2, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff ff6b 	bl	800befc <__ssputs_r>
 800c026:	3001      	adds	r0, #1
 800c028:	f000 80a7 	beq.w	800c17a <_svfiprintf_r+0x1c6>
 800c02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c02e:	445a      	add	r2, fp
 800c030:	9209      	str	r2, [sp, #36]	@ 0x24
 800c032:	f89a 3000 	ldrb.w	r3, [sl]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 809f 	beq.w	800c17a <_svfiprintf_r+0x1c6>
 800c03c:	2300      	movs	r3, #0
 800c03e:	f04f 32ff 	mov.w	r2, #4294967295
 800c042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c046:	f10a 0a01 	add.w	sl, sl, #1
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	9307      	str	r3, [sp, #28]
 800c04e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c052:	931a      	str	r3, [sp, #104]	@ 0x68
 800c054:	4654      	mov	r4, sl
 800c056:	2205      	movs	r2, #5
 800c058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c05c:	484e      	ldr	r0, [pc, #312]	@ (800c198 <_svfiprintf_r+0x1e4>)
 800c05e:	f7fe fc62 	bl	800a926 <memchr>
 800c062:	9a04      	ldr	r2, [sp, #16]
 800c064:	b9d8      	cbnz	r0, 800c09e <_svfiprintf_r+0xea>
 800c066:	06d0      	lsls	r0, r2, #27
 800c068:	bf44      	itt	mi
 800c06a:	2320      	movmi	r3, #32
 800c06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c070:	0711      	lsls	r1, r2, #28
 800c072:	bf44      	itt	mi
 800c074:	232b      	movmi	r3, #43	@ 0x2b
 800c076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c07a:	f89a 3000 	ldrb.w	r3, [sl]
 800c07e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c080:	d015      	beq.n	800c0ae <_svfiprintf_r+0xfa>
 800c082:	4654      	mov	r4, sl
 800c084:	2000      	movs	r0, #0
 800c086:	f04f 0c0a 	mov.w	ip, #10
 800c08a:	9a07      	ldr	r2, [sp, #28]
 800c08c:	4621      	mov	r1, r4
 800c08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c092:	3b30      	subs	r3, #48	@ 0x30
 800c094:	2b09      	cmp	r3, #9
 800c096:	d94b      	bls.n	800c130 <_svfiprintf_r+0x17c>
 800c098:	b1b0      	cbz	r0, 800c0c8 <_svfiprintf_r+0x114>
 800c09a:	9207      	str	r2, [sp, #28]
 800c09c:	e014      	b.n	800c0c8 <_svfiprintf_r+0x114>
 800c09e:	eba0 0308 	sub.w	r3, r0, r8
 800c0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	46a2      	mov	sl, r4
 800c0aa:	9304      	str	r3, [sp, #16]
 800c0ac:	e7d2      	b.n	800c054 <_svfiprintf_r+0xa0>
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	1d19      	adds	r1, r3, #4
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	9103      	str	r1, [sp, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	bfbb      	ittet	lt
 800c0ba:	425b      	neglt	r3, r3
 800c0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c0c0:	9307      	strge	r3, [sp, #28]
 800c0c2:	9307      	strlt	r3, [sp, #28]
 800c0c4:	bfb8      	it	lt
 800c0c6:	9204      	strlt	r2, [sp, #16]
 800c0c8:	7823      	ldrb	r3, [r4, #0]
 800c0ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0cc:	d10a      	bne.n	800c0e4 <_svfiprintf_r+0x130>
 800c0ce:	7863      	ldrb	r3, [r4, #1]
 800c0d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0d2:	d132      	bne.n	800c13a <_svfiprintf_r+0x186>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	3402      	adds	r4, #2
 800c0d8:	1d1a      	adds	r2, r3, #4
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	9203      	str	r2, [sp, #12]
 800c0de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0e2:	9305      	str	r3, [sp, #20]
 800c0e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c19c <_svfiprintf_r+0x1e8>
 800c0e8:	2203      	movs	r2, #3
 800c0ea:	4650      	mov	r0, sl
 800c0ec:	7821      	ldrb	r1, [r4, #0]
 800c0ee:	f7fe fc1a 	bl	800a926 <memchr>
 800c0f2:	b138      	cbz	r0, 800c104 <_svfiprintf_r+0x150>
 800c0f4:	2240      	movs	r2, #64	@ 0x40
 800c0f6:	9b04      	ldr	r3, [sp, #16]
 800c0f8:	eba0 000a 	sub.w	r0, r0, sl
 800c0fc:	4082      	lsls	r2, r0
 800c0fe:	4313      	orrs	r3, r2
 800c100:	3401      	adds	r4, #1
 800c102:	9304      	str	r3, [sp, #16]
 800c104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c108:	2206      	movs	r2, #6
 800c10a:	4825      	ldr	r0, [pc, #148]	@ (800c1a0 <_svfiprintf_r+0x1ec>)
 800c10c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c110:	f7fe fc09 	bl	800a926 <memchr>
 800c114:	2800      	cmp	r0, #0
 800c116:	d036      	beq.n	800c186 <_svfiprintf_r+0x1d2>
 800c118:	4b22      	ldr	r3, [pc, #136]	@ (800c1a4 <_svfiprintf_r+0x1f0>)
 800c11a:	bb1b      	cbnz	r3, 800c164 <_svfiprintf_r+0x1b0>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	3307      	adds	r3, #7
 800c120:	f023 0307 	bic.w	r3, r3, #7
 800c124:	3308      	adds	r3, #8
 800c126:	9303      	str	r3, [sp, #12]
 800c128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c12a:	4433      	add	r3, r6
 800c12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c12e:	e76a      	b.n	800c006 <_svfiprintf_r+0x52>
 800c130:	460c      	mov	r4, r1
 800c132:	2001      	movs	r0, #1
 800c134:	fb0c 3202 	mla	r2, ip, r2, r3
 800c138:	e7a8      	b.n	800c08c <_svfiprintf_r+0xd8>
 800c13a:	2300      	movs	r3, #0
 800c13c:	f04f 0c0a 	mov.w	ip, #10
 800c140:	4619      	mov	r1, r3
 800c142:	3401      	adds	r4, #1
 800c144:	9305      	str	r3, [sp, #20]
 800c146:	4620      	mov	r0, r4
 800c148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c14c:	3a30      	subs	r2, #48	@ 0x30
 800c14e:	2a09      	cmp	r2, #9
 800c150:	d903      	bls.n	800c15a <_svfiprintf_r+0x1a6>
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0c6      	beq.n	800c0e4 <_svfiprintf_r+0x130>
 800c156:	9105      	str	r1, [sp, #20]
 800c158:	e7c4      	b.n	800c0e4 <_svfiprintf_r+0x130>
 800c15a:	4604      	mov	r4, r0
 800c15c:	2301      	movs	r3, #1
 800c15e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c162:	e7f0      	b.n	800c146 <_svfiprintf_r+0x192>
 800c164:	ab03      	add	r3, sp, #12
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	462a      	mov	r2, r5
 800c16a:	4638      	mov	r0, r7
 800c16c:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a8 <_svfiprintf_r+0x1f4>)
 800c16e:	a904      	add	r1, sp, #16
 800c170:	f7fd fcf0 	bl	8009b54 <_printf_float>
 800c174:	1c42      	adds	r2, r0, #1
 800c176:	4606      	mov	r6, r0
 800c178:	d1d6      	bne.n	800c128 <_svfiprintf_r+0x174>
 800c17a:	89ab      	ldrh	r3, [r5, #12]
 800c17c:	065b      	lsls	r3, r3, #25
 800c17e:	f53f af2d 	bmi.w	800bfdc <_svfiprintf_r+0x28>
 800c182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c184:	e72c      	b.n	800bfe0 <_svfiprintf_r+0x2c>
 800c186:	ab03      	add	r3, sp, #12
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	462a      	mov	r2, r5
 800c18c:	4638      	mov	r0, r7
 800c18e:	4b06      	ldr	r3, [pc, #24]	@ (800c1a8 <_svfiprintf_r+0x1f4>)
 800c190:	a904      	add	r1, sp, #16
 800c192:	f7fd ff7d 	bl	800a090 <_printf_i>
 800c196:	e7ed      	b.n	800c174 <_svfiprintf_r+0x1c0>
 800c198:	0800d658 	.word	0x0800d658
 800c19c:	0800d65e 	.word	0x0800d65e
 800c1a0:	0800d662 	.word	0x0800d662
 800c1a4:	08009b55 	.word	0x08009b55
 800c1a8:	0800befd 	.word	0x0800befd

0800c1ac <_sungetc_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	1c4b      	adds	r3, r1, #1
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	d103      	bne.n	800c1bc <_sungetc_r+0x10>
 800c1b4:	f04f 35ff 	mov.w	r5, #4294967295
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	8993      	ldrh	r3, [r2, #12]
 800c1be:	b2cd      	uxtb	r5, r1
 800c1c0:	f023 0320 	bic.w	r3, r3, #32
 800c1c4:	8193      	strh	r3, [r2, #12]
 800c1c6:	6853      	ldr	r3, [r2, #4]
 800c1c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c1ca:	b18a      	cbz	r2, 800c1f0 <_sungetc_r+0x44>
 800c1cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	dd08      	ble.n	800c1e4 <_sungetc_r+0x38>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	1e5a      	subs	r2, r3, #1
 800c1d6:	6022      	str	r2, [r4, #0]
 800c1d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c1dc:	6863      	ldr	r3, [r4, #4]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	6063      	str	r3, [r4, #4]
 800c1e2:	e7e9      	b.n	800c1b8 <_sungetc_r+0xc>
 800c1e4:	4621      	mov	r1, r4
 800c1e6:	f000 fd79 	bl	800ccdc <__submore>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d0f1      	beq.n	800c1d2 <_sungetc_r+0x26>
 800c1ee:	e7e1      	b.n	800c1b4 <_sungetc_r+0x8>
 800c1f0:	6921      	ldr	r1, [r4, #16]
 800c1f2:	6822      	ldr	r2, [r4, #0]
 800c1f4:	b141      	cbz	r1, 800c208 <_sungetc_r+0x5c>
 800c1f6:	4291      	cmp	r1, r2
 800c1f8:	d206      	bcs.n	800c208 <_sungetc_r+0x5c>
 800c1fa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c1fe:	42a9      	cmp	r1, r5
 800c200:	d102      	bne.n	800c208 <_sungetc_r+0x5c>
 800c202:	3a01      	subs	r2, #1
 800c204:	6022      	str	r2, [r4, #0]
 800c206:	e7ea      	b.n	800c1de <_sungetc_r+0x32>
 800c208:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c20c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c210:	6363      	str	r3, [r4, #52]	@ 0x34
 800c212:	2303      	movs	r3, #3
 800c214:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c216:	4623      	mov	r3, r4
 800c218:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	2301      	movs	r3, #1
 800c220:	e7de      	b.n	800c1e0 <_sungetc_r+0x34>

0800c222 <__ssrefill_r>:
 800c222:	b510      	push	{r4, lr}
 800c224:	460c      	mov	r4, r1
 800c226:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c228:	b169      	cbz	r1, 800c246 <__ssrefill_r+0x24>
 800c22a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c22e:	4299      	cmp	r1, r3
 800c230:	d001      	beq.n	800c236 <__ssrefill_r+0x14>
 800c232:	f7ff f9e5 	bl	800b600 <_free_r>
 800c236:	2000      	movs	r0, #0
 800c238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c23a:	6360      	str	r0, [r4, #52]	@ 0x34
 800c23c:	6063      	str	r3, [r4, #4]
 800c23e:	b113      	cbz	r3, 800c246 <__ssrefill_r+0x24>
 800c240:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c242:	6023      	str	r3, [r4, #0]
 800c244:	bd10      	pop	{r4, pc}
 800c246:	6923      	ldr	r3, [r4, #16]
 800c248:	f04f 30ff 	mov.w	r0, #4294967295
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	2300      	movs	r3, #0
 800c250:	6063      	str	r3, [r4, #4]
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	f043 0320 	orr.w	r3, r3, #32
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	e7f3      	b.n	800c244 <__ssrefill_r+0x22>

0800c25c <__ssvfiscanf_r>:
 800c25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c260:	460c      	mov	r4, r1
 800c262:	2100      	movs	r1, #0
 800c264:	4606      	mov	r6, r0
 800c266:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c26a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c26e:	49aa      	ldr	r1, [pc, #680]	@ (800c518 <__ssvfiscanf_r+0x2bc>)
 800c270:	f10d 0804 	add.w	r8, sp, #4
 800c274:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c276:	49a9      	ldr	r1, [pc, #676]	@ (800c51c <__ssvfiscanf_r+0x2c0>)
 800c278:	4fa9      	ldr	r7, [pc, #676]	@ (800c520 <__ssvfiscanf_r+0x2c4>)
 800c27a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c27e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	7813      	ldrb	r3, [r2, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 8159 	beq.w	800c53c <__ssvfiscanf_r+0x2e0>
 800c28a:	5cf9      	ldrb	r1, [r7, r3]
 800c28c:	1c55      	adds	r5, r2, #1
 800c28e:	f011 0108 	ands.w	r1, r1, #8
 800c292:	d019      	beq.n	800c2c8 <__ssvfiscanf_r+0x6c>
 800c294:	6863      	ldr	r3, [r4, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	dd0f      	ble.n	800c2ba <__ssvfiscanf_r+0x5e>
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	781a      	ldrb	r2, [r3, #0]
 800c29e:	5cba      	ldrb	r2, [r7, r2]
 800c2a0:	0712      	lsls	r2, r2, #28
 800c2a2:	d401      	bmi.n	800c2a8 <__ssvfiscanf_r+0x4c>
 800c2a4:	462a      	mov	r2, r5
 800c2a6:	e7ec      	b.n	800c282 <__ssvfiscanf_r+0x26>
 800c2a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	3201      	adds	r2, #1
 800c2ae:	9245      	str	r2, [sp, #276]	@ 0x114
 800c2b0:	6862      	ldr	r2, [r4, #4]
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	3a01      	subs	r2, #1
 800c2b6:	6062      	str	r2, [r4, #4]
 800c2b8:	e7ec      	b.n	800c294 <__ssvfiscanf_r+0x38>
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4630      	mov	r0, r6
 800c2be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c2c0:	4798      	blx	r3
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0e9      	beq.n	800c29a <__ssvfiscanf_r+0x3e>
 800c2c6:	e7ed      	b.n	800c2a4 <__ssvfiscanf_r+0x48>
 800c2c8:	2b25      	cmp	r3, #37	@ 0x25
 800c2ca:	d012      	beq.n	800c2f2 <__ssvfiscanf_r+0x96>
 800c2cc:	4699      	mov	r9, r3
 800c2ce:	6863      	ldr	r3, [r4, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f340 8094 	ble.w	800c3fe <__ssvfiscanf_r+0x1a2>
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	7813      	ldrb	r3, [r2, #0]
 800c2da:	454b      	cmp	r3, r9
 800c2dc:	f040 812e 	bne.w	800c53c <__ssvfiscanf_r+0x2e0>
 800c2e0:	6863      	ldr	r3, [r4, #4]
 800c2e2:	3201      	adds	r2, #1
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	6063      	str	r3, [r4, #4]
 800c2e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c2ea:	6022      	str	r2, [r4, #0]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	9345      	str	r3, [sp, #276]	@ 0x114
 800c2f0:	e7d8      	b.n	800c2a4 <__ssvfiscanf_r+0x48>
 800c2f2:	9141      	str	r1, [sp, #260]	@ 0x104
 800c2f4:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c2f6:	7853      	ldrb	r3, [r2, #1]
 800c2f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2fa:	bf04      	itt	eq
 800c2fc:	2310      	moveq	r3, #16
 800c2fe:	1c95      	addeq	r5, r2, #2
 800c300:	f04f 020a 	mov.w	r2, #10
 800c304:	bf08      	it	eq
 800c306:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c308:	46a9      	mov	r9, r5
 800c30a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c30e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c312:	2b09      	cmp	r3, #9
 800c314:	d91e      	bls.n	800c354 <__ssvfiscanf_r+0xf8>
 800c316:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800c524 <__ssvfiscanf_r+0x2c8>
 800c31a:	2203      	movs	r2, #3
 800c31c:	4650      	mov	r0, sl
 800c31e:	f7fe fb02 	bl	800a926 <memchr>
 800c322:	b138      	cbz	r0, 800c334 <__ssvfiscanf_r+0xd8>
 800c324:	2301      	movs	r3, #1
 800c326:	464d      	mov	r5, r9
 800c328:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c32a:	eba0 000a 	sub.w	r0, r0, sl
 800c32e:	4083      	lsls	r3, r0
 800c330:	4313      	orrs	r3, r2
 800c332:	9341      	str	r3, [sp, #260]	@ 0x104
 800c334:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c338:	2b78      	cmp	r3, #120	@ 0x78
 800c33a:	d806      	bhi.n	800c34a <__ssvfiscanf_r+0xee>
 800c33c:	2b57      	cmp	r3, #87	@ 0x57
 800c33e:	d810      	bhi.n	800c362 <__ssvfiscanf_r+0x106>
 800c340:	2b25      	cmp	r3, #37	@ 0x25
 800c342:	d0c3      	beq.n	800c2cc <__ssvfiscanf_r+0x70>
 800c344:	d856      	bhi.n	800c3f4 <__ssvfiscanf_r+0x198>
 800c346:	2b00      	cmp	r3, #0
 800c348:	d064      	beq.n	800c414 <__ssvfiscanf_r+0x1b8>
 800c34a:	2303      	movs	r3, #3
 800c34c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c34e:	230a      	movs	r3, #10
 800c350:	9342      	str	r3, [sp, #264]	@ 0x108
 800c352:	e077      	b.n	800c444 <__ssvfiscanf_r+0x1e8>
 800c354:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c356:	464d      	mov	r5, r9
 800c358:	fb02 1103 	mla	r1, r2, r3, r1
 800c35c:	3930      	subs	r1, #48	@ 0x30
 800c35e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c360:	e7d2      	b.n	800c308 <__ssvfiscanf_r+0xac>
 800c362:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c366:	2a20      	cmp	r2, #32
 800c368:	d8ef      	bhi.n	800c34a <__ssvfiscanf_r+0xee>
 800c36a:	a101      	add	r1, pc, #4	@ (adr r1, 800c370 <__ssvfiscanf_r+0x114>)
 800c36c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c370:	0800c423 	.word	0x0800c423
 800c374:	0800c34b 	.word	0x0800c34b
 800c378:	0800c34b 	.word	0x0800c34b
 800c37c:	0800c47d 	.word	0x0800c47d
 800c380:	0800c34b 	.word	0x0800c34b
 800c384:	0800c34b 	.word	0x0800c34b
 800c388:	0800c34b 	.word	0x0800c34b
 800c38c:	0800c34b 	.word	0x0800c34b
 800c390:	0800c34b 	.word	0x0800c34b
 800c394:	0800c34b 	.word	0x0800c34b
 800c398:	0800c34b 	.word	0x0800c34b
 800c39c:	0800c493 	.word	0x0800c493
 800c3a0:	0800c479 	.word	0x0800c479
 800c3a4:	0800c3fb 	.word	0x0800c3fb
 800c3a8:	0800c3fb 	.word	0x0800c3fb
 800c3ac:	0800c3fb 	.word	0x0800c3fb
 800c3b0:	0800c34b 	.word	0x0800c34b
 800c3b4:	0800c435 	.word	0x0800c435
 800c3b8:	0800c34b 	.word	0x0800c34b
 800c3bc:	0800c34b 	.word	0x0800c34b
 800c3c0:	0800c34b 	.word	0x0800c34b
 800c3c4:	0800c34b 	.word	0x0800c34b
 800c3c8:	0800c4a3 	.word	0x0800c4a3
 800c3cc:	0800c43d 	.word	0x0800c43d
 800c3d0:	0800c41b 	.word	0x0800c41b
 800c3d4:	0800c34b 	.word	0x0800c34b
 800c3d8:	0800c34b 	.word	0x0800c34b
 800c3dc:	0800c49f 	.word	0x0800c49f
 800c3e0:	0800c34b 	.word	0x0800c34b
 800c3e4:	0800c479 	.word	0x0800c479
 800c3e8:	0800c34b 	.word	0x0800c34b
 800c3ec:	0800c34b 	.word	0x0800c34b
 800c3f0:	0800c423 	.word	0x0800c423
 800c3f4:	3b45      	subs	r3, #69	@ 0x45
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d8a7      	bhi.n	800c34a <__ssvfiscanf_r+0xee>
 800c3fa:	2305      	movs	r3, #5
 800c3fc:	e021      	b.n	800c442 <__ssvfiscanf_r+0x1e6>
 800c3fe:	4621      	mov	r1, r4
 800c400:	4630      	mov	r0, r6
 800c402:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c404:	4798      	blx	r3
 800c406:	2800      	cmp	r0, #0
 800c408:	f43f af65 	beq.w	800c2d6 <__ssvfiscanf_r+0x7a>
 800c40c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c40e:	2800      	cmp	r0, #0
 800c410:	f040 808c 	bne.w	800c52c <__ssvfiscanf_r+0x2d0>
 800c414:	f04f 30ff 	mov.w	r0, #4294967295
 800c418:	e08c      	b.n	800c534 <__ssvfiscanf_r+0x2d8>
 800c41a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c41c:	f042 0220 	orr.w	r2, r2, #32
 800c420:	9241      	str	r2, [sp, #260]	@ 0x104
 800c422:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c428:	9241      	str	r2, [sp, #260]	@ 0x104
 800c42a:	2210      	movs	r2, #16
 800c42c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c42e:	9242      	str	r2, [sp, #264]	@ 0x108
 800c430:	d902      	bls.n	800c438 <__ssvfiscanf_r+0x1dc>
 800c432:	e005      	b.n	800c440 <__ssvfiscanf_r+0x1e4>
 800c434:	2300      	movs	r3, #0
 800c436:	9342      	str	r3, [sp, #264]	@ 0x108
 800c438:	2303      	movs	r3, #3
 800c43a:	e002      	b.n	800c442 <__ssvfiscanf_r+0x1e6>
 800c43c:	2308      	movs	r3, #8
 800c43e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c440:	2304      	movs	r3, #4
 800c442:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c444:	6863      	ldr	r3, [r4, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	dd39      	ble.n	800c4be <__ssvfiscanf_r+0x262>
 800c44a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c44c:	0659      	lsls	r1, r3, #25
 800c44e:	d404      	bmi.n	800c45a <__ssvfiscanf_r+0x1fe>
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	781a      	ldrb	r2, [r3, #0]
 800c454:	5cba      	ldrb	r2, [r7, r2]
 800c456:	0712      	lsls	r2, r2, #28
 800c458:	d438      	bmi.n	800c4cc <__ssvfiscanf_r+0x270>
 800c45a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	dc47      	bgt.n	800c4f0 <__ssvfiscanf_r+0x294>
 800c460:	466b      	mov	r3, sp
 800c462:	4622      	mov	r2, r4
 800c464:	4630      	mov	r0, r6
 800c466:	a941      	add	r1, sp, #260	@ 0x104
 800c468:	f000 f9aa 	bl	800c7c0 <_scanf_chars>
 800c46c:	2801      	cmp	r0, #1
 800c46e:	d065      	beq.n	800c53c <__ssvfiscanf_r+0x2e0>
 800c470:	2802      	cmp	r0, #2
 800c472:	f47f af17 	bne.w	800c2a4 <__ssvfiscanf_r+0x48>
 800c476:	e7c9      	b.n	800c40c <__ssvfiscanf_r+0x1b0>
 800c478:	220a      	movs	r2, #10
 800c47a:	e7d7      	b.n	800c42c <__ssvfiscanf_r+0x1d0>
 800c47c:	4629      	mov	r1, r5
 800c47e:	4640      	mov	r0, r8
 800c480:	f000 fbf3 	bl	800cc6a <__sccl>
 800c484:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c486:	4605      	mov	r5, r0
 800c488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c48c:	9341      	str	r3, [sp, #260]	@ 0x104
 800c48e:	2301      	movs	r3, #1
 800c490:	e7d7      	b.n	800c442 <__ssvfiscanf_r+0x1e6>
 800c492:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c498:	9341      	str	r3, [sp, #260]	@ 0x104
 800c49a:	2300      	movs	r3, #0
 800c49c:	e7d1      	b.n	800c442 <__ssvfiscanf_r+0x1e6>
 800c49e:	2302      	movs	r3, #2
 800c4a0:	e7cf      	b.n	800c442 <__ssvfiscanf_r+0x1e6>
 800c4a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c4a4:	06c3      	lsls	r3, r0, #27
 800c4a6:	f53f aefd 	bmi.w	800c2a4 <__ssvfiscanf_r+0x48>
 800c4aa:	9b00      	ldr	r3, [sp, #0]
 800c4ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c4ae:	1d19      	adds	r1, r3, #4
 800c4b0:	9100      	str	r1, [sp, #0]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	07c0      	lsls	r0, r0, #31
 800c4b6:	bf4c      	ite	mi
 800c4b8:	801a      	strhmi	r2, [r3, #0]
 800c4ba:	601a      	strpl	r2, [r3, #0]
 800c4bc:	e6f2      	b.n	800c2a4 <__ssvfiscanf_r+0x48>
 800c4be:	4621      	mov	r1, r4
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c4c4:	4798      	blx	r3
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d0bf      	beq.n	800c44a <__ssvfiscanf_r+0x1ee>
 800c4ca:	e79f      	b.n	800c40c <__ssvfiscanf_r+0x1b0>
 800c4cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c4ce:	3201      	adds	r2, #1
 800c4d0:	9245      	str	r2, [sp, #276]	@ 0x114
 800c4d2:	6862      	ldr	r2, [r4, #4]
 800c4d4:	3a01      	subs	r2, #1
 800c4d6:	2a00      	cmp	r2, #0
 800c4d8:	6062      	str	r2, [r4, #4]
 800c4da:	dd02      	ble.n	800c4e2 <__ssvfiscanf_r+0x286>
 800c4dc:	3301      	adds	r3, #1
 800c4de:	6023      	str	r3, [r4, #0]
 800c4e0:	e7b6      	b.n	800c450 <__ssvfiscanf_r+0x1f4>
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c4e8:	4798      	blx	r3
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d0b0      	beq.n	800c450 <__ssvfiscanf_r+0x1f4>
 800c4ee:	e78d      	b.n	800c40c <__ssvfiscanf_r+0x1b0>
 800c4f0:	2b04      	cmp	r3, #4
 800c4f2:	dc06      	bgt.n	800c502 <__ssvfiscanf_r+0x2a6>
 800c4f4:	466b      	mov	r3, sp
 800c4f6:	4622      	mov	r2, r4
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	a941      	add	r1, sp, #260	@ 0x104
 800c4fc:	f000 f9ba 	bl	800c874 <_scanf_i>
 800c500:	e7b4      	b.n	800c46c <__ssvfiscanf_r+0x210>
 800c502:	4b09      	ldr	r3, [pc, #36]	@ (800c528 <__ssvfiscanf_r+0x2cc>)
 800c504:	2b00      	cmp	r3, #0
 800c506:	f43f aecd 	beq.w	800c2a4 <__ssvfiscanf_r+0x48>
 800c50a:	466b      	mov	r3, sp
 800c50c:	4622      	mov	r2, r4
 800c50e:	4630      	mov	r0, r6
 800c510:	a941      	add	r1, sp, #260	@ 0x104
 800c512:	f3af 8000 	nop.w
 800c516:	e7a9      	b.n	800c46c <__ssvfiscanf_r+0x210>
 800c518:	0800c1ad 	.word	0x0800c1ad
 800c51c:	0800c223 	.word	0x0800c223
 800c520:	0800d6cb 	.word	0x0800d6cb
 800c524:	0800d65e 	.word	0x0800d65e
 800c528:	00000000 	.word	0x00000000
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	065b      	lsls	r3, r3, #25
 800c530:	f53f af70 	bmi.w	800c414 <__ssvfiscanf_r+0x1b8>
 800c534:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c53e:	e7f9      	b.n	800c534 <__ssvfiscanf_r+0x2d8>

0800c540 <__sfputc_r>:
 800c540:	6893      	ldr	r3, [r2, #8]
 800c542:	b410      	push	{r4}
 800c544:	3b01      	subs	r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	6093      	str	r3, [r2, #8]
 800c54a:	da07      	bge.n	800c55c <__sfputc_r+0x1c>
 800c54c:	6994      	ldr	r4, [r2, #24]
 800c54e:	42a3      	cmp	r3, r4
 800c550:	db01      	blt.n	800c556 <__sfputc_r+0x16>
 800c552:	290a      	cmp	r1, #10
 800c554:	d102      	bne.n	800c55c <__sfputc_r+0x1c>
 800c556:	bc10      	pop	{r4}
 800c558:	f7fe b87b 	b.w	800a652 <__swbuf_r>
 800c55c:	6813      	ldr	r3, [r2, #0]
 800c55e:	1c58      	adds	r0, r3, #1
 800c560:	6010      	str	r0, [r2, #0]
 800c562:	7019      	strb	r1, [r3, #0]
 800c564:	4608      	mov	r0, r1
 800c566:	bc10      	pop	{r4}
 800c568:	4770      	bx	lr

0800c56a <__sfputs_r>:
 800c56a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56c:	4606      	mov	r6, r0
 800c56e:	460f      	mov	r7, r1
 800c570:	4614      	mov	r4, r2
 800c572:	18d5      	adds	r5, r2, r3
 800c574:	42ac      	cmp	r4, r5
 800c576:	d101      	bne.n	800c57c <__sfputs_r+0x12>
 800c578:	2000      	movs	r0, #0
 800c57a:	e007      	b.n	800c58c <__sfputs_r+0x22>
 800c57c:	463a      	mov	r2, r7
 800c57e:	4630      	mov	r0, r6
 800c580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c584:	f7ff ffdc 	bl	800c540 <__sfputc_r>
 800c588:	1c43      	adds	r3, r0, #1
 800c58a:	d1f3      	bne.n	800c574 <__sfputs_r+0xa>
 800c58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c590 <_vfiprintf_r>:
 800c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	460d      	mov	r5, r1
 800c596:	4614      	mov	r4, r2
 800c598:	4698      	mov	r8, r3
 800c59a:	4606      	mov	r6, r0
 800c59c:	b09d      	sub	sp, #116	@ 0x74
 800c59e:	b118      	cbz	r0, 800c5a8 <_vfiprintf_r+0x18>
 800c5a0:	6a03      	ldr	r3, [r0, #32]
 800c5a2:	b90b      	cbnz	r3, 800c5a8 <_vfiprintf_r+0x18>
 800c5a4:	f7fd ff20 	bl	800a3e8 <__sinit>
 800c5a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5aa:	07d9      	lsls	r1, r3, #31
 800c5ac:	d405      	bmi.n	800c5ba <_vfiprintf_r+0x2a>
 800c5ae:	89ab      	ldrh	r3, [r5, #12]
 800c5b0:	059a      	lsls	r2, r3, #22
 800c5b2:	d402      	bmi.n	800c5ba <_vfiprintf_r+0x2a>
 800c5b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5b6:	f7fe f9b4 	bl	800a922 <__retarget_lock_acquire_recursive>
 800c5ba:	89ab      	ldrh	r3, [r5, #12]
 800c5bc:	071b      	lsls	r3, r3, #28
 800c5be:	d501      	bpl.n	800c5c4 <_vfiprintf_r+0x34>
 800c5c0:	692b      	ldr	r3, [r5, #16]
 800c5c2:	b99b      	cbnz	r3, 800c5ec <_vfiprintf_r+0x5c>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f7fe f882 	bl	800a6d0 <__swsetup_r>
 800c5cc:	b170      	cbz	r0, 800c5ec <_vfiprintf_r+0x5c>
 800c5ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5d0:	07dc      	lsls	r4, r3, #31
 800c5d2:	d504      	bpl.n	800c5de <_vfiprintf_r+0x4e>
 800c5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d8:	b01d      	add	sp, #116	@ 0x74
 800c5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5de:	89ab      	ldrh	r3, [r5, #12]
 800c5e0:	0598      	lsls	r0, r3, #22
 800c5e2:	d4f7      	bmi.n	800c5d4 <_vfiprintf_r+0x44>
 800c5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5e6:	f7fe f99d 	bl	800a924 <__retarget_lock_release_recursive>
 800c5ea:	e7f3      	b.n	800c5d4 <_vfiprintf_r+0x44>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5f0:	2320      	movs	r3, #32
 800c5f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5f6:	2330      	movs	r3, #48	@ 0x30
 800c5f8:	f04f 0901 	mov.w	r9, #1
 800c5fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c600:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c7ac <_vfiprintf_r+0x21c>
 800c604:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c608:	4623      	mov	r3, r4
 800c60a:	469a      	mov	sl, r3
 800c60c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c610:	b10a      	cbz	r2, 800c616 <_vfiprintf_r+0x86>
 800c612:	2a25      	cmp	r2, #37	@ 0x25
 800c614:	d1f9      	bne.n	800c60a <_vfiprintf_r+0x7a>
 800c616:	ebba 0b04 	subs.w	fp, sl, r4
 800c61a:	d00b      	beq.n	800c634 <_vfiprintf_r+0xa4>
 800c61c:	465b      	mov	r3, fp
 800c61e:	4622      	mov	r2, r4
 800c620:	4629      	mov	r1, r5
 800c622:	4630      	mov	r0, r6
 800c624:	f7ff ffa1 	bl	800c56a <__sfputs_r>
 800c628:	3001      	adds	r0, #1
 800c62a:	f000 80a7 	beq.w	800c77c <_vfiprintf_r+0x1ec>
 800c62e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c630:	445a      	add	r2, fp
 800c632:	9209      	str	r2, [sp, #36]	@ 0x24
 800c634:	f89a 3000 	ldrb.w	r3, [sl]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 809f 	beq.w	800c77c <_vfiprintf_r+0x1ec>
 800c63e:	2300      	movs	r3, #0
 800c640:	f04f 32ff 	mov.w	r2, #4294967295
 800c644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c648:	f10a 0a01 	add.w	sl, sl, #1
 800c64c:	9304      	str	r3, [sp, #16]
 800c64e:	9307      	str	r3, [sp, #28]
 800c650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c654:	931a      	str	r3, [sp, #104]	@ 0x68
 800c656:	4654      	mov	r4, sl
 800c658:	2205      	movs	r2, #5
 800c65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65e:	4853      	ldr	r0, [pc, #332]	@ (800c7ac <_vfiprintf_r+0x21c>)
 800c660:	f7fe f961 	bl	800a926 <memchr>
 800c664:	9a04      	ldr	r2, [sp, #16]
 800c666:	b9d8      	cbnz	r0, 800c6a0 <_vfiprintf_r+0x110>
 800c668:	06d1      	lsls	r1, r2, #27
 800c66a:	bf44      	itt	mi
 800c66c:	2320      	movmi	r3, #32
 800c66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c672:	0713      	lsls	r3, r2, #28
 800c674:	bf44      	itt	mi
 800c676:	232b      	movmi	r3, #43	@ 0x2b
 800c678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c67c:	f89a 3000 	ldrb.w	r3, [sl]
 800c680:	2b2a      	cmp	r3, #42	@ 0x2a
 800c682:	d015      	beq.n	800c6b0 <_vfiprintf_r+0x120>
 800c684:	4654      	mov	r4, sl
 800c686:	2000      	movs	r0, #0
 800c688:	f04f 0c0a 	mov.w	ip, #10
 800c68c:	9a07      	ldr	r2, [sp, #28]
 800c68e:	4621      	mov	r1, r4
 800c690:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c694:	3b30      	subs	r3, #48	@ 0x30
 800c696:	2b09      	cmp	r3, #9
 800c698:	d94b      	bls.n	800c732 <_vfiprintf_r+0x1a2>
 800c69a:	b1b0      	cbz	r0, 800c6ca <_vfiprintf_r+0x13a>
 800c69c:	9207      	str	r2, [sp, #28]
 800c69e:	e014      	b.n	800c6ca <_vfiprintf_r+0x13a>
 800c6a0:	eba0 0308 	sub.w	r3, r0, r8
 800c6a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	46a2      	mov	sl, r4
 800c6ac:	9304      	str	r3, [sp, #16]
 800c6ae:	e7d2      	b.n	800c656 <_vfiprintf_r+0xc6>
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	1d19      	adds	r1, r3, #4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	9103      	str	r1, [sp, #12]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	bfbb      	ittet	lt
 800c6bc:	425b      	neglt	r3, r3
 800c6be:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c2:	9307      	strge	r3, [sp, #28]
 800c6c4:	9307      	strlt	r3, [sp, #28]
 800c6c6:	bfb8      	it	lt
 800c6c8:	9204      	strlt	r2, [sp, #16]
 800c6ca:	7823      	ldrb	r3, [r4, #0]
 800c6cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6ce:	d10a      	bne.n	800c6e6 <_vfiprintf_r+0x156>
 800c6d0:	7863      	ldrb	r3, [r4, #1]
 800c6d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6d4:	d132      	bne.n	800c73c <_vfiprintf_r+0x1ac>
 800c6d6:	9b03      	ldr	r3, [sp, #12]
 800c6d8:	3402      	adds	r4, #2
 800c6da:	1d1a      	adds	r2, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9203      	str	r2, [sp, #12]
 800c6e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c7b0 <_vfiprintf_r+0x220>
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	4650      	mov	r0, sl
 800c6ee:	7821      	ldrb	r1, [r4, #0]
 800c6f0:	f7fe f919 	bl	800a926 <memchr>
 800c6f4:	b138      	cbz	r0, 800c706 <_vfiprintf_r+0x176>
 800c6f6:	2240      	movs	r2, #64	@ 0x40
 800c6f8:	9b04      	ldr	r3, [sp, #16]
 800c6fa:	eba0 000a 	sub.w	r0, r0, sl
 800c6fe:	4082      	lsls	r2, r0
 800c700:	4313      	orrs	r3, r2
 800c702:	3401      	adds	r4, #1
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70a:	2206      	movs	r2, #6
 800c70c:	4829      	ldr	r0, [pc, #164]	@ (800c7b4 <_vfiprintf_r+0x224>)
 800c70e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c712:	f7fe f908 	bl	800a926 <memchr>
 800c716:	2800      	cmp	r0, #0
 800c718:	d03f      	beq.n	800c79a <_vfiprintf_r+0x20a>
 800c71a:	4b27      	ldr	r3, [pc, #156]	@ (800c7b8 <_vfiprintf_r+0x228>)
 800c71c:	bb1b      	cbnz	r3, 800c766 <_vfiprintf_r+0x1d6>
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	3307      	adds	r3, #7
 800c722:	f023 0307 	bic.w	r3, r3, #7
 800c726:	3308      	adds	r3, #8
 800c728:	9303      	str	r3, [sp, #12]
 800c72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c72c:	443b      	add	r3, r7
 800c72e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c730:	e76a      	b.n	800c608 <_vfiprintf_r+0x78>
 800c732:	460c      	mov	r4, r1
 800c734:	2001      	movs	r0, #1
 800c736:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73a:	e7a8      	b.n	800c68e <_vfiprintf_r+0xfe>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f04f 0c0a 	mov.w	ip, #10
 800c742:	4619      	mov	r1, r3
 800c744:	3401      	adds	r4, #1
 800c746:	9305      	str	r3, [sp, #20]
 800c748:	4620      	mov	r0, r4
 800c74a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c74e:	3a30      	subs	r2, #48	@ 0x30
 800c750:	2a09      	cmp	r2, #9
 800c752:	d903      	bls.n	800c75c <_vfiprintf_r+0x1cc>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d0c6      	beq.n	800c6e6 <_vfiprintf_r+0x156>
 800c758:	9105      	str	r1, [sp, #20]
 800c75a:	e7c4      	b.n	800c6e6 <_vfiprintf_r+0x156>
 800c75c:	4604      	mov	r4, r0
 800c75e:	2301      	movs	r3, #1
 800c760:	fb0c 2101 	mla	r1, ip, r1, r2
 800c764:	e7f0      	b.n	800c748 <_vfiprintf_r+0x1b8>
 800c766:	ab03      	add	r3, sp, #12
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	462a      	mov	r2, r5
 800c76c:	4630      	mov	r0, r6
 800c76e:	4b13      	ldr	r3, [pc, #76]	@ (800c7bc <_vfiprintf_r+0x22c>)
 800c770:	a904      	add	r1, sp, #16
 800c772:	f7fd f9ef 	bl	8009b54 <_printf_float>
 800c776:	4607      	mov	r7, r0
 800c778:	1c78      	adds	r0, r7, #1
 800c77a:	d1d6      	bne.n	800c72a <_vfiprintf_r+0x19a>
 800c77c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c77e:	07d9      	lsls	r1, r3, #31
 800c780:	d405      	bmi.n	800c78e <_vfiprintf_r+0x1fe>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	059a      	lsls	r2, r3, #22
 800c786:	d402      	bmi.n	800c78e <_vfiprintf_r+0x1fe>
 800c788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c78a:	f7fe f8cb 	bl	800a924 <__retarget_lock_release_recursive>
 800c78e:	89ab      	ldrh	r3, [r5, #12]
 800c790:	065b      	lsls	r3, r3, #25
 800c792:	f53f af1f 	bmi.w	800c5d4 <_vfiprintf_r+0x44>
 800c796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c798:	e71e      	b.n	800c5d8 <_vfiprintf_r+0x48>
 800c79a:	ab03      	add	r3, sp, #12
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	462a      	mov	r2, r5
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	4b06      	ldr	r3, [pc, #24]	@ (800c7bc <_vfiprintf_r+0x22c>)
 800c7a4:	a904      	add	r1, sp, #16
 800c7a6:	f7fd fc73 	bl	800a090 <_printf_i>
 800c7aa:	e7e4      	b.n	800c776 <_vfiprintf_r+0x1e6>
 800c7ac:	0800d658 	.word	0x0800d658
 800c7b0:	0800d65e 	.word	0x0800d65e
 800c7b4:	0800d662 	.word	0x0800d662
 800c7b8:	08009b55 	.word	0x08009b55
 800c7bc:	0800c56b 	.word	0x0800c56b

0800c7c0 <_scanf_chars>:
 800c7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7c4:	4615      	mov	r5, r2
 800c7c6:	688a      	ldr	r2, [r1, #8]
 800c7c8:	4680      	mov	r8, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	b932      	cbnz	r2, 800c7dc <_scanf_chars+0x1c>
 800c7ce:	698a      	ldr	r2, [r1, #24]
 800c7d0:	2a00      	cmp	r2, #0
 800c7d2:	bf14      	ite	ne
 800c7d4:	f04f 32ff 	movne.w	r2, #4294967295
 800c7d8:	2201      	moveq	r2, #1
 800c7da:	608a      	str	r2, [r1, #8]
 800c7dc:	2700      	movs	r7, #0
 800c7de:	6822      	ldr	r2, [r4, #0]
 800c7e0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800c870 <_scanf_chars+0xb0>
 800c7e4:	06d1      	lsls	r1, r2, #27
 800c7e6:	bf5f      	itttt	pl
 800c7e8:	681a      	ldrpl	r2, [r3, #0]
 800c7ea:	1d11      	addpl	r1, r2, #4
 800c7ec:	6019      	strpl	r1, [r3, #0]
 800c7ee:	6816      	ldrpl	r6, [r2, #0]
 800c7f0:	69a0      	ldr	r0, [r4, #24]
 800c7f2:	b188      	cbz	r0, 800c818 <_scanf_chars+0x58>
 800c7f4:	2801      	cmp	r0, #1
 800c7f6:	d107      	bne.n	800c808 <_scanf_chars+0x48>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	781a      	ldrb	r2, [r3, #0]
 800c7fc:	6963      	ldr	r3, [r4, #20]
 800c7fe:	5c9b      	ldrb	r3, [r3, r2]
 800c800:	b953      	cbnz	r3, 800c818 <_scanf_chars+0x58>
 800c802:	2f00      	cmp	r7, #0
 800c804:	d031      	beq.n	800c86a <_scanf_chars+0xaa>
 800c806:	e022      	b.n	800c84e <_scanf_chars+0x8e>
 800c808:	2802      	cmp	r0, #2
 800c80a:	d120      	bne.n	800c84e <_scanf_chars+0x8e>
 800c80c:	682b      	ldr	r3, [r5, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c814:	071b      	lsls	r3, r3, #28
 800c816:	d41a      	bmi.n	800c84e <_scanf_chars+0x8e>
 800c818:	6823      	ldr	r3, [r4, #0]
 800c81a:	3701      	adds	r7, #1
 800c81c:	06da      	lsls	r2, r3, #27
 800c81e:	bf5e      	ittt	pl
 800c820:	682b      	ldrpl	r3, [r5, #0]
 800c822:	781b      	ldrbpl	r3, [r3, #0]
 800c824:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c828:	682a      	ldr	r2, [r5, #0]
 800c82a:	686b      	ldr	r3, [r5, #4]
 800c82c:	3201      	adds	r2, #1
 800c82e:	602a      	str	r2, [r5, #0]
 800c830:	68a2      	ldr	r2, [r4, #8]
 800c832:	3b01      	subs	r3, #1
 800c834:	3a01      	subs	r2, #1
 800c836:	606b      	str	r3, [r5, #4]
 800c838:	60a2      	str	r2, [r4, #8]
 800c83a:	b142      	cbz	r2, 800c84e <_scanf_chars+0x8e>
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	dcd7      	bgt.n	800c7f0 <_scanf_chars+0x30>
 800c840:	4629      	mov	r1, r5
 800c842:	4640      	mov	r0, r8
 800c844:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c848:	4798      	blx	r3
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d0d0      	beq.n	800c7f0 <_scanf_chars+0x30>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	f013 0310 	ands.w	r3, r3, #16
 800c854:	d105      	bne.n	800c862 <_scanf_chars+0xa2>
 800c856:	68e2      	ldr	r2, [r4, #12]
 800c858:	3201      	adds	r2, #1
 800c85a:	60e2      	str	r2, [r4, #12]
 800c85c:	69a2      	ldr	r2, [r4, #24]
 800c85e:	b102      	cbz	r2, 800c862 <_scanf_chars+0xa2>
 800c860:	7033      	strb	r3, [r6, #0]
 800c862:	2000      	movs	r0, #0
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	443b      	add	r3, r7
 800c868:	6123      	str	r3, [r4, #16]
 800c86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86e:	bf00      	nop
 800c870:	0800d6cb 	.word	0x0800d6cb

0800c874 <_scanf_i>:
 800c874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c878:	460c      	mov	r4, r1
 800c87a:	4698      	mov	r8, r3
 800c87c:	4b72      	ldr	r3, [pc, #456]	@ (800ca48 <_scanf_i+0x1d4>)
 800c87e:	b087      	sub	sp, #28
 800c880:	4682      	mov	sl, r0
 800c882:	4616      	mov	r6, r2
 800c884:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c888:	ab03      	add	r3, sp, #12
 800c88a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c88e:	4b6f      	ldr	r3, [pc, #444]	@ (800ca4c <_scanf_i+0x1d8>)
 800c890:	69a1      	ldr	r1, [r4, #24]
 800c892:	4a6f      	ldr	r2, [pc, #444]	@ (800ca50 <_scanf_i+0x1dc>)
 800c894:	4627      	mov	r7, r4
 800c896:	2903      	cmp	r1, #3
 800c898:	bf08      	it	eq
 800c89a:	461a      	moveq	r2, r3
 800c89c:	68a3      	ldr	r3, [r4, #8]
 800c89e:	9201      	str	r2, [sp, #4]
 800c8a0:	1e5a      	subs	r2, r3, #1
 800c8a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c8a6:	bf81      	itttt	hi
 800c8a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c8ac:	eb03 0905 	addhi.w	r9, r3, r5
 800c8b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c8b4:	60a3      	strhi	r3, [r4, #8]
 800c8b6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c8ba:	bf98      	it	ls
 800c8bc:	f04f 0900 	movls.w	r9, #0
 800c8c0:	463d      	mov	r5, r7
 800c8c2:	f04f 0b00 	mov.w	fp, #0
 800c8c6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	6831      	ldr	r1, [r6, #0]
 800c8ce:	ab03      	add	r3, sp, #12
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	7809      	ldrb	r1, [r1, #0]
 800c8d4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c8d8:	f7fe f825 	bl	800a926 <memchr>
 800c8dc:	b328      	cbz	r0, 800c92a <_scanf_i+0xb6>
 800c8de:	f1bb 0f01 	cmp.w	fp, #1
 800c8e2:	d159      	bne.n	800c998 <_scanf_i+0x124>
 800c8e4:	6862      	ldr	r2, [r4, #4]
 800c8e6:	b92a      	cbnz	r2, 800c8f4 <_scanf_i+0x80>
 800c8e8:	2108      	movs	r1, #8
 800c8ea:	6822      	ldr	r2, [r4, #0]
 800c8ec:	6061      	str	r1, [r4, #4]
 800c8ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8f2:	6022      	str	r2, [r4, #0]
 800c8f4:	6822      	ldr	r2, [r4, #0]
 800c8f6:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c8fa:	6022      	str	r2, [r4, #0]
 800c8fc:	68a2      	ldr	r2, [r4, #8]
 800c8fe:	1e51      	subs	r1, r2, #1
 800c900:	60a1      	str	r1, [r4, #8]
 800c902:	b192      	cbz	r2, 800c92a <_scanf_i+0xb6>
 800c904:	6832      	ldr	r2, [r6, #0]
 800c906:	1c51      	adds	r1, r2, #1
 800c908:	6031      	str	r1, [r6, #0]
 800c90a:	7812      	ldrb	r2, [r2, #0]
 800c90c:	f805 2b01 	strb.w	r2, [r5], #1
 800c910:	6872      	ldr	r2, [r6, #4]
 800c912:	3a01      	subs	r2, #1
 800c914:	2a00      	cmp	r2, #0
 800c916:	6072      	str	r2, [r6, #4]
 800c918:	dc07      	bgt.n	800c92a <_scanf_i+0xb6>
 800c91a:	4631      	mov	r1, r6
 800c91c:	4650      	mov	r0, sl
 800c91e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c922:	4790      	blx	r2
 800c924:	2800      	cmp	r0, #0
 800c926:	f040 8085 	bne.w	800ca34 <_scanf_i+0x1c0>
 800c92a:	f10b 0b01 	add.w	fp, fp, #1
 800c92e:	f1bb 0f03 	cmp.w	fp, #3
 800c932:	d1cb      	bne.n	800c8cc <_scanf_i+0x58>
 800c934:	6863      	ldr	r3, [r4, #4]
 800c936:	b90b      	cbnz	r3, 800c93c <_scanf_i+0xc8>
 800c938:	230a      	movs	r3, #10
 800c93a:	6063      	str	r3, [r4, #4]
 800c93c:	6863      	ldr	r3, [r4, #4]
 800c93e:	4945      	ldr	r1, [pc, #276]	@ (800ca54 <_scanf_i+0x1e0>)
 800c940:	6960      	ldr	r0, [r4, #20]
 800c942:	1ac9      	subs	r1, r1, r3
 800c944:	f000 f991 	bl	800cc6a <__sccl>
 800c948:	f04f 0b00 	mov.w	fp, #0
 800c94c:	68a3      	ldr	r3, [r4, #8]
 800c94e:	6822      	ldr	r2, [r4, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d03d      	beq.n	800c9d0 <_scanf_i+0x15c>
 800c954:	6831      	ldr	r1, [r6, #0]
 800c956:	6960      	ldr	r0, [r4, #20]
 800c958:	f891 c000 	ldrb.w	ip, [r1]
 800c95c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c960:	2800      	cmp	r0, #0
 800c962:	d035      	beq.n	800c9d0 <_scanf_i+0x15c>
 800c964:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c968:	d124      	bne.n	800c9b4 <_scanf_i+0x140>
 800c96a:	0510      	lsls	r0, r2, #20
 800c96c:	d522      	bpl.n	800c9b4 <_scanf_i+0x140>
 800c96e:	f10b 0b01 	add.w	fp, fp, #1
 800c972:	f1b9 0f00 	cmp.w	r9, #0
 800c976:	d003      	beq.n	800c980 <_scanf_i+0x10c>
 800c978:	3301      	adds	r3, #1
 800c97a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c97e:	60a3      	str	r3, [r4, #8]
 800c980:	6873      	ldr	r3, [r6, #4]
 800c982:	3b01      	subs	r3, #1
 800c984:	2b00      	cmp	r3, #0
 800c986:	6073      	str	r3, [r6, #4]
 800c988:	dd1b      	ble.n	800c9c2 <_scanf_i+0x14e>
 800c98a:	6833      	ldr	r3, [r6, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	6033      	str	r3, [r6, #0]
 800c990:	68a3      	ldr	r3, [r4, #8]
 800c992:	3b01      	subs	r3, #1
 800c994:	60a3      	str	r3, [r4, #8]
 800c996:	e7d9      	b.n	800c94c <_scanf_i+0xd8>
 800c998:	f1bb 0f02 	cmp.w	fp, #2
 800c99c:	d1ae      	bne.n	800c8fc <_scanf_i+0x88>
 800c99e:	6822      	ldr	r2, [r4, #0]
 800c9a0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c9a4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c9a8:	d1bf      	bne.n	800c92a <_scanf_i+0xb6>
 800c9aa:	2110      	movs	r1, #16
 800c9ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9b0:	6061      	str	r1, [r4, #4]
 800c9b2:	e7a2      	b.n	800c8fa <_scanf_i+0x86>
 800c9b4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c9b8:	6022      	str	r2, [r4, #0]
 800c9ba:	780b      	ldrb	r3, [r1, #0]
 800c9bc:	f805 3b01 	strb.w	r3, [r5], #1
 800c9c0:	e7de      	b.n	800c980 <_scanf_i+0x10c>
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4650      	mov	r0, sl
 800c9c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c9ca:	4798      	blx	r3
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d0df      	beq.n	800c990 <_scanf_i+0x11c>
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	05d9      	lsls	r1, r3, #23
 800c9d4:	d50d      	bpl.n	800c9f2 <_scanf_i+0x17e>
 800c9d6:	42bd      	cmp	r5, r7
 800c9d8:	d909      	bls.n	800c9ee <_scanf_i+0x17a>
 800c9da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c9de:	4632      	mov	r2, r6
 800c9e0:	4650      	mov	r0, sl
 800c9e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c9ea:	4798      	blx	r3
 800c9ec:	464d      	mov	r5, r9
 800c9ee:	42bd      	cmp	r5, r7
 800c9f0:	d028      	beq.n	800ca44 <_scanf_i+0x1d0>
 800c9f2:	6822      	ldr	r2, [r4, #0]
 800c9f4:	f012 0210 	ands.w	r2, r2, #16
 800c9f8:	d113      	bne.n	800ca22 <_scanf_i+0x1ae>
 800c9fa:	702a      	strb	r2, [r5, #0]
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	6863      	ldr	r3, [r4, #4]
 800ca00:	4650      	mov	r0, sl
 800ca02:	9e01      	ldr	r6, [sp, #4]
 800ca04:	47b0      	blx	r6
 800ca06:	f8d8 3000 	ldr.w	r3, [r8]
 800ca0a:	6821      	ldr	r1, [r4, #0]
 800ca0c:	1d1a      	adds	r2, r3, #4
 800ca0e:	f8c8 2000 	str.w	r2, [r8]
 800ca12:	f011 0f20 	tst.w	r1, #32
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	d00f      	beq.n	800ca3a <_scanf_i+0x1c6>
 800ca1a:	6018      	str	r0, [r3, #0]
 800ca1c:	68e3      	ldr	r3, [r4, #12]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60e3      	str	r3, [r4, #12]
 800ca22:	2000      	movs	r0, #0
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	1bed      	subs	r5, r5, r7
 800ca28:	445d      	add	r5, fp
 800ca2a:	442b      	add	r3, r5
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	b007      	add	sp, #28
 800ca30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca34:	f04f 0b00 	mov.w	fp, #0
 800ca38:	e7ca      	b.n	800c9d0 <_scanf_i+0x15c>
 800ca3a:	07ca      	lsls	r2, r1, #31
 800ca3c:	bf4c      	ite	mi
 800ca3e:	8018      	strhmi	r0, [r3, #0]
 800ca40:	6018      	strpl	r0, [r3, #0]
 800ca42:	e7eb      	b.n	800ca1c <_scanf_i+0x1a8>
 800ca44:	2001      	movs	r0, #1
 800ca46:	e7f2      	b.n	800ca2e <_scanf_i+0x1ba>
 800ca48:	0800d324 	.word	0x0800d324
 800ca4c:	0800cfbd 	.word	0x0800cfbd
 800ca50:	0800d09d 	.word	0x0800d09d
 800ca54:	0800d679 	.word	0x0800d679

0800ca58 <__sflush_r>:
 800ca58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5e:	0716      	lsls	r6, r2, #28
 800ca60:	4605      	mov	r5, r0
 800ca62:	460c      	mov	r4, r1
 800ca64:	d454      	bmi.n	800cb10 <__sflush_r+0xb8>
 800ca66:	684b      	ldr	r3, [r1, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dc02      	bgt.n	800ca72 <__sflush_r+0x1a>
 800ca6c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dd48      	ble.n	800cb04 <__sflush_r+0xac>
 800ca72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca74:	2e00      	cmp	r6, #0
 800ca76:	d045      	beq.n	800cb04 <__sflush_r+0xac>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca7e:	682f      	ldr	r7, [r5, #0]
 800ca80:	6a21      	ldr	r1, [r4, #32]
 800ca82:	602b      	str	r3, [r5, #0]
 800ca84:	d030      	beq.n	800cae8 <__sflush_r+0x90>
 800ca86:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca88:	89a3      	ldrh	r3, [r4, #12]
 800ca8a:	0759      	lsls	r1, r3, #29
 800ca8c:	d505      	bpl.n	800ca9a <__sflush_r+0x42>
 800ca8e:	6863      	ldr	r3, [r4, #4]
 800ca90:	1ad2      	subs	r2, r2, r3
 800ca92:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca94:	b10b      	cbz	r3, 800ca9a <__sflush_r+0x42>
 800ca96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca98:	1ad2      	subs	r2, r2, r3
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800caa0:	6a21      	ldr	r1, [r4, #32]
 800caa2:	47b0      	blx	r6
 800caa4:	1c43      	adds	r3, r0, #1
 800caa6:	89a3      	ldrh	r3, [r4, #12]
 800caa8:	d106      	bne.n	800cab8 <__sflush_r+0x60>
 800caaa:	6829      	ldr	r1, [r5, #0]
 800caac:	291d      	cmp	r1, #29
 800caae:	d82b      	bhi.n	800cb08 <__sflush_r+0xb0>
 800cab0:	4a28      	ldr	r2, [pc, #160]	@ (800cb54 <__sflush_r+0xfc>)
 800cab2:	410a      	asrs	r2, r1
 800cab4:	07d6      	lsls	r6, r2, #31
 800cab6:	d427      	bmi.n	800cb08 <__sflush_r+0xb0>
 800cab8:	2200      	movs	r2, #0
 800caba:	6062      	str	r2, [r4, #4]
 800cabc:	6922      	ldr	r2, [r4, #16]
 800cabe:	04d9      	lsls	r1, r3, #19
 800cac0:	6022      	str	r2, [r4, #0]
 800cac2:	d504      	bpl.n	800cace <__sflush_r+0x76>
 800cac4:	1c42      	adds	r2, r0, #1
 800cac6:	d101      	bne.n	800cacc <__sflush_r+0x74>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b903      	cbnz	r3, 800cace <__sflush_r+0x76>
 800cacc:	6560      	str	r0, [r4, #84]	@ 0x54
 800cace:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cad0:	602f      	str	r7, [r5, #0]
 800cad2:	b1b9      	cbz	r1, 800cb04 <__sflush_r+0xac>
 800cad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cad8:	4299      	cmp	r1, r3
 800cada:	d002      	beq.n	800cae2 <__sflush_r+0x8a>
 800cadc:	4628      	mov	r0, r5
 800cade:	f7fe fd8f 	bl	800b600 <_free_r>
 800cae2:	2300      	movs	r3, #0
 800cae4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cae6:	e00d      	b.n	800cb04 <__sflush_r+0xac>
 800cae8:	2301      	movs	r3, #1
 800caea:	4628      	mov	r0, r5
 800caec:	47b0      	blx	r6
 800caee:	4602      	mov	r2, r0
 800caf0:	1c50      	adds	r0, r2, #1
 800caf2:	d1c9      	bne.n	800ca88 <__sflush_r+0x30>
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0c6      	beq.n	800ca88 <__sflush_r+0x30>
 800cafa:	2b1d      	cmp	r3, #29
 800cafc:	d001      	beq.n	800cb02 <__sflush_r+0xaa>
 800cafe:	2b16      	cmp	r3, #22
 800cb00:	d11d      	bne.n	800cb3e <__sflush_r+0xe6>
 800cb02:	602f      	str	r7, [r5, #0]
 800cb04:	2000      	movs	r0, #0
 800cb06:	e021      	b.n	800cb4c <__sflush_r+0xf4>
 800cb08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb0c:	b21b      	sxth	r3, r3
 800cb0e:	e01a      	b.n	800cb46 <__sflush_r+0xee>
 800cb10:	690f      	ldr	r7, [r1, #16]
 800cb12:	2f00      	cmp	r7, #0
 800cb14:	d0f6      	beq.n	800cb04 <__sflush_r+0xac>
 800cb16:	0793      	lsls	r3, r2, #30
 800cb18:	bf18      	it	ne
 800cb1a:	2300      	movne	r3, #0
 800cb1c:	680e      	ldr	r6, [r1, #0]
 800cb1e:	bf08      	it	eq
 800cb20:	694b      	ldreq	r3, [r1, #20]
 800cb22:	1bf6      	subs	r6, r6, r7
 800cb24:	600f      	str	r7, [r1, #0]
 800cb26:	608b      	str	r3, [r1, #8]
 800cb28:	2e00      	cmp	r6, #0
 800cb2a:	ddeb      	ble.n	800cb04 <__sflush_r+0xac>
 800cb2c:	4633      	mov	r3, r6
 800cb2e:	463a      	mov	r2, r7
 800cb30:	4628      	mov	r0, r5
 800cb32:	6a21      	ldr	r1, [r4, #32]
 800cb34:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cb38:	47e0      	blx	ip
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	dc07      	bgt.n	800cb4e <__sflush_r+0xf6>
 800cb3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	81a3      	strh	r3, [r4, #12]
 800cb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb4e:	4407      	add	r7, r0
 800cb50:	1a36      	subs	r6, r6, r0
 800cb52:	e7e9      	b.n	800cb28 <__sflush_r+0xd0>
 800cb54:	dfbffffe 	.word	0xdfbffffe

0800cb58 <_fflush_r>:
 800cb58:	b538      	push	{r3, r4, r5, lr}
 800cb5a:	690b      	ldr	r3, [r1, #16]
 800cb5c:	4605      	mov	r5, r0
 800cb5e:	460c      	mov	r4, r1
 800cb60:	b913      	cbnz	r3, 800cb68 <_fflush_r+0x10>
 800cb62:	2500      	movs	r5, #0
 800cb64:	4628      	mov	r0, r5
 800cb66:	bd38      	pop	{r3, r4, r5, pc}
 800cb68:	b118      	cbz	r0, 800cb72 <_fflush_r+0x1a>
 800cb6a:	6a03      	ldr	r3, [r0, #32]
 800cb6c:	b90b      	cbnz	r3, 800cb72 <_fflush_r+0x1a>
 800cb6e:	f7fd fc3b 	bl	800a3e8 <__sinit>
 800cb72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d0f3      	beq.n	800cb62 <_fflush_r+0xa>
 800cb7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb7c:	07d0      	lsls	r0, r2, #31
 800cb7e:	d404      	bmi.n	800cb8a <_fflush_r+0x32>
 800cb80:	0599      	lsls	r1, r3, #22
 800cb82:	d402      	bmi.n	800cb8a <_fflush_r+0x32>
 800cb84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb86:	f7fd fecc 	bl	800a922 <__retarget_lock_acquire_recursive>
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	f7ff ff63 	bl	800ca58 <__sflush_r>
 800cb92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb94:	4605      	mov	r5, r0
 800cb96:	07da      	lsls	r2, r3, #31
 800cb98:	d4e4      	bmi.n	800cb64 <_fflush_r+0xc>
 800cb9a:	89a3      	ldrh	r3, [r4, #12]
 800cb9c:	059b      	lsls	r3, r3, #22
 800cb9e:	d4e1      	bmi.n	800cb64 <_fflush_r+0xc>
 800cba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cba2:	f7fd febf 	bl	800a924 <__retarget_lock_release_recursive>
 800cba6:	e7dd      	b.n	800cb64 <_fflush_r+0xc>

0800cba8 <__swhatbuf_r>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	460c      	mov	r4, r1
 800cbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb0:	4615      	mov	r5, r2
 800cbb2:	2900      	cmp	r1, #0
 800cbb4:	461e      	mov	r6, r3
 800cbb6:	b096      	sub	sp, #88	@ 0x58
 800cbb8:	da0c      	bge.n	800cbd4 <__swhatbuf_r+0x2c>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbc2:	bf14      	ite	ne
 800cbc4:	2340      	movne	r3, #64	@ 0x40
 800cbc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbca:	2000      	movs	r0, #0
 800cbcc:	6031      	str	r1, [r6, #0]
 800cbce:	602b      	str	r3, [r5, #0]
 800cbd0:	b016      	add	sp, #88	@ 0x58
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	466a      	mov	r2, sp
 800cbd6:	f000 f8d3 	bl	800cd80 <_fstat_r>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	dbed      	blt.n	800cbba <__swhatbuf_r+0x12>
 800cbde:	9901      	ldr	r1, [sp, #4]
 800cbe0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbe4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbe8:	4259      	negs	r1, r3
 800cbea:	4159      	adcs	r1, r3
 800cbec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbf0:	e7eb      	b.n	800cbca <__swhatbuf_r+0x22>

0800cbf2 <__smakebuf_r>:
 800cbf2:	898b      	ldrh	r3, [r1, #12]
 800cbf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbf6:	079d      	lsls	r5, r3, #30
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	460c      	mov	r4, r1
 800cbfc:	d507      	bpl.n	800cc0e <__smakebuf_r+0x1c>
 800cbfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	6123      	str	r3, [r4, #16]
 800cc06:	2301      	movs	r3, #1
 800cc08:	6163      	str	r3, [r4, #20]
 800cc0a:	b003      	add	sp, #12
 800cc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc0e:	466a      	mov	r2, sp
 800cc10:	ab01      	add	r3, sp, #4
 800cc12:	f7ff ffc9 	bl	800cba8 <__swhatbuf_r>
 800cc16:	9f00      	ldr	r7, [sp, #0]
 800cc18:	4605      	mov	r5, r0
 800cc1a:	4639      	mov	r1, r7
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7fe fd61 	bl	800b6e4 <_malloc_r>
 800cc22:	b948      	cbnz	r0, 800cc38 <__smakebuf_r+0x46>
 800cc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc28:	059a      	lsls	r2, r3, #22
 800cc2a:	d4ee      	bmi.n	800cc0a <__smakebuf_r+0x18>
 800cc2c:	f023 0303 	bic.w	r3, r3, #3
 800cc30:	f043 0302 	orr.w	r3, r3, #2
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	e7e2      	b.n	800cbfe <__smakebuf_r+0xc>
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc42:	81a3      	strh	r3, [r4, #12]
 800cc44:	9b01      	ldr	r3, [sp, #4]
 800cc46:	6020      	str	r0, [r4, #0]
 800cc48:	b15b      	cbz	r3, 800cc62 <__smakebuf_r+0x70>
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc50:	f000 f8a8 	bl	800cda4 <_isatty_r>
 800cc54:	b128      	cbz	r0, 800cc62 <__smakebuf_r+0x70>
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	f023 0303 	bic.w	r3, r3, #3
 800cc5c:	f043 0301 	orr.w	r3, r3, #1
 800cc60:	81a3      	strh	r3, [r4, #12]
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	431d      	orrs	r5, r3
 800cc66:	81a5      	strh	r5, [r4, #12]
 800cc68:	e7cf      	b.n	800cc0a <__smakebuf_r+0x18>

0800cc6a <__sccl>:
 800cc6a:	b570      	push	{r4, r5, r6, lr}
 800cc6c:	780b      	ldrb	r3, [r1, #0]
 800cc6e:	4604      	mov	r4, r0
 800cc70:	2b5e      	cmp	r3, #94	@ 0x5e
 800cc72:	bf0b      	itete	eq
 800cc74:	784b      	ldrbeq	r3, [r1, #1]
 800cc76:	1c4a      	addne	r2, r1, #1
 800cc78:	1c8a      	addeq	r2, r1, #2
 800cc7a:	2100      	movne	r1, #0
 800cc7c:	bf08      	it	eq
 800cc7e:	2101      	moveq	r1, #1
 800cc80:	3801      	subs	r0, #1
 800cc82:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800cc86:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cc8a:	42a8      	cmp	r0, r5
 800cc8c:	d1fb      	bne.n	800cc86 <__sccl+0x1c>
 800cc8e:	b90b      	cbnz	r3, 800cc94 <__sccl+0x2a>
 800cc90:	1e50      	subs	r0, r2, #1
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	f081 0101 	eor.w	r1, r1, #1
 800cc98:	4610      	mov	r0, r2
 800cc9a:	54e1      	strb	r1, [r4, r3]
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cca2:	2d2d      	cmp	r5, #45	@ 0x2d
 800cca4:	d005      	beq.n	800ccb2 <__sccl+0x48>
 800cca6:	2d5d      	cmp	r5, #93	@ 0x5d
 800cca8:	d016      	beq.n	800ccd8 <__sccl+0x6e>
 800ccaa:	2d00      	cmp	r5, #0
 800ccac:	d0f1      	beq.n	800cc92 <__sccl+0x28>
 800ccae:	462b      	mov	r3, r5
 800ccb0:	e7f2      	b.n	800cc98 <__sccl+0x2e>
 800ccb2:	7846      	ldrb	r6, [r0, #1]
 800ccb4:	2e5d      	cmp	r6, #93	@ 0x5d
 800ccb6:	d0fa      	beq.n	800ccae <__sccl+0x44>
 800ccb8:	42b3      	cmp	r3, r6
 800ccba:	dcf8      	bgt.n	800ccae <__sccl+0x44>
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	3002      	adds	r0, #2
 800ccc0:	3201      	adds	r2, #1
 800ccc2:	4296      	cmp	r6, r2
 800ccc4:	54a1      	strb	r1, [r4, r2]
 800ccc6:	dcfb      	bgt.n	800ccc0 <__sccl+0x56>
 800ccc8:	1af2      	subs	r2, r6, r3
 800ccca:	3a01      	subs	r2, #1
 800cccc:	42b3      	cmp	r3, r6
 800ccce:	bfa8      	it	ge
 800ccd0:	2200      	movge	r2, #0
 800ccd2:	1c5d      	adds	r5, r3, #1
 800ccd4:	18ab      	adds	r3, r5, r2
 800ccd6:	e7e1      	b.n	800cc9c <__sccl+0x32>
 800ccd8:	4610      	mov	r0, r2
 800ccda:	e7da      	b.n	800cc92 <__sccl+0x28>

0800ccdc <__submore>:
 800ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce0:	460c      	mov	r4, r1
 800cce2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cce4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cce8:	4299      	cmp	r1, r3
 800ccea:	d11b      	bne.n	800cd24 <__submore+0x48>
 800ccec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ccf0:	f7fe fcf8 	bl	800b6e4 <_malloc_r>
 800ccf4:	b918      	cbnz	r0, 800ccfe <__submore+0x22>
 800ccf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd02:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cd04:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cd08:	6360      	str	r0, [r4, #52]	@ 0x34
 800cd0a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cd0e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cd12:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cd16:	7043      	strb	r3, [r0, #1]
 800cd18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cd1c:	7003      	strb	r3, [r0, #0]
 800cd1e:	6020      	str	r0, [r4, #0]
 800cd20:	2000      	movs	r0, #0
 800cd22:	e7ea      	b.n	800ccfa <__submore+0x1e>
 800cd24:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cd26:	0077      	lsls	r7, r6, #1
 800cd28:	463a      	mov	r2, r7
 800cd2a:	f000 f89f 	bl	800ce6c <_realloc_r>
 800cd2e:	4605      	mov	r5, r0
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d0e0      	beq.n	800ccf6 <__submore+0x1a>
 800cd34:	eb00 0806 	add.w	r8, r0, r6
 800cd38:	4601      	mov	r1, r0
 800cd3a:	4632      	mov	r2, r6
 800cd3c:	4640      	mov	r0, r8
 800cd3e:	f7fd fe00 	bl	800a942 <memcpy>
 800cd42:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cd46:	f8c4 8000 	str.w	r8, [r4]
 800cd4a:	e7e9      	b.n	800cd20 <__submore+0x44>

0800cd4c <memmove>:
 800cd4c:	4288      	cmp	r0, r1
 800cd4e:	b510      	push	{r4, lr}
 800cd50:	eb01 0402 	add.w	r4, r1, r2
 800cd54:	d902      	bls.n	800cd5c <memmove+0x10>
 800cd56:	4284      	cmp	r4, r0
 800cd58:	4623      	mov	r3, r4
 800cd5a:	d807      	bhi.n	800cd6c <memmove+0x20>
 800cd5c:	1e43      	subs	r3, r0, #1
 800cd5e:	42a1      	cmp	r1, r4
 800cd60:	d008      	beq.n	800cd74 <memmove+0x28>
 800cd62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd6a:	e7f8      	b.n	800cd5e <memmove+0x12>
 800cd6c:	4601      	mov	r1, r0
 800cd6e:	4402      	add	r2, r0
 800cd70:	428a      	cmp	r2, r1
 800cd72:	d100      	bne.n	800cd76 <memmove+0x2a>
 800cd74:	bd10      	pop	{r4, pc}
 800cd76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd7e:	e7f7      	b.n	800cd70 <memmove+0x24>

0800cd80 <_fstat_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	2300      	movs	r3, #0
 800cd84:	4d06      	ldr	r5, [pc, #24]	@ (800cda0 <_fstat_r+0x20>)
 800cd86:	4604      	mov	r4, r0
 800cd88:	4608      	mov	r0, r1
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	602b      	str	r3, [r5, #0]
 800cd8e:	f7f5 fd01 	bl	8002794 <_fstat>
 800cd92:	1c43      	adds	r3, r0, #1
 800cd94:	d102      	bne.n	800cd9c <_fstat_r+0x1c>
 800cd96:	682b      	ldr	r3, [r5, #0]
 800cd98:	b103      	cbz	r3, 800cd9c <_fstat_r+0x1c>
 800cd9a:	6023      	str	r3, [r4, #0]
 800cd9c:	bd38      	pop	{r3, r4, r5, pc}
 800cd9e:	bf00      	nop
 800cda0:	20003cf4 	.word	0x20003cf4

0800cda4 <_isatty_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	2300      	movs	r3, #0
 800cda8:	4d05      	ldr	r5, [pc, #20]	@ (800cdc0 <_isatty_r+0x1c>)
 800cdaa:	4604      	mov	r4, r0
 800cdac:	4608      	mov	r0, r1
 800cdae:	602b      	str	r3, [r5, #0]
 800cdb0:	f7f5 fcff 	bl	80027b2 <_isatty>
 800cdb4:	1c43      	adds	r3, r0, #1
 800cdb6:	d102      	bne.n	800cdbe <_isatty_r+0x1a>
 800cdb8:	682b      	ldr	r3, [r5, #0]
 800cdba:	b103      	cbz	r3, 800cdbe <_isatty_r+0x1a>
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	bd38      	pop	{r3, r4, r5, pc}
 800cdc0:	20003cf4 	.word	0x20003cf4

0800cdc4 <_sbrk_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	4d05      	ldr	r5, [pc, #20]	@ (800cde0 <_sbrk_r+0x1c>)
 800cdca:	4604      	mov	r4, r0
 800cdcc:	4608      	mov	r0, r1
 800cdce:	602b      	str	r3, [r5, #0]
 800cdd0:	f7f5 fd06 	bl	80027e0 <_sbrk>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d102      	bne.n	800cdde <_sbrk_r+0x1a>
 800cdd8:	682b      	ldr	r3, [r5, #0]
 800cdda:	b103      	cbz	r3, 800cdde <_sbrk_r+0x1a>
 800cddc:	6023      	str	r3, [r4, #0]
 800cdde:	bd38      	pop	{r3, r4, r5, pc}
 800cde0:	20003cf4 	.word	0x20003cf4

0800cde4 <__assert_func>:
 800cde4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cde6:	4614      	mov	r4, r2
 800cde8:	461a      	mov	r2, r3
 800cdea:	4b09      	ldr	r3, [pc, #36]	@ (800ce10 <__assert_func+0x2c>)
 800cdec:	4605      	mov	r5, r0
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	68d8      	ldr	r0, [r3, #12]
 800cdf2:	b954      	cbnz	r4, 800ce0a <__assert_func+0x26>
 800cdf4:	4b07      	ldr	r3, [pc, #28]	@ (800ce14 <__assert_func+0x30>)
 800cdf6:	461c      	mov	r4, r3
 800cdf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cdfc:	9100      	str	r1, [sp, #0]
 800cdfe:	462b      	mov	r3, r5
 800ce00:	4905      	ldr	r1, [pc, #20]	@ (800ce18 <__assert_func+0x34>)
 800ce02:	f000 f95b 	bl	800d0bc <fiprintf>
 800ce06:	f000 f96b 	bl	800d0e0 <abort>
 800ce0a:	4b04      	ldr	r3, [pc, #16]	@ (800ce1c <__assert_func+0x38>)
 800ce0c:	e7f4      	b.n	800cdf8 <__assert_func+0x14>
 800ce0e:	bf00      	nop
 800ce10:	20000054 	.word	0x20000054
 800ce14:	0800d6c9 	.word	0x0800d6c9
 800ce18:	0800d69b 	.word	0x0800d69b
 800ce1c:	0800d68e 	.word	0x0800d68e

0800ce20 <_calloc_r>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	fba1 5402 	umull	r5, r4, r1, r2
 800ce26:	b93c      	cbnz	r4, 800ce38 <_calloc_r+0x18>
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7fe fc5b 	bl	800b6e4 <_malloc_r>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	b928      	cbnz	r0, 800ce3e <_calloc_r+0x1e>
 800ce32:	2600      	movs	r6, #0
 800ce34:	4630      	mov	r0, r6
 800ce36:	bd70      	pop	{r4, r5, r6, pc}
 800ce38:	220c      	movs	r2, #12
 800ce3a:	6002      	str	r2, [r0, #0]
 800ce3c:	e7f9      	b.n	800ce32 <_calloc_r+0x12>
 800ce3e:	462a      	mov	r2, r5
 800ce40:	4621      	mov	r1, r4
 800ce42:	f7fd fc9b 	bl	800a77c <memset>
 800ce46:	e7f5      	b.n	800ce34 <_calloc_r+0x14>

0800ce48 <__ascii_mbtowc>:
 800ce48:	b082      	sub	sp, #8
 800ce4a:	b901      	cbnz	r1, 800ce4e <__ascii_mbtowc+0x6>
 800ce4c:	a901      	add	r1, sp, #4
 800ce4e:	b142      	cbz	r2, 800ce62 <__ascii_mbtowc+0x1a>
 800ce50:	b14b      	cbz	r3, 800ce66 <__ascii_mbtowc+0x1e>
 800ce52:	7813      	ldrb	r3, [r2, #0]
 800ce54:	600b      	str	r3, [r1, #0]
 800ce56:	7812      	ldrb	r2, [r2, #0]
 800ce58:	1e10      	subs	r0, r2, #0
 800ce5a:	bf18      	it	ne
 800ce5c:	2001      	movne	r0, #1
 800ce5e:	b002      	add	sp, #8
 800ce60:	4770      	bx	lr
 800ce62:	4610      	mov	r0, r2
 800ce64:	e7fb      	b.n	800ce5e <__ascii_mbtowc+0x16>
 800ce66:	f06f 0001 	mvn.w	r0, #1
 800ce6a:	e7f8      	b.n	800ce5e <__ascii_mbtowc+0x16>

0800ce6c <_realloc_r>:
 800ce6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce70:	4680      	mov	r8, r0
 800ce72:	4615      	mov	r5, r2
 800ce74:	460c      	mov	r4, r1
 800ce76:	b921      	cbnz	r1, 800ce82 <_realloc_r+0x16>
 800ce78:	4611      	mov	r1, r2
 800ce7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7e:	f7fe bc31 	b.w	800b6e4 <_malloc_r>
 800ce82:	b92a      	cbnz	r2, 800ce90 <_realloc_r+0x24>
 800ce84:	f7fe fbbc 	bl	800b600 <_free_r>
 800ce88:	2400      	movs	r4, #0
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce90:	f000 f92d 	bl	800d0ee <_malloc_usable_size_r>
 800ce94:	4285      	cmp	r5, r0
 800ce96:	4606      	mov	r6, r0
 800ce98:	d802      	bhi.n	800cea0 <_realloc_r+0x34>
 800ce9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ce9e:	d8f4      	bhi.n	800ce8a <_realloc_r+0x1e>
 800cea0:	4629      	mov	r1, r5
 800cea2:	4640      	mov	r0, r8
 800cea4:	f7fe fc1e 	bl	800b6e4 <_malloc_r>
 800cea8:	4607      	mov	r7, r0
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d0ec      	beq.n	800ce88 <_realloc_r+0x1c>
 800ceae:	42b5      	cmp	r5, r6
 800ceb0:	462a      	mov	r2, r5
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	bf28      	it	cs
 800ceb6:	4632      	movcs	r2, r6
 800ceb8:	f7fd fd43 	bl	800a942 <memcpy>
 800cebc:	4621      	mov	r1, r4
 800cebe:	4640      	mov	r0, r8
 800cec0:	f7fe fb9e 	bl	800b600 <_free_r>
 800cec4:	463c      	mov	r4, r7
 800cec6:	e7e0      	b.n	800ce8a <_realloc_r+0x1e>

0800cec8 <_strtol_l.constprop.0>:
 800cec8:	2b24      	cmp	r3, #36	@ 0x24
 800ceca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cece:	4686      	mov	lr, r0
 800ced0:	4690      	mov	r8, r2
 800ced2:	d801      	bhi.n	800ced8 <_strtol_l.constprop.0+0x10>
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d106      	bne.n	800cee6 <_strtol_l.constprop.0+0x1e>
 800ced8:	f7fd fcf8 	bl	800a8cc <__errno>
 800cedc:	2316      	movs	r3, #22
 800cede:	6003      	str	r3, [r0, #0]
 800cee0:	2000      	movs	r0, #0
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	460d      	mov	r5, r1
 800cee8:	4833      	ldr	r0, [pc, #204]	@ (800cfb8 <_strtol_l.constprop.0+0xf0>)
 800ceea:	462a      	mov	r2, r5
 800ceec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cef0:	5d06      	ldrb	r6, [r0, r4]
 800cef2:	f016 0608 	ands.w	r6, r6, #8
 800cef6:	d1f8      	bne.n	800ceea <_strtol_l.constprop.0+0x22>
 800cef8:	2c2d      	cmp	r4, #45	@ 0x2d
 800cefa:	d12d      	bne.n	800cf58 <_strtol_l.constprop.0+0x90>
 800cefc:	2601      	movs	r6, #1
 800cefe:	782c      	ldrb	r4, [r5, #0]
 800cf00:	1c95      	adds	r5, r2, #2
 800cf02:	f033 0210 	bics.w	r2, r3, #16
 800cf06:	d109      	bne.n	800cf1c <_strtol_l.constprop.0+0x54>
 800cf08:	2c30      	cmp	r4, #48	@ 0x30
 800cf0a:	d12a      	bne.n	800cf62 <_strtol_l.constprop.0+0x9a>
 800cf0c:	782a      	ldrb	r2, [r5, #0]
 800cf0e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf12:	2a58      	cmp	r2, #88	@ 0x58
 800cf14:	d125      	bne.n	800cf62 <_strtol_l.constprop.0+0x9a>
 800cf16:	2310      	movs	r3, #16
 800cf18:	786c      	ldrb	r4, [r5, #1]
 800cf1a:	3502      	adds	r5, #2
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cf22:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cf26:	fbbc f9f3 	udiv	r9, ip, r3
 800cf2a:	4610      	mov	r0, r2
 800cf2c:	fb03 ca19 	mls	sl, r3, r9, ip
 800cf30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cf34:	2f09      	cmp	r7, #9
 800cf36:	d81b      	bhi.n	800cf70 <_strtol_l.constprop.0+0xa8>
 800cf38:	463c      	mov	r4, r7
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	dd27      	ble.n	800cf8e <_strtol_l.constprop.0+0xc6>
 800cf3e:	1c57      	adds	r7, r2, #1
 800cf40:	d007      	beq.n	800cf52 <_strtol_l.constprop.0+0x8a>
 800cf42:	4581      	cmp	r9, r0
 800cf44:	d320      	bcc.n	800cf88 <_strtol_l.constprop.0+0xc0>
 800cf46:	d101      	bne.n	800cf4c <_strtol_l.constprop.0+0x84>
 800cf48:	45a2      	cmp	sl, r4
 800cf4a:	db1d      	blt.n	800cf88 <_strtol_l.constprop.0+0xc0>
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	fb00 4003 	mla	r0, r0, r3, r4
 800cf52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf56:	e7eb      	b.n	800cf30 <_strtol_l.constprop.0+0x68>
 800cf58:	2c2b      	cmp	r4, #43	@ 0x2b
 800cf5a:	bf04      	itt	eq
 800cf5c:	782c      	ldrbeq	r4, [r5, #0]
 800cf5e:	1c95      	addeq	r5, r2, #2
 800cf60:	e7cf      	b.n	800cf02 <_strtol_l.constprop.0+0x3a>
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1da      	bne.n	800cf1c <_strtol_l.constprop.0+0x54>
 800cf66:	2c30      	cmp	r4, #48	@ 0x30
 800cf68:	bf0c      	ite	eq
 800cf6a:	2308      	moveq	r3, #8
 800cf6c:	230a      	movne	r3, #10
 800cf6e:	e7d5      	b.n	800cf1c <_strtol_l.constprop.0+0x54>
 800cf70:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf74:	2f19      	cmp	r7, #25
 800cf76:	d801      	bhi.n	800cf7c <_strtol_l.constprop.0+0xb4>
 800cf78:	3c37      	subs	r4, #55	@ 0x37
 800cf7a:	e7de      	b.n	800cf3a <_strtol_l.constprop.0+0x72>
 800cf7c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf80:	2f19      	cmp	r7, #25
 800cf82:	d804      	bhi.n	800cf8e <_strtol_l.constprop.0+0xc6>
 800cf84:	3c57      	subs	r4, #87	@ 0x57
 800cf86:	e7d8      	b.n	800cf3a <_strtol_l.constprop.0+0x72>
 800cf88:	f04f 32ff 	mov.w	r2, #4294967295
 800cf8c:	e7e1      	b.n	800cf52 <_strtol_l.constprop.0+0x8a>
 800cf8e:	1c53      	adds	r3, r2, #1
 800cf90:	d108      	bne.n	800cfa4 <_strtol_l.constprop.0+0xdc>
 800cf92:	2322      	movs	r3, #34	@ 0x22
 800cf94:	4660      	mov	r0, ip
 800cf96:	f8ce 3000 	str.w	r3, [lr]
 800cf9a:	f1b8 0f00 	cmp.w	r8, #0
 800cf9e:	d0a0      	beq.n	800cee2 <_strtol_l.constprop.0+0x1a>
 800cfa0:	1e69      	subs	r1, r5, #1
 800cfa2:	e006      	b.n	800cfb2 <_strtol_l.constprop.0+0xea>
 800cfa4:	b106      	cbz	r6, 800cfa8 <_strtol_l.constprop.0+0xe0>
 800cfa6:	4240      	negs	r0, r0
 800cfa8:	f1b8 0f00 	cmp.w	r8, #0
 800cfac:	d099      	beq.n	800cee2 <_strtol_l.constprop.0+0x1a>
 800cfae:	2a00      	cmp	r2, #0
 800cfb0:	d1f6      	bne.n	800cfa0 <_strtol_l.constprop.0+0xd8>
 800cfb2:	f8c8 1000 	str.w	r1, [r8]
 800cfb6:	e794      	b.n	800cee2 <_strtol_l.constprop.0+0x1a>
 800cfb8:	0800d6cb 	.word	0x0800d6cb

0800cfbc <_strtol_r>:
 800cfbc:	f7ff bf84 	b.w	800cec8 <_strtol_l.constprop.0>

0800cfc0 <_strtoul_l.constprop.0>:
 800cfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	4686      	mov	lr, r0
 800cfc6:	460d      	mov	r5, r1
 800cfc8:	4e33      	ldr	r6, [pc, #204]	@ (800d098 <_strtoul_l.constprop.0+0xd8>)
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfd0:	5d37      	ldrb	r7, [r6, r4]
 800cfd2:	f017 0708 	ands.w	r7, r7, #8
 800cfd6:	d1f8      	bne.n	800cfca <_strtoul_l.constprop.0+0xa>
 800cfd8:	2c2d      	cmp	r4, #45	@ 0x2d
 800cfda:	d12f      	bne.n	800d03c <_strtoul_l.constprop.0+0x7c>
 800cfdc:	2701      	movs	r7, #1
 800cfde:	782c      	ldrb	r4, [r5, #0]
 800cfe0:	1c85      	adds	r5, r0, #2
 800cfe2:	f033 0010 	bics.w	r0, r3, #16
 800cfe6:	d109      	bne.n	800cffc <_strtoul_l.constprop.0+0x3c>
 800cfe8:	2c30      	cmp	r4, #48	@ 0x30
 800cfea:	d12c      	bne.n	800d046 <_strtoul_l.constprop.0+0x86>
 800cfec:	7828      	ldrb	r0, [r5, #0]
 800cfee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cff2:	2858      	cmp	r0, #88	@ 0x58
 800cff4:	d127      	bne.n	800d046 <_strtoul_l.constprop.0+0x86>
 800cff6:	2310      	movs	r3, #16
 800cff8:	786c      	ldrb	r4, [r5, #1]
 800cffa:	3502      	adds	r5, #2
 800cffc:	f04f 38ff 	mov.w	r8, #4294967295
 800d000:	fbb8 f8f3 	udiv	r8, r8, r3
 800d004:	2600      	movs	r6, #0
 800d006:	fb03 f908 	mul.w	r9, r3, r8
 800d00a:	4630      	mov	r0, r6
 800d00c:	ea6f 0909 	mvn.w	r9, r9
 800d010:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d014:	f1bc 0f09 	cmp.w	ip, #9
 800d018:	d81c      	bhi.n	800d054 <_strtoul_l.constprop.0+0x94>
 800d01a:	4664      	mov	r4, ip
 800d01c:	42a3      	cmp	r3, r4
 800d01e:	dd2a      	ble.n	800d076 <_strtoul_l.constprop.0+0xb6>
 800d020:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d024:	d007      	beq.n	800d036 <_strtoul_l.constprop.0+0x76>
 800d026:	4580      	cmp	r8, r0
 800d028:	d322      	bcc.n	800d070 <_strtoul_l.constprop.0+0xb0>
 800d02a:	d101      	bne.n	800d030 <_strtoul_l.constprop.0+0x70>
 800d02c:	45a1      	cmp	r9, r4
 800d02e:	db1f      	blt.n	800d070 <_strtoul_l.constprop.0+0xb0>
 800d030:	2601      	movs	r6, #1
 800d032:	fb00 4003 	mla	r0, r0, r3, r4
 800d036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d03a:	e7e9      	b.n	800d010 <_strtoul_l.constprop.0+0x50>
 800d03c:	2c2b      	cmp	r4, #43	@ 0x2b
 800d03e:	bf04      	itt	eq
 800d040:	782c      	ldrbeq	r4, [r5, #0]
 800d042:	1c85      	addeq	r5, r0, #2
 800d044:	e7cd      	b.n	800cfe2 <_strtoul_l.constprop.0+0x22>
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1d8      	bne.n	800cffc <_strtoul_l.constprop.0+0x3c>
 800d04a:	2c30      	cmp	r4, #48	@ 0x30
 800d04c:	bf0c      	ite	eq
 800d04e:	2308      	moveq	r3, #8
 800d050:	230a      	movne	r3, #10
 800d052:	e7d3      	b.n	800cffc <_strtoul_l.constprop.0+0x3c>
 800d054:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d058:	f1bc 0f19 	cmp.w	ip, #25
 800d05c:	d801      	bhi.n	800d062 <_strtoul_l.constprop.0+0xa2>
 800d05e:	3c37      	subs	r4, #55	@ 0x37
 800d060:	e7dc      	b.n	800d01c <_strtoul_l.constprop.0+0x5c>
 800d062:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d066:	f1bc 0f19 	cmp.w	ip, #25
 800d06a:	d804      	bhi.n	800d076 <_strtoul_l.constprop.0+0xb6>
 800d06c:	3c57      	subs	r4, #87	@ 0x57
 800d06e:	e7d5      	b.n	800d01c <_strtoul_l.constprop.0+0x5c>
 800d070:	f04f 36ff 	mov.w	r6, #4294967295
 800d074:	e7df      	b.n	800d036 <_strtoul_l.constprop.0+0x76>
 800d076:	1c73      	adds	r3, r6, #1
 800d078:	d106      	bne.n	800d088 <_strtoul_l.constprop.0+0xc8>
 800d07a:	2322      	movs	r3, #34	@ 0x22
 800d07c:	4630      	mov	r0, r6
 800d07e:	f8ce 3000 	str.w	r3, [lr]
 800d082:	b932      	cbnz	r2, 800d092 <_strtoul_l.constprop.0+0xd2>
 800d084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d088:	b107      	cbz	r7, 800d08c <_strtoul_l.constprop.0+0xcc>
 800d08a:	4240      	negs	r0, r0
 800d08c:	2a00      	cmp	r2, #0
 800d08e:	d0f9      	beq.n	800d084 <_strtoul_l.constprop.0+0xc4>
 800d090:	b106      	cbz	r6, 800d094 <_strtoul_l.constprop.0+0xd4>
 800d092:	1e69      	subs	r1, r5, #1
 800d094:	6011      	str	r1, [r2, #0]
 800d096:	e7f5      	b.n	800d084 <_strtoul_l.constprop.0+0xc4>
 800d098:	0800d6cb 	.word	0x0800d6cb

0800d09c <_strtoul_r>:
 800d09c:	f7ff bf90 	b.w	800cfc0 <_strtoul_l.constprop.0>

0800d0a0 <__ascii_wctomb>:
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	4608      	mov	r0, r1
 800d0a4:	b141      	cbz	r1, 800d0b8 <__ascii_wctomb+0x18>
 800d0a6:	2aff      	cmp	r2, #255	@ 0xff
 800d0a8:	d904      	bls.n	800d0b4 <__ascii_wctomb+0x14>
 800d0aa:	228a      	movs	r2, #138	@ 0x8a
 800d0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	4770      	bx	lr
 800d0b4:	2001      	movs	r0, #1
 800d0b6:	700a      	strb	r2, [r1, #0]
 800d0b8:	4770      	bx	lr
	...

0800d0bc <fiprintf>:
 800d0bc:	b40e      	push	{r1, r2, r3}
 800d0be:	b503      	push	{r0, r1, lr}
 800d0c0:	4601      	mov	r1, r0
 800d0c2:	ab03      	add	r3, sp, #12
 800d0c4:	4805      	ldr	r0, [pc, #20]	@ (800d0dc <fiprintf+0x20>)
 800d0c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ca:	6800      	ldr	r0, [r0, #0]
 800d0cc:	9301      	str	r3, [sp, #4]
 800d0ce:	f7ff fa5f 	bl	800c590 <_vfiprintf_r>
 800d0d2:	b002      	add	sp, #8
 800d0d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0d8:	b003      	add	sp, #12
 800d0da:	4770      	bx	lr
 800d0dc:	20000054 	.word	0x20000054

0800d0e0 <abort>:
 800d0e0:	2006      	movs	r0, #6
 800d0e2:	b508      	push	{r3, lr}
 800d0e4:	f000 f834 	bl	800d150 <raise>
 800d0e8:	2001      	movs	r0, #1
 800d0ea:	f7f5 fb04 	bl	80026f6 <_exit>

0800d0ee <_malloc_usable_size_r>:
 800d0ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0f2:	1f18      	subs	r0, r3, #4
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfbc      	itt	lt
 800d0f8:	580b      	ldrlt	r3, [r1, r0]
 800d0fa:	18c0      	addlt	r0, r0, r3
 800d0fc:	4770      	bx	lr

0800d0fe <_raise_r>:
 800d0fe:	291f      	cmp	r1, #31
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	4605      	mov	r5, r0
 800d104:	460c      	mov	r4, r1
 800d106:	d904      	bls.n	800d112 <_raise_r+0x14>
 800d108:	2316      	movs	r3, #22
 800d10a:	6003      	str	r3, [r0, #0]
 800d10c:	f04f 30ff 	mov.w	r0, #4294967295
 800d110:	bd38      	pop	{r3, r4, r5, pc}
 800d112:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d114:	b112      	cbz	r2, 800d11c <_raise_r+0x1e>
 800d116:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d11a:	b94b      	cbnz	r3, 800d130 <_raise_r+0x32>
 800d11c:	4628      	mov	r0, r5
 800d11e:	f000 f831 	bl	800d184 <_getpid_r>
 800d122:	4622      	mov	r2, r4
 800d124:	4601      	mov	r1, r0
 800d126:	4628      	mov	r0, r5
 800d128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d12c:	f000 b818 	b.w	800d160 <_kill_r>
 800d130:	2b01      	cmp	r3, #1
 800d132:	d00a      	beq.n	800d14a <_raise_r+0x4c>
 800d134:	1c59      	adds	r1, r3, #1
 800d136:	d103      	bne.n	800d140 <_raise_r+0x42>
 800d138:	2316      	movs	r3, #22
 800d13a:	6003      	str	r3, [r0, #0]
 800d13c:	2001      	movs	r0, #1
 800d13e:	e7e7      	b.n	800d110 <_raise_r+0x12>
 800d140:	2100      	movs	r1, #0
 800d142:	4620      	mov	r0, r4
 800d144:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d148:	4798      	blx	r3
 800d14a:	2000      	movs	r0, #0
 800d14c:	e7e0      	b.n	800d110 <_raise_r+0x12>
	...

0800d150 <raise>:
 800d150:	4b02      	ldr	r3, [pc, #8]	@ (800d15c <raise+0xc>)
 800d152:	4601      	mov	r1, r0
 800d154:	6818      	ldr	r0, [r3, #0]
 800d156:	f7ff bfd2 	b.w	800d0fe <_raise_r>
 800d15a:	bf00      	nop
 800d15c:	20000054 	.word	0x20000054

0800d160 <_kill_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	2300      	movs	r3, #0
 800d164:	4d06      	ldr	r5, [pc, #24]	@ (800d180 <_kill_r+0x20>)
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	4611      	mov	r1, r2
 800d16c:	602b      	str	r3, [r5, #0]
 800d16e:	f7f5 fab2 	bl	80026d6 <_kill>
 800d172:	1c43      	adds	r3, r0, #1
 800d174:	d102      	bne.n	800d17c <_kill_r+0x1c>
 800d176:	682b      	ldr	r3, [r5, #0]
 800d178:	b103      	cbz	r3, 800d17c <_kill_r+0x1c>
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	bd38      	pop	{r3, r4, r5, pc}
 800d17e:	bf00      	nop
 800d180:	20003cf4 	.word	0x20003cf4

0800d184 <_getpid_r>:
 800d184:	f7f5 baa0 	b.w	80026c8 <_getpid>

0800d188 <_init>:
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	bf00      	nop
 800d18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d18e:	bc08      	pop	{r3}
 800d190:	469e      	mov	lr, r3
 800d192:	4770      	bx	lr

0800d194 <_fini>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	bf00      	nop
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr
