
Read_DHT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c38  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08007d48  08007d48  00008d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008220  08008220  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008220  08008220  00009220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008228  08008228  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008228  08008228  00009228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800822c  0800822c  0000922c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008230  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001d4  08008404  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008404  0000a39c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed5  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a41  00000000  00000000  000120d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00013b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ac  00000000  00000000  00014298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b96  00000000  00000000  00014844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000992c  00000000  00000000  0002c3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f17  00000000  00000000  00035d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000b9c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000bcf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d30 	.word	0x08007d30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007d30 	.word	0x08007d30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8001098:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <DelayMicro+0x34>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <DelayMicro+0x38>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0ddb      	lsrs	r3, r3, #23
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 80010ac:	bf00      	nop
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1fa      	bne.n	80010ae <DelayMicro+0x1e>
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	20000000 	.word	0x20000000
 80010c8:	ee9bfab5 	.word	0xee9bfab5

080010cc <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 80010de:	2104      	movs	r1, #4
 80010e0:	480e      	ldr	r0, [pc, #56]	@ (800111c <dht22_init+0x50>)
 80010e2:	f000 ffa3 	bl	800202c <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 80010e6:	2304      	movs	r3, #4
 80010e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010ea:	2311      	movs	r3, #17
 80010ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4808      	ldr	r0, [pc, #32]	@ (800111c <dht22_init+0x50>)
 80010fc:	f000 fe12 	bl	8001d24 <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001104:	f000 fc2a 	bl	800195c <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2104      	movs	r1, #4
 800110c:	4803      	ldr	r0, [pc, #12]	@ (800111c <dht22_init+0x50>)
 800110e:	f001 f860 	bl	80021d2 <HAL_GPIO_WritePin>

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010800 	.word	0x40010800

08001120 <DHT22_GetTemp_Humidity>:

uint8_t DHT22_GetTemp_Humidity(float *Temp, float *Humidity)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16, Humid16;
	uint8_t i, j = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2104      	movs	r1, #4
 8001132:	485f      	ldr	r0, [pc, #380]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 8001134:	f001 f84d 	bl	80021d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2104      	movs	r1, #4
 800113c:	485c      	ldr	r0, [pc, #368]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 800113e:	f001 f848 	bl	80021d2 <HAL_GPIO_WritePin>
	DelayMicro(2000);
 8001142:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001146:	f7ff ffa3 	bl	8001090 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4858      	ldr	r0, [pc, #352]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 8001150:	f001 f83f 	bl	80021d2 <HAL_GPIO_WritePin>
	DelayMicro(1200);
 8001154:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001158:	f7ff ff9a 	bl	8001090 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);	
 800115c:	2201      	movs	r2, #1
 800115e:	2104      	movs	r1, #4
 8001160:	4853      	ldr	r0, [pc, #332]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 8001162:	f001 f836 	bl	80021d2 <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40 	
 8001166:	2027      	movs	r0, #39	@ 0x27
 8001168:	f7ff ff92 	bl	8001090 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 800116c:	2104      	movs	r1, #4
 800116e:	4850      	ldr	r0, [pc, #320]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 8001170:	f001 f818 	bl	80021a4 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <DHT22_GetTemp_Humidity+0x5e>
	{
		return 0;
 800117a:	2300      	movs	r3, #0
 800117c:	e093      	b.n	80012a6 <DHT22_GetTemp_Humidity+0x186>
	}
	DelayMicro(80);
 800117e:	2050      	movs	r0, #80	@ 0x50
 8001180:	f7ff ff86 	bl	8001090 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 8001184:	2104      	movs	r1, #4
 8001186:	484a      	ldr	r0, [pc, #296]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 8001188:	f001 f80c 	bl	80021a4 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <DHT22_GetTemp_Humidity+0x76>
	{
		return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e087      	b.n	80012a6 <DHT22_GetTemp_Humidity+0x186>
	}
	DelayMicro(80);
 8001196:	2050      	movs	r0, #80	@ 0x50
 8001198:	f7ff ff7a 	bl	8001090 <DelayMicro>

	for (j=0; j<5; j++)
 800119c:	2300      	movs	r3, #0
 800119e:	757b      	strb	r3, [r7, #21]
 80011a0:	e040      	b.n	8001224 <DHT22_GetTemp_Humidity+0x104>
	{
		dataArray[j]=0;
 80011a2:	7d7b      	ldrb	r3, [r7, #21]
 80011a4:	3318      	adds	r3, #24
 80011a6:	443b      	add	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(i=0; i<8; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	75bb      	strb	r3, [r7, #22]
 80011b2:	e031      	b.n	8001218 <DHT22_GetTemp_Humidity+0xf8>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);	
 80011b4:	bf00      	nop
 80011b6:	2104      	movs	r1, #4
 80011b8:	483d      	ldr	r0, [pc, #244]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 80011ba:	f000 fff3 	bl	80021a4 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f8      	beq.n	80011b6 <DHT22_GetTemp_Humidity+0x96>
			DelayMicro(30);
 80011c4:	201e      	movs	r0, #30
 80011c6:	f7ff ff63 	bl	8001090 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 80011ca:	2104      	movs	r1, #4
 80011cc:	4838      	ldr	r0, [pc, #224]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 80011ce:	f000 ffe9 	bl	80021a4 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d014      	beq.n	8001202 <DHT22_GetTemp_Humidity+0xe2>
				dataArray[j] |= (1<<(7-i));
 80011d8:	7d7b      	ldrb	r3, [r7, #21]
 80011da:	3318      	adds	r3, #24
 80011dc:	443b      	add	r3, r7
 80011de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	7dbb      	ldrb	r3, [r7, #22]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b25a      	sxtb	r2, r3
 80011f6:	7d7b      	ldrb	r3, [r7, #21]
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	3318      	adds	r3, #24
 80011fc:	443b      	add	r3, r7
 80011fe:	f803 2c10 	strb.w	r2, [r3, #-16]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);				
 8001202:	bf00      	nop
 8001204:	2104      	movs	r1, #4
 8001206:	482a      	ldr	r0, [pc, #168]	@ (80012b0 <DHT22_GetTemp_Humidity+0x190>)
 8001208:	f000 ffcc 	bl	80021a4 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d0f8      	beq.n	8001204 <DHT22_GetTemp_Humidity+0xe4>
		for(i=0; i<8; i++)
 8001212:	7dbb      	ldrb	r3, [r7, #22]
 8001214:	3301      	adds	r3, #1
 8001216:	75bb      	strb	r3, [r7, #22]
 8001218:	7dbb      	ldrb	r3, [r7, #22]
 800121a:	2b07      	cmp	r3, #7
 800121c:	d9ca      	bls.n	80011b4 <DHT22_GetTemp_Humidity+0x94>
	for (j=0; j<5; j++)
 800121e:	7d7b      	ldrb	r3, [r7, #21]
 8001220:	3301      	adds	r3, #1
 8001222:	757b      	strb	r3, [r7, #21]
 8001224:	7d7b      	ldrb	r3, [r7, #21]
 8001226:	2b04      	cmp	r3, #4
 8001228:	d9bb      	bls.n	80011a2 <DHT22_GetTemp_Humidity+0x82>
		}
	}
	myChecksum = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 800122e:	2300      	movs	r3, #0
 8001230:	753b      	strb	r3, [r7, #20]
 8001232:	e00a      	b.n	800124a <DHT22_GetTemp_Humidity+0x12a>
	{
		myChecksum += dataArray[k];
 8001234:	7d3b      	ldrb	r3, [r7, #20]
 8001236:	3318      	adds	r3, #24
 8001238:	443b      	add	r3, r7
 800123a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	4413      	add	r3, r2
 8001242:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++) 
 8001244:	7d3b      	ldrb	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	753b      	strb	r3, [r7, #20]
 800124a:	7d3b      	ldrb	r3, [r7, #20]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d9f1      	bls.n	8001234 <DHT22_GetTemp_Humidity+0x114>
	}
		Temp16 = (dataArray[2] <<8) | dataArray[3];
 8001250:	7abb      	ldrb	r3, [r7, #10]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	827b      	strh	r3, [r7, #18]
		Humid16 = (dataArray[0] <<8) | dataArray[1];
 8001260:	7a3b      	ldrb	r3, [r7, #8]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21a      	sxth	r2, r3
 8001266:	7a7b      	ldrb	r3, [r7, #9]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	823b      	strh	r3, [r7, #16]
		
		*Temp = Temp16/10.0f;
 8001270:	8a7b      	ldrh	r3, [r7, #18]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd32 	bl	8000cdc <__aeabi_i2f>
 8001278:	4603      	mov	r3, r0
 800127a:	490e      	ldr	r1, [pc, #56]	@ (80012b4 <DHT22_GetTemp_Humidity+0x194>)
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe35 	bl	8000eec <__aeabi_fdiv>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
		*Humidity = Humid16/10.0f;
 800128a:	8a3b      	ldrh	r3, [r7, #16]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fd25 	bl	8000cdc <__aeabi_i2f>
 8001292:	4603      	mov	r3, r0
 8001294:	4907      	ldr	r1, [pc, #28]	@ (80012b4 <DHT22_GetTemp_Humidity+0x194>)
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe28 	bl	8000eec <__aeabi_fdiv>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	601a      	str	r2, [r3, #0]
		return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40010800 	.word	0x40010800
 80012b4:	41200000 	.word	0x41200000

080012b8 <__io_putchar>:
		#define PUTCHAR_PROTOTYPE int	__io_putchar(int ch)
#else
		#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
 PUTCHAR_PROTOTYPE
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1,0xFFFF);
 80012c0:	1d39      	adds	r1, r7, #4
 80012c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c6:	2201      	movs	r2, #1
 80012c8:	4803      	ldr	r0, [pc, #12]	@ (80012d8 <__io_putchar+0x20>)
 80012ca:	f001 fbfb 	bl	8002ac4 <HAL_UART_Transmit>
	return ch;
 80012ce:	687b      	ldr	r3, [r7, #4]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200001f0 	.word	0x200001f0

080012dc <main>:
	 printf("H = %.1f, STT = %d\r\n",h,i);
	 end_dht_tick = uwTick;
	 printf("Total time = %ld, STT = %d\r\n",(end_dht_tick-start_dht_tick),i);
 }
int main(void)
{
 80012dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e0:	b08a      	sub	sp, #40	@ 0x28
 80012e2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f000 fad8 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f86c 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 f8da 	bl	80014a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012f0:	f000 f8ae 	bl	8001450 <MX_USART3_UART_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <main+0xc4>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <main+0xc4>)
 80012fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012fe:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <main+0xc8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <main+0xc8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6013      	str	r3, [r2, #0]
  dht22_init();
 800130c:	f7ff fede 	bl	80010cc <dht22_init>
  int count=0;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//start_dht_tick=uwTick;
	start_dht_tick=DWT->CYCCNT;
 8001314:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <main+0xc8>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a23      	ldr	r2, [pc, #140]	@ (80013a8 <main+0xcc>)
 800131a:	6013      	str	r3, [r2, #0]
	DHT22_GetTemp_Humidity(&t, &h);
 800131c:	4923      	ldr	r1, [pc, #140]	@ (80013ac <main+0xd0>)
 800131e:	4824      	ldr	r0, [pc, #144]	@ (80013b0 <main+0xd4>)
 8001320:	f7ff fefe 	bl	8001120 <DHT22_GetTemp_Humidity>
	//end_dht_tick=uwTick;
	end_dht_tick=DWT->CYCCNT;
 8001324:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <main+0xc8>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4a22      	ldr	r2, [pc, #136]	@ (80013b4 <main+0xd8>)
 800132a:	6013      	str	r3, [r2, #0]
	uint32_t elapsed_cycles = end_dht_tick - start_dht_tick;
 800132c:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <main+0xd8>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <main+0xcc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	60bb      	str	r3, [r7, #8]
	  float time_us = (float)elapsed_cycles / (72000000  / 1000000); // thời gian tính bằng µs
 8001338:	68b8      	ldr	r0, [r7, #8]
 800133a:	f7ff fccb 	bl	8000cd4 <__aeabi_ui2f>
 800133e:	4603      	mov	r3, r0
 8001340:	491d      	ldr	r1, [pc, #116]	@ (80013b8 <main+0xdc>)
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fdd2 	bl	8000eec <__aeabi_fdiv>
 8001348:	4603      	mov	r3, r0
 800134a:	607b      	str	r3, [r7, #4]
	  float time_ms = time_us / 1000;
 800134c:	491b      	ldr	r1, [pc, #108]	@ (80013bc <main+0xe0>)
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fdcc 	bl	8000eec <__aeabi_fdiv>
 8001354:	4603      	mov	r3, r0
 8001356:	603b      	str	r3, [r7, #0]
	count++;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
	printf("T = %.1f, H = %.1f, Total time = %f, STT = %d\r\n",t,h,time_us,count);
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <main+0xd4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f860 	bl	8000428 <__aeabi_f2d>
 8001368:	4680      	mov	r8, r0
 800136a:	4689      	mov	r9, r1
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <main+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f859 	bl	8000428 <__aeabi_f2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff f854 	bl	8000428 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	68f9      	ldr	r1, [r7, #12]
 8001386:	9104      	str	r1, [sp, #16]
 8001388:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800138c:	e9cd 4500 	strd	r4, r5, [sp]
 8001390:	4642      	mov	r2, r8
 8001392:	464b      	mov	r3, r9
 8001394:	480a      	ldr	r0, [pc, #40]	@ (80013c0 <main+0xe4>)
 8001396:	f003 f889 	bl	80044ac <iprintf>
  {
 800139a:	bf00      	nop
 800139c:	e7ba      	b.n	8001314 <main+0x38>
 800139e:	bf00      	nop
 80013a0:	e000edf0 	.word	0xe000edf0
 80013a4:	e0001000 	.word	0xe0001000
 80013a8:	20000240 	.word	0x20000240
 80013ac:	2000023c 	.word	0x2000023c
 80013b0:	20000238 	.word	0x20000238
 80013b4:	20000244 	.word	0x20000244
 80013b8:	42900000 	.word	0x42900000
 80013bc:	447a0000 	.word	0x447a0000
 80013c0:	08007d98 	.word	0x08007d98

080013c4 <SystemClock_Config>:
//			break;
//		}
//	}
//}
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b090      	sub	sp, #64	@ 0x40
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0318 	add.w	r3, r7, #24
 80013ce:	2228      	movs	r2, #40	@ 0x28
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 f8df 	bl	8004596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f8:	2302      	movs	r3, #2
 80013fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001400:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001402:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0318 	add.w	r3, r7, #24
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fef9 	bl	8002204 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001418:	f000 f88e 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800142c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2102      	movs	r1, #2
 8001436:	4618      	mov	r0, r3
 8001438:	f001 f966 	bl	8002708 <HAL_RCC_ClockConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001442:	f000 f879 	bl	8001538 <Error_Handler>
  }
}
 8001446:	bf00      	nop
 8001448:	3740      	adds	r7, #64	@ 0x40
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 8001456:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <MX_USART3_UART_Init+0x50>)
 8001458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_USART3_UART_Init+0x4c>)
 8001488:	f001 facc 	bl	8002a24 <HAL_UART_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001492:	f000 f851 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001f0 	.word	0x200001f0
 80014a0:	40004800 	.word	0x40004800

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_GPIO_Init+0x8c>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Data_DHT_GPIO_Port, Data_DHT_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2104      	movs	r1, #4
 8001504:	480b      	ldr	r0, [pc, #44]	@ (8001534 <MX_GPIO_Init+0x90>)
 8001506:	f000 fe64 	bl	80021d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Data_DHT_Pin */
  GPIO_InitStruct.Pin = Data_DHT_Pin;
 800150a:	2304      	movs	r3, #4
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Data_DHT_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	4619      	mov	r1, r3
 8001520:	4804      	ldr	r0, [pc, #16]	@ (8001534 <MX_GPIO_Init+0x90>)
 8001522:	f000 fbff 	bl	8001d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001526:	bf00      	nop
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40010800 	.word	0x40010800

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <Error_Handler+0x8>

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a14      	ldr	r2, [pc, #80]	@ (80015a0 <HAL_MspInit+0x5c>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_MspInit+0x5c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_MspInit+0x60>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_MspInit+0x60>)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010000 	.word	0x40010000

080015a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a20      	ldr	r2, [pc, #128]	@ (8001644 <HAL_UART_MspInit+0x9c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d139      	bne.n	800163c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <HAL_UART_MspInit+0xa0>)
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001648 <HAL_UART_MspInit+0xa0>)
 80015ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d2:	61d3      	str	r3, [r2, #28]
 80015d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <HAL_UART_MspInit+0xa0>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <HAL_UART_MspInit+0xa0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a18      	ldr	r2, [pc, #96]	@ (8001648 <HAL_UART_MspInit+0xa0>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <HAL_UART_MspInit+0xa0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4619      	mov	r1, r3
 800160c:	480f      	ldr	r0, [pc, #60]	@ (800164c <HAL_UART_MspInit+0xa4>)
 800160e:	f000 fb89 	bl	8001d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001612:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	4809      	ldr	r0, [pc, #36]	@ (800164c <HAL_UART_MspInit+0xa4>)
 8001628:	f000 fb7c 	bl	8001d24 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2027      	movs	r0, #39	@ 0x27
 8001632:	f000 fa8e 	bl	8001b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001636:	2027      	movs	r0, #39	@ 0x27
 8001638:	f000 faa7 	bl	8001b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40004800 	.word	0x40004800
 8001648:	40021000 	.word	0x40021000
 800164c:	40010c00 	.word	0x40010c00

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <NMI_Handler+0x4>

08001658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <MemManage_Handler+0x4>

08001668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <UsageFault_Handler+0x4>

08001678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f940 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <USART3_IRQHandler+0x10>)
 80016ae:	f001 fa95 	bl	8002bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200001f0 	.word	0x200001f0

080016bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return 1;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <_kill>:

int _kill(int pid, int sig)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d4:	f002 ffb2 	bl	800463c <__errno>
 80016d8:	4603      	mov	r3, r0
 80016da:	2216      	movs	r2, #22
 80016dc:	601a      	str	r2, [r3, #0]
  return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_exit>:

void _exit (int status)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f2:	f04f 31ff 	mov.w	r1, #4294967295
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffe7 	bl	80016ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <_exit+0x12>

08001700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
  }

  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e009      	b.n	8001760 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fdaf 	bl	80012b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf1      	blt.n	800174c <_write+0x12>
  }
  return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_close>:

int _close(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001798:	605a      	str	r2, [r3, #4]
  return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <_isatty>:

int _isatty(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
	...

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f002 ff1a 	bl	800463c <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20005000 	.word	0x20005000
 8001834:	00000400 	.word	0x00000400
 8001838:	20000248 	.word	0x20000248
 800183c:	200003a0 	.word	0x200003a0

08001840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800184c:	f7ff fff8 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001852:	490c      	ldr	r1, [pc, #48]	@ (8001884 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001854:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a09      	ldr	r2, [pc, #36]	@ (800188c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001868:	4c09      	ldr	r4, [pc, #36]	@ (8001890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f002 fee7 	bl	8004648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff fd2f 	bl	80012dc <main>
  bx lr
 800187e:	4770      	bx	lr
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001888:	08008230 	.word	0x08008230
  ldr r2, =_sbss
 800188c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001890:	2000039c 	.word	0x2000039c

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_Init+0x28>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_Init+0x28>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f947 	bl	8001b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe46 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f95f 	bl	8001ba6 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 f927 	bl	8001b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_IncTick+0x1c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_IncTick+0x20>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a03      	ldr	r2, [pc, #12]	@ (8001944 <HAL_IncTick+0x20>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000008 	.word	0x20000008
 8001944:	2000024c 	.word	0x2000024c

08001948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	@ (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	2000024c 	.word	0x2000024c

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fff0 	bl	8001948 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffe0 	bl	8001948 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d6:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <__NVIC_SetPriorityGrouping+0x44>)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	60d3      	str	r3, [r2, #12]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <__NVIC_GetPriorityGrouping+0x18>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	f003 0307 	and.w	r3, r3, #7
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db0b      	blt.n	8001a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	4906      	ldr	r1, [pc, #24]	@ (8001a3c <__NVIC_EnableIRQ+0x34>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	2001      	movs	r0, #1
 8001a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	@ 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b08:	d301      	bcc.n	8001b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e00f      	b.n	8001b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <SysTick_Config+0x40>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b16:	210f      	movs	r1, #15
 8001b18:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1c:	f7ff ff90 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <SysTick_Config+0x40>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b26:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <SysTick_Config+0x40>)
 8001b28:	2207      	movs	r2, #7
 8001b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	e000e010 	.word	0xe000e010

08001b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff2d 	bl	80019a4 <__NVIC_SetPriorityGrouping>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff42 	bl	80019ec <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ff90 	bl	8001a94 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff5f 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff35 	bl	8001a08 <__NVIC_EnableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffa2 	bl	8001af8 <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d008      	beq.n	8001be8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e020      	b.n	8001c2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 020e 	bic.w	r2, r2, #14
 8001bf6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f202 	lsl.w	r2, r1, r2
 8001c16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d005      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e051      	b.n	8001cfc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 020e 	bic.w	r2, r2, #14
 8001c66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <HAL_DMA_Abort_IT+0xd4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d029      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0xa2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a21      	ldr	r2, [pc, #132]	@ (8001d0c <HAL_DMA_Abort_IT+0xd8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d022      	beq.n	8001cd2 <HAL_DMA_Abort_IT+0x9e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	@ (8001d10 <HAL_DMA_Abort_IT+0xdc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01a      	beq.n	8001ccc <HAL_DMA_Abort_IT+0x98>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d14 <HAL_DMA_Abort_IT+0xe0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d012      	beq.n	8001cc6 <HAL_DMA_Abort_IT+0x92>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d18 <HAL_DMA_Abort_IT+0xe4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x8c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	@ (8001d1c <HAL_DMA_Abort_IT+0xe8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d102      	bne.n	8001cba <HAL_DMA_Abort_IT+0x86>
 8001cb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cb8:	e00e      	b.n	8001cd8 <HAL_DMA_Abort_IT+0xa4>
 8001cba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cbe:	e00b      	b.n	8001cd8 <HAL_DMA_Abort_IT+0xa4>
 8001cc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cc4:	e008      	b.n	8001cd8 <HAL_DMA_Abort_IT+0xa4>
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	e005      	b.n	8001cd8 <HAL_DMA_Abort_IT+0xa4>
 8001ccc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd0:	e002      	b.n	8001cd8 <HAL_DMA_Abort_IT+0xa4>
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	e000      	b.n	8001cd8 <HAL_DMA_Abort_IT+0xa4>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4a11      	ldr	r2, [pc, #68]	@ (8001d20 <HAL_DMA_Abort_IT+0xec>)
 8001cda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
    } 
  }
  return status;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40020008 	.word	0x40020008
 8001d0c:	4002001c 	.word	0x4002001c
 8001d10:	40020030 	.word	0x40020030
 8001d14:	40020044 	.word	0x40020044
 8001d18:	40020058 	.word	0x40020058
 8001d1c:	4002006c 	.word	0x4002006c
 8001d20:	40020000 	.word	0x40020000

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	@ 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e169      	b.n	800200c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8158 	bne.w	8002006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d60:	4a98      	ldr	r2, [pc, #608]	@ (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d875      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d66:	4a98      	ldr	r2, [pc, #608]	@ (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d058      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d6c:	4a96      	ldr	r2, [pc, #600]	@ (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d86f      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d72:	4a96      	ldr	r2, [pc, #600]	@ (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d052      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d78:	4a94      	ldr	r2, [pc, #592]	@ (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d869      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a94      	ldr	r2, [pc, #592]	@ (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04c      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d84:	4a92      	ldr	r2, [pc, #584]	@ (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d863      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a92      	ldr	r2, [pc, #584]	@ (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d046      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d90:	4a90      	ldr	r2, [pc, #576]	@ (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d85d      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d82a      	bhi.n	8001df0 <HAL_GPIO_Init+0xcc>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d859      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001da4 <HAL_GPIO_Init+0x80>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001df9 	.word	0x08001df9
 8001dac:	08001e0b 	.word	0x08001e0b
 8001db0:	08001e4d 	.word	0x08001e4d
 8001db4:	08001e53 	.word	0x08001e53
 8001db8:	08001e53 	.word	0x08001e53
 8001dbc:	08001e53 	.word	0x08001e53
 8001dc0:	08001e53 	.word	0x08001e53
 8001dc4:	08001e53 	.word	0x08001e53
 8001dc8:	08001e53 	.word	0x08001e53
 8001dcc:	08001e53 	.word	0x08001e53
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001e53 	.word	0x08001e53
 8001dd8:	08001e53 	.word	0x08001e53
 8001ddc:	08001e53 	.word	0x08001e53
 8001de0:	08001e53 	.word	0x08001e53
 8001de4:	08001e53 	.word	0x08001e53
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e15 	.word	0x08001e15
 8001df0:	4a79      	ldr	r2, [pc, #484]	@ (8001fd8 <HAL_GPIO_Init+0x2b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001df6:	e02c      	b.n	8001e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e029      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e024      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e01f      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e01a      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e26:	2304      	movs	r3, #4
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e013      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	611a      	str	r2, [r3, #16]
          break;
 8001e3e:	e009      	b.n	8001e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	615a      	str	r2, [r3, #20]
          break;
 8001e4a:	e003      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          break;
 8001e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	@ 0xff
 8001e58:	d801      	bhi.n	8001e5e <HAL_GPIO_Init+0x13a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_Init+0x13e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	@ 0xff
 8001e68:	d802      	bhi.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x152>
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	3b08      	subs	r3, #8
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80b1 	beq.w	8002006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ebc:	4a48      	ldr	r2, [pc, #288]	@ (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	@ (8001fe4 <HAL_GPIO_Init+0x2c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe8 <HAL_GPIO_Init+0x2c4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1e8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fec <HAL_GPIO_Init+0x2c8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1e4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1e0>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f04:	2304      	movs	r3, #4
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f10:	2300      	movs	r3, #0
 8001f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f22:	492f      	ldr	r1, [pc, #188]	@ (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	492c      	ldr	r1, [pc, #176]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4928      	ldr	r1, [pc, #160]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f64:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	4922      	ldr	r1, [pc, #136]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	491e      	ldr	r1, [pc, #120]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4918      	ldr	r1, [pc, #96]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4914      	ldr	r1, [pc, #80]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e021      	b.n	8002006 <HAL_GPIO_Init+0x2e2>
 8001fc2:	bf00      	nop
 8001fc4:	10320000 	.word	0x10320000
 8001fc8:	10310000 	.word	0x10310000
 8001fcc:	10220000 	.word	0x10220000
 8001fd0:	10210000 	.word	0x10210000
 8001fd4:	10120000 	.word	0x10120000
 8001fd8:	10110000 	.word	0x10110000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40011400 	.word	0x40011400
 8001ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4909      	ldr	r1, [pc, #36]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8002002:	4013      	ands	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	3301      	adds	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f ae8e 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	372c      	adds	r7, #44	@ 0x2c
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40010400 	.word	0x40010400

0800202c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800203a:	e09a      	b.n	8002172 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 808d 	beq.w	800216c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002052:	4a4e      	ldr	r2, [pc, #312]	@ (800218c <HAL_GPIO_DeInit+0x160>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a46      	ldr	r2, [pc, #280]	@ (8002190 <HAL_GPIO_DeInit+0x164>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_GPIO_DeInit+0x78>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a45      	ldr	r2, [pc, #276]	@ (8002194 <HAL_GPIO_DeInit+0x168>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_DeInit+0x74>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a44      	ldr	r2, [pc, #272]	@ (8002198 <HAL_GPIO_DeInit+0x16c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_DeInit+0x70>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a43      	ldr	r2, [pc, #268]	@ (800219c <HAL_GPIO_DeInit+0x170>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_DeInit+0x6c>
 8002094:	2303      	movs	r3, #3
 8002096:	e006      	b.n	80020a6 <HAL_GPIO_DeInit+0x7a>
 8002098:	2304      	movs	r3, #4
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_DeInit+0x7a>
 800209c:	2302      	movs	r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_DeInit+0x7a>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_DeInit+0x7a>
 80020a4:	2300      	movs	r3, #0
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d132      	bne.n	800211c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80020b6:	4b3a      	ldr	r3, [pc, #232]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	4938      	ldr	r1, [pc, #224]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80020c4:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4934      	ldr	r1, [pc, #208]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80020d2:	4b33      	ldr	r3, [pc, #204]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4931      	ldr	r1, [pc, #196]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020dc:	4013      	ands	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80020e0:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	492d      	ldr	r1, [pc, #180]	@ (80021a0 <HAL_GPIO_DeInit+0x174>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80020fe:	4a23      	ldr	r2, [pc, #140]	@ (800218c <HAL_GPIO_DeInit+0x160>)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	43da      	mvns	r2, r3
 800210e:	481f      	ldr	r0, [pc, #124]	@ (800218c <HAL_GPIO_DeInit+0x160>)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	400a      	ands	r2, r1
 8002116:	3302      	adds	r3, #2
 8002118:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2bff      	cmp	r3, #255	@ 0xff
 8002120:	d801      	bhi.n	8002126 <HAL_GPIO_DeInit+0xfa>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	e001      	b.n	800212a <HAL_GPIO_DeInit+0xfe>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2bff      	cmp	r3, #255	@ 0xff
 8002130:	d802      	bhi.n	8002138 <HAL_GPIO_DeInit+0x10c>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	e002      	b.n	800213e <HAL_GPIO_DeInit+0x112>
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	3b08      	subs	r3, #8
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	210f      	movs	r1, #15
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	401a      	ands	r2, r3
 8002150:	2104      	movs	r1, #4
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	431a      	orrs	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	3301      	adds	r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f af5e 	bne.w	800203c <HAL_GPIO_DeInit+0x10>
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40010000 	.word	0x40010000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00
 8002198:	40011000 	.word	0x40011000
 800219c:	40011400 	.word	0x40011400
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	807b      	strh	r3, [r7, #2]
 80021de:	4613      	mov	r3, r2
 80021e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e2:	787b      	ldrb	r3, [r7, #1]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021ee:	e003      	b.n	80021f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	041a      	lsls	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	611a      	str	r2, [r3, #16]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
	...

08002204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e272      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002224:	4b92      	ldr	r3, [pc, #584]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b04      	cmp	r3, #4
 800222e:	d00c      	beq.n	800224a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002230:	4b8f      	ldr	r3, [pc, #572]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d112      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
 800223c:	4b8c      	ldr	r3, [pc, #560]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4b89      	ldr	r3, [pc, #548]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06c      	beq.n	8002330 <HAL_RCC_OscConfig+0x12c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d168      	bne.n	8002330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e24c      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x76>
 800226c:	4b80      	ldr	r3, [pc, #512]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7f      	ldr	r2, [pc, #508]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b7b      	ldr	r3, [pc, #492]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7a      	ldr	r2, [pc, #488]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b78      	ldr	r3, [pc, #480]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a77      	ldr	r2, [pc, #476]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0xbc>
 80022a6:	4b72      	ldr	r3, [pc, #456]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a71      	ldr	r2, [pc, #452]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 80022c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b68      	ldr	r3, [pc, #416]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a67      	ldr	r2, [pc, #412]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fb32 	bl	8001948 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7ff fb2e 	bl	8001948 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e200      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe4>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fb1e 	bl	8001948 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff fb1a 	bl	8001948 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	@ 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e1ec      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	4b53      	ldr	r3, [pc, #332]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x10c>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d063      	beq.n	8002406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	4b4c      	ldr	r3, [pc, #304]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800234a:	4b49      	ldr	r3, [pc, #292]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d11c      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
 8002356:	4b46      	ldr	r3, [pc, #280]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	4b43      	ldr	r3, [pc, #268]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1c0      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b3d      	ldr	r3, [pc, #244]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4939      	ldr	r1, [pc, #228]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238e:	e03a      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002398:	4b36      	ldr	r3, [pc, #216]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff fad3 	bl	8001948 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7ff facf 	bl	8001948 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e1a1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4927      	ldr	r1, [pc, #156]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b26      	ldr	r3, [pc, #152]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fab2 	bl	8001948 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e8:	f7ff faae 	bl	8001948 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e180      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d03a      	beq.n	8002488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d019      	beq.n	800244e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800241a:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <HAL_RCC_OscConfig+0x274>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002420:	f7ff fa92 	bl	8001948 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002428:	f7ff fa8e 	bl	8001948 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e160      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <HAL_RCC_OscConfig+0x26c>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002446:	2001      	movs	r0, #1
 8002448:	f000 face 	bl	80029e8 <RCC_Delay>
 800244c:	e01c      	b.n	8002488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800244e:	4b0a      	ldr	r3, [pc, #40]	@ (8002478 <HAL_RCC_OscConfig+0x274>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7ff fa78 	bl	8001948 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245a:	e00f      	b.n	800247c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7ff fa74 	bl	8001948 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d908      	bls.n	800247c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e146      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	42420000 	.word	0x42420000
 8002478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b92      	ldr	r3, [pc, #584]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e9      	bne.n	800245c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a6 	beq.w	80025e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b8b      	ldr	r3, [pc, #556]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a87      	ldr	r2, [pc, #540]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b85      	ldr	r3, [pc, #532]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c2:	4b82      	ldr	r3, [pc, #520]	@ (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ce:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7e      	ldr	r2, [pc, #504]	@ (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7ff fa35 	bl	8001948 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7ff fa31 	bl	8001948 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b64      	cmp	r3, #100	@ 0x64
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e103      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	4b75      	ldr	r3, [pc, #468]	@ (80026cc <HAL_RCC_OscConfig+0x4c8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x312>
 8002508:	4b6f      	ldr	r3, [pc, #444]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4a6e      	ldr	r2, [pc, #440]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6213      	str	r3, [r2, #32]
 8002514:	e02d      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x334>
 800251e:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a69      	ldr	r2, [pc, #420]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	4b67      	ldr	r3, [pc, #412]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a66      	ldr	r2, [pc, #408]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	e01c      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d10c      	bne.n	800255a <HAL_RCC_OscConfig+0x356>
 8002540:	4b61      	ldr	r3, [pc, #388]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a60      	ldr	r2, [pc, #384]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	4b5e      	ldr	r3, [pc, #376]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e00b      	b.n	8002572 <HAL_RCC_OscConfig+0x36e>
 800255a:	4b5b      	ldr	r3, [pc, #364]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a5a      	ldr	r2, [pc, #360]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a57      	ldr	r2, [pc, #348]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d015      	beq.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff f9e5 	bl	8001948 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff f9e1 	bl	8001948 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0b1      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002598:	4b4b      	ldr	r3, [pc, #300]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ee      	beq.n	8002582 <HAL_RCC_OscConfig+0x37e>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a6:	f7ff f9cf 	bl	8001948 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff f9cb 	bl	8001948 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e09b      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c4:	4b40      	ldr	r3, [pc, #256]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ee      	bne.n	80025ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b3c      	ldr	r3, [pc, #240]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a3b      	ldr	r2, [pc, #236]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	4b36      	ldr	r3, [pc, #216]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d061      	beq.n	80026bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d146      	bne.n	800268e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b33      	ldr	r3, [pc, #204]	@ (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7ff f99f 	bl	8001948 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7ff f99b 	bl	8001948 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e06d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002634:	d108      	bne.n	8002648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002636:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4921      	ldr	r1, [pc, #132]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002648:	4b1f      	ldr	r3, [pc, #124]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a19      	ldr	r1, [r3, #32]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	430b      	orrs	r3, r1
 800265a:	491b      	ldr	r1, [pc, #108]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002660:	4b1b      	ldr	r3, [pc, #108]	@ (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7ff f96f 	bl	8001948 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266e:	f7ff f96b 	bl	8001948 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03d      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x46a>
 800268c:	e035      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800268e:	4b10      	ldr	r3, [pc, #64]	@ (80026d0 <HAL_RCC_OscConfig+0x4cc>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff f958 	bl	8001948 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7ff f954 	bl	8001948 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e026      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x498>
 80026ba:	e01e      	b.n	80026fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e019      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <HAL_RCC_OscConfig+0x500>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000

08002708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d0      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b6a      	ldr	r3, [pc, #424]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b67      	ldr	r3, [pc, #412]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4965      	ldr	r1, [pc, #404]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a58      	ldr	r2, [pc, #352]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800276e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a52      	ldr	r2, [pc, #328]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e073      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4936      	ldr	r1, [pc, #216]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f8:	f7ff f8a6 	bl	8001948 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7ff f8a2 	bl	8001948 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e053      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4922      	ldr	r1, [pc, #136]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002882:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	@ (80028d0 <HAL_RCC_ClockConfig+0x1c8>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	@ (80028d4 <HAL_RCC_ClockConfig+0x1cc>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <HAL_RCC_ClockConfig+0x1d0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f804 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08007dc8 	.word	0x08007dc8
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x30>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x36>
 800290a:	e027      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	e027      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <HAL_RCC_GetSysClockFreq+0x94>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0c5b      	lsrs	r3, r3, #17
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	4a11      	ldr	r2, [pc, #68]	@ (800297c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	fb03 f202 	mul.w	r2, r3, r2
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e004      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0c      	ldr	r2, [pc, #48]	@ (8002980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	613b      	str	r3, [r7, #16]
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <HAL_RCC_GetSysClockFreq+0x98>)
 800295e:	613b      	str	r3, [r7, #16]
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	693b      	ldr	r3, [r7, #16]
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	007a1200 	.word	0x007a1200
 8002978:	08007de0 	.word	0x08007de0
 800297c:	08007df0 	.word	0x08007df0
 8002980:	003d0900 	.word	0x003d0900

08002984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b02      	ldr	r3, [pc, #8]	@ (8002994 <HAL_RCC_GetHCLKFreq+0x10>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff2 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	0a1b      	lsrs	r3, r3, #8
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	@ (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	08007dd8 	.word	0x08007dd8

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffde 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	0adb      	lsrs	r3, r3, #11
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	@ (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08007dd8 	.word	0x08007dd8

080029e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <RCC_Delay+0x34>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <RCC_Delay+0x38>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a04:	bf00      	nop
  }
  while (Delay --);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	60fa      	str	r2, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f9      	bne.n	8002a04 <RCC_Delay+0x1c>
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	10624dd3 	.word	0x10624dd3

08002a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e042      	b.n	8002abc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe fdac 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	@ 0x24
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fd63 	bl	8003534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d175      	bne.n	8002bd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_UART_Transmit+0x2c>
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e06e      	b.n	8002bd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2221      	movs	r2, #33	@ 0x21
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b02:	f7fe ff21 	bl	8001948 <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	88fa      	ldrh	r2, [r7, #6]
 8002b12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1c:	d108      	bne.n	8002b30 <HAL_UART_Transmit+0x6c>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	e003      	b.n	8002b38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b38:	e02e      	b.n	8002b98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	@ 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fb01 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e03a      	b.n	8002bd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10b      	bne.n	8002b7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	3302      	adds	r3, #2
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	e007      	b.n	8002b8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	3301      	adds	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1cb      	bne.n	8002b3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2140      	movs	r1, #64	@ 0x40
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 facd 	bl	800314c <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e006      	b.n	8002bd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0ba      	sub	sp, #232	@ 0xe8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_UART_IRQHandler+0x66>
 8002c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fbbc 	bl	80033b8 <UART_Receive_IT>
      return;
 8002c40:	e25b      	b.n	80030fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80de 	beq.w	8002e08 <HAL_UART_IRQHandler+0x22c>
 8002c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80d1 	beq.w	8002e08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_UART_IRQHandler+0xae>
 8002c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_UART_IRQHandler+0xd2>
 8002c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f043 0202 	orr.w	r2, r3, #2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xf6>
 8002cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d011      	beq.n	8002d02 <HAL_UART_IRQHandler+0x126>
 8002cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0208 	orr.w	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 81f2 	beq.w	80030f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_UART_IRQHandler+0x14e>
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fb47 	bl	80033b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <HAL_UART_IRQHandler+0x17a>
 8002d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d04f      	beq.n	8002df6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa51 	bl	80031fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d041      	beq.n	8002dee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3314      	adds	r3, #20
 8002d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1d9      	bne.n	8002d6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d013      	beq.n	8002de6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fbc <HAL_UART_IRQHandler+0x3e0>)
 8002dc4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe ff32 	bl	8001c34 <HAL_DMA_Abort_IT>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d016      	beq.n	8002e04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002de0:	4610      	mov	r0, r2
 8002de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de4:	e00e      	b.n	8002e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f99c 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dec:	e00a      	b.n	8002e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f998 	bl	8003124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df4:	e006      	b.n	8002e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f994 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e02:	e175      	b.n	80030f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	bf00      	nop
    return;
 8002e06:	e173      	b.n	80030f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 814f 	bne.w	80030b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8148 	beq.w	80030b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8141 	beq.w	80030b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80b6 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8145 	beq.w	80030f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e72:	429a      	cmp	r2, r3
 8002e74:	f080 813e 	bcs.w	80030f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f000 8088 	beq.w	8002f9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e9a:	e853 3f00 	ldrex	r3, [r3]
 8002e9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ea6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002eb8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ec4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1d9      	bne.n	8002e8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3314      	adds	r3, #20
 8002ef8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002efc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e1      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3314      	adds	r3, #20
 8002f1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3314      	adds	r3, #20
 8002f34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e3      	bne.n	8002f14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f64:	e853 3f00 	ldrex	r3, [r3]
 8002f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f6c:	f023 0310 	bic.w	r3, r3, #16
 8002f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e3      	bne.n	8002f5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fe11 	bl	8001bbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8bf 	bl	8003136 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fb8:	e09c      	b.n	80030f4 <HAL_UART_IRQHandler+0x518>
 8002fba:	bf00      	nop
 8002fbc:	080032c3 	.word	0x080032c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 808e 	beq.w	80030f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8089 	beq.w	80030f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	330c      	adds	r3, #12
 8003006:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800300a:	647a      	str	r2, [r7, #68]	@ 0x44
 800300c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e3      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3314      	adds	r3, #20
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	623b      	str	r3, [r7, #32]
   return(result);
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3314      	adds	r3, #20
 800303e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003042:	633a      	str	r2, [r7, #48]	@ 0x30
 8003044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e3      	bne.n	800301e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	60fb      	str	r3, [r7, #12]
   return(result);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0310 	bic.w	r3, r3, #16
 800307a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003088:	61fa      	str	r2, [r7, #28]
 800308a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	617b      	str	r3, [r7, #20]
   return(result);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e3      	bne.n	8003064 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f844 	bl	8003136 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030ae:	e023      	b.n	80030f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_UART_IRQHandler+0x4f4>
 80030bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f90e 	bl	80032ea <UART_Transmit_IT>
    return;
 80030ce:	e014      	b.n	80030fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <HAL_UART_IRQHandler+0x51e>
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f94d 	bl	8003388 <UART_EndTransmit_IT>
    return;
 80030ee:	e004      	b.n	80030fa <HAL_UART_IRQHandler+0x51e>
    return;
 80030f0:	bf00      	nop
 80030f2:	e002      	b.n	80030fa <HAL_UART_IRQHandler+0x51e>
      return;
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <HAL_UART_IRQHandler+0x51e>
      return;
 80030f8:	bf00      	nop
  }
}
 80030fa:	37e8      	adds	r7, #232	@ 0xe8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315c:	e03b      	b.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d037      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fe fbef 	bl	8001948 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <UART_WaitOnFlagUntilTimeout+0x30>
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e03a      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d023      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b80      	cmp	r3, #128	@ 0x80
 8003192:	d020      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b40      	cmp	r3, #64	@ 0x40
 8003198:	d01d      	beq.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d116      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f81d 	bl	80031fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2208      	movs	r2, #8
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00f      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4013      	ands	r3, r2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	bf0c      	ite	eq
 80031e6:	2301      	moveq	r3, #1
 80031e8:	2300      	movne	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d0b4      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031fe:	b480      	push	{r7}
 8003200:	b095      	sub	sp, #84	@ 0x54
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	330c      	adds	r3, #12
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800321c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003226:	643a      	str	r2, [r7, #64]	@ 0x40
 8003228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800322c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e5      	bne.n	8003206 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	61fb      	str	r3, [r7, #28]
   return(result);
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800325a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e5      	bne.n	800323a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	2b01      	cmp	r3, #1
 8003274:	d119      	bne.n	80032aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	60bb      	str	r3, [r7, #8]
   return(result);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 0310 	bic.w	r3, r3, #16
 800328c:	647b      	str	r3, [r7, #68]	@ 0x44
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003296:	61ba      	str	r2, [r7, #24]
 8003298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6979      	ldr	r1, [r7, #20]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	613b      	str	r3, [r7, #16]
   return(result);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e5      	bne.n	8003276 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032b8:	bf00      	nop
 80032ba:	3754      	adds	r7, #84	@ 0x54
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff ff21 	bl	8003124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032e2:	bf00      	nop
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b21      	cmp	r3, #33	@ 0x21
 80032fc:	d13e      	bne.n	800337c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003306:	d114      	bne.n	8003332 <UART_Transmit_IT+0x48>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d110      	bne.n	8003332 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003324:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	1c9a      	adds	r2, r3, #2
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	621a      	str	r2, [r3, #32]
 8003330:	e008      	b.n	8003344 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	1c59      	adds	r1, r3, #1
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6211      	str	r1, [r2, #32]
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29b      	uxth	r3, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4619      	mov	r1, r3
 8003352:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10f      	bne.n	8003378 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003366:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003376:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
  }
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800339e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fea9 	bl	8003100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08c      	sub	sp, #48	@ 0x30
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b22      	cmp	r3, #34	@ 0x22
 80033ca:	f040 80ae 	bne.w	800352a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033d6:	d117      	bne.n	8003408 <UART_Receive_IT+0x50>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d113      	bne.n	8003408 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	1c9a      	adds	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	@ 0x28
 8003406:	e026      	b.n	8003456 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800340e:	2300      	movs	r3, #0
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341a:	d007      	beq.n	800342c <UART_Receive_IT+0x74>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <UART_Receive_IT+0x82>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	b2da      	uxtb	r2, r3
 8003434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e008      	b.n	800344c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003446:	b2da      	uxtb	r2, r3
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29b      	uxth	r3, r3
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4619      	mov	r1, r3
 8003464:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003466:	2b00      	cmp	r3, #0
 8003468:	d15d      	bne.n	8003526 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0220 	bic.w	r2, r2, #32
 8003478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d135      	bne.n	800351c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f023 0310 	bic.w	r3, r3, #16
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	330c      	adds	r3, #12
 80034d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d6:	623a      	str	r2, [r7, #32]
 80034d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e5      	bne.n	80034b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d10a      	bne.n	800350e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff fe0e 	bl	8003136 <HAL_UARTEx_RxEventCallback>
 800351a:	e002      	b.n	8003522 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fdf8 	bl	8003112 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e002      	b.n	800352c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e000      	b.n	800352c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
  }
}
 800352c:	4618      	mov	r0, r3
 800352e:	3730      	adds	r7, #48	@ 0x30
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800356e:	f023 030c 	bic.w	r3, r3, #12
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	430b      	orrs	r3, r1
 800357a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	@ (8003648 <UART_SetConfig+0x114>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800359c:	f7ff fa10 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	e002      	b.n	80035aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff f9f8 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 80035a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	441a      	add	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	4a22      	ldr	r2, [pc, #136]	@ (800364c <UART_SetConfig+0x118>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	0119      	lsls	r1, r3, #4
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	009a      	lsls	r2, r3, #2
 80035d4:	441a      	add	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e0:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <UART_SetConfig+0x118>)
 80035e2:	fba3 0302 	umull	r0, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2064      	movs	r0, #100	@ 0x64
 80035ea:	fb00 f303 	mul.w	r3, r0, r3
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	3332      	adds	r3, #50	@ 0x32
 80035f4:	4a15      	ldr	r2, [pc, #84]	@ (800364c <UART_SetConfig+0x118>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003600:	4419      	add	r1, r3
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	009a      	lsls	r2, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fbb2 f2f3 	udiv	r2, r2, r3
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <UART_SetConfig+0x118>)
 800361a:	fba3 0302 	umull	r0, r3, r3, r2
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2064      	movs	r0, #100	@ 0x64
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	3332      	adds	r3, #50	@ 0x32
 800362c:	4a07      	ldr	r2, [pc, #28]	@ (800364c <UART_SetConfig+0x118>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	f003 020f 	and.w	r2, r3, #15
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	440a      	add	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40013800 	.word	0x40013800
 800364c:	51eb851f 	.word	0x51eb851f

08003650 <__cvt>:
 8003650:	2b00      	cmp	r3, #0
 8003652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003656:	461d      	mov	r5, r3
 8003658:	bfbb      	ittet	lt
 800365a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800365e:	461d      	movlt	r5, r3
 8003660:	2300      	movge	r3, #0
 8003662:	232d      	movlt	r3, #45	@ 0x2d
 8003664:	b088      	sub	sp, #32
 8003666:	4614      	mov	r4, r2
 8003668:	bfb8      	it	lt
 800366a:	4614      	movlt	r4, r2
 800366c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800366e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003670:	7013      	strb	r3, [r2, #0]
 8003672:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003674:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003678:	f023 0820 	bic.w	r8, r3, #32
 800367c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003680:	d005      	beq.n	800368e <__cvt+0x3e>
 8003682:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003686:	d100      	bne.n	800368a <__cvt+0x3a>
 8003688:	3601      	adds	r6, #1
 800368a:	2302      	movs	r3, #2
 800368c:	e000      	b.n	8003690 <__cvt+0x40>
 800368e:	2303      	movs	r3, #3
 8003690:	aa07      	add	r2, sp, #28
 8003692:	9204      	str	r2, [sp, #16]
 8003694:	aa06      	add	r2, sp, #24
 8003696:	e9cd a202 	strd	sl, r2, [sp, #8]
 800369a:	e9cd 3600 	strd	r3, r6, [sp]
 800369e:	4622      	mov	r2, r4
 80036a0:	462b      	mov	r3, r5
 80036a2:	f001 f895 	bl	80047d0 <_dtoa_r>
 80036a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80036aa:	4607      	mov	r7, r0
 80036ac:	d119      	bne.n	80036e2 <__cvt+0x92>
 80036ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80036b0:	07db      	lsls	r3, r3, #31
 80036b2:	d50e      	bpl.n	80036d2 <__cvt+0x82>
 80036b4:	eb00 0906 	add.w	r9, r0, r6
 80036b8:	2200      	movs	r2, #0
 80036ba:	2300      	movs	r3, #0
 80036bc:	4620      	mov	r0, r4
 80036be:	4629      	mov	r1, r5
 80036c0:	f7fd f972 	bl	80009a8 <__aeabi_dcmpeq>
 80036c4:	b108      	cbz	r0, 80036ca <__cvt+0x7a>
 80036c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80036ca:	2230      	movs	r2, #48	@ 0x30
 80036cc:	9b07      	ldr	r3, [sp, #28]
 80036ce:	454b      	cmp	r3, r9
 80036d0:	d31e      	bcc.n	8003710 <__cvt+0xc0>
 80036d2:	4638      	mov	r0, r7
 80036d4:	9b07      	ldr	r3, [sp, #28]
 80036d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80036d8:	1bdb      	subs	r3, r3, r7
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	b008      	add	sp, #32
 80036de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80036e6:	eb00 0906 	add.w	r9, r0, r6
 80036ea:	d1e5      	bne.n	80036b8 <__cvt+0x68>
 80036ec:	7803      	ldrb	r3, [r0, #0]
 80036ee:	2b30      	cmp	r3, #48	@ 0x30
 80036f0:	d10a      	bne.n	8003708 <__cvt+0xb8>
 80036f2:	2200      	movs	r2, #0
 80036f4:	2300      	movs	r3, #0
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	f7fd f955 	bl	80009a8 <__aeabi_dcmpeq>
 80036fe:	b918      	cbnz	r0, 8003708 <__cvt+0xb8>
 8003700:	f1c6 0601 	rsb	r6, r6, #1
 8003704:	f8ca 6000 	str.w	r6, [sl]
 8003708:	f8da 3000 	ldr.w	r3, [sl]
 800370c:	4499      	add	r9, r3
 800370e:	e7d3      	b.n	80036b8 <__cvt+0x68>
 8003710:	1c59      	adds	r1, r3, #1
 8003712:	9107      	str	r1, [sp, #28]
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e7d9      	b.n	80036cc <__cvt+0x7c>

08003718 <__exponent>:
 8003718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800371a:	2900      	cmp	r1, #0
 800371c:	bfb6      	itet	lt
 800371e:	232d      	movlt	r3, #45	@ 0x2d
 8003720:	232b      	movge	r3, #43	@ 0x2b
 8003722:	4249      	neglt	r1, r1
 8003724:	2909      	cmp	r1, #9
 8003726:	7002      	strb	r2, [r0, #0]
 8003728:	7043      	strb	r3, [r0, #1]
 800372a:	dd29      	ble.n	8003780 <__exponent+0x68>
 800372c:	f10d 0307 	add.w	r3, sp, #7
 8003730:	461d      	mov	r5, r3
 8003732:	270a      	movs	r7, #10
 8003734:	fbb1 f6f7 	udiv	r6, r1, r7
 8003738:	461a      	mov	r2, r3
 800373a:	fb07 1416 	mls	r4, r7, r6, r1
 800373e:	3430      	adds	r4, #48	@ 0x30
 8003740:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003744:	460c      	mov	r4, r1
 8003746:	2c63      	cmp	r4, #99	@ 0x63
 8003748:	4631      	mov	r1, r6
 800374a:	f103 33ff 	add.w	r3, r3, #4294967295
 800374e:	dcf1      	bgt.n	8003734 <__exponent+0x1c>
 8003750:	3130      	adds	r1, #48	@ 0x30
 8003752:	1e94      	subs	r4, r2, #2
 8003754:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003758:	4623      	mov	r3, r4
 800375a:	1c41      	adds	r1, r0, #1
 800375c:	42ab      	cmp	r3, r5
 800375e:	d30a      	bcc.n	8003776 <__exponent+0x5e>
 8003760:	f10d 0309 	add.w	r3, sp, #9
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	42ac      	cmp	r4, r5
 8003768:	bf88      	it	hi
 800376a:	2300      	movhi	r3, #0
 800376c:	3302      	adds	r3, #2
 800376e:	4403      	add	r3, r0
 8003770:	1a18      	subs	r0, r3, r0
 8003772:	b003      	add	sp, #12
 8003774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003776:	f813 6b01 	ldrb.w	r6, [r3], #1
 800377a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800377e:	e7ed      	b.n	800375c <__exponent+0x44>
 8003780:	2330      	movs	r3, #48	@ 0x30
 8003782:	3130      	adds	r1, #48	@ 0x30
 8003784:	7083      	strb	r3, [r0, #2]
 8003786:	70c1      	strb	r1, [r0, #3]
 8003788:	1d03      	adds	r3, r0, #4
 800378a:	e7f1      	b.n	8003770 <__exponent+0x58>

0800378c <_printf_float>:
 800378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003790:	b091      	sub	sp, #68	@ 0x44
 8003792:	460c      	mov	r4, r1
 8003794:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003798:	4616      	mov	r6, r2
 800379a:	461f      	mov	r7, r3
 800379c:	4605      	mov	r5, r0
 800379e:	f000 ff03 	bl	80045a8 <_localeconv_r>
 80037a2:	6803      	ldr	r3, [r0, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	9308      	str	r3, [sp, #32]
 80037a8:	f7fc fcd2 	bl	8000150 <strlen>
 80037ac:	2300      	movs	r3, #0
 80037ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80037b0:	f8d8 3000 	ldr.w	r3, [r8]
 80037b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80037b6:	3307      	adds	r3, #7
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	f103 0208 	add.w	r2, r3, #8
 80037c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80037c4:	f8d4 b000 	ldr.w	fp, [r4]
 80037c8:	f8c8 2000 	str.w	r2, [r8]
 80037cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80037d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80037e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80037e6:	4b9c      	ldr	r3, [pc, #624]	@ (8003a58 <_printf_float+0x2cc>)
 80037e8:	f7fd f910 	bl	8000a0c <__aeabi_dcmpun>
 80037ec:	bb70      	cbnz	r0, 800384c <_printf_float+0xc0>
 80037ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80037f2:	f04f 32ff 	mov.w	r2, #4294967295
 80037f6:	4b98      	ldr	r3, [pc, #608]	@ (8003a58 <_printf_float+0x2cc>)
 80037f8:	f7fd f8ea 	bl	80009d0 <__aeabi_dcmple>
 80037fc:	bb30      	cbnz	r0, 800384c <_printf_float+0xc0>
 80037fe:	2200      	movs	r2, #0
 8003800:	2300      	movs	r3, #0
 8003802:	4640      	mov	r0, r8
 8003804:	4649      	mov	r1, r9
 8003806:	f7fd f8d9 	bl	80009bc <__aeabi_dcmplt>
 800380a:	b110      	cbz	r0, 8003812 <_printf_float+0x86>
 800380c:	232d      	movs	r3, #45	@ 0x2d
 800380e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003812:	4a92      	ldr	r2, [pc, #584]	@ (8003a5c <_printf_float+0x2d0>)
 8003814:	4b92      	ldr	r3, [pc, #584]	@ (8003a60 <_printf_float+0x2d4>)
 8003816:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800381a:	bf94      	ite	ls
 800381c:	4690      	movls	r8, r2
 800381e:	4698      	movhi	r8, r3
 8003820:	2303      	movs	r3, #3
 8003822:	f04f 0900 	mov.w	r9, #0
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	f02b 0304 	bic.w	r3, fp, #4
 800382c:	6023      	str	r3, [r4, #0]
 800382e:	4633      	mov	r3, r6
 8003830:	4621      	mov	r1, r4
 8003832:	4628      	mov	r0, r5
 8003834:	9700      	str	r7, [sp, #0]
 8003836:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003838:	f000 f9d4 	bl	8003be4 <_printf_common>
 800383c:	3001      	adds	r0, #1
 800383e:	f040 8090 	bne.w	8003962 <_printf_float+0x1d6>
 8003842:	f04f 30ff 	mov.w	r0, #4294967295
 8003846:	b011      	add	sp, #68	@ 0x44
 8003848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800384c:	4642      	mov	r2, r8
 800384e:	464b      	mov	r3, r9
 8003850:	4640      	mov	r0, r8
 8003852:	4649      	mov	r1, r9
 8003854:	f7fd f8da 	bl	8000a0c <__aeabi_dcmpun>
 8003858:	b148      	cbz	r0, 800386e <_printf_float+0xe2>
 800385a:	464b      	mov	r3, r9
 800385c:	2b00      	cmp	r3, #0
 800385e:	bfb8      	it	lt
 8003860:	232d      	movlt	r3, #45	@ 0x2d
 8003862:	4a80      	ldr	r2, [pc, #512]	@ (8003a64 <_printf_float+0x2d8>)
 8003864:	bfb8      	it	lt
 8003866:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800386a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a68 <_printf_float+0x2dc>)
 800386c:	e7d3      	b.n	8003816 <_printf_float+0x8a>
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	d13f      	bne.n	80038f8 <_printf_float+0x16c>
 8003878:	2306      	movs	r3, #6
 800387a:	6063      	str	r3, [r4, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	9206      	str	r2, [sp, #24]
 8003886:	aa0e      	add	r2, sp, #56	@ 0x38
 8003888:	e9cd a204 	strd	sl, r2, [sp, #16]
 800388c:	aa0d      	add	r2, sp, #52	@ 0x34
 800388e:	9203      	str	r2, [sp, #12]
 8003890:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003894:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	4642      	mov	r2, r8
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4628      	mov	r0, r5
 80038a0:	464b      	mov	r3, r9
 80038a2:	910a      	str	r1, [sp, #40]	@ 0x28
 80038a4:	f7ff fed4 	bl	8003650 <__cvt>
 80038a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80038aa:	4680      	mov	r8, r0
 80038ac:	2947      	cmp	r1, #71	@ 0x47
 80038ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80038b0:	d128      	bne.n	8003904 <_printf_float+0x178>
 80038b2:	1cc8      	adds	r0, r1, #3
 80038b4:	db02      	blt.n	80038bc <_printf_float+0x130>
 80038b6:	6863      	ldr	r3, [r4, #4]
 80038b8:	4299      	cmp	r1, r3
 80038ba:	dd40      	ble.n	800393e <_printf_float+0x1b2>
 80038bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80038c0:	fa5f fa8a 	uxtb.w	sl, sl
 80038c4:	4652      	mov	r2, sl
 80038c6:	3901      	subs	r1, #1
 80038c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80038cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80038ce:	f7ff ff23 	bl	8003718 <__exponent>
 80038d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038d4:	4681      	mov	r9, r0
 80038d6:	1813      	adds	r3, r2, r0
 80038d8:	2a01      	cmp	r2, #1
 80038da:	6123      	str	r3, [r4, #16]
 80038dc:	dc02      	bgt.n	80038e4 <_printf_float+0x158>
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	07d2      	lsls	r2, r2, #31
 80038e2:	d501      	bpl.n	80038e8 <_printf_float+0x15c>
 80038e4:	3301      	adds	r3, #1
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d09e      	beq.n	800382e <_printf_float+0xa2>
 80038f0:	232d      	movs	r3, #45	@ 0x2d
 80038f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f6:	e79a      	b.n	800382e <_printf_float+0xa2>
 80038f8:	2947      	cmp	r1, #71	@ 0x47
 80038fa:	d1bf      	bne.n	800387c <_printf_float+0xf0>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1bd      	bne.n	800387c <_printf_float+0xf0>
 8003900:	2301      	movs	r3, #1
 8003902:	e7ba      	b.n	800387a <_printf_float+0xee>
 8003904:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003908:	d9dc      	bls.n	80038c4 <_printf_float+0x138>
 800390a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800390e:	d118      	bne.n	8003942 <_printf_float+0x1b6>
 8003910:	2900      	cmp	r1, #0
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	dd0b      	ble.n	800392e <_printf_float+0x1a2>
 8003916:	6121      	str	r1, [r4, #16]
 8003918:	b913      	cbnz	r3, 8003920 <_printf_float+0x194>
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	07d0      	lsls	r0, r2, #31
 800391e:	d502      	bpl.n	8003926 <_printf_float+0x19a>
 8003920:	3301      	adds	r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	6123      	str	r3, [r4, #16]
 8003926:	f04f 0900 	mov.w	r9, #0
 800392a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800392c:	e7dc      	b.n	80038e8 <_printf_float+0x15c>
 800392e:	b913      	cbnz	r3, 8003936 <_printf_float+0x1aa>
 8003930:	6822      	ldr	r2, [r4, #0]
 8003932:	07d2      	lsls	r2, r2, #31
 8003934:	d501      	bpl.n	800393a <_printf_float+0x1ae>
 8003936:	3302      	adds	r3, #2
 8003938:	e7f4      	b.n	8003924 <_printf_float+0x198>
 800393a:	2301      	movs	r3, #1
 800393c:	e7f2      	b.n	8003924 <_printf_float+0x198>
 800393e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003944:	4299      	cmp	r1, r3
 8003946:	db05      	blt.n	8003954 <_printf_float+0x1c8>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	6121      	str	r1, [r4, #16]
 800394c:	07d8      	lsls	r0, r3, #31
 800394e:	d5ea      	bpl.n	8003926 <_printf_float+0x19a>
 8003950:	1c4b      	adds	r3, r1, #1
 8003952:	e7e7      	b.n	8003924 <_printf_float+0x198>
 8003954:	2900      	cmp	r1, #0
 8003956:	bfcc      	ite	gt
 8003958:	2201      	movgt	r2, #1
 800395a:	f1c1 0202 	rsble	r2, r1, #2
 800395e:	4413      	add	r3, r2
 8003960:	e7e0      	b.n	8003924 <_printf_float+0x198>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	055a      	lsls	r2, r3, #21
 8003966:	d407      	bmi.n	8003978 <_printf_float+0x1ec>
 8003968:	6923      	ldr	r3, [r4, #16]
 800396a:	4642      	mov	r2, r8
 800396c:	4631      	mov	r1, r6
 800396e:	4628      	mov	r0, r5
 8003970:	47b8      	blx	r7
 8003972:	3001      	adds	r0, #1
 8003974:	d12b      	bne.n	80039ce <_printf_float+0x242>
 8003976:	e764      	b.n	8003842 <_printf_float+0xb6>
 8003978:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800397c:	f240 80dc 	bls.w	8003b38 <_printf_float+0x3ac>
 8003980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003984:	2200      	movs	r2, #0
 8003986:	2300      	movs	r3, #0
 8003988:	f7fd f80e 	bl	80009a8 <__aeabi_dcmpeq>
 800398c:	2800      	cmp	r0, #0
 800398e:	d033      	beq.n	80039f8 <_printf_float+0x26c>
 8003990:	2301      	movs	r3, #1
 8003992:	4631      	mov	r1, r6
 8003994:	4628      	mov	r0, r5
 8003996:	4a35      	ldr	r2, [pc, #212]	@ (8003a6c <_printf_float+0x2e0>)
 8003998:	47b8      	blx	r7
 800399a:	3001      	adds	r0, #1
 800399c:	f43f af51 	beq.w	8003842 <_printf_float+0xb6>
 80039a0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80039a4:	4543      	cmp	r3, r8
 80039a6:	db02      	blt.n	80039ae <_printf_float+0x222>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	07d8      	lsls	r0, r3, #31
 80039ac:	d50f      	bpl.n	80039ce <_printf_float+0x242>
 80039ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039b2:	4631      	mov	r1, r6
 80039b4:	4628      	mov	r0, r5
 80039b6:	47b8      	blx	r7
 80039b8:	3001      	adds	r0, #1
 80039ba:	f43f af42 	beq.w	8003842 <_printf_float+0xb6>
 80039be:	f04f 0900 	mov.w	r9, #0
 80039c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80039c6:	f104 0a1a 	add.w	sl, r4, #26
 80039ca:	45c8      	cmp	r8, r9
 80039cc:	dc09      	bgt.n	80039e2 <_printf_float+0x256>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	079b      	lsls	r3, r3, #30
 80039d2:	f100 8102 	bmi.w	8003bda <_printf_float+0x44e>
 80039d6:	68e0      	ldr	r0, [r4, #12]
 80039d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039da:	4298      	cmp	r0, r3
 80039dc:	bfb8      	it	lt
 80039de:	4618      	movlt	r0, r3
 80039e0:	e731      	b.n	8003846 <_printf_float+0xba>
 80039e2:	2301      	movs	r3, #1
 80039e4:	4652      	mov	r2, sl
 80039e6:	4631      	mov	r1, r6
 80039e8:	4628      	mov	r0, r5
 80039ea:	47b8      	blx	r7
 80039ec:	3001      	adds	r0, #1
 80039ee:	f43f af28 	beq.w	8003842 <_printf_float+0xb6>
 80039f2:	f109 0901 	add.w	r9, r9, #1
 80039f6:	e7e8      	b.n	80039ca <_printf_float+0x23e>
 80039f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dc38      	bgt.n	8003a70 <_printf_float+0x2e4>
 80039fe:	2301      	movs	r3, #1
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	4a19      	ldr	r2, [pc, #100]	@ (8003a6c <_printf_float+0x2e0>)
 8003a06:	47b8      	blx	r7
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f43f af1a 	beq.w	8003842 <_printf_float+0xb6>
 8003a0e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003a12:	ea59 0303 	orrs.w	r3, r9, r3
 8003a16:	d102      	bne.n	8003a1e <_printf_float+0x292>
 8003a18:	6823      	ldr	r3, [r4, #0]
 8003a1a:	07d9      	lsls	r1, r3, #31
 8003a1c:	d5d7      	bpl.n	80039ce <_printf_float+0x242>
 8003a1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a22:	4631      	mov	r1, r6
 8003a24:	4628      	mov	r0, r5
 8003a26:	47b8      	blx	r7
 8003a28:	3001      	adds	r0, #1
 8003a2a:	f43f af0a 	beq.w	8003842 <_printf_float+0xb6>
 8003a2e:	f04f 0a00 	mov.w	sl, #0
 8003a32:	f104 0b1a 	add.w	fp, r4, #26
 8003a36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a38:	425b      	negs	r3, r3
 8003a3a:	4553      	cmp	r3, sl
 8003a3c:	dc01      	bgt.n	8003a42 <_printf_float+0x2b6>
 8003a3e:	464b      	mov	r3, r9
 8003a40:	e793      	b.n	800396a <_printf_float+0x1de>
 8003a42:	2301      	movs	r3, #1
 8003a44:	465a      	mov	r2, fp
 8003a46:	4631      	mov	r1, r6
 8003a48:	4628      	mov	r0, r5
 8003a4a:	47b8      	blx	r7
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f43f aef8 	beq.w	8003842 <_printf_float+0xb6>
 8003a52:	f10a 0a01 	add.w	sl, sl, #1
 8003a56:	e7ee      	b.n	8003a36 <_printf_float+0x2aa>
 8003a58:	7fefffff 	.word	0x7fefffff
 8003a5c:	08007df2 	.word	0x08007df2
 8003a60:	08007df6 	.word	0x08007df6
 8003a64:	08007dfa 	.word	0x08007dfa
 8003a68:	08007dfe 	.word	0x08007dfe
 8003a6c:	08007e02 	.word	0x08007e02
 8003a70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a72:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003a76:	4553      	cmp	r3, sl
 8003a78:	bfa8      	it	ge
 8003a7a:	4653      	movge	r3, sl
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	4699      	mov	r9, r3
 8003a80:	dc36      	bgt.n	8003af0 <_printf_float+0x364>
 8003a82:	f04f 0b00 	mov.w	fp, #0
 8003a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a8a:	f104 021a 	add.w	r2, r4, #26
 8003a8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a92:	eba3 0309 	sub.w	r3, r3, r9
 8003a96:	455b      	cmp	r3, fp
 8003a98:	dc31      	bgt.n	8003afe <_printf_float+0x372>
 8003a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a9c:	459a      	cmp	sl, r3
 8003a9e:	dc3a      	bgt.n	8003b16 <_printf_float+0x38a>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	07da      	lsls	r2, r3, #31
 8003aa4:	d437      	bmi.n	8003b16 <_printf_float+0x38a>
 8003aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003aa8:	ebaa 0903 	sub.w	r9, sl, r3
 8003aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003aae:	ebaa 0303 	sub.w	r3, sl, r3
 8003ab2:	4599      	cmp	r9, r3
 8003ab4:	bfa8      	it	ge
 8003ab6:	4699      	movge	r9, r3
 8003ab8:	f1b9 0f00 	cmp.w	r9, #0
 8003abc:	dc33      	bgt.n	8003b26 <_printf_float+0x39a>
 8003abe:	f04f 0800 	mov.w	r8, #0
 8003ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ac6:	f104 0b1a 	add.w	fp, r4, #26
 8003aca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003acc:	ebaa 0303 	sub.w	r3, sl, r3
 8003ad0:	eba3 0309 	sub.w	r3, r3, r9
 8003ad4:	4543      	cmp	r3, r8
 8003ad6:	f77f af7a 	ble.w	80039ce <_printf_float+0x242>
 8003ada:	2301      	movs	r3, #1
 8003adc:	465a      	mov	r2, fp
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f43f aeac 	beq.w	8003842 <_printf_float+0xb6>
 8003aea:	f108 0801 	add.w	r8, r8, #1
 8003aee:	e7ec      	b.n	8003aca <_printf_float+0x33e>
 8003af0:	4642      	mov	r2, r8
 8003af2:	4631      	mov	r1, r6
 8003af4:	4628      	mov	r0, r5
 8003af6:	47b8      	blx	r7
 8003af8:	3001      	adds	r0, #1
 8003afa:	d1c2      	bne.n	8003a82 <_printf_float+0x2f6>
 8003afc:	e6a1      	b.n	8003842 <_printf_float+0xb6>
 8003afe:	2301      	movs	r3, #1
 8003b00:	4631      	mov	r1, r6
 8003b02:	4628      	mov	r0, r5
 8003b04:	920a      	str	r2, [sp, #40]	@ 0x28
 8003b06:	47b8      	blx	r7
 8003b08:	3001      	adds	r0, #1
 8003b0a:	f43f ae9a 	beq.w	8003842 <_printf_float+0xb6>
 8003b0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b10:	f10b 0b01 	add.w	fp, fp, #1
 8003b14:	e7bb      	b.n	8003a8e <_printf_float+0x302>
 8003b16:	4631      	mov	r1, r6
 8003b18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	d1c0      	bne.n	8003aa6 <_printf_float+0x31a>
 8003b24:	e68d      	b.n	8003842 <_printf_float+0xb6>
 8003b26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b28:	464b      	mov	r3, r9
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	4442      	add	r2, r8
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	d1c3      	bne.n	8003abe <_printf_float+0x332>
 8003b36:	e684      	b.n	8003842 <_printf_float+0xb6>
 8003b38:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003b3c:	f1ba 0f01 	cmp.w	sl, #1
 8003b40:	dc01      	bgt.n	8003b46 <_printf_float+0x3ba>
 8003b42:	07db      	lsls	r3, r3, #31
 8003b44:	d536      	bpl.n	8003bb4 <_printf_float+0x428>
 8003b46:	2301      	movs	r3, #1
 8003b48:	4642      	mov	r2, r8
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	47b8      	blx	r7
 8003b50:	3001      	adds	r0, #1
 8003b52:	f43f ae76 	beq.w	8003842 <_printf_float+0xb6>
 8003b56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	47b8      	blx	r7
 8003b60:	3001      	adds	r0, #1
 8003b62:	f43f ae6e 	beq.w	8003842 <_printf_float+0xb6>
 8003b66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b72:	f7fc ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8003b76:	b9c0      	cbnz	r0, 8003baa <_printf_float+0x41e>
 8003b78:	4653      	mov	r3, sl
 8003b7a:	f108 0201 	add.w	r2, r8, #1
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	d10c      	bne.n	8003ba2 <_printf_float+0x416>
 8003b88:	e65b      	b.n	8003842 <_printf_float+0xb6>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	465a      	mov	r2, fp
 8003b8e:	4631      	mov	r1, r6
 8003b90:	4628      	mov	r0, r5
 8003b92:	47b8      	blx	r7
 8003b94:	3001      	adds	r0, #1
 8003b96:	f43f ae54 	beq.w	8003842 <_printf_float+0xb6>
 8003b9a:	f108 0801 	add.w	r8, r8, #1
 8003b9e:	45d0      	cmp	r8, sl
 8003ba0:	dbf3      	blt.n	8003b8a <_printf_float+0x3fe>
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ba8:	e6e0      	b.n	800396c <_printf_float+0x1e0>
 8003baa:	f04f 0800 	mov.w	r8, #0
 8003bae:	f104 0b1a 	add.w	fp, r4, #26
 8003bb2:	e7f4      	b.n	8003b9e <_printf_float+0x412>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	e7e1      	b.n	8003b7e <_printf_float+0x3f2>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	464a      	mov	r2, r9
 8003bbe:	4631      	mov	r1, r6
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	47b8      	blx	r7
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	f43f ae3c 	beq.w	8003842 <_printf_float+0xb6>
 8003bca:	f108 0801 	add.w	r8, r8, #1
 8003bce:	68e3      	ldr	r3, [r4, #12]
 8003bd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003bd2:	1a5b      	subs	r3, r3, r1
 8003bd4:	4543      	cmp	r3, r8
 8003bd6:	dcf0      	bgt.n	8003bba <_printf_float+0x42e>
 8003bd8:	e6fd      	b.n	80039d6 <_printf_float+0x24a>
 8003bda:	f04f 0800 	mov.w	r8, #0
 8003bde:	f104 0919 	add.w	r9, r4, #25
 8003be2:	e7f4      	b.n	8003bce <_printf_float+0x442>

08003be4 <_printf_common>:
 8003be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be8:	4616      	mov	r6, r2
 8003bea:	4698      	mov	r8, r3
 8003bec:	688a      	ldr	r2, [r1, #8]
 8003bee:	690b      	ldr	r3, [r1, #16]
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bfb8      	it	lt
 8003bf6:	4613      	movlt	r3, r2
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bfe:	460c      	mov	r4, r1
 8003c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c04:	b10a      	cbz	r2, 8003c0a <_printf_common+0x26>
 8003c06:	3301      	adds	r3, #1
 8003c08:	6033      	str	r3, [r6, #0]
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	0699      	lsls	r1, r3, #26
 8003c0e:	bf42      	ittt	mi
 8003c10:	6833      	ldrmi	r3, [r6, #0]
 8003c12:	3302      	addmi	r3, #2
 8003c14:	6033      	strmi	r3, [r6, #0]
 8003c16:	6825      	ldr	r5, [r4, #0]
 8003c18:	f015 0506 	ands.w	r5, r5, #6
 8003c1c:	d106      	bne.n	8003c2c <_printf_common+0x48>
 8003c1e:	f104 0a19 	add.w	sl, r4, #25
 8003c22:	68e3      	ldr	r3, [r4, #12]
 8003c24:	6832      	ldr	r2, [r6, #0]
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	42ab      	cmp	r3, r5
 8003c2a:	dc2b      	bgt.n	8003c84 <_printf_common+0xa0>
 8003c2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	3b00      	subs	r3, #0
 8003c34:	bf18      	it	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	0692      	lsls	r2, r2, #26
 8003c3a:	d430      	bmi.n	8003c9e <_printf_common+0xba>
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c44:	47c8      	blx	r9
 8003c46:	3001      	adds	r0, #1
 8003c48:	d023      	beq.n	8003c92 <_printf_common+0xae>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	6922      	ldr	r2, [r4, #16]
 8003c4e:	f003 0306 	and.w	r3, r3, #6
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	bf14      	ite	ne
 8003c56:	2500      	movne	r5, #0
 8003c58:	6833      	ldreq	r3, [r6, #0]
 8003c5a:	f04f 0600 	mov.w	r6, #0
 8003c5e:	bf08      	it	eq
 8003c60:	68e5      	ldreq	r5, [r4, #12]
 8003c62:	f104 041a 	add.w	r4, r4, #26
 8003c66:	bf08      	it	eq
 8003c68:	1aed      	subeq	r5, r5, r3
 8003c6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c6e:	bf08      	it	eq
 8003c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bfc4      	itt	gt
 8003c78:	1a9b      	subgt	r3, r3, r2
 8003c7a:	18ed      	addgt	r5, r5, r3
 8003c7c:	42b5      	cmp	r5, r6
 8003c7e:	d11a      	bne.n	8003cb6 <_printf_common+0xd2>
 8003c80:	2000      	movs	r0, #0
 8003c82:	e008      	b.n	8003c96 <_printf_common+0xb2>
 8003c84:	2301      	movs	r3, #1
 8003c86:	4652      	mov	r2, sl
 8003c88:	4641      	mov	r1, r8
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	47c8      	blx	r9
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d103      	bne.n	8003c9a <_printf_common+0xb6>
 8003c92:	f04f 30ff 	mov.w	r0, #4294967295
 8003c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c9a:	3501      	adds	r5, #1
 8003c9c:	e7c1      	b.n	8003c22 <_printf_common+0x3e>
 8003c9e:	2030      	movs	r0, #48	@ 0x30
 8003ca0:	18e1      	adds	r1, r4, r3
 8003ca2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cac:	4422      	add	r2, r4
 8003cae:	3302      	adds	r3, #2
 8003cb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cb4:	e7c2      	b.n	8003c3c <_printf_common+0x58>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4641      	mov	r1, r8
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	47c8      	blx	r9
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d0e6      	beq.n	8003c92 <_printf_common+0xae>
 8003cc4:	3601      	adds	r6, #1
 8003cc6:	e7d9      	b.n	8003c7c <_printf_common+0x98>

08003cc8 <_printf_i>:
 8003cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ccc:	7e0f      	ldrb	r7, [r1, #24]
 8003cce:	4691      	mov	r9, r2
 8003cd0:	2f78      	cmp	r7, #120	@ 0x78
 8003cd2:	4680      	mov	r8, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	469a      	mov	sl, r3
 8003cd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cde:	d807      	bhi.n	8003cf0 <_printf_i+0x28>
 8003ce0:	2f62      	cmp	r7, #98	@ 0x62
 8003ce2:	d80a      	bhi.n	8003cfa <_printf_i+0x32>
 8003ce4:	2f00      	cmp	r7, #0
 8003ce6:	f000 80d3 	beq.w	8003e90 <_printf_i+0x1c8>
 8003cea:	2f58      	cmp	r7, #88	@ 0x58
 8003cec:	f000 80ba 	beq.w	8003e64 <_printf_i+0x19c>
 8003cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cf8:	e03a      	b.n	8003d70 <_printf_i+0xa8>
 8003cfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cfe:	2b15      	cmp	r3, #21
 8003d00:	d8f6      	bhi.n	8003cf0 <_printf_i+0x28>
 8003d02:	a101      	add	r1, pc, #4	@ (adr r1, 8003d08 <_printf_i+0x40>)
 8003d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d08:	08003d61 	.word	0x08003d61
 8003d0c:	08003d75 	.word	0x08003d75
 8003d10:	08003cf1 	.word	0x08003cf1
 8003d14:	08003cf1 	.word	0x08003cf1
 8003d18:	08003cf1 	.word	0x08003cf1
 8003d1c:	08003cf1 	.word	0x08003cf1
 8003d20:	08003d75 	.word	0x08003d75
 8003d24:	08003cf1 	.word	0x08003cf1
 8003d28:	08003cf1 	.word	0x08003cf1
 8003d2c:	08003cf1 	.word	0x08003cf1
 8003d30:	08003cf1 	.word	0x08003cf1
 8003d34:	08003e77 	.word	0x08003e77
 8003d38:	08003d9f 	.word	0x08003d9f
 8003d3c:	08003e31 	.word	0x08003e31
 8003d40:	08003cf1 	.word	0x08003cf1
 8003d44:	08003cf1 	.word	0x08003cf1
 8003d48:	08003e99 	.word	0x08003e99
 8003d4c:	08003cf1 	.word	0x08003cf1
 8003d50:	08003d9f 	.word	0x08003d9f
 8003d54:	08003cf1 	.word	0x08003cf1
 8003d58:	08003cf1 	.word	0x08003cf1
 8003d5c:	08003e39 	.word	0x08003e39
 8003d60:	6833      	ldr	r3, [r6, #0]
 8003d62:	1d1a      	adds	r2, r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6032      	str	r2, [r6, #0]
 8003d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d70:	2301      	movs	r3, #1
 8003d72:	e09e      	b.n	8003eb2 <_printf_i+0x1ea>
 8003d74:	6833      	ldr	r3, [r6, #0]
 8003d76:	6820      	ldr	r0, [r4, #0]
 8003d78:	1d19      	adds	r1, r3, #4
 8003d7a:	6031      	str	r1, [r6, #0]
 8003d7c:	0606      	lsls	r6, r0, #24
 8003d7e:	d501      	bpl.n	8003d84 <_printf_i+0xbc>
 8003d80:	681d      	ldr	r5, [r3, #0]
 8003d82:	e003      	b.n	8003d8c <_printf_i+0xc4>
 8003d84:	0645      	lsls	r5, r0, #25
 8003d86:	d5fb      	bpl.n	8003d80 <_printf_i+0xb8>
 8003d88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d8c:	2d00      	cmp	r5, #0
 8003d8e:	da03      	bge.n	8003d98 <_printf_i+0xd0>
 8003d90:	232d      	movs	r3, #45	@ 0x2d
 8003d92:	426d      	negs	r5, r5
 8003d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d98:	230a      	movs	r3, #10
 8003d9a:	4859      	ldr	r0, [pc, #356]	@ (8003f00 <_printf_i+0x238>)
 8003d9c:	e011      	b.n	8003dc2 <_printf_i+0xfa>
 8003d9e:	6821      	ldr	r1, [r4, #0]
 8003da0:	6833      	ldr	r3, [r6, #0]
 8003da2:	0608      	lsls	r0, r1, #24
 8003da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003da8:	d402      	bmi.n	8003db0 <_printf_i+0xe8>
 8003daa:	0649      	lsls	r1, r1, #25
 8003dac:	bf48      	it	mi
 8003dae:	b2ad      	uxthmi	r5, r5
 8003db0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003db2:	6033      	str	r3, [r6, #0]
 8003db4:	bf14      	ite	ne
 8003db6:	230a      	movne	r3, #10
 8003db8:	2308      	moveq	r3, #8
 8003dba:	4851      	ldr	r0, [pc, #324]	@ (8003f00 <_printf_i+0x238>)
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dc2:	6866      	ldr	r6, [r4, #4]
 8003dc4:	2e00      	cmp	r6, #0
 8003dc6:	bfa8      	it	ge
 8003dc8:	6821      	ldrge	r1, [r4, #0]
 8003dca:	60a6      	str	r6, [r4, #8]
 8003dcc:	bfa4      	itt	ge
 8003dce:	f021 0104 	bicge.w	r1, r1, #4
 8003dd2:	6021      	strge	r1, [r4, #0]
 8003dd4:	b90d      	cbnz	r5, 8003dda <_printf_i+0x112>
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	d04b      	beq.n	8003e72 <_printf_i+0x1aa>
 8003dda:	4616      	mov	r6, r2
 8003ddc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003de0:	fb03 5711 	mls	r7, r3, r1, r5
 8003de4:	5dc7      	ldrb	r7, [r0, r7]
 8003de6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003dea:	462f      	mov	r7, r5
 8003dec:	42bb      	cmp	r3, r7
 8003dee:	460d      	mov	r5, r1
 8003df0:	d9f4      	bls.n	8003ddc <_printf_i+0x114>
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d10b      	bne.n	8003e0e <_printf_i+0x146>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	07df      	lsls	r7, r3, #31
 8003dfa:	d508      	bpl.n	8003e0e <_printf_i+0x146>
 8003dfc:	6923      	ldr	r3, [r4, #16]
 8003dfe:	6861      	ldr	r1, [r4, #4]
 8003e00:	4299      	cmp	r1, r3
 8003e02:	bfde      	ittt	le
 8003e04:	2330      	movle	r3, #48	@ 0x30
 8003e06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e0e:	1b92      	subs	r2, r2, r6
 8003e10:	6122      	str	r2, [r4, #16]
 8003e12:	464b      	mov	r3, r9
 8003e14:	4621      	mov	r1, r4
 8003e16:	4640      	mov	r0, r8
 8003e18:	f8cd a000 	str.w	sl, [sp]
 8003e1c:	aa03      	add	r2, sp, #12
 8003e1e:	f7ff fee1 	bl	8003be4 <_printf_common>
 8003e22:	3001      	adds	r0, #1
 8003e24:	d14a      	bne.n	8003ebc <_printf_i+0x1f4>
 8003e26:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2a:	b004      	add	sp, #16
 8003e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	f043 0320 	orr.w	r3, r3, #32
 8003e36:	6023      	str	r3, [r4, #0]
 8003e38:	2778      	movs	r7, #120	@ 0x78
 8003e3a:	4832      	ldr	r0, [pc, #200]	@ (8003f04 <_printf_i+0x23c>)
 8003e3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	6831      	ldr	r1, [r6, #0]
 8003e44:	061f      	lsls	r7, r3, #24
 8003e46:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e4a:	d402      	bmi.n	8003e52 <_printf_i+0x18a>
 8003e4c:	065f      	lsls	r7, r3, #25
 8003e4e:	bf48      	it	mi
 8003e50:	b2ad      	uxthmi	r5, r5
 8003e52:	6031      	str	r1, [r6, #0]
 8003e54:	07d9      	lsls	r1, r3, #31
 8003e56:	bf44      	itt	mi
 8003e58:	f043 0320 	orrmi.w	r3, r3, #32
 8003e5c:	6023      	strmi	r3, [r4, #0]
 8003e5e:	b11d      	cbz	r5, 8003e68 <_printf_i+0x1a0>
 8003e60:	2310      	movs	r3, #16
 8003e62:	e7ab      	b.n	8003dbc <_printf_i+0xf4>
 8003e64:	4826      	ldr	r0, [pc, #152]	@ (8003f00 <_printf_i+0x238>)
 8003e66:	e7e9      	b.n	8003e3c <_printf_i+0x174>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	e7f6      	b.n	8003e60 <_printf_i+0x198>
 8003e72:	4616      	mov	r6, r2
 8003e74:	e7bd      	b.n	8003df2 <_printf_i+0x12a>
 8003e76:	6833      	ldr	r3, [r6, #0]
 8003e78:	6825      	ldr	r5, [r4, #0]
 8003e7a:	1d18      	adds	r0, r3, #4
 8003e7c:	6961      	ldr	r1, [r4, #20]
 8003e7e:	6030      	str	r0, [r6, #0]
 8003e80:	062e      	lsls	r6, r5, #24
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	d501      	bpl.n	8003e8a <_printf_i+0x1c2>
 8003e86:	6019      	str	r1, [r3, #0]
 8003e88:	e002      	b.n	8003e90 <_printf_i+0x1c8>
 8003e8a:	0668      	lsls	r0, r5, #25
 8003e8c:	d5fb      	bpl.n	8003e86 <_printf_i+0x1be>
 8003e8e:	8019      	strh	r1, [r3, #0]
 8003e90:	2300      	movs	r3, #0
 8003e92:	4616      	mov	r6, r2
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	e7bc      	b.n	8003e12 <_printf_i+0x14a>
 8003e98:	6833      	ldr	r3, [r6, #0]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	6032      	str	r2, [r6, #0]
 8003ea0:	681e      	ldr	r6, [r3, #0]
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f000 fbf6 	bl	8004696 <memchr>
 8003eaa:	b108      	cbz	r0, 8003eb0 <_printf_i+0x1e8>
 8003eac:	1b80      	subs	r0, r0, r6
 8003eae:	6060      	str	r0, [r4, #4]
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	6123      	str	r3, [r4, #16]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eba:	e7aa      	b.n	8003e12 <_printf_i+0x14a>
 8003ebc:	4632      	mov	r2, r6
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	47d0      	blx	sl
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d0ad      	beq.n	8003e26 <_printf_i+0x15e>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	079b      	lsls	r3, r3, #30
 8003ece:	d413      	bmi.n	8003ef8 <_printf_i+0x230>
 8003ed0:	68e0      	ldr	r0, [r4, #12]
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	4298      	cmp	r0, r3
 8003ed6:	bfb8      	it	lt
 8003ed8:	4618      	movlt	r0, r3
 8003eda:	e7a6      	b.n	8003e2a <_printf_i+0x162>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4632      	mov	r2, r6
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	47d0      	blx	sl
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d09d      	beq.n	8003e26 <_printf_i+0x15e>
 8003eea:	3501      	adds	r5, #1
 8003eec:	68e3      	ldr	r3, [r4, #12]
 8003eee:	9903      	ldr	r1, [sp, #12]
 8003ef0:	1a5b      	subs	r3, r3, r1
 8003ef2:	42ab      	cmp	r3, r5
 8003ef4:	dcf2      	bgt.n	8003edc <_printf_i+0x214>
 8003ef6:	e7eb      	b.n	8003ed0 <_printf_i+0x208>
 8003ef8:	2500      	movs	r5, #0
 8003efa:	f104 0619 	add.w	r6, r4, #25
 8003efe:	e7f5      	b.n	8003eec <_printf_i+0x224>
 8003f00:	08007e04 	.word	0x08007e04
 8003f04:	08007e15 	.word	0x08007e15

08003f08 <_scanf_float>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	b087      	sub	sp, #28
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	688b      	ldr	r3, [r1, #8]
 8003f12:	4617      	mov	r7, r2
 8003f14:	1e5a      	subs	r2, r3, #1
 8003f16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003f1a:	bf82      	ittt	hi
 8003f1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003f20:	eb03 0b05 	addhi.w	fp, r3, r5
 8003f24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003f28:	460a      	mov	r2, r1
 8003f2a:	f04f 0500 	mov.w	r5, #0
 8003f2e:	bf88      	it	hi
 8003f30:	608b      	strhi	r3, [r1, #8]
 8003f32:	680b      	ldr	r3, [r1, #0]
 8003f34:	4680      	mov	r8, r0
 8003f36:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8003f3a:	f842 3b1c 	str.w	r3, [r2], #28
 8003f3e:	460c      	mov	r4, r1
 8003f40:	bf98      	it	ls
 8003f42:	f04f 0b00 	movls.w	fp, #0
 8003f46:	4616      	mov	r6, r2
 8003f48:	46aa      	mov	sl, r5
 8003f4a:	46a9      	mov	r9, r5
 8003f4c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003f50:	9201      	str	r2, [sp, #4]
 8003f52:	9502      	str	r5, [sp, #8]
 8003f54:	68a2      	ldr	r2, [r4, #8]
 8003f56:	b152      	cbz	r2, 8003f6e <_scanf_float+0x66>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f5e:	d865      	bhi.n	800402c <_scanf_float+0x124>
 8003f60:	2b40      	cmp	r3, #64	@ 0x40
 8003f62:	d83d      	bhi.n	8003fe0 <_scanf_float+0xd8>
 8003f64:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8003f68:	b2c8      	uxtb	r0, r1
 8003f6a:	280e      	cmp	r0, #14
 8003f6c:	d93b      	bls.n	8003fe6 <_scanf_float+0xde>
 8003f6e:	f1b9 0f00 	cmp.w	r9, #0
 8003f72:	d003      	beq.n	8003f7c <_scanf_float+0x74>
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f80:	f1ba 0f01 	cmp.w	sl, #1
 8003f84:	f200 8118 	bhi.w	80041b8 <_scanf_float+0x2b0>
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	429e      	cmp	r6, r3
 8003f8c:	f200 8109 	bhi.w	80041a2 <_scanf_float+0x29a>
 8003f90:	2001      	movs	r0, #1
 8003f92:	b007      	add	sp, #28
 8003f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f98:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003f9c:	2a0d      	cmp	r2, #13
 8003f9e:	d8e6      	bhi.n	8003f6e <_scanf_float+0x66>
 8003fa0:	a101      	add	r1, pc, #4	@ (adr r1, 8003fa8 <_scanf_float+0xa0>)
 8003fa2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	080040ef 	.word	0x080040ef
 8003fac:	08003f6f 	.word	0x08003f6f
 8003fb0:	08003f6f 	.word	0x08003f6f
 8003fb4:	08003f6f 	.word	0x08003f6f
 8003fb8:	0800414f 	.word	0x0800414f
 8003fbc:	08004127 	.word	0x08004127
 8003fc0:	08003f6f 	.word	0x08003f6f
 8003fc4:	08003f6f 	.word	0x08003f6f
 8003fc8:	080040fd 	.word	0x080040fd
 8003fcc:	08003f6f 	.word	0x08003f6f
 8003fd0:	08003f6f 	.word	0x08003f6f
 8003fd4:	08003f6f 	.word	0x08003f6f
 8003fd8:	08003f6f 	.word	0x08003f6f
 8003fdc:	080040b5 	.word	0x080040b5
 8003fe0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003fe4:	e7da      	b.n	8003f9c <_scanf_float+0x94>
 8003fe6:	290e      	cmp	r1, #14
 8003fe8:	d8c1      	bhi.n	8003f6e <_scanf_float+0x66>
 8003fea:	a001      	add	r0, pc, #4	@ (adr r0, 8003ff0 <_scanf_float+0xe8>)
 8003fec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003ff0:	080040a5 	.word	0x080040a5
 8003ff4:	08003f6f 	.word	0x08003f6f
 8003ff8:	080040a5 	.word	0x080040a5
 8003ffc:	0800413b 	.word	0x0800413b
 8004000:	08003f6f 	.word	0x08003f6f
 8004004:	0800404d 	.word	0x0800404d
 8004008:	0800408b 	.word	0x0800408b
 800400c:	0800408b 	.word	0x0800408b
 8004010:	0800408b 	.word	0x0800408b
 8004014:	0800408b 	.word	0x0800408b
 8004018:	0800408b 	.word	0x0800408b
 800401c:	0800408b 	.word	0x0800408b
 8004020:	0800408b 	.word	0x0800408b
 8004024:	0800408b 	.word	0x0800408b
 8004028:	0800408b 	.word	0x0800408b
 800402c:	2b6e      	cmp	r3, #110	@ 0x6e
 800402e:	d809      	bhi.n	8004044 <_scanf_float+0x13c>
 8004030:	2b60      	cmp	r3, #96	@ 0x60
 8004032:	d8b1      	bhi.n	8003f98 <_scanf_float+0x90>
 8004034:	2b54      	cmp	r3, #84	@ 0x54
 8004036:	d07b      	beq.n	8004130 <_scanf_float+0x228>
 8004038:	2b59      	cmp	r3, #89	@ 0x59
 800403a:	d198      	bne.n	8003f6e <_scanf_float+0x66>
 800403c:	2d07      	cmp	r5, #7
 800403e:	d196      	bne.n	8003f6e <_scanf_float+0x66>
 8004040:	2508      	movs	r5, #8
 8004042:	e02c      	b.n	800409e <_scanf_float+0x196>
 8004044:	2b74      	cmp	r3, #116	@ 0x74
 8004046:	d073      	beq.n	8004130 <_scanf_float+0x228>
 8004048:	2b79      	cmp	r3, #121	@ 0x79
 800404a:	e7f6      	b.n	800403a <_scanf_float+0x132>
 800404c:	6821      	ldr	r1, [r4, #0]
 800404e:	05c8      	lsls	r0, r1, #23
 8004050:	d51b      	bpl.n	800408a <_scanf_float+0x182>
 8004052:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004056:	6021      	str	r1, [r4, #0]
 8004058:	f109 0901 	add.w	r9, r9, #1
 800405c:	f1bb 0f00 	cmp.w	fp, #0
 8004060:	d003      	beq.n	800406a <_scanf_float+0x162>
 8004062:	3201      	adds	r2, #1
 8004064:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004068:	60a2      	str	r2, [r4, #8]
 800406a:	68a3      	ldr	r3, [r4, #8]
 800406c:	3b01      	subs	r3, #1
 800406e:	60a3      	str	r3, [r4, #8]
 8004070:	6923      	ldr	r3, [r4, #16]
 8004072:	3301      	adds	r3, #1
 8004074:	6123      	str	r3, [r4, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3b01      	subs	r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	f340 8087 	ble.w	8004190 <_scanf_float+0x288>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	e764      	b.n	8003f54 <_scanf_float+0x4c>
 800408a:	eb1a 0105 	adds.w	r1, sl, r5
 800408e:	f47f af6e 	bne.w	8003f6e <_scanf_float+0x66>
 8004092:	460d      	mov	r5, r1
 8004094:	468a      	mov	sl, r1
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800409c:	6022      	str	r2, [r4, #0]
 800409e:	f806 3b01 	strb.w	r3, [r6], #1
 80040a2:	e7e2      	b.n	800406a <_scanf_float+0x162>
 80040a4:	6822      	ldr	r2, [r4, #0]
 80040a6:	0610      	lsls	r0, r2, #24
 80040a8:	f57f af61 	bpl.w	8003f6e <_scanf_float+0x66>
 80040ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040b0:	6022      	str	r2, [r4, #0]
 80040b2:	e7f4      	b.n	800409e <_scanf_float+0x196>
 80040b4:	f1ba 0f00 	cmp.w	sl, #0
 80040b8:	d10e      	bne.n	80040d8 <_scanf_float+0x1d0>
 80040ba:	f1b9 0f00 	cmp.w	r9, #0
 80040be:	d10e      	bne.n	80040de <_scanf_float+0x1d6>
 80040c0:	6822      	ldr	r2, [r4, #0]
 80040c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80040c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80040ca:	d108      	bne.n	80040de <_scanf_float+0x1d6>
 80040cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80040d0:	f04f 0a01 	mov.w	sl, #1
 80040d4:	6022      	str	r2, [r4, #0]
 80040d6:	e7e2      	b.n	800409e <_scanf_float+0x196>
 80040d8:	f1ba 0f02 	cmp.w	sl, #2
 80040dc:	d055      	beq.n	800418a <_scanf_float+0x282>
 80040de:	2d01      	cmp	r5, #1
 80040e0:	d002      	beq.n	80040e8 <_scanf_float+0x1e0>
 80040e2:	2d04      	cmp	r5, #4
 80040e4:	f47f af43 	bne.w	8003f6e <_scanf_float+0x66>
 80040e8:	3501      	adds	r5, #1
 80040ea:	b2ed      	uxtb	r5, r5
 80040ec:	e7d7      	b.n	800409e <_scanf_float+0x196>
 80040ee:	f1ba 0f01 	cmp.w	sl, #1
 80040f2:	f47f af3c 	bne.w	8003f6e <_scanf_float+0x66>
 80040f6:	f04f 0a02 	mov.w	sl, #2
 80040fa:	e7d0      	b.n	800409e <_scanf_float+0x196>
 80040fc:	b97d      	cbnz	r5, 800411e <_scanf_float+0x216>
 80040fe:	f1b9 0f00 	cmp.w	r9, #0
 8004102:	f47f af37 	bne.w	8003f74 <_scanf_float+0x6c>
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800410c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004110:	f040 8103 	bne.w	800431a <_scanf_float+0x412>
 8004114:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004118:	2501      	movs	r5, #1
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	e7bf      	b.n	800409e <_scanf_float+0x196>
 800411e:	2d03      	cmp	r5, #3
 8004120:	d0e2      	beq.n	80040e8 <_scanf_float+0x1e0>
 8004122:	2d05      	cmp	r5, #5
 8004124:	e7de      	b.n	80040e4 <_scanf_float+0x1dc>
 8004126:	2d02      	cmp	r5, #2
 8004128:	f47f af21 	bne.w	8003f6e <_scanf_float+0x66>
 800412c:	2503      	movs	r5, #3
 800412e:	e7b6      	b.n	800409e <_scanf_float+0x196>
 8004130:	2d06      	cmp	r5, #6
 8004132:	f47f af1c 	bne.w	8003f6e <_scanf_float+0x66>
 8004136:	2507      	movs	r5, #7
 8004138:	e7b1      	b.n	800409e <_scanf_float+0x196>
 800413a:	6822      	ldr	r2, [r4, #0]
 800413c:	0591      	lsls	r1, r2, #22
 800413e:	f57f af16 	bpl.w	8003f6e <_scanf_float+0x66>
 8004142:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004146:	6022      	str	r2, [r4, #0]
 8004148:	f8cd 9008 	str.w	r9, [sp, #8]
 800414c:	e7a7      	b.n	800409e <_scanf_float+0x196>
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004154:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004158:	d006      	beq.n	8004168 <_scanf_float+0x260>
 800415a:	0550      	lsls	r0, r2, #21
 800415c:	f57f af07 	bpl.w	8003f6e <_scanf_float+0x66>
 8004160:	f1b9 0f00 	cmp.w	r9, #0
 8004164:	f000 80d9 	beq.w	800431a <_scanf_float+0x412>
 8004168:	0591      	lsls	r1, r2, #22
 800416a:	bf58      	it	pl
 800416c:	9902      	ldrpl	r1, [sp, #8]
 800416e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004172:	bf58      	it	pl
 8004174:	eba9 0101 	subpl.w	r1, r9, r1
 8004178:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800417c:	f04f 0900 	mov.w	r9, #0
 8004180:	bf58      	it	pl
 8004182:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004186:	6022      	str	r2, [r4, #0]
 8004188:	e789      	b.n	800409e <_scanf_float+0x196>
 800418a:	f04f 0a03 	mov.w	sl, #3
 800418e:	e786      	b.n	800409e <_scanf_float+0x196>
 8004190:	4639      	mov	r1, r7
 8004192:	4640      	mov	r0, r8
 8004194:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004198:	4798      	blx	r3
 800419a:	2800      	cmp	r0, #0
 800419c:	f43f aeda 	beq.w	8003f54 <_scanf_float+0x4c>
 80041a0:	e6e5      	b.n	8003f6e <_scanf_float+0x66>
 80041a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041a6:	463a      	mov	r2, r7
 80041a8:	4640      	mov	r0, r8
 80041aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041ae:	4798      	blx	r3
 80041b0:	6923      	ldr	r3, [r4, #16]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6123      	str	r3, [r4, #16]
 80041b6:	e6e7      	b.n	8003f88 <_scanf_float+0x80>
 80041b8:	1e6b      	subs	r3, r5, #1
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	d824      	bhi.n	8004208 <_scanf_float+0x300>
 80041be:	2d02      	cmp	r5, #2
 80041c0:	d836      	bhi.n	8004230 <_scanf_float+0x328>
 80041c2:	9b01      	ldr	r3, [sp, #4]
 80041c4:	429e      	cmp	r6, r3
 80041c6:	f67f aee3 	bls.w	8003f90 <_scanf_float+0x88>
 80041ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041ce:	463a      	mov	r2, r7
 80041d0:	4640      	mov	r0, r8
 80041d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80041d6:	4798      	blx	r3
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	3b01      	subs	r3, #1
 80041dc:	6123      	str	r3, [r4, #16]
 80041de:	e7f0      	b.n	80041c2 <_scanf_float+0x2ba>
 80041e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80041e4:	463a      	mov	r2, r7
 80041e6:	4640      	mov	r0, r8
 80041e8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80041ec:	4798      	blx	r3
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	6123      	str	r3, [r4, #16]
 80041f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80041f8:	fa5f fa8a 	uxtb.w	sl, sl
 80041fc:	f1ba 0f02 	cmp.w	sl, #2
 8004200:	d1ee      	bne.n	80041e0 <_scanf_float+0x2d8>
 8004202:	3d03      	subs	r5, #3
 8004204:	b2ed      	uxtb	r5, r5
 8004206:	1b76      	subs	r6, r6, r5
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	05da      	lsls	r2, r3, #23
 800420c:	d530      	bpl.n	8004270 <_scanf_float+0x368>
 800420e:	055b      	lsls	r3, r3, #21
 8004210:	d511      	bpl.n	8004236 <_scanf_float+0x32e>
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	429e      	cmp	r6, r3
 8004216:	f67f aebb 	bls.w	8003f90 <_scanf_float+0x88>
 800421a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800421e:	463a      	mov	r2, r7
 8004220:	4640      	mov	r0, r8
 8004222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004226:	4798      	blx	r3
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	3b01      	subs	r3, #1
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	e7f0      	b.n	8004212 <_scanf_float+0x30a>
 8004230:	46aa      	mov	sl, r5
 8004232:	46b3      	mov	fp, r6
 8004234:	e7de      	b.n	80041f4 <_scanf_float+0x2ec>
 8004236:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	2965      	cmp	r1, #101	@ 0x65
 800423e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004242:	f106 35ff 	add.w	r5, r6, #4294967295
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	d00c      	beq.n	8004264 <_scanf_float+0x35c>
 800424a:	2945      	cmp	r1, #69	@ 0x45
 800424c:	d00a      	beq.n	8004264 <_scanf_float+0x35c>
 800424e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004252:	463a      	mov	r2, r7
 8004254:	4640      	mov	r0, r8
 8004256:	4798      	blx	r3
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800425e:	3b01      	subs	r3, #1
 8004260:	1eb5      	subs	r5, r6, #2
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	463a      	mov	r2, r7
 8004266:	4640      	mov	r0, r8
 8004268:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800426c:	4798      	blx	r3
 800426e:	462e      	mov	r6, r5
 8004270:	6822      	ldr	r2, [r4, #0]
 8004272:	f012 0210 	ands.w	r2, r2, #16
 8004276:	d001      	beq.n	800427c <_scanf_float+0x374>
 8004278:	2000      	movs	r0, #0
 800427a:	e68a      	b.n	8003f92 <_scanf_float+0x8a>
 800427c:	7032      	strb	r2, [r6, #0]
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004288:	d11c      	bne.n	80042c4 <_scanf_float+0x3bc>
 800428a:	9b02      	ldr	r3, [sp, #8]
 800428c:	454b      	cmp	r3, r9
 800428e:	eba3 0209 	sub.w	r2, r3, r9
 8004292:	d123      	bne.n	80042dc <_scanf_float+0x3d4>
 8004294:	2200      	movs	r2, #0
 8004296:	4640      	mov	r0, r8
 8004298:	9901      	ldr	r1, [sp, #4]
 800429a:	f002 fc01 	bl	8006aa0 <_strtod_r>
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	6825      	ldr	r5, [r4, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f015 0f02 	tst.w	r5, #2
 80042a8:	4606      	mov	r6, r0
 80042aa:	460f      	mov	r7, r1
 80042ac:	f103 0204 	add.w	r2, r3, #4
 80042b0:	d01f      	beq.n	80042f2 <_scanf_float+0x3ea>
 80042b2:	9903      	ldr	r1, [sp, #12]
 80042b4:	600a      	str	r2, [r1, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	e9c3 6700 	strd	r6, r7, [r3]
 80042bc:	68e3      	ldr	r3, [r4, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60e3      	str	r3, [r4, #12]
 80042c2:	e7d9      	b.n	8004278 <_scanf_float+0x370>
 80042c4:	9b04      	ldr	r3, [sp, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0e4      	beq.n	8004294 <_scanf_float+0x38c>
 80042ca:	9905      	ldr	r1, [sp, #20]
 80042cc:	230a      	movs	r3, #10
 80042ce:	4640      	mov	r0, r8
 80042d0:	3101      	adds	r1, #1
 80042d2:	f002 fc65 	bl	8006ba0 <_strtol_r>
 80042d6:	9b04      	ldr	r3, [sp, #16]
 80042d8:	9e05      	ldr	r6, [sp, #20]
 80042da:	1ac2      	subs	r2, r0, r3
 80042dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80042e0:	429e      	cmp	r6, r3
 80042e2:	bf28      	it	cs
 80042e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80042e8:	4630      	mov	r0, r6
 80042ea:	490d      	ldr	r1, [pc, #52]	@ (8004320 <_scanf_float+0x418>)
 80042ec:	f000 f8f0 	bl	80044d0 <siprintf>
 80042f0:	e7d0      	b.n	8004294 <_scanf_float+0x38c>
 80042f2:	076d      	lsls	r5, r5, #29
 80042f4:	d4dd      	bmi.n	80042b2 <_scanf_float+0x3aa>
 80042f6:	9d03      	ldr	r5, [sp, #12]
 80042f8:	602a      	str	r2, [r5, #0]
 80042fa:	681d      	ldr	r5, [r3, #0]
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	f7fc fb84 	bl	8000a0c <__aeabi_dcmpun>
 8004304:	b120      	cbz	r0, 8004310 <_scanf_float+0x408>
 8004306:	4807      	ldr	r0, [pc, #28]	@ (8004324 <_scanf_float+0x41c>)
 8004308:	f000 f9d4 	bl	80046b4 <nanf>
 800430c:	6028      	str	r0, [r5, #0]
 800430e:	e7d5      	b.n	80042bc <_scanf_float+0x3b4>
 8004310:	4630      	mov	r0, r6
 8004312:	4639      	mov	r1, r7
 8004314:	f7fc fbd8 	bl	8000ac8 <__aeabi_d2f>
 8004318:	e7f8      	b.n	800430c <_scanf_float+0x404>
 800431a:	f04f 0900 	mov.w	r9, #0
 800431e:	e62d      	b.n	8003f7c <_scanf_float+0x74>
 8004320:	08007e26 	.word	0x08007e26
 8004324:	080081bd 	.word	0x080081bd

08004328 <std>:
 8004328:	2300      	movs	r3, #0
 800432a:	b510      	push	{r4, lr}
 800432c:	4604      	mov	r4, r0
 800432e:	e9c0 3300 	strd	r3, r3, [r0]
 8004332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004336:	6083      	str	r3, [r0, #8]
 8004338:	8181      	strh	r1, [r0, #12]
 800433a:	6643      	str	r3, [r0, #100]	@ 0x64
 800433c:	81c2      	strh	r2, [r0, #14]
 800433e:	6183      	str	r3, [r0, #24]
 8004340:	4619      	mov	r1, r3
 8004342:	2208      	movs	r2, #8
 8004344:	305c      	adds	r0, #92	@ 0x5c
 8004346:	f000 f926 	bl	8004596 <memset>
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <std+0x58>)
 800434c:	6224      	str	r4, [r4, #32]
 800434e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <std+0x5c>)
 8004352:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004354:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <std+0x60>)
 8004356:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <std+0x64>)
 800435a:	6323      	str	r3, [r4, #48]	@ 0x30
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <std+0x68>)
 800435e:	429c      	cmp	r4, r3
 8004360:	d006      	beq.n	8004370 <std+0x48>
 8004362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004366:	4294      	cmp	r4, r2
 8004368:	d002      	beq.n	8004370 <std+0x48>
 800436a:	33d0      	adds	r3, #208	@ 0xd0
 800436c:	429c      	cmp	r4, r3
 800436e:	d105      	bne.n	800437c <std+0x54>
 8004370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004378:	f000 b98a 	b.w	8004690 <__retarget_lock_init_recursive>
 800437c:	bd10      	pop	{r4, pc}
 800437e:	bf00      	nop
 8004380:	08004511 	.word	0x08004511
 8004384:	08004533 	.word	0x08004533
 8004388:	0800456b 	.word	0x0800456b
 800438c:	0800458f 	.word	0x0800458f
 8004390:	20000250 	.word	0x20000250

08004394 <stdio_exit_handler>:
 8004394:	4a02      	ldr	r2, [pc, #8]	@ (80043a0 <stdio_exit_handler+0xc>)
 8004396:	4903      	ldr	r1, [pc, #12]	@ (80043a4 <stdio_exit_handler+0x10>)
 8004398:	4803      	ldr	r0, [pc, #12]	@ (80043a8 <stdio_exit_handler+0x14>)
 800439a:	f000 b869 	b.w	8004470 <_fwalk_sglue>
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c
 80043a4:	080071d5 	.word	0x080071d5
 80043a8:	2000001c 	.word	0x2000001c

080043ac <cleanup_stdio>:
 80043ac:	6841      	ldr	r1, [r0, #4]
 80043ae:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <cleanup_stdio+0x34>)
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4299      	cmp	r1, r3
 80043b4:	4604      	mov	r4, r0
 80043b6:	d001      	beq.n	80043bc <cleanup_stdio+0x10>
 80043b8:	f002 ff0c 	bl	80071d4 <_fflush_r>
 80043bc:	68a1      	ldr	r1, [r4, #8]
 80043be:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <cleanup_stdio+0x38>)
 80043c0:	4299      	cmp	r1, r3
 80043c2:	d002      	beq.n	80043ca <cleanup_stdio+0x1e>
 80043c4:	4620      	mov	r0, r4
 80043c6:	f002 ff05 	bl	80071d4 <_fflush_r>
 80043ca:	68e1      	ldr	r1, [r4, #12]
 80043cc:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <cleanup_stdio+0x3c>)
 80043ce:	4299      	cmp	r1, r3
 80043d0:	d004      	beq.n	80043dc <cleanup_stdio+0x30>
 80043d2:	4620      	mov	r0, r4
 80043d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d8:	f002 befc 	b.w	80071d4 <_fflush_r>
 80043dc:	bd10      	pop	{r4, pc}
 80043de:	bf00      	nop
 80043e0:	20000250 	.word	0x20000250
 80043e4:	200002b8 	.word	0x200002b8
 80043e8:	20000320 	.word	0x20000320

080043ec <global_stdio_init.part.0>:
 80043ec:	b510      	push	{r4, lr}
 80043ee:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <global_stdio_init.part.0+0x30>)
 80043f0:	4c0b      	ldr	r4, [pc, #44]	@ (8004420 <global_stdio_init.part.0+0x34>)
 80043f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <global_stdio_init.part.0+0x38>)
 80043f4:	4620      	mov	r0, r4
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	2104      	movs	r1, #4
 80043fa:	2200      	movs	r2, #0
 80043fc:	f7ff ff94 	bl	8004328 <std>
 8004400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004404:	2201      	movs	r2, #1
 8004406:	2109      	movs	r1, #9
 8004408:	f7ff ff8e 	bl	8004328 <std>
 800440c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004410:	2202      	movs	r2, #2
 8004412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004416:	2112      	movs	r1, #18
 8004418:	f7ff bf86 	b.w	8004328 <std>
 800441c:	20000388 	.word	0x20000388
 8004420:	20000250 	.word	0x20000250
 8004424:	08004395 	.word	0x08004395

08004428 <__sfp_lock_acquire>:
 8004428:	4801      	ldr	r0, [pc, #4]	@ (8004430 <__sfp_lock_acquire+0x8>)
 800442a:	f000 b932 	b.w	8004692 <__retarget_lock_acquire_recursive>
 800442e:	bf00      	nop
 8004430:	20000391 	.word	0x20000391

08004434 <__sfp_lock_release>:
 8004434:	4801      	ldr	r0, [pc, #4]	@ (800443c <__sfp_lock_release+0x8>)
 8004436:	f000 b92d 	b.w	8004694 <__retarget_lock_release_recursive>
 800443a:	bf00      	nop
 800443c:	20000391 	.word	0x20000391

08004440 <__sinit>:
 8004440:	b510      	push	{r4, lr}
 8004442:	4604      	mov	r4, r0
 8004444:	f7ff fff0 	bl	8004428 <__sfp_lock_acquire>
 8004448:	6a23      	ldr	r3, [r4, #32]
 800444a:	b11b      	cbz	r3, 8004454 <__sinit+0x14>
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f7ff bff0 	b.w	8004434 <__sfp_lock_release>
 8004454:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <__sinit+0x28>)
 8004456:	6223      	str	r3, [r4, #32]
 8004458:	4b04      	ldr	r3, [pc, #16]	@ (800446c <__sinit+0x2c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f5      	bne.n	800444c <__sinit+0xc>
 8004460:	f7ff ffc4 	bl	80043ec <global_stdio_init.part.0>
 8004464:	e7f2      	b.n	800444c <__sinit+0xc>
 8004466:	bf00      	nop
 8004468:	080043ad 	.word	0x080043ad
 800446c:	20000388 	.word	0x20000388

08004470 <_fwalk_sglue>:
 8004470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004474:	4607      	mov	r7, r0
 8004476:	4688      	mov	r8, r1
 8004478:	4614      	mov	r4, r2
 800447a:	2600      	movs	r6, #0
 800447c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004480:	f1b9 0901 	subs.w	r9, r9, #1
 8004484:	d505      	bpl.n	8004492 <_fwalk_sglue+0x22>
 8004486:	6824      	ldr	r4, [r4, #0]
 8004488:	2c00      	cmp	r4, #0
 800448a:	d1f7      	bne.n	800447c <_fwalk_sglue+0xc>
 800448c:	4630      	mov	r0, r6
 800448e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004492:	89ab      	ldrh	r3, [r5, #12]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d907      	bls.n	80044a8 <_fwalk_sglue+0x38>
 8004498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800449c:	3301      	adds	r3, #1
 800449e:	d003      	beq.n	80044a8 <_fwalk_sglue+0x38>
 80044a0:	4629      	mov	r1, r5
 80044a2:	4638      	mov	r0, r7
 80044a4:	47c0      	blx	r8
 80044a6:	4306      	orrs	r6, r0
 80044a8:	3568      	adds	r5, #104	@ 0x68
 80044aa:	e7e9      	b.n	8004480 <_fwalk_sglue+0x10>

080044ac <iprintf>:
 80044ac:	b40f      	push	{r0, r1, r2, r3}
 80044ae:	b507      	push	{r0, r1, r2, lr}
 80044b0:	4906      	ldr	r1, [pc, #24]	@ (80044cc <iprintf+0x20>)
 80044b2:	ab04      	add	r3, sp, #16
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ba:	6881      	ldr	r1, [r0, #8]
 80044bc:	9301      	str	r3, [sp, #4]
 80044be:	f002 fcf1 	bl	8006ea4 <_vfiprintf_r>
 80044c2:	b003      	add	sp, #12
 80044c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c8:	b004      	add	sp, #16
 80044ca:	4770      	bx	lr
 80044cc:	20000018 	.word	0x20000018

080044d0 <siprintf>:
 80044d0:	b40e      	push	{r1, r2, r3}
 80044d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044d6:	b500      	push	{lr}
 80044d8:	b09c      	sub	sp, #112	@ 0x70
 80044da:	ab1d      	add	r3, sp, #116	@ 0x74
 80044dc:	9002      	str	r0, [sp, #8]
 80044de:	9006      	str	r0, [sp, #24]
 80044e0:	9107      	str	r1, [sp, #28]
 80044e2:	9104      	str	r1, [sp, #16]
 80044e4:	4808      	ldr	r0, [pc, #32]	@ (8004508 <siprintf+0x38>)
 80044e6:	4909      	ldr	r1, [pc, #36]	@ (800450c <siprintf+0x3c>)
 80044e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ec:	9105      	str	r1, [sp, #20]
 80044ee:	6800      	ldr	r0, [r0, #0]
 80044f0:	a902      	add	r1, sp, #8
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	f002 fbb2 	bl	8006c5c <_svfiprintf_r>
 80044f8:	2200      	movs	r2, #0
 80044fa:	9b02      	ldr	r3, [sp, #8]
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	b01c      	add	sp, #112	@ 0x70
 8004500:	f85d eb04 	ldr.w	lr, [sp], #4
 8004504:	b003      	add	sp, #12
 8004506:	4770      	bx	lr
 8004508:	20000018 	.word	0x20000018
 800450c:	ffff0208 	.word	0xffff0208

08004510 <__sread>:
 8004510:	b510      	push	{r4, lr}
 8004512:	460c      	mov	r4, r1
 8004514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004518:	f000 f86c 	bl	80045f4 <_read_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	bfab      	itete	ge
 8004520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004522:	89a3      	ldrhlt	r3, [r4, #12]
 8004524:	181b      	addge	r3, r3, r0
 8004526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800452a:	bfac      	ite	ge
 800452c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800452e:	81a3      	strhlt	r3, [r4, #12]
 8004530:	bd10      	pop	{r4, pc}

08004532 <__swrite>:
 8004532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	461f      	mov	r7, r3
 8004538:	898b      	ldrh	r3, [r1, #12]
 800453a:	4605      	mov	r5, r0
 800453c:	05db      	lsls	r3, r3, #23
 800453e:	460c      	mov	r4, r1
 8004540:	4616      	mov	r6, r2
 8004542:	d505      	bpl.n	8004550 <__swrite+0x1e>
 8004544:	2302      	movs	r3, #2
 8004546:	2200      	movs	r2, #0
 8004548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454c:	f000 f840 	bl	80045d0 <_lseek_r>
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	4632      	mov	r2, r6
 8004554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	4628      	mov	r0, r5
 800455c:	463b      	mov	r3, r7
 800455e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004566:	f000 b857 	b.w	8004618 <_write_r>

0800456a <__sseek>:
 800456a:	b510      	push	{r4, lr}
 800456c:	460c      	mov	r4, r1
 800456e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004572:	f000 f82d 	bl	80045d0 <_lseek_r>
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	bf15      	itete	ne
 800457c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800457e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004586:	81a3      	strheq	r3, [r4, #12]
 8004588:	bf18      	it	ne
 800458a:	81a3      	strhne	r3, [r4, #12]
 800458c:	bd10      	pop	{r4, pc}

0800458e <__sclose>:
 800458e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004592:	f000 b80d 	b.w	80045b0 <_close_r>

08004596 <memset>:
 8004596:	4603      	mov	r3, r0
 8004598:	4402      	add	r2, r0
 800459a:	4293      	cmp	r3, r2
 800459c:	d100      	bne.n	80045a0 <memset+0xa>
 800459e:	4770      	bx	lr
 80045a0:	f803 1b01 	strb.w	r1, [r3], #1
 80045a4:	e7f9      	b.n	800459a <memset+0x4>
	...

080045a8 <_localeconv_r>:
 80045a8:	4800      	ldr	r0, [pc, #0]	@ (80045ac <_localeconv_r+0x4>)
 80045aa:	4770      	bx	lr
 80045ac:	20000158 	.word	0x20000158

080045b0 <_close_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	2300      	movs	r3, #0
 80045b4:	4d05      	ldr	r5, [pc, #20]	@ (80045cc <_close_r+0x1c>)
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	f7fd f8d9 	bl	8001772 <_close>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_close_r+0x1a>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_close_r+0x1a>
 80045c8:	6023      	str	r3, [r4, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	2000038c 	.word	0x2000038c

080045d0 <_lseek_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4604      	mov	r4, r0
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	2200      	movs	r2, #0
 80045da:	4d05      	ldr	r5, [pc, #20]	@ (80045f0 <_lseek_r+0x20>)
 80045dc:	602a      	str	r2, [r5, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f7fd f8eb 	bl	80017ba <_lseek>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_lseek_r+0x1e>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_lseek_r+0x1e>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	2000038c 	.word	0x2000038c

080045f4 <_read_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	4d05      	ldr	r5, [pc, #20]	@ (8004614 <_read_r+0x20>)
 8004600:	602a      	str	r2, [r5, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	f7fd f87c 	bl	8001700 <_read>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_read_r+0x1e>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_read_r+0x1e>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	2000038c 	.word	0x2000038c

08004618 <_write_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	4611      	mov	r1, r2
 8004620:	2200      	movs	r2, #0
 8004622:	4d05      	ldr	r5, [pc, #20]	@ (8004638 <_write_r+0x20>)
 8004624:	602a      	str	r2, [r5, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	f7fd f887 	bl	800173a <_write>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d102      	bne.n	8004636 <_write_r+0x1e>
 8004630:	682b      	ldr	r3, [r5, #0]
 8004632:	b103      	cbz	r3, 8004636 <_write_r+0x1e>
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	bd38      	pop	{r3, r4, r5, pc}
 8004638:	2000038c 	.word	0x2000038c

0800463c <__errno>:
 800463c:	4b01      	ldr	r3, [pc, #4]	@ (8004644 <__errno+0x8>)
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000018 	.word	0x20000018

08004648 <__libc_init_array>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	2600      	movs	r6, #0
 800464c:	4d0c      	ldr	r5, [pc, #48]	@ (8004680 <__libc_init_array+0x38>)
 800464e:	4c0d      	ldr	r4, [pc, #52]	@ (8004684 <__libc_init_array+0x3c>)
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	42a6      	cmp	r6, r4
 8004656:	d109      	bne.n	800466c <__libc_init_array+0x24>
 8004658:	f003 fb6a 	bl	8007d30 <_init>
 800465c:	2600      	movs	r6, #0
 800465e:	4d0a      	ldr	r5, [pc, #40]	@ (8004688 <__libc_init_array+0x40>)
 8004660:	4c0a      	ldr	r4, [pc, #40]	@ (800468c <__libc_init_array+0x44>)
 8004662:	1b64      	subs	r4, r4, r5
 8004664:	10a4      	asrs	r4, r4, #2
 8004666:	42a6      	cmp	r6, r4
 8004668:	d105      	bne.n	8004676 <__libc_init_array+0x2e>
 800466a:	bd70      	pop	{r4, r5, r6, pc}
 800466c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004670:	4798      	blx	r3
 8004672:	3601      	adds	r6, #1
 8004674:	e7ee      	b.n	8004654 <__libc_init_array+0xc>
 8004676:	f855 3b04 	ldr.w	r3, [r5], #4
 800467a:	4798      	blx	r3
 800467c:	3601      	adds	r6, #1
 800467e:	e7f2      	b.n	8004666 <__libc_init_array+0x1e>
 8004680:	08008228 	.word	0x08008228
 8004684:	08008228 	.word	0x08008228
 8004688:	08008228 	.word	0x08008228
 800468c:	0800822c 	.word	0x0800822c

08004690 <__retarget_lock_init_recursive>:
 8004690:	4770      	bx	lr

08004692 <__retarget_lock_acquire_recursive>:
 8004692:	4770      	bx	lr

08004694 <__retarget_lock_release_recursive>:
 8004694:	4770      	bx	lr

08004696 <memchr>:
 8004696:	4603      	mov	r3, r0
 8004698:	b510      	push	{r4, lr}
 800469a:	b2c9      	uxtb	r1, r1
 800469c:	4402      	add	r2, r0
 800469e:	4293      	cmp	r3, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	d101      	bne.n	80046a8 <memchr+0x12>
 80046a4:	2000      	movs	r0, #0
 80046a6:	e003      	b.n	80046b0 <memchr+0x1a>
 80046a8:	7804      	ldrb	r4, [r0, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	428c      	cmp	r4, r1
 80046ae:	d1f6      	bne.n	800469e <memchr+0x8>
 80046b0:	bd10      	pop	{r4, pc}
	...

080046b4 <nanf>:
 80046b4:	4800      	ldr	r0, [pc, #0]	@ (80046b8 <nanf+0x4>)
 80046b6:	4770      	bx	lr
 80046b8:	7fc00000 	.word	0x7fc00000

080046bc <quorem>:
 80046bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	6903      	ldr	r3, [r0, #16]
 80046c2:	690c      	ldr	r4, [r1, #16]
 80046c4:	4607      	mov	r7, r0
 80046c6:	42a3      	cmp	r3, r4
 80046c8:	db7e      	blt.n	80047c8 <quorem+0x10c>
 80046ca:	3c01      	subs	r4, #1
 80046cc:	00a3      	lsls	r3, r4, #2
 80046ce:	f100 0514 	add.w	r5, r0, #20
 80046d2:	f101 0814 	add.w	r8, r1, #20
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046e6:	3301      	adds	r3, #1
 80046e8:	429a      	cmp	r2, r3
 80046ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80046ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046f2:	d32e      	bcc.n	8004752 <quorem+0x96>
 80046f4:	f04f 0a00 	mov.w	sl, #0
 80046f8:	46c4      	mov	ip, r8
 80046fa:	46ae      	mov	lr, r5
 80046fc:	46d3      	mov	fp, sl
 80046fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004702:	b298      	uxth	r0, r3
 8004704:	fb06 a000 	mla	r0, r6, r0, sl
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	0c02      	lsrs	r2, r0, #16
 800470c:	fb06 2303 	mla	r3, r6, r3, r2
 8004710:	f8de 2000 	ldr.w	r2, [lr]
 8004714:	b280      	uxth	r0, r0
 8004716:	b292      	uxth	r2, r2
 8004718:	1a12      	subs	r2, r2, r0
 800471a:	445a      	add	r2, fp
 800471c:	f8de 0000 	ldr.w	r0, [lr]
 8004720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004724:	b29b      	uxth	r3, r3
 8004726:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800472a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800472e:	b292      	uxth	r2, r2
 8004730:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004734:	45e1      	cmp	r9, ip
 8004736:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800473a:	f84e 2b04 	str.w	r2, [lr], #4
 800473e:	d2de      	bcs.n	80046fe <quorem+0x42>
 8004740:	9b00      	ldr	r3, [sp, #0]
 8004742:	58eb      	ldr	r3, [r5, r3]
 8004744:	b92b      	cbnz	r3, 8004752 <quorem+0x96>
 8004746:	9b01      	ldr	r3, [sp, #4]
 8004748:	3b04      	subs	r3, #4
 800474a:	429d      	cmp	r5, r3
 800474c:	461a      	mov	r2, r3
 800474e:	d32f      	bcc.n	80047b0 <quorem+0xf4>
 8004750:	613c      	str	r4, [r7, #16]
 8004752:	4638      	mov	r0, r7
 8004754:	f001 f9c4 	bl	8005ae0 <__mcmp>
 8004758:	2800      	cmp	r0, #0
 800475a:	db25      	blt.n	80047a8 <quorem+0xec>
 800475c:	4629      	mov	r1, r5
 800475e:	2000      	movs	r0, #0
 8004760:	f858 2b04 	ldr.w	r2, [r8], #4
 8004764:	f8d1 c000 	ldr.w	ip, [r1]
 8004768:	fa1f fe82 	uxth.w	lr, r2
 800476c:	fa1f f38c 	uxth.w	r3, ip
 8004770:	eba3 030e 	sub.w	r3, r3, lr
 8004774:	4403      	add	r3, r0
 8004776:	0c12      	lsrs	r2, r2, #16
 8004778:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800477c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004780:	b29b      	uxth	r3, r3
 8004782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004786:	45c1      	cmp	r9, r8
 8004788:	ea4f 4022 	mov.w	r0, r2, asr #16
 800478c:	f841 3b04 	str.w	r3, [r1], #4
 8004790:	d2e6      	bcs.n	8004760 <quorem+0xa4>
 8004792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800479a:	b922      	cbnz	r2, 80047a6 <quorem+0xea>
 800479c:	3b04      	subs	r3, #4
 800479e:	429d      	cmp	r5, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	d30b      	bcc.n	80047bc <quorem+0x100>
 80047a4:	613c      	str	r4, [r7, #16]
 80047a6:	3601      	adds	r6, #1
 80047a8:	4630      	mov	r0, r6
 80047aa:	b003      	add	sp, #12
 80047ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	3b04      	subs	r3, #4
 80047b4:	2a00      	cmp	r2, #0
 80047b6:	d1cb      	bne.n	8004750 <quorem+0x94>
 80047b8:	3c01      	subs	r4, #1
 80047ba:	e7c6      	b.n	800474a <quorem+0x8e>
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	3b04      	subs	r3, #4
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	d1ef      	bne.n	80047a4 <quorem+0xe8>
 80047c4:	3c01      	subs	r4, #1
 80047c6:	e7ea      	b.n	800479e <quorem+0xe2>
 80047c8:	2000      	movs	r0, #0
 80047ca:	e7ee      	b.n	80047aa <quorem+0xee>
 80047cc:	0000      	movs	r0, r0
	...

080047d0 <_dtoa_r>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	4614      	mov	r4, r2
 80047d6:	461d      	mov	r5, r3
 80047d8:	69c7      	ldr	r7, [r0, #28]
 80047da:	b097      	sub	sp, #92	@ 0x5c
 80047dc:	4683      	mov	fp, r0
 80047de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80047e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80047e4:	b97f      	cbnz	r7, 8004806 <_dtoa_r+0x36>
 80047e6:	2010      	movs	r0, #16
 80047e8:	f000 fe02 	bl	80053f0 <malloc>
 80047ec:	4602      	mov	r2, r0
 80047ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80047f2:	b920      	cbnz	r0, 80047fe <_dtoa_r+0x2e>
 80047f4:	21ef      	movs	r1, #239	@ 0xef
 80047f6:	4ba8      	ldr	r3, [pc, #672]	@ (8004a98 <_dtoa_r+0x2c8>)
 80047f8:	48a8      	ldr	r0, [pc, #672]	@ (8004a9c <_dtoa_r+0x2cc>)
 80047fa:	f002 fdf7 	bl	80073ec <__assert_func>
 80047fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004802:	6007      	str	r7, [r0, #0]
 8004804:	60c7      	str	r7, [r0, #12]
 8004806:	f8db 301c 	ldr.w	r3, [fp, #28]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	b159      	cbz	r1, 8004826 <_dtoa_r+0x56>
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	2301      	movs	r3, #1
 8004812:	4093      	lsls	r3, r2
 8004814:	604a      	str	r2, [r1, #4]
 8004816:	608b      	str	r3, [r1, #8]
 8004818:	4658      	mov	r0, fp
 800481a:	f000 fedf 	bl	80055dc <_Bfree>
 800481e:	2200      	movs	r2, #0
 8004820:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	1e2b      	subs	r3, r5, #0
 8004828:	bfaf      	iteee	ge
 800482a:	2300      	movge	r3, #0
 800482c:	2201      	movlt	r2, #1
 800482e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004832:	9303      	strlt	r3, [sp, #12]
 8004834:	bfa8      	it	ge
 8004836:	6033      	strge	r3, [r6, #0]
 8004838:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800483c:	4b98      	ldr	r3, [pc, #608]	@ (8004aa0 <_dtoa_r+0x2d0>)
 800483e:	bfb8      	it	lt
 8004840:	6032      	strlt	r2, [r6, #0]
 8004842:	ea33 0308 	bics.w	r3, r3, r8
 8004846:	d112      	bne.n	800486e <_dtoa_r+0x9e>
 8004848:	f242 730f 	movw	r3, #9999	@ 0x270f
 800484c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004854:	4323      	orrs	r3, r4
 8004856:	f000 8550 	beq.w	80052fa <_dtoa_r+0xb2a>
 800485a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800485c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004aa4 <_dtoa_r+0x2d4>
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8552 	beq.w	800530a <_dtoa_r+0xb3a>
 8004866:	f10a 0303 	add.w	r3, sl, #3
 800486a:	f000 bd4c 	b.w	8005306 <_dtoa_r+0xb36>
 800486e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004872:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800487a:	2200      	movs	r2, #0
 800487c:	2300      	movs	r3, #0
 800487e:	f7fc f893 	bl	80009a8 <__aeabi_dcmpeq>
 8004882:	4607      	mov	r7, r0
 8004884:	b158      	cbz	r0, 800489e <_dtoa_r+0xce>
 8004886:	2301      	movs	r3, #1
 8004888:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800488e:	b113      	cbz	r3, 8004896 <_dtoa_r+0xc6>
 8004890:	4b85      	ldr	r3, [pc, #532]	@ (8004aa8 <_dtoa_r+0x2d8>)
 8004892:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004aac <_dtoa_r+0x2dc>
 800489a:	f000 bd36 	b.w	800530a <_dtoa_r+0xb3a>
 800489e:	ab14      	add	r3, sp, #80	@ 0x50
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	ab15      	add	r3, sp, #84	@ 0x54
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	4658      	mov	r0, fp
 80048a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80048ac:	f001 fa30 	bl	8005d10 <__d2b>
 80048b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80048b4:	4681      	mov	r9, r0
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	d077      	beq.n	80049aa <_dtoa_r+0x1da>
 80048ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80048c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80048cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80048d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80048d2:	4619      	mov	r1, r3
 80048d4:	2200      	movs	r2, #0
 80048d6:	4b76      	ldr	r3, [pc, #472]	@ (8004ab0 <_dtoa_r+0x2e0>)
 80048d8:	f7fb fc46 	bl	8000168 <__aeabi_dsub>
 80048dc:	a368      	add	r3, pc, #416	@ (adr r3, 8004a80 <_dtoa_r+0x2b0>)
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f7fb fdf9 	bl	80004d8 <__aeabi_dmul>
 80048e6:	a368      	add	r3, pc, #416	@ (adr r3, 8004a88 <_dtoa_r+0x2b8>)
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f7fb fc3e 	bl	800016c <__adddf3>
 80048f0:	4604      	mov	r4, r0
 80048f2:	4630      	mov	r0, r6
 80048f4:	460d      	mov	r5, r1
 80048f6:	f7fb fd85 	bl	8000404 <__aeabi_i2d>
 80048fa:	a365      	add	r3, pc, #404	@ (adr r3, 8004a90 <_dtoa_r+0x2c0>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fdea 	bl	80004d8 <__aeabi_dmul>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4620      	mov	r0, r4
 800490a:	4629      	mov	r1, r5
 800490c:	f7fb fc2e 	bl	800016c <__adddf3>
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	f7fc f890 	bl	8000a38 <__aeabi_d2iz>
 8004918:	2200      	movs	r2, #0
 800491a:	4607      	mov	r7, r0
 800491c:	2300      	movs	r3, #0
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fc f84b 	bl	80009bc <__aeabi_dcmplt>
 8004926:	b140      	cbz	r0, 800493a <_dtoa_r+0x16a>
 8004928:	4638      	mov	r0, r7
 800492a:	f7fb fd6b 	bl	8000404 <__aeabi_i2d>
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	f7fc f839 	bl	80009a8 <__aeabi_dcmpeq>
 8004936:	b900      	cbnz	r0, 800493a <_dtoa_r+0x16a>
 8004938:	3f01      	subs	r7, #1
 800493a:	2f16      	cmp	r7, #22
 800493c:	d853      	bhi.n	80049e6 <_dtoa_r+0x216>
 800493e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004942:	4b5c      	ldr	r3, [pc, #368]	@ (8004ab4 <_dtoa_r+0x2e4>)
 8004944:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f7fc f836 	bl	80009bc <__aeabi_dcmplt>
 8004950:	2800      	cmp	r0, #0
 8004952:	d04a      	beq.n	80049ea <_dtoa_r+0x21a>
 8004954:	2300      	movs	r3, #0
 8004956:	3f01      	subs	r7, #1
 8004958:	930f      	str	r3, [sp, #60]	@ 0x3c
 800495a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800495c:	1b9b      	subs	r3, r3, r6
 800495e:	1e5a      	subs	r2, r3, #1
 8004960:	bf46      	itte	mi
 8004962:	f1c3 0801 	rsbmi	r8, r3, #1
 8004966:	2300      	movmi	r3, #0
 8004968:	f04f 0800 	movpl.w	r8, #0
 800496c:	9209      	str	r2, [sp, #36]	@ 0x24
 800496e:	bf48      	it	mi
 8004970:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004972:	2f00      	cmp	r7, #0
 8004974:	db3b      	blt.n	80049ee <_dtoa_r+0x21e>
 8004976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004978:	970e      	str	r7, [sp, #56]	@ 0x38
 800497a:	443b      	add	r3, r7
 800497c:	9309      	str	r3, [sp, #36]	@ 0x24
 800497e:	2300      	movs	r3, #0
 8004980:	930a      	str	r3, [sp, #40]	@ 0x28
 8004982:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004984:	2b09      	cmp	r3, #9
 8004986:	d866      	bhi.n	8004a56 <_dtoa_r+0x286>
 8004988:	2b05      	cmp	r3, #5
 800498a:	bfc4      	itt	gt
 800498c:	3b04      	subgt	r3, #4
 800498e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004990:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004992:	bfc8      	it	gt
 8004994:	2400      	movgt	r4, #0
 8004996:	f1a3 0302 	sub.w	r3, r3, #2
 800499a:	bfd8      	it	le
 800499c:	2401      	movle	r4, #1
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d864      	bhi.n	8004a6c <_dtoa_r+0x29c>
 80049a2:	e8df f003 	tbb	[pc, r3]
 80049a6:	382b      	.short	0x382b
 80049a8:	5636      	.short	0x5636
 80049aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80049ae:	441e      	add	r6, r3
 80049b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80049b4:	2b20      	cmp	r3, #32
 80049b6:	bfc1      	itttt	gt
 80049b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80049bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80049c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80049c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80049c8:	bfd6      	itet	le
 80049ca:	f1c3 0320 	rsble	r3, r3, #32
 80049ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80049d2:	fa04 f003 	lslle.w	r0, r4, r3
 80049d6:	f7fb fd05 	bl	80003e4 <__aeabi_ui2d>
 80049da:	2201      	movs	r2, #1
 80049dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80049e0:	3e01      	subs	r6, #1
 80049e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80049e4:	e775      	b.n	80048d2 <_dtoa_r+0x102>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e7b6      	b.n	8004958 <_dtoa_r+0x188>
 80049ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80049ec:	e7b5      	b.n	800495a <_dtoa_r+0x18a>
 80049ee:	427b      	negs	r3, r7
 80049f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80049f2:	2300      	movs	r3, #0
 80049f4:	eba8 0807 	sub.w	r8, r8, r7
 80049f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80049fa:	e7c2      	b.n	8004982 <_dtoa_r+0x1b2>
 80049fc:	2300      	movs	r3, #0
 80049fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	dc35      	bgt.n	8004a72 <_dtoa_r+0x2a2>
 8004a06:	2301      	movs	r3, #1
 8004a08:	461a      	mov	r2, r3
 8004a0a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a0e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a10:	e00b      	b.n	8004a2a <_dtoa_r+0x25a>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f3      	b.n	80049fe <_dtoa_r+0x22e>
 8004a16:	2300      	movs	r3, #0
 8004a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	9308      	str	r3, [sp, #32]
 8004a20:	3301      	adds	r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	9307      	str	r3, [sp, #28]
 8004a26:	bfb8      	it	lt
 8004a28:	2301      	movlt	r3, #1
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004a32:	f102 0514 	add.w	r5, r2, #20
 8004a36:	429d      	cmp	r5, r3
 8004a38:	d91f      	bls.n	8004a7a <_dtoa_r+0x2aa>
 8004a3a:	6041      	str	r1, [r0, #4]
 8004a3c:	4658      	mov	r0, fp
 8004a3e:	f000 fd8d 	bl	800555c <_Balloc>
 8004a42:	4682      	mov	sl, r0
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d139      	bne.n	8004abc <_dtoa_r+0x2ec>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab8 <_dtoa_r+0x2e8>)
 8004a50:	e6d2      	b.n	80047f8 <_dtoa_r+0x28>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e7e0      	b.n	8004a18 <_dtoa_r+0x248>
 8004a56:	2401      	movs	r4, #1
 8004a58:	2300      	movs	r3, #0
 8004a5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a62:	2200      	movs	r2, #0
 8004a64:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a68:	2312      	movs	r3, #18
 8004a6a:	e7d0      	b.n	8004a0e <_dtoa_r+0x23e>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a70:	e7f5      	b.n	8004a5e <_dtoa_r+0x28e>
 8004a72:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a78:	e7d7      	b.n	8004a2a <_dtoa_r+0x25a>
 8004a7a:	3101      	adds	r1, #1
 8004a7c:	0052      	lsls	r2, r2, #1
 8004a7e:	e7d8      	b.n	8004a32 <_dtoa_r+0x262>
 8004a80:	636f4361 	.word	0x636f4361
 8004a84:	3fd287a7 	.word	0x3fd287a7
 8004a88:	8b60c8b3 	.word	0x8b60c8b3
 8004a8c:	3fc68a28 	.word	0x3fc68a28
 8004a90:	509f79fb 	.word	0x509f79fb
 8004a94:	3fd34413 	.word	0x3fd34413
 8004a98:	08007e38 	.word	0x08007e38
 8004a9c:	08007e4f 	.word	0x08007e4f
 8004aa0:	7ff00000 	.word	0x7ff00000
 8004aa4:	08007e34 	.word	0x08007e34
 8004aa8:	08007e03 	.word	0x08007e03
 8004aac:	08007e02 	.word	0x08007e02
 8004ab0:	3ff80000 	.word	0x3ff80000
 8004ab4:	08007f48 	.word	0x08007f48
 8004ab8:	08007ea7 	.word	0x08007ea7
 8004abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ac0:	6018      	str	r0, [r3, #0]
 8004ac2:	9b07      	ldr	r3, [sp, #28]
 8004ac4:	2b0e      	cmp	r3, #14
 8004ac6:	f200 80a4 	bhi.w	8004c12 <_dtoa_r+0x442>
 8004aca:	2c00      	cmp	r4, #0
 8004acc:	f000 80a1 	beq.w	8004c12 <_dtoa_r+0x442>
 8004ad0:	2f00      	cmp	r7, #0
 8004ad2:	dd33      	ble.n	8004b3c <_dtoa_r+0x36c>
 8004ad4:	4b86      	ldr	r3, [pc, #536]	@ (8004cf0 <_dtoa_r+0x520>)
 8004ad6:	f007 020f 	and.w	r2, r7, #15
 8004ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ade:	05f8      	lsls	r0, r7, #23
 8004ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ae4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004aec:	d516      	bpl.n	8004b1c <_dtoa_r+0x34c>
 8004aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004af2:	4b80      	ldr	r3, [pc, #512]	@ (8004cf4 <_dtoa_r+0x524>)
 8004af4:	2603      	movs	r6, #3
 8004af6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004afa:	f7fb fe17 	bl	800072c <__aeabi_ddiv>
 8004afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b02:	f004 040f 	and.w	r4, r4, #15
 8004b06:	4d7b      	ldr	r5, [pc, #492]	@ (8004cf4 <_dtoa_r+0x524>)
 8004b08:	b954      	cbnz	r4, 8004b20 <_dtoa_r+0x350>
 8004b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b12:	f7fb fe0b 	bl	800072c <__aeabi_ddiv>
 8004b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b1a:	e028      	b.n	8004b6e <_dtoa_r+0x39e>
 8004b1c:	2602      	movs	r6, #2
 8004b1e:	e7f2      	b.n	8004b06 <_dtoa_r+0x336>
 8004b20:	07e1      	lsls	r1, r4, #31
 8004b22:	d508      	bpl.n	8004b36 <_dtoa_r+0x366>
 8004b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b2c:	f7fb fcd4 	bl	80004d8 <__aeabi_dmul>
 8004b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b34:	3601      	adds	r6, #1
 8004b36:	1064      	asrs	r4, r4, #1
 8004b38:	3508      	adds	r5, #8
 8004b3a:	e7e5      	b.n	8004b08 <_dtoa_r+0x338>
 8004b3c:	f000 80d2 	beq.w	8004ce4 <_dtoa_r+0x514>
 8004b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b44:	427c      	negs	r4, r7
 8004b46:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf0 <_dtoa_r+0x520>)
 8004b48:	f004 020f 	and.w	r2, r4, #15
 8004b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fcc0 	bl	80004d8 <__aeabi_dmul>
 8004b58:	2602      	movs	r6, #2
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b60:	4d64      	ldr	r5, [pc, #400]	@ (8004cf4 <_dtoa_r+0x524>)
 8004b62:	1124      	asrs	r4, r4, #4
 8004b64:	2c00      	cmp	r4, #0
 8004b66:	f040 80b2 	bne.w	8004cce <_dtoa_r+0x4fe>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1d3      	bne.n	8004b16 <_dtoa_r+0x346>
 8004b6e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80b7 	beq.w	8004ce8 <_dtoa_r+0x518>
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf8 <_dtoa_r+0x528>)
 8004b82:	f7fb ff1b 	bl	80009bc <__aeabi_dcmplt>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f000 80ae 	beq.w	8004ce8 <_dtoa_r+0x518>
 8004b8c:	9b07      	ldr	r3, [sp, #28]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80aa 	beq.w	8004ce8 <_dtoa_r+0x518>
 8004b94:	9b08      	ldr	r3, [sp, #32]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dd37      	ble.n	8004c0a <_dtoa_r+0x43a>
 8004b9a:	1e7b      	subs	r3, r7, #1
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	9304      	str	r3, [sp, #16]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	4b55      	ldr	r3, [pc, #340]	@ (8004cfc <_dtoa_r+0x52c>)
 8004ba6:	f7fb fc97 	bl	80004d8 <__aeabi_dmul>
 8004baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bae:	9c08      	ldr	r4, [sp, #32]
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7fb fc26 	bl	8000404 <__aeabi_i2d>
 8004bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bbc:	f7fb fc8c 	bl	80004d8 <__aeabi_dmul>
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d00 <_dtoa_r+0x530>)
 8004bc4:	f7fb fad2 	bl	800016c <__adddf3>
 8004bc8:	4605      	mov	r5, r0
 8004bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004bce:	2c00      	cmp	r4, #0
 8004bd0:	f040 809a 	bne.w	8004d08 <_dtoa_r+0x538>
 8004bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	4b4a      	ldr	r3, [pc, #296]	@ (8004d04 <_dtoa_r+0x534>)
 8004bdc:	f7fb fac4 	bl	8000168 <__aeabi_dsub>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004be8:	462a      	mov	r2, r5
 8004bea:	4633      	mov	r3, r6
 8004bec:	f7fb ff04 	bl	80009f8 <__aeabi_dcmpgt>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f040 828e 	bne.w	8005112 <_dtoa_r+0x942>
 8004bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bfa:	462a      	mov	r2, r5
 8004bfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c00:	f7fb fedc 	bl	80009bc <__aeabi_dcmplt>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	f040 8127 	bne.w	8004e58 <_dtoa_r+0x688>
 8004c0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f2c0 8163 	blt.w	8004ee0 <_dtoa_r+0x710>
 8004c1a:	2f0e      	cmp	r7, #14
 8004c1c:	f300 8160 	bgt.w	8004ee0 <_dtoa_r+0x710>
 8004c20:	4b33      	ldr	r3, [pc, #204]	@ (8004cf0 <_dtoa_r+0x520>)
 8004c22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c2a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	da03      	bge.n	8004c3c <_dtoa_r+0x46c>
 8004c34:	9b07      	ldr	r3, [sp, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f340 8100 	ble.w	8004e3c <_dtoa_r+0x66c>
 8004c3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c40:	4656      	mov	r6, sl
 8004c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c46:	4620      	mov	r0, r4
 8004c48:	4629      	mov	r1, r5
 8004c4a:	f7fb fd6f 	bl	800072c <__aeabi_ddiv>
 8004c4e:	f7fb fef3 	bl	8000a38 <__aeabi_d2iz>
 8004c52:	4680      	mov	r8, r0
 8004c54:	f7fb fbd6 	bl	8000404 <__aeabi_i2d>
 8004c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c5c:	f7fb fc3c 	bl	80004d8 <__aeabi_dmul>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4620      	mov	r0, r4
 8004c66:	4629      	mov	r1, r5
 8004c68:	f7fb fa7e 	bl	8000168 <__aeabi_dsub>
 8004c6c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004c70:	9d07      	ldr	r5, [sp, #28]
 8004c72:	f806 4b01 	strb.w	r4, [r6], #1
 8004c76:	eba6 040a 	sub.w	r4, r6, sl
 8004c7a:	42a5      	cmp	r5, r4
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	f040 8116 	bne.w	8004eb0 <_dtoa_r+0x6e0>
 8004c84:	f7fb fa72 	bl	800016c <__adddf3>
 8004c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	460d      	mov	r5, r1
 8004c90:	f7fb feb2 	bl	80009f8 <__aeabi_dcmpgt>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f040 80f8 	bne.w	8004e8a <_dtoa_r+0x6ba>
 8004c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7fb fe81 	bl	80009a8 <__aeabi_dcmpeq>
 8004ca6:	b118      	cbz	r0, 8004cb0 <_dtoa_r+0x4e0>
 8004ca8:	f018 0f01 	tst.w	r8, #1
 8004cac:	f040 80ed 	bne.w	8004e8a <_dtoa_r+0x6ba>
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	f000 fc92 	bl	80055dc <_Bfree>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	7033      	strb	r3, [r6, #0]
 8004cbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004cbe:	3701      	adds	r7, #1
 8004cc0:	601f      	str	r7, [r3, #0]
 8004cc2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8320 	beq.w	800530a <_dtoa_r+0xb3a>
 8004cca:	601e      	str	r6, [r3, #0]
 8004ccc:	e31d      	b.n	800530a <_dtoa_r+0xb3a>
 8004cce:	07e2      	lsls	r2, r4, #31
 8004cd0:	d505      	bpl.n	8004cde <_dtoa_r+0x50e>
 8004cd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004cd6:	f7fb fbff 	bl	80004d8 <__aeabi_dmul>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	3601      	adds	r6, #1
 8004cde:	1064      	asrs	r4, r4, #1
 8004ce0:	3508      	adds	r5, #8
 8004ce2:	e73f      	b.n	8004b64 <_dtoa_r+0x394>
 8004ce4:	2602      	movs	r6, #2
 8004ce6:	e742      	b.n	8004b6e <_dtoa_r+0x39e>
 8004ce8:	9c07      	ldr	r4, [sp, #28]
 8004cea:	9704      	str	r7, [sp, #16]
 8004cec:	e761      	b.n	8004bb2 <_dtoa_r+0x3e2>
 8004cee:	bf00      	nop
 8004cf0:	08007f48 	.word	0x08007f48
 8004cf4:	08007f20 	.word	0x08007f20
 8004cf8:	3ff00000 	.word	0x3ff00000
 8004cfc:	40240000 	.word	0x40240000
 8004d00:	401c0000 	.word	0x401c0000
 8004d04:	40140000 	.word	0x40140000
 8004d08:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <_dtoa_r+0x6fc>)
 8004d0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d14:	4454      	add	r4, sl
 8004d16:	2900      	cmp	r1, #0
 8004d18:	d045      	beq.n	8004da6 <_dtoa_r+0x5d6>
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	496c      	ldr	r1, [pc, #432]	@ (8004ed0 <_dtoa_r+0x700>)
 8004d1e:	f7fb fd05 	bl	800072c <__aeabi_ddiv>
 8004d22:	4633      	mov	r3, r6
 8004d24:	462a      	mov	r2, r5
 8004d26:	f7fb fa1f 	bl	8000168 <__aeabi_dsub>
 8004d2a:	4656      	mov	r6, sl
 8004d2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d34:	f7fb fe80 	bl	8000a38 <__aeabi_d2iz>
 8004d38:	4605      	mov	r5, r0
 8004d3a:	f7fb fb63 	bl	8000404 <__aeabi_i2d>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d46:	f7fb fa0f 	bl	8000168 <__aeabi_dsub>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	3530      	adds	r5, #48	@ 0x30
 8004d50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d58:	f806 5b01 	strb.w	r5, [r6], #1
 8004d5c:	f7fb fe2e 	bl	80009bc <__aeabi_dcmplt>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d163      	bne.n	8004e2c <_dtoa_r+0x65c>
 8004d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d68:	2000      	movs	r0, #0
 8004d6a:	495a      	ldr	r1, [pc, #360]	@ (8004ed4 <_dtoa_r+0x704>)
 8004d6c:	f7fb f9fc 	bl	8000168 <__aeabi_dsub>
 8004d70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d74:	f7fb fe22 	bl	80009bc <__aeabi_dcmplt>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	f040 8087 	bne.w	8004e8c <_dtoa_r+0x6bc>
 8004d7e:	42a6      	cmp	r6, r4
 8004d80:	f43f af43 	beq.w	8004c0a <_dtoa_r+0x43a>
 8004d84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d88:	2200      	movs	r2, #0
 8004d8a:	4b53      	ldr	r3, [pc, #332]	@ (8004ed8 <_dtoa_r+0x708>)
 8004d8c:	f7fb fba4 	bl	80004d8 <__aeabi_dmul>
 8004d90:	2200      	movs	r2, #0
 8004d92:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed8 <_dtoa_r+0x708>)
 8004d9c:	f7fb fb9c 	bl	80004d8 <__aeabi_dmul>
 8004da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004da4:	e7c4      	b.n	8004d30 <_dtoa_r+0x560>
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	f7fb fb95 	bl	80004d8 <__aeabi_dmul>
 8004dae:	4656      	mov	r6, sl
 8004db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004db4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dba:	f7fb fe3d 	bl	8000a38 <__aeabi_d2iz>
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	f7fb fb20 	bl	8000404 <__aeabi_i2d>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dcc:	f7fb f9cc 	bl	8000168 <__aeabi_dsub>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	3530      	adds	r5, #48	@ 0x30
 8004dd6:	f806 5b01 	strb.w	r5, [r6], #1
 8004dda:	42a6      	cmp	r6, r4
 8004ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	d124      	bne.n	8004e30 <_dtoa_r+0x660>
 8004de6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004dea:	4b39      	ldr	r3, [pc, #228]	@ (8004ed0 <_dtoa_r+0x700>)
 8004dec:	f7fb f9be 	bl	800016c <__adddf3>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004df8:	f7fb fdfe 	bl	80009f8 <__aeabi_dcmpgt>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d145      	bne.n	8004e8c <_dtoa_r+0x6bc>
 8004e00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e04:	2000      	movs	r0, #0
 8004e06:	4932      	ldr	r1, [pc, #200]	@ (8004ed0 <_dtoa_r+0x700>)
 8004e08:	f7fb f9ae 	bl	8000168 <__aeabi_dsub>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e14:	f7fb fdd2 	bl	80009bc <__aeabi_dcmplt>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	f43f aef6 	beq.w	8004c0a <_dtoa_r+0x43a>
 8004e1e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004e20:	1e73      	subs	r3, r6, #1
 8004e22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e28:	2b30      	cmp	r3, #48	@ 0x30
 8004e2a:	d0f8      	beq.n	8004e1e <_dtoa_r+0x64e>
 8004e2c:	9f04      	ldr	r7, [sp, #16]
 8004e2e:	e73f      	b.n	8004cb0 <_dtoa_r+0x4e0>
 8004e30:	4b29      	ldr	r3, [pc, #164]	@ (8004ed8 <_dtoa_r+0x708>)
 8004e32:	f7fb fb51 	bl	80004d8 <__aeabi_dmul>
 8004e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e3a:	e7bc      	b.n	8004db6 <_dtoa_r+0x5e6>
 8004e3c:	d10c      	bne.n	8004e58 <_dtoa_r+0x688>
 8004e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e42:	2200      	movs	r2, #0
 8004e44:	4b25      	ldr	r3, [pc, #148]	@ (8004edc <_dtoa_r+0x70c>)
 8004e46:	f7fb fb47 	bl	80004d8 <__aeabi_dmul>
 8004e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e4e:	f7fb fdc9 	bl	80009e4 <__aeabi_dcmpge>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	f000 815b 	beq.w	800510e <_dtoa_r+0x93e>
 8004e58:	2400      	movs	r4, #0
 8004e5a:	4625      	mov	r5, r4
 8004e5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e5e:	4656      	mov	r6, sl
 8004e60:	43db      	mvns	r3, r3
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	2700      	movs	r7, #0
 8004e66:	4621      	mov	r1, r4
 8004e68:	4658      	mov	r0, fp
 8004e6a:	f000 fbb7 	bl	80055dc <_Bfree>
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	d0dc      	beq.n	8004e2c <_dtoa_r+0x65c>
 8004e72:	b12f      	cbz	r7, 8004e80 <_dtoa_r+0x6b0>
 8004e74:	42af      	cmp	r7, r5
 8004e76:	d003      	beq.n	8004e80 <_dtoa_r+0x6b0>
 8004e78:	4639      	mov	r1, r7
 8004e7a:	4658      	mov	r0, fp
 8004e7c:	f000 fbae 	bl	80055dc <_Bfree>
 8004e80:	4629      	mov	r1, r5
 8004e82:	4658      	mov	r0, fp
 8004e84:	f000 fbaa 	bl	80055dc <_Bfree>
 8004e88:	e7d0      	b.n	8004e2c <_dtoa_r+0x65c>
 8004e8a:	9704      	str	r7, [sp, #16]
 8004e8c:	4633      	mov	r3, r6
 8004e8e:	461e      	mov	r6, r3
 8004e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e94:	2a39      	cmp	r2, #57	@ 0x39
 8004e96:	d107      	bne.n	8004ea8 <_dtoa_r+0x6d8>
 8004e98:	459a      	cmp	sl, r3
 8004e9a:	d1f8      	bne.n	8004e8e <_dtoa_r+0x6be>
 8004e9c:	9a04      	ldr	r2, [sp, #16]
 8004e9e:	3201      	adds	r2, #1
 8004ea0:	9204      	str	r2, [sp, #16]
 8004ea2:	2230      	movs	r2, #48	@ 0x30
 8004ea4:	f88a 2000 	strb.w	r2, [sl]
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	3201      	adds	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e7bd      	b.n	8004e2c <_dtoa_r+0x65c>
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <_dtoa_r+0x708>)
 8004eb4:	f7fb fb10 	bl	80004d8 <__aeabi_dmul>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	460d      	mov	r5, r1
 8004ec0:	f7fb fd72 	bl	80009a8 <__aeabi_dcmpeq>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	f43f aebc 	beq.w	8004c42 <_dtoa_r+0x472>
 8004eca:	e6f1      	b.n	8004cb0 <_dtoa_r+0x4e0>
 8004ecc:	08007f48 	.word	0x08007f48
 8004ed0:	3fe00000 	.word	0x3fe00000
 8004ed4:	3ff00000 	.word	0x3ff00000
 8004ed8:	40240000 	.word	0x40240000
 8004edc:	40140000 	.word	0x40140000
 8004ee0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	f000 80db 	beq.w	800509e <_dtoa_r+0x8ce>
 8004ee8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004eea:	2a01      	cmp	r2, #1
 8004eec:	f300 80bf 	bgt.w	800506e <_dtoa_r+0x89e>
 8004ef0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	f000 80b7 	beq.w	8005066 <_dtoa_r+0x896>
 8004ef8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004efc:	4646      	mov	r6, r8
 8004efe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f02:	2101      	movs	r1, #1
 8004f04:	441a      	add	r2, r3
 8004f06:	4658      	mov	r0, fp
 8004f08:	4498      	add	r8, r3
 8004f0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f0c:	f000 fc64 	bl	80057d8 <__i2b>
 8004f10:	4605      	mov	r5, r0
 8004f12:	b15e      	cbz	r6, 8004f2c <_dtoa_r+0x75c>
 8004f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dd08      	ble.n	8004f2c <_dtoa_r+0x75c>
 8004f1a:	42b3      	cmp	r3, r6
 8004f1c:	bfa8      	it	ge
 8004f1e:	4633      	movge	r3, r6
 8004f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f22:	eba8 0803 	sub.w	r8, r8, r3
 8004f26:	1af6      	subs	r6, r6, r3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f2e:	b1f3      	cbz	r3, 8004f6e <_dtoa_r+0x79e>
 8004f30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80b7 	beq.w	80050a6 <_dtoa_r+0x8d6>
 8004f38:	b18c      	cbz	r4, 8004f5e <_dtoa_r+0x78e>
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	4658      	mov	r0, fp
 8004f40:	f000 fd08 	bl	8005954 <__pow5mult>
 8004f44:	464a      	mov	r2, r9
 8004f46:	4601      	mov	r1, r0
 8004f48:	4605      	mov	r5, r0
 8004f4a:	4658      	mov	r0, fp
 8004f4c:	f000 fc5a 	bl	8005804 <__multiply>
 8004f50:	4649      	mov	r1, r9
 8004f52:	9004      	str	r0, [sp, #16]
 8004f54:	4658      	mov	r0, fp
 8004f56:	f000 fb41 	bl	80055dc <_Bfree>
 8004f5a:	9b04      	ldr	r3, [sp, #16]
 8004f5c:	4699      	mov	r9, r3
 8004f5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f60:	1b1a      	subs	r2, r3, r4
 8004f62:	d004      	beq.n	8004f6e <_dtoa_r+0x79e>
 8004f64:	4649      	mov	r1, r9
 8004f66:	4658      	mov	r0, fp
 8004f68:	f000 fcf4 	bl	8005954 <__pow5mult>
 8004f6c:	4681      	mov	r9, r0
 8004f6e:	2101      	movs	r1, #1
 8004f70:	4658      	mov	r0, fp
 8004f72:	f000 fc31 	bl	80057d8 <__i2b>
 8004f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f78:	4604      	mov	r4, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 81c9 	beq.w	8005312 <_dtoa_r+0xb42>
 8004f80:	461a      	mov	r2, r3
 8004f82:	4601      	mov	r1, r0
 8004f84:	4658      	mov	r0, fp
 8004f86:	f000 fce5 	bl	8005954 <__pow5mult>
 8004f8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	f300 808f 	bgt.w	80050b2 <_dtoa_r+0x8e2>
 8004f94:	9b02      	ldr	r3, [sp, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 8087 	bne.w	80050aa <_dtoa_r+0x8da>
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f040 8083 	bne.w	80050ae <_dtoa_r+0x8de>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fae:	0d1b      	lsrs	r3, r3, #20
 8004fb0:	051b      	lsls	r3, r3, #20
 8004fb2:	b12b      	cbz	r3, 8004fc0 <_dtoa_r+0x7f0>
 8004fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fb6:	f108 0801 	add.w	r8, r8, #1
 8004fba:	3301      	adds	r3, #1
 8004fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 81aa 	beq.w	800531e <_dtoa_r+0xb4e>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fd0:	6918      	ldr	r0, [r3, #16]
 8004fd2:	f000 fbb5 	bl	8005740 <__hi0bits>
 8004fd6:	f1c0 0020 	rsb	r0, r0, #32
 8004fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fdc:	4418      	add	r0, r3
 8004fde:	f010 001f 	ands.w	r0, r0, #31
 8004fe2:	d071      	beq.n	80050c8 <_dtoa_r+0x8f8>
 8004fe4:	f1c0 0320 	rsb	r3, r0, #32
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	dd65      	ble.n	80050b8 <_dtoa_r+0x8e8>
 8004fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fee:	f1c0 001c 	rsb	r0, r0, #28
 8004ff2:	4403      	add	r3, r0
 8004ff4:	4480      	add	r8, r0
 8004ff6:	4406      	add	r6, r0
 8004ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ffa:	f1b8 0f00 	cmp.w	r8, #0
 8004ffe:	dd05      	ble.n	800500c <_dtoa_r+0x83c>
 8005000:	4649      	mov	r1, r9
 8005002:	4642      	mov	r2, r8
 8005004:	4658      	mov	r0, fp
 8005006:	f000 fcff 	bl	8005a08 <__lshift>
 800500a:	4681      	mov	r9, r0
 800500c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	dd05      	ble.n	800501e <_dtoa_r+0x84e>
 8005012:	4621      	mov	r1, r4
 8005014:	461a      	mov	r2, r3
 8005016:	4658      	mov	r0, fp
 8005018:	f000 fcf6 	bl	8005a08 <__lshift>
 800501c:	4604      	mov	r4, r0
 800501e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d053      	beq.n	80050cc <_dtoa_r+0x8fc>
 8005024:	4621      	mov	r1, r4
 8005026:	4648      	mov	r0, r9
 8005028:	f000 fd5a 	bl	8005ae0 <__mcmp>
 800502c:	2800      	cmp	r0, #0
 800502e:	da4d      	bge.n	80050cc <_dtoa_r+0x8fc>
 8005030:	1e7b      	subs	r3, r7, #1
 8005032:	4649      	mov	r1, r9
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	220a      	movs	r2, #10
 8005038:	2300      	movs	r3, #0
 800503a:	4658      	mov	r0, fp
 800503c:	f000 faf0 	bl	8005620 <__multadd>
 8005040:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005042:	4681      	mov	r9, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 816c 	beq.w	8005322 <_dtoa_r+0xb52>
 800504a:	2300      	movs	r3, #0
 800504c:	4629      	mov	r1, r5
 800504e:	220a      	movs	r2, #10
 8005050:	4658      	mov	r0, fp
 8005052:	f000 fae5 	bl	8005620 <__multadd>
 8005056:	9b08      	ldr	r3, [sp, #32]
 8005058:	4605      	mov	r5, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	dc61      	bgt.n	8005122 <_dtoa_r+0x952>
 800505e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005060:	2b02      	cmp	r3, #2
 8005062:	dc3b      	bgt.n	80050dc <_dtoa_r+0x90c>
 8005064:	e05d      	b.n	8005122 <_dtoa_r+0x952>
 8005066:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005068:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800506c:	e746      	b.n	8004efc <_dtoa_r+0x72c>
 800506e:	9b07      	ldr	r3, [sp, #28]
 8005070:	1e5c      	subs	r4, r3, #1
 8005072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005074:	42a3      	cmp	r3, r4
 8005076:	bfbf      	itttt	lt
 8005078:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800507a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800507c:	1ae3      	sublt	r3, r4, r3
 800507e:	18d2      	addlt	r2, r2, r3
 8005080:	bfa8      	it	ge
 8005082:	1b1c      	subge	r4, r3, r4
 8005084:	9b07      	ldr	r3, [sp, #28]
 8005086:	bfbe      	ittt	lt
 8005088:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800508a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800508c:	2400      	movlt	r4, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfb5      	itete	lt
 8005092:	eba8 0603 	sublt.w	r6, r8, r3
 8005096:	4646      	movge	r6, r8
 8005098:	2300      	movlt	r3, #0
 800509a:	9b07      	ldrge	r3, [sp, #28]
 800509c:	e730      	b.n	8004f00 <_dtoa_r+0x730>
 800509e:	4646      	mov	r6, r8
 80050a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80050a4:	e735      	b.n	8004f12 <_dtoa_r+0x742>
 80050a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050a8:	e75c      	b.n	8004f64 <_dtoa_r+0x794>
 80050aa:	2300      	movs	r3, #0
 80050ac:	e788      	b.n	8004fc0 <_dtoa_r+0x7f0>
 80050ae:	9b02      	ldr	r3, [sp, #8]
 80050b0:	e786      	b.n	8004fc0 <_dtoa_r+0x7f0>
 80050b2:	2300      	movs	r3, #0
 80050b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80050b6:	e788      	b.n	8004fca <_dtoa_r+0x7fa>
 80050b8:	d09f      	beq.n	8004ffa <_dtoa_r+0x82a>
 80050ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050bc:	331c      	adds	r3, #28
 80050be:	441a      	add	r2, r3
 80050c0:	4498      	add	r8, r3
 80050c2:	441e      	add	r6, r3
 80050c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80050c6:	e798      	b.n	8004ffa <_dtoa_r+0x82a>
 80050c8:	4603      	mov	r3, r0
 80050ca:	e7f6      	b.n	80050ba <_dtoa_r+0x8ea>
 80050cc:	9b07      	ldr	r3, [sp, #28]
 80050ce:	9704      	str	r7, [sp, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dc20      	bgt.n	8005116 <_dtoa_r+0x946>
 80050d4:	9308      	str	r3, [sp, #32]
 80050d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050d8:	2b02      	cmp	r3, #2
 80050da:	dd1e      	ble.n	800511a <_dtoa_r+0x94a>
 80050dc:	9b08      	ldr	r3, [sp, #32]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f47f aebc 	bne.w	8004e5c <_dtoa_r+0x68c>
 80050e4:	4621      	mov	r1, r4
 80050e6:	2205      	movs	r2, #5
 80050e8:	4658      	mov	r0, fp
 80050ea:	f000 fa99 	bl	8005620 <__multadd>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4604      	mov	r4, r0
 80050f2:	4648      	mov	r0, r9
 80050f4:	f000 fcf4 	bl	8005ae0 <__mcmp>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f77f aeaf 	ble.w	8004e5c <_dtoa_r+0x68c>
 80050fe:	2331      	movs	r3, #49	@ 0x31
 8005100:	4656      	mov	r6, sl
 8005102:	f806 3b01 	strb.w	r3, [r6], #1
 8005106:	9b04      	ldr	r3, [sp, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	e6aa      	b.n	8004e64 <_dtoa_r+0x694>
 800510e:	9c07      	ldr	r4, [sp, #28]
 8005110:	9704      	str	r7, [sp, #16]
 8005112:	4625      	mov	r5, r4
 8005114:	e7f3      	b.n	80050fe <_dtoa_r+0x92e>
 8005116:	9b07      	ldr	r3, [sp, #28]
 8005118:	9308      	str	r3, [sp, #32]
 800511a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8104 	beq.w	800532a <_dtoa_r+0xb5a>
 8005122:	2e00      	cmp	r6, #0
 8005124:	dd05      	ble.n	8005132 <_dtoa_r+0x962>
 8005126:	4629      	mov	r1, r5
 8005128:	4632      	mov	r2, r6
 800512a:	4658      	mov	r0, fp
 800512c:	f000 fc6c 	bl	8005a08 <__lshift>
 8005130:	4605      	mov	r5, r0
 8005132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d05a      	beq.n	80051ee <_dtoa_r+0xa1e>
 8005138:	4658      	mov	r0, fp
 800513a:	6869      	ldr	r1, [r5, #4]
 800513c:	f000 fa0e 	bl	800555c <_Balloc>
 8005140:	4606      	mov	r6, r0
 8005142:	b928      	cbnz	r0, 8005150 <_dtoa_r+0x980>
 8005144:	4602      	mov	r2, r0
 8005146:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800514a:	4b83      	ldr	r3, [pc, #524]	@ (8005358 <_dtoa_r+0xb88>)
 800514c:	f7ff bb54 	b.w	80047f8 <_dtoa_r+0x28>
 8005150:	692a      	ldr	r2, [r5, #16]
 8005152:	f105 010c 	add.w	r1, r5, #12
 8005156:	3202      	adds	r2, #2
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	300c      	adds	r0, #12
 800515c:	f002 f932 	bl	80073c4 <memcpy>
 8005160:	2201      	movs	r2, #1
 8005162:	4631      	mov	r1, r6
 8005164:	4658      	mov	r0, fp
 8005166:	f000 fc4f 	bl	8005a08 <__lshift>
 800516a:	462f      	mov	r7, r5
 800516c:	4605      	mov	r5, r0
 800516e:	f10a 0301 	add.w	r3, sl, #1
 8005172:	9307      	str	r3, [sp, #28]
 8005174:	9b08      	ldr	r3, [sp, #32]
 8005176:	4453      	add	r3, sl
 8005178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800517a:	9b02      	ldr	r3, [sp, #8]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	930a      	str	r3, [sp, #40]	@ 0x28
 8005182:	9b07      	ldr	r3, [sp, #28]
 8005184:	4621      	mov	r1, r4
 8005186:	3b01      	subs	r3, #1
 8005188:	4648      	mov	r0, r9
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	f7ff fa96 	bl	80046bc <quorem>
 8005190:	4639      	mov	r1, r7
 8005192:	9008      	str	r0, [sp, #32]
 8005194:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005198:	4648      	mov	r0, r9
 800519a:	f000 fca1 	bl	8005ae0 <__mcmp>
 800519e:	462a      	mov	r2, r5
 80051a0:	9009      	str	r0, [sp, #36]	@ 0x24
 80051a2:	4621      	mov	r1, r4
 80051a4:	4658      	mov	r0, fp
 80051a6:	f000 fcb7 	bl	8005b18 <__mdiff>
 80051aa:	68c2      	ldr	r2, [r0, #12]
 80051ac:	4606      	mov	r6, r0
 80051ae:	bb02      	cbnz	r2, 80051f2 <_dtoa_r+0xa22>
 80051b0:	4601      	mov	r1, r0
 80051b2:	4648      	mov	r0, r9
 80051b4:	f000 fc94 	bl	8005ae0 <__mcmp>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4631      	mov	r1, r6
 80051bc:	4658      	mov	r0, fp
 80051be:	920c      	str	r2, [sp, #48]	@ 0x30
 80051c0:	f000 fa0c 	bl	80055dc <_Bfree>
 80051c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051c8:	9e07      	ldr	r6, [sp, #28]
 80051ca:	ea43 0102 	orr.w	r1, r3, r2
 80051ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051d0:	4319      	orrs	r1, r3
 80051d2:	d110      	bne.n	80051f6 <_dtoa_r+0xa26>
 80051d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051d8:	d029      	beq.n	800522e <_dtoa_r+0xa5e>
 80051da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	dd02      	ble.n	80051e6 <_dtoa_r+0xa16>
 80051e0:	9b08      	ldr	r3, [sp, #32]
 80051e2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	f883 8000 	strb.w	r8, [r3]
 80051ec:	e63b      	b.n	8004e66 <_dtoa_r+0x696>
 80051ee:	4628      	mov	r0, r5
 80051f0:	e7bb      	b.n	800516a <_dtoa_r+0x99a>
 80051f2:	2201      	movs	r2, #1
 80051f4:	e7e1      	b.n	80051ba <_dtoa_r+0x9ea>
 80051f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	db04      	blt.n	8005206 <_dtoa_r+0xa36>
 80051fc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80051fe:	430b      	orrs	r3, r1
 8005200:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005202:	430b      	orrs	r3, r1
 8005204:	d120      	bne.n	8005248 <_dtoa_r+0xa78>
 8005206:	2a00      	cmp	r2, #0
 8005208:	dded      	ble.n	80051e6 <_dtoa_r+0xa16>
 800520a:	4649      	mov	r1, r9
 800520c:	2201      	movs	r2, #1
 800520e:	4658      	mov	r0, fp
 8005210:	f000 fbfa 	bl	8005a08 <__lshift>
 8005214:	4621      	mov	r1, r4
 8005216:	4681      	mov	r9, r0
 8005218:	f000 fc62 	bl	8005ae0 <__mcmp>
 800521c:	2800      	cmp	r0, #0
 800521e:	dc03      	bgt.n	8005228 <_dtoa_r+0xa58>
 8005220:	d1e1      	bne.n	80051e6 <_dtoa_r+0xa16>
 8005222:	f018 0f01 	tst.w	r8, #1
 8005226:	d0de      	beq.n	80051e6 <_dtoa_r+0xa16>
 8005228:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800522c:	d1d8      	bne.n	80051e0 <_dtoa_r+0xa10>
 800522e:	2339      	movs	r3, #57	@ 0x39
 8005230:	9a02      	ldr	r2, [sp, #8]
 8005232:	7013      	strb	r3, [r2, #0]
 8005234:	4633      	mov	r3, r6
 8005236:	461e      	mov	r6, r3
 8005238:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800523c:	3b01      	subs	r3, #1
 800523e:	2a39      	cmp	r2, #57	@ 0x39
 8005240:	d052      	beq.n	80052e8 <_dtoa_r+0xb18>
 8005242:	3201      	adds	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e60e      	b.n	8004e66 <_dtoa_r+0x696>
 8005248:	2a00      	cmp	r2, #0
 800524a:	dd07      	ble.n	800525c <_dtoa_r+0xa8c>
 800524c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005250:	d0ed      	beq.n	800522e <_dtoa_r+0xa5e>
 8005252:	9a02      	ldr	r2, [sp, #8]
 8005254:	f108 0301 	add.w	r3, r8, #1
 8005258:	7013      	strb	r3, [r2, #0]
 800525a:	e604      	b.n	8004e66 <_dtoa_r+0x696>
 800525c:	9b07      	ldr	r3, [sp, #28]
 800525e:	9a07      	ldr	r2, [sp, #28]
 8005260:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005266:	4293      	cmp	r3, r2
 8005268:	d028      	beq.n	80052bc <_dtoa_r+0xaec>
 800526a:	4649      	mov	r1, r9
 800526c:	2300      	movs	r3, #0
 800526e:	220a      	movs	r2, #10
 8005270:	4658      	mov	r0, fp
 8005272:	f000 f9d5 	bl	8005620 <__multadd>
 8005276:	42af      	cmp	r7, r5
 8005278:	4681      	mov	r9, r0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	f04f 020a 	mov.w	r2, #10
 8005282:	4639      	mov	r1, r7
 8005284:	4658      	mov	r0, fp
 8005286:	d107      	bne.n	8005298 <_dtoa_r+0xac8>
 8005288:	f000 f9ca 	bl	8005620 <__multadd>
 800528c:	4607      	mov	r7, r0
 800528e:	4605      	mov	r5, r0
 8005290:	9b07      	ldr	r3, [sp, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	9307      	str	r3, [sp, #28]
 8005296:	e774      	b.n	8005182 <_dtoa_r+0x9b2>
 8005298:	f000 f9c2 	bl	8005620 <__multadd>
 800529c:	4629      	mov	r1, r5
 800529e:	4607      	mov	r7, r0
 80052a0:	2300      	movs	r3, #0
 80052a2:	220a      	movs	r2, #10
 80052a4:	4658      	mov	r0, fp
 80052a6:	f000 f9bb 	bl	8005620 <__multadd>
 80052aa:	4605      	mov	r5, r0
 80052ac:	e7f0      	b.n	8005290 <_dtoa_r+0xac0>
 80052ae:	9b08      	ldr	r3, [sp, #32]
 80052b0:	2700      	movs	r7, #0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	bfcc      	ite	gt
 80052b6:	461e      	movgt	r6, r3
 80052b8:	2601      	movle	r6, #1
 80052ba:	4456      	add	r6, sl
 80052bc:	4649      	mov	r1, r9
 80052be:	2201      	movs	r2, #1
 80052c0:	4658      	mov	r0, fp
 80052c2:	f000 fba1 	bl	8005a08 <__lshift>
 80052c6:	4621      	mov	r1, r4
 80052c8:	4681      	mov	r9, r0
 80052ca:	f000 fc09 	bl	8005ae0 <__mcmp>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	dcb0      	bgt.n	8005234 <_dtoa_r+0xa64>
 80052d2:	d102      	bne.n	80052da <_dtoa_r+0xb0a>
 80052d4:	f018 0f01 	tst.w	r8, #1
 80052d8:	d1ac      	bne.n	8005234 <_dtoa_r+0xa64>
 80052da:	4633      	mov	r3, r6
 80052dc:	461e      	mov	r6, r3
 80052de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052e2:	2a30      	cmp	r2, #48	@ 0x30
 80052e4:	d0fa      	beq.n	80052dc <_dtoa_r+0xb0c>
 80052e6:	e5be      	b.n	8004e66 <_dtoa_r+0x696>
 80052e8:	459a      	cmp	sl, r3
 80052ea:	d1a4      	bne.n	8005236 <_dtoa_r+0xa66>
 80052ec:	9b04      	ldr	r3, [sp, #16]
 80052ee:	3301      	adds	r3, #1
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	2331      	movs	r3, #49	@ 0x31
 80052f4:	f88a 3000 	strb.w	r3, [sl]
 80052f8:	e5b5      	b.n	8004e66 <_dtoa_r+0x696>
 80052fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052fc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800535c <_dtoa_r+0xb8c>
 8005300:	b11b      	cbz	r3, 800530a <_dtoa_r+0xb3a>
 8005302:	f10a 0308 	add.w	r3, sl, #8
 8005306:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	4650      	mov	r0, sl
 800530c:	b017      	add	sp, #92	@ 0x5c
 800530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005312:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005314:	2b01      	cmp	r3, #1
 8005316:	f77f ae3d 	ble.w	8004f94 <_dtoa_r+0x7c4>
 800531a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800531c:	930a      	str	r3, [sp, #40]	@ 0x28
 800531e:	2001      	movs	r0, #1
 8005320:	e65b      	b.n	8004fda <_dtoa_r+0x80a>
 8005322:	9b08      	ldr	r3, [sp, #32]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f77f aed6 	ble.w	80050d6 <_dtoa_r+0x906>
 800532a:	4656      	mov	r6, sl
 800532c:	4621      	mov	r1, r4
 800532e:	4648      	mov	r0, r9
 8005330:	f7ff f9c4 	bl	80046bc <quorem>
 8005334:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005338:	9b08      	ldr	r3, [sp, #32]
 800533a:	f806 8b01 	strb.w	r8, [r6], #1
 800533e:	eba6 020a 	sub.w	r2, r6, sl
 8005342:	4293      	cmp	r3, r2
 8005344:	ddb3      	ble.n	80052ae <_dtoa_r+0xade>
 8005346:	4649      	mov	r1, r9
 8005348:	2300      	movs	r3, #0
 800534a:	220a      	movs	r2, #10
 800534c:	4658      	mov	r0, fp
 800534e:	f000 f967 	bl	8005620 <__multadd>
 8005352:	4681      	mov	r9, r0
 8005354:	e7ea      	b.n	800532c <_dtoa_r+0xb5c>
 8005356:	bf00      	nop
 8005358:	08007ea7 	.word	0x08007ea7
 800535c:	08007e2b 	.word	0x08007e2b

08005360 <_free_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	2900      	cmp	r1, #0
 8005366:	d040      	beq.n	80053ea <_free_r+0x8a>
 8005368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536c:	1f0c      	subs	r4, r1, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	18e4      	addlt	r4, r4, r3
 8005374:	f000 f8e6 	bl	8005544 <__malloc_lock>
 8005378:	4a1c      	ldr	r2, [pc, #112]	@ (80053ec <_free_r+0x8c>)
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	b933      	cbnz	r3, 800538c <_free_r+0x2c>
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	6014      	str	r4, [r2, #0]
 8005382:	4628      	mov	r0, r5
 8005384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005388:	f000 b8e2 	b.w	8005550 <__malloc_unlock>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d908      	bls.n	80053a2 <_free_r+0x42>
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	1821      	adds	r1, r4, r0
 8005394:	428b      	cmp	r3, r1
 8005396:	bf01      	itttt	eq
 8005398:	6819      	ldreq	r1, [r3, #0]
 800539a:	685b      	ldreq	r3, [r3, #4]
 800539c:	1809      	addeq	r1, r1, r0
 800539e:	6021      	streq	r1, [r4, #0]
 80053a0:	e7ed      	b.n	800537e <_free_r+0x1e>
 80053a2:	461a      	mov	r2, r3
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b10b      	cbz	r3, 80053ac <_free_r+0x4c>
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d9fa      	bls.n	80053a2 <_free_r+0x42>
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	1850      	adds	r0, r2, r1
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d10b      	bne.n	80053cc <_free_r+0x6c>
 80053b4:	6820      	ldr	r0, [r4, #0]
 80053b6:	4401      	add	r1, r0
 80053b8:	1850      	adds	r0, r2, r1
 80053ba:	4283      	cmp	r3, r0
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	d1e0      	bne.n	8005382 <_free_r+0x22>
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4408      	add	r0, r1
 80053c6:	6010      	str	r0, [r2, #0]
 80053c8:	6053      	str	r3, [r2, #4]
 80053ca:	e7da      	b.n	8005382 <_free_r+0x22>
 80053cc:	d902      	bls.n	80053d4 <_free_r+0x74>
 80053ce:	230c      	movs	r3, #12
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	e7d6      	b.n	8005382 <_free_r+0x22>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	1821      	adds	r1, r4, r0
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf01      	itttt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	1809      	addeq	r1, r1, r0
 80053e2:	6021      	streq	r1, [r4, #0]
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	6054      	str	r4, [r2, #4]
 80053e8:	e7cb      	b.n	8005382 <_free_r+0x22>
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20000398 	.word	0x20000398

080053f0 <malloc>:
 80053f0:	4b02      	ldr	r3, [pc, #8]	@ (80053fc <malloc+0xc>)
 80053f2:	4601      	mov	r1, r0
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	f000 b825 	b.w	8005444 <_malloc_r>
 80053fa:	bf00      	nop
 80053fc:	20000018 	.word	0x20000018

08005400 <sbrk_aligned>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4e0f      	ldr	r6, [pc, #60]	@ (8005440 <sbrk_aligned+0x40>)
 8005404:	460c      	mov	r4, r1
 8005406:	6831      	ldr	r1, [r6, #0]
 8005408:	4605      	mov	r5, r0
 800540a:	b911      	cbnz	r1, 8005412 <sbrk_aligned+0x12>
 800540c:	f001 ffca 	bl	80073a4 <_sbrk_r>
 8005410:	6030      	str	r0, [r6, #0]
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f001 ffc5 	bl	80073a4 <_sbrk_r>
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	d103      	bne.n	8005426 <sbrk_aligned+0x26>
 800541e:	f04f 34ff 	mov.w	r4, #4294967295
 8005422:	4620      	mov	r0, r4
 8005424:	bd70      	pop	{r4, r5, r6, pc}
 8005426:	1cc4      	adds	r4, r0, #3
 8005428:	f024 0403 	bic.w	r4, r4, #3
 800542c:	42a0      	cmp	r0, r4
 800542e:	d0f8      	beq.n	8005422 <sbrk_aligned+0x22>
 8005430:	1a21      	subs	r1, r4, r0
 8005432:	4628      	mov	r0, r5
 8005434:	f001 ffb6 	bl	80073a4 <_sbrk_r>
 8005438:	3001      	adds	r0, #1
 800543a:	d1f2      	bne.n	8005422 <sbrk_aligned+0x22>
 800543c:	e7ef      	b.n	800541e <sbrk_aligned+0x1e>
 800543e:	bf00      	nop
 8005440:	20000394 	.word	0x20000394

08005444 <_malloc_r>:
 8005444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005448:	1ccd      	adds	r5, r1, #3
 800544a:	f025 0503 	bic.w	r5, r5, #3
 800544e:	3508      	adds	r5, #8
 8005450:	2d0c      	cmp	r5, #12
 8005452:	bf38      	it	cc
 8005454:	250c      	movcc	r5, #12
 8005456:	2d00      	cmp	r5, #0
 8005458:	4606      	mov	r6, r0
 800545a:	db01      	blt.n	8005460 <_malloc_r+0x1c>
 800545c:	42a9      	cmp	r1, r5
 800545e:	d904      	bls.n	800546a <_malloc_r+0x26>
 8005460:	230c      	movs	r3, #12
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	2000      	movs	r0, #0
 8005466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800546a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005540 <_malloc_r+0xfc>
 800546e:	f000 f869 	bl	8005544 <__malloc_lock>
 8005472:	f8d8 3000 	ldr.w	r3, [r8]
 8005476:	461c      	mov	r4, r3
 8005478:	bb44      	cbnz	r4, 80054cc <_malloc_r+0x88>
 800547a:	4629      	mov	r1, r5
 800547c:	4630      	mov	r0, r6
 800547e:	f7ff ffbf 	bl	8005400 <sbrk_aligned>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	4604      	mov	r4, r0
 8005486:	d158      	bne.n	800553a <_malloc_r+0xf6>
 8005488:	f8d8 4000 	ldr.w	r4, [r8]
 800548c:	4627      	mov	r7, r4
 800548e:	2f00      	cmp	r7, #0
 8005490:	d143      	bne.n	800551a <_malloc_r+0xd6>
 8005492:	2c00      	cmp	r4, #0
 8005494:	d04b      	beq.n	800552e <_malloc_r+0xea>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4639      	mov	r1, r7
 800549a:	4630      	mov	r0, r6
 800549c:	eb04 0903 	add.w	r9, r4, r3
 80054a0:	f001 ff80 	bl	80073a4 <_sbrk_r>
 80054a4:	4581      	cmp	r9, r0
 80054a6:	d142      	bne.n	800552e <_malloc_r+0xea>
 80054a8:	6821      	ldr	r1, [r4, #0]
 80054aa:	4630      	mov	r0, r6
 80054ac:	1a6d      	subs	r5, r5, r1
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7ff ffa6 	bl	8005400 <sbrk_aligned>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d03a      	beq.n	800552e <_malloc_r+0xea>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	442b      	add	r3, r5
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	f8d8 3000 	ldr.w	r3, [r8]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	bb62      	cbnz	r2, 8005520 <_malloc_r+0xdc>
 80054c6:	f8c8 7000 	str.w	r7, [r8]
 80054ca:	e00f      	b.n	80054ec <_malloc_r+0xa8>
 80054cc:	6822      	ldr	r2, [r4, #0]
 80054ce:	1b52      	subs	r2, r2, r5
 80054d0:	d420      	bmi.n	8005514 <_malloc_r+0xd0>
 80054d2:	2a0b      	cmp	r2, #11
 80054d4:	d917      	bls.n	8005506 <_malloc_r+0xc2>
 80054d6:	1961      	adds	r1, r4, r5
 80054d8:	42a3      	cmp	r3, r4
 80054da:	6025      	str	r5, [r4, #0]
 80054dc:	bf18      	it	ne
 80054de:	6059      	strne	r1, [r3, #4]
 80054e0:	6863      	ldr	r3, [r4, #4]
 80054e2:	bf08      	it	eq
 80054e4:	f8c8 1000 	streq.w	r1, [r8]
 80054e8:	5162      	str	r2, [r4, r5]
 80054ea:	604b      	str	r3, [r1, #4]
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 f82f 	bl	8005550 <__malloc_unlock>
 80054f2:	f104 000b 	add.w	r0, r4, #11
 80054f6:	1d23      	adds	r3, r4, #4
 80054f8:	f020 0007 	bic.w	r0, r0, #7
 80054fc:	1ac2      	subs	r2, r0, r3
 80054fe:	bf1c      	itt	ne
 8005500:	1a1b      	subne	r3, r3, r0
 8005502:	50a3      	strne	r3, [r4, r2]
 8005504:	e7af      	b.n	8005466 <_malloc_r+0x22>
 8005506:	6862      	ldr	r2, [r4, #4]
 8005508:	42a3      	cmp	r3, r4
 800550a:	bf0c      	ite	eq
 800550c:	f8c8 2000 	streq.w	r2, [r8]
 8005510:	605a      	strne	r2, [r3, #4]
 8005512:	e7eb      	b.n	80054ec <_malloc_r+0xa8>
 8005514:	4623      	mov	r3, r4
 8005516:	6864      	ldr	r4, [r4, #4]
 8005518:	e7ae      	b.n	8005478 <_malloc_r+0x34>
 800551a:	463c      	mov	r4, r7
 800551c:	687f      	ldr	r7, [r7, #4]
 800551e:	e7b6      	b.n	800548e <_malloc_r+0x4a>
 8005520:	461a      	mov	r2, r3
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	42a3      	cmp	r3, r4
 8005526:	d1fb      	bne.n	8005520 <_malloc_r+0xdc>
 8005528:	2300      	movs	r3, #0
 800552a:	6053      	str	r3, [r2, #4]
 800552c:	e7de      	b.n	80054ec <_malloc_r+0xa8>
 800552e:	230c      	movs	r3, #12
 8005530:	4630      	mov	r0, r6
 8005532:	6033      	str	r3, [r6, #0]
 8005534:	f000 f80c 	bl	8005550 <__malloc_unlock>
 8005538:	e794      	b.n	8005464 <_malloc_r+0x20>
 800553a:	6005      	str	r5, [r0, #0]
 800553c:	e7d6      	b.n	80054ec <_malloc_r+0xa8>
 800553e:	bf00      	nop
 8005540:	20000398 	.word	0x20000398

08005544 <__malloc_lock>:
 8005544:	4801      	ldr	r0, [pc, #4]	@ (800554c <__malloc_lock+0x8>)
 8005546:	f7ff b8a4 	b.w	8004692 <__retarget_lock_acquire_recursive>
 800554a:	bf00      	nop
 800554c:	20000390 	.word	0x20000390

08005550 <__malloc_unlock>:
 8005550:	4801      	ldr	r0, [pc, #4]	@ (8005558 <__malloc_unlock+0x8>)
 8005552:	f7ff b89f 	b.w	8004694 <__retarget_lock_release_recursive>
 8005556:	bf00      	nop
 8005558:	20000390 	.word	0x20000390

0800555c <_Balloc>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	69c6      	ldr	r6, [r0, #28]
 8005560:	4604      	mov	r4, r0
 8005562:	460d      	mov	r5, r1
 8005564:	b976      	cbnz	r6, 8005584 <_Balloc+0x28>
 8005566:	2010      	movs	r0, #16
 8005568:	f7ff ff42 	bl	80053f0 <malloc>
 800556c:	4602      	mov	r2, r0
 800556e:	61e0      	str	r0, [r4, #28]
 8005570:	b920      	cbnz	r0, 800557c <_Balloc+0x20>
 8005572:	216b      	movs	r1, #107	@ 0x6b
 8005574:	4b17      	ldr	r3, [pc, #92]	@ (80055d4 <_Balloc+0x78>)
 8005576:	4818      	ldr	r0, [pc, #96]	@ (80055d8 <_Balloc+0x7c>)
 8005578:	f001 ff38 	bl	80073ec <__assert_func>
 800557c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005580:	6006      	str	r6, [r0, #0]
 8005582:	60c6      	str	r6, [r0, #12]
 8005584:	69e6      	ldr	r6, [r4, #28]
 8005586:	68f3      	ldr	r3, [r6, #12]
 8005588:	b183      	cbz	r3, 80055ac <_Balloc+0x50>
 800558a:	69e3      	ldr	r3, [r4, #28]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005592:	b9b8      	cbnz	r0, 80055c4 <_Balloc+0x68>
 8005594:	2101      	movs	r1, #1
 8005596:	fa01 f605 	lsl.w	r6, r1, r5
 800559a:	1d72      	adds	r2, r6, #5
 800559c:	4620      	mov	r0, r4
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	f001 ff42 	bl	8007428 <_calloc_r>
 80055a4:	b160      	cbz	r0, 80055c0 <_Balloc+0x64>
 80055a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055aa:	e00e      	b.n	80055ca <_Balloc+0x6e>
 80055ac:	2221      	movs	r2, #33	@ 0x21
 80055ae:	2104      	movs	r1, #4
 80055b0:	4620      	mov	r0, r4
 80055b2:	f001 ff39 	bl	8007428 <_calloc_r>
 80055b6:	69e3      	ldr	r3, [r4, #28]
 80055b8:	60f0      	str	r0, [r6, #12]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e4      	bne.n	800558a <_Balloc+0x2e>
 80055c0:	2000      	movs	r0, #0
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	6802      	ldr	r2, [r0, #0]
 80055c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055ca:	2300      	movs	r3, #0
 80055cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055d0:	e7f7      	b.n	80055c2 <_Balloc+0x66>
 80055d2:	bf00      	nop
 80055d4:	08007e38 	.word	0x08007e38
 80055d8:	08007eb8 	.word	0x08007eb8

080055dc <_Bfree>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	69c6      	ldr	r6, [r0, #28]
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b976      	cbnz	r6, 8005604 <_Bfree+0x28>
 80055e6:	2010      	movs	r0, #16
 80055e8:	f7ff ff02 	bl	80053f0 <malloc>
 80055ec:	4602      	mov	r2, r0
 80055ee:	61e8      	str	r0, [r5, #28]
 80055f0:	b920      	cbnz	r0, 80055fc <_Bfree+0x20>
 80055f2:	218f      	movs	r1, #143	@ 0x8f
 80055f4:	4b08      	ldr	r3, [pc, #32]	@ (8005618 <_Bfree+0x3c>)
 80055f6:	4809      	ldr	r0, [pc, #36]	@ (800561c <_Bfree+0x40>)
 80055f8:	f001 fef8 	bl	80073ec <__assert_func>
 80055fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005600:	6006      	str	r6, [r0, #0]
 8005602:	60c6      	str	r6, [r0, #12]
 8005604:	b13c      	cbz	r4, 8005616 <_Bfree+0x3a>
 8005606:	69eb      	ldr	r3, [r5, #28]
 8005608:	6862      	ldr	r2, [r4, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005610:	6021      	str	r1, [r4, #0]
 8005612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	08007e38 	.word	0x08007e38
 800561c:	08007eb8 	.word	0x08007eb8

08005620 <__multadd>:
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	4607      	mov	r7, r0
 8005626:	460c      	mov	r4, r1
 8005628:	461e      	mov	r6, r3
 800562a:	2000      	movs	r0, #0
 800562c:	690d      	ldr	r5, [r1, #16]
 800562e:	f101 0c14 	add.w	ip, r1, #20
 8005632:	f8dc 3000 	ldr.w	r3, [ip]
 8005636:	3001      	adds	r0, #1
 8005638:	b299      	uxth	r1, r3
 800563a:	fb02 6101 	mla	r1, r2, r1, r6
 800563e:	0c1e      	lsrs	r6, r3, #16
 8005640:	0c0b      	lsrs	r3, r1, #16
 8005642:	fb02 3306 	mla	r3, r2, r6, r3
 8005646:	b289      	uxth	r1, r1
 8005648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800564c:	4285      	cmp	r5, r0
 800564e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005652:	f84c 1b04 	str.w	r1, [ip], #4
 8005656:	dcec      	bgt.n	8005632 <__multadd+0x12>
 8005658:	b30e      	cbz	r6, 800569e <__multadd+0x7e>
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	42ab      	cmp	r3, r5
 800565e:	dc19      	bgt.n	8005694 <__multadd+0x74>
 8005660:	6861      	ldr	r1, [r4, #4]
 8005662:	4638      	mov	r0, r7
 8005664:	3101      	adds	r1, #1
 8005666:	f7ff ff79 	bl	800555c <_Balloc>
 800566a:	4680      	mov	r8, r0
 800566c:	b928      	cbnz	r0, 800567a <__multadd+0x5a>
 800566e:	4602      	mov	r2, r0
 8005670:	21ba      	movs	r1, #186	@ 0xba
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <__multadd+0x84>)
 8005674:	480c      	ldr	r0, [pc, #48]	@ (80056a8 <__multadd+0x88>)
 8005676:	f001 feb9 	bl	80073ec <__assert_func>
 800567a:	6922      	ldr	r2, [r4, #16]
 800567c:	f104 010c 	add.w	r1, r4, #12
 8005680:	3202      	adds	r2, #2
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	300c      	adds	r0, #12
 8005686:	f001 fe9d 	bl	80073c4 <memcpy>
 800568a:	4621      	mov	r1, r4
 800568c:	4638      	mov	r0, r7
 800568e:	f7ff ffa5 	bl	80055dc <_Bfree>
 8005692:	4644      	mov	r4, r8
 8005694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005698:	3501      	adds	r5, #1
 800569a:	615e      	str	r6, [r3, #20]
 800569c:	6125      	str	r5, [r4, #16]
 800569e:	4620      	mov	r0, r4
 80056a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a4:	08007ea7 	.word	0x08007ea7
 80056a8:	08007eb8 	.word	0x08007eb8

080056ac <__s2b>:
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	4615      	mov	r5, r2
 80056b2:	2209      	movs	r2, #9
 80056b4:	461f      	mov	r7, r3
 80056b6:	3308      	adds	r3, #8
 80056b8:	460c      	mov	r4, r1
 80056ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80056be:	4606      	mov	r6, r0
 80056c0:	2201      	movs	r2, #1
 80056c2:	2100      	movs	r1, #0
 80056c4:	429a      	cmp	r2, r3
 80056c6:	db09      	blt.n	80056dc <__s2b+0x30>
 80056c8:	4630      	mov	r0, r6
 80056ca:	f7ff ff47 	bl	800555c <_Balloc>
 80056ce:	b940      	cbnz	r0, 80056e2 <__s2b+0x36>
 80056d0:	4602      	mov	r2, r0
 80056d2:	21d3      	movs	r1, #211	@ 0xd3
 80056d4:	4b18      	ldr	r3, [pc, #96]	@ (8005738 <__s2b+0x8c>)
 80056d6:	4819      	ldr	r0, [pc, #100]	@ (800573c <__s2b+0x90>)
 80056d8:	f001 fe88 	bl	80073ec <__assert_func>
 80056dc:	0052      	lsls	r2, r2, #1
 80056de:	3101      	adds	r1, #1
 80056e0:	e7f0      	b.n	80056c4 <__s2b+0x18>
 80056e2:	9b08      	ldr	r3, [sp, #32]
 80056e4:	2d09      	cmp	r5, #9
 80056e6:	6143      	str	r3, [r0, #20]
 80056e8:	f04f 0301 	mov.w	r3, #1
 80056ec:	6103      	str	r3, [r0, #16]
 80056ee:	dd16      	ble.n	800571e <__s2b+0x72>
 80056f0:	f104 0909 	add.w	r9, r4, #9
 80056f4:	46c8      	mov	r8, r9
 80056f6:	442c      	add	r4, r5
 80056f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80056fc:	4601      	mov	r1, r0
 80056fe:	220a      	movs	r2, #10
 8005700:	4630      	mov	r0, r6
 8005702:	3b30      	subs	r3, #48	@ 0x30
 8005704:	f7ff ff8c 	bl	8005620 <__multadd>
 8005708:	45a0      	cmp	r8, r4
 800570a:	d1f5      	bne.n	80056f8 <__s2b+0x4c>
 800570c:	f1a5 0408 	sub.w	r4, r5, #8
 8005710:	444c      	add	r4, r9
 8005712:	1b2d      	subs	r5, r5, r4
 8005714:	1963      	adds	r3, r4, r5
 8005716:	42bb      	cmp	r3, r7
 8005718:	db04      	blt.n	8005724 <__s2b+0x78>
 800571a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800571e:	2509      	movs	r5, #9
 8005720:	340a      	adds	r4, #10
 8005722:	e7f6      	b.n	8005712 <__s2b+0x66>
 8005724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005728:	4601      	mov	r1, r0
 800572a:	220a      	movs	r2, #10
 800572c:	4630      	mov	r0, r6
 800572e:	3b30      	subs	r3, #48	@ 0x30
 8005730:	f7ff ff76 	bl	8005620 <__multadd>
 8005734:	e7ee      	b.n	8005714 <__s2b+0x68>
 8005736:	bf00      	nop
 8005738:	08007ea7 	.word	0x08007ea7
 800573c:	08007eb8 	.word	0x08007eb8

08005740 <__hi0bits>:
 8005740:	4603      	mov	r3, r0
 8005742:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005746:	bf3a      	itte	cc
 8005748:	0403      	lslcc	r3, r0, #16
 800574a:	2010      	movcc	r0, #16
 800574c:	2000      	movcs	r0, #0
 800574e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005752:	bf3c      	itt	cc
 8005754:	021b      	lslcc	r3, r3, #8
 8005756:	3008      	addcc	r0, #8
 8005758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800575c:	bf3c      	itt	cc
 800575e:	011b      	lslcc	r3, r3, #4
 8005760:	3004      	addcc	r0, #4
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005766:	bf3c      	itt	cc
 8005768:	009b      	lslcc	r3, r3, #2
 800576a:	3002      	addcc	r0, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	db05      	blt.n	800577c <__hi0bits+0x3c>
 8005770:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005774:	f100 0001 	add.w	r0, r0, #1
 8005778:	bf08      	it	eq
 800577a:	2020      	moveq	r0, #32
 800577c:	4770      	bx	lr

0800577e <__lo0bits>:
 800577e:	6803      	ldr	r3, [r0, #0]
 8005780:	4602      	mov	r2, r0
 8005782:	f013 0007 	ands.w	r0, r3, #7
 8005786:	d00b      	beq.n	80057a0 <__lo0bits+0x22>
 8005788:	07d9      	lsls	r1, r3, #31
 800578a:	d421      	bmi.n	80057d0 <__lo0bits+0x52>
 800578c:	0798      	lsls	r0, r3, #30
 800578e:	bf49      	itett	mi
 8005790:	085b      	lsrmi	r3, r3, #1
 8005792:	089b      	lsrpl	r3, r3, #2
 8005794:	2001      	movmi	r0, #1
 8005796:	6013      	strmi	r3, [r2, #0]
 8005798:	bf5c      	itt	pl
 800579a:	2002      	movpl	r0, #2
 800579c:	6013      	strpl	r3, [r2, #0]
 800579e:	4770      	bx	lr
 80057a0:	b299      	uxth	r1, r3
 80057a2:	b909      	cbnz	r1, 80057a8 <__lo0bits+0x2a>
 80057a4:	2010      	movs	r0, #16
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	b2d9      	uxtb	r1, r3
 80057aa:	b909      	cbnz	r1, 80057b0 <__lo0bits+0x32>
 80057ac:	3008      	adds	r0, #8
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	0719      	lsls	r1, r3, #28
 80057b2:	bf04      	itt	eq
 80057b4:	091b      	lsreq	r3, r3, #4
 80057b6:	3004      	addeq	r0, #4
 80057b8:	0799      	lsls	r1, r3, #30
 80057ba:	bf04      	itt	eq
 80057bc:	089b      	lsreq	r3, r3, #2
 80057be:	3002      	addeq	r0, #2
 80057c0:	07d9      	lsls	r1, r3, #31
 80057c2:	d403      	bmi.n	80057cc <__lo0bits+0x4e>
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	f100 0001 	add.w	r0, r0, #1
 80057ca:	d003      	beq.n	80057d4 <__lo0bits+0x56>
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4770      	bx	lr
 80057d0:	2000      	movs	r0, #0
 80057d2:	4770      	bx	lr
 80057d4:	2020      	movs	r0, #32
 80057d6:	4770      	bx	lr

080057d8 <__i2b>:
 80057d8:	b510      	push	{r4, lr}
 80057da:	460c      	mov	r4, r1
 80057dc:	2101      	movs	r1, #1
 80057de:	f7ff febd 	bl	800555c <_Balloc>
 80057e2:	4602      	mov	r2, r0
 80057e4:	b928      	cbnz	r0, 80057f2 <__i2b+0x1a>
 80057e6:	f240 1145 	movw	r1, #325	@ 0x145
 80057ea:	4b04      	ldr	r3, [pc, #16]	@ (80057fc <__i2b+0x24>)
 80057ec:	4804      	ldr	r0, [pc, #16]	@ (8005800 <__i2b+0x28>)
 80057ee:	f001 fdfd 	bl	80073ec <__assert_func>
 80057f2:	2301      	movs	r3, #1
 80057f4:	6144      	str	r4, [r0, #20]
 80057f6:	6103      	str	r3, [r0, #16]
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	bf00      	nop
 80057fc:	08007ea7 	.word	0x08007ea7
 8005800:	08007eb8 	.word	0x08007eb8

08005804 <__multiply>:
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	4614      	mov	r4, r2
 800580a:	690a      	ldr	r2, [r1, #16]
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	460f      	mov	r7, r1
 8005810:	429a      	cmp	r2, r3
 8005812:	bfa2      	ittt	ge
 8005814:	4623      	movge	r3, r4
 8005816:	460c      	movge	r4, r1
 8005818:	461f      	movge	r7, r3
 800581a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800581e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005822:	68a3      	ldr	r3, [r4, #8]
 8005824:	6861      	ldr	r1, [r4, #4]
 8005826:	eb0a 0609 	add.w	r6, sl, r9
 800582a:	42b3      	cmp	r3, r6
 800582c:	b085      	sub	sp, #20
 800582e:	bfb8      	it	lt
 8005830:	3101      	addlt	r1, #1
 8005832:	f7ff fe93 	bl	800555c <_Balloc>
 8005836:	b930      	cbnz	r0, 8005846 <__multiply+0x42>
 8005838:	4602      	mov	r2, r0
 800583a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800583e:	4b43      	ldr	r3, [pc, #268]	@ (800594c <__multiply+0x148>)
 8005840:	4843      	ldr	r0, [pc, #268]	@ (8005950 <__multiply+0x14c>)
 8005842:	f001 fdd3 	bl	80073ec <__assert_func>
 8005846:	f100 0514 	add.w	r5, r0, #20
 800584a:	462b      	mov	r3, r5
 800584c:	2200      	movs	r2, #0
 800584e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005852:	4543      	cmp	r3, r8
 8005854:	d321      	bcc.n	800589a <__multiply+0x96>
 8005856:	f107 0114 	add.w	r1, r7, #20
 800585a:	f104 0214 	add.w	r2, r4, #20
 800585e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005862:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005866:	9302      	str	r3, [sp, #8]
 8005868:	1b13      	subs	r3, r2, r4
 800586a:	3b15      	subs	r3, #21
 800586c:	f023 0303 	bic.w	r3, r3, #3
 8005870:	3304      	adds	r3, #4
 8005872:	f104 0715 	add.w	r7, r4, #21
 8005876:	42ba      	cmp	r2, r7
 8005878:	bf38      	it	cc
 800587a:	2304      	movcc	r3, #4
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	9103      	str	r1, [sp, #12]
 8005882:	428b      	cmp	r3, r1
 8005884:	d80c      	bhi.n	80058a0 <__multiply+0x9c>
 8005886:	2e00      	cmp	r6, #0
 8005888:	dd03      	ble.n	8005892 <__multiply+0x8e>
 800588a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800588e:	2b00      	cmp	r3, #0
 8005890:	d05a      	beq.n	8005948 <__multiply+0x144>
 8005892:	6106      	str	r6, [r0, #16]
 8005894:	b005      	add	sp, #20
 8005896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589a:	f843 2b04 	str.w	r2, [r3], #4
 800589e:	e7d8      	b.n	8005852 <__multiply+0x4e>
 80058a0:	f8b1 a000 	ldrh.w	sl, [r1]
 80058a4:	f1ba 0f00 	cmp.w	sl, #0
 80058a8:	d023      	beq.n	80058f2 <__multiply+0xee>
 80058aa:	46a9      	mov	r9, r5
 80058ac:	f04f 0c00 	mov.w	ip, #0
 80058b0:	f104 0e14 	add.w	lr, r4, #20
 80058b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80058b8:	f8d9 3000 	ldr.w	r3, [r9]
 80058bc:	fa1f fb87 	uxth.w	fp, r7
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	fb0a 330b 	mla	r3, sl, fp, r3
 80058c6:	4463      	add	r3, ip
 80058c8:	f8d9 c000 	ldr.w	ip, [r9]
 80058cc:	0c3f      	lsrs	r7, r7, #16
 80058ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80058d2:	fb0a c707 	mla	r7, sl, r7, ip
 80058d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80058da:	b29b      	uxth	r3, r3
 80058dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80058e0:	4572      	cmp	r2, lr
 80058e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80058e6:	f849 3b04 	str.w	r3, [r9], #4
 80058ea:	d8e3      	bhi.n	80058b4 <__multiply+0xb0>
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	f845 c003 	str.w	ip, [r5, r3]
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	3104      	adds	r1, #4
 80058f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80058fa:	f1b9 0f00 	cmp.w	r9, #0
 80058fe:	d021      	beq.n	8005944 <__multiply+0x140>
 8005900:	46ae      	mov	lr, r5
 8005902:	f04f 0a00 	mov.w	sl, #0
 8005906:	682b      	ldr	r3, [r5, #0]
 8005908:	f104 0c14 	add.w	ip, r4, #20
 800590c:	f8bc b000 	ldrh.w	fp, [ip]
 8005910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005914:	b29b      	uxth	r3, r3
 8005916:	fb09 770b 	mla	r7, r9, fp, r7
 800591a:	4457      	add	r7, sl
 800591c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005920:	f84e 3b04 	str.w	r3, [lr], #4
 8005924:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800592c:	f8be 3000 	ldrh.w	r3, [lr]
 8005930:	4562      	cmp	r2, ip
 8005932:	fb09 330a 	mla	r3, r9, sl, r3
 8005936:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800593a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800593e:	d8e5      	bhi.n	800590c <__multiply+0x108>
 8005940:	9f01      	ldr	r7, [sp, #4]
 8005942:	51eb      	str	r3, [r5, r7]
 8005944:	3504      	adds	r5, #4
 8005946:	e79a      	b.n	800587e <__multiply+0x7a>
 8005948:	3e01      	subs	r6, #1
 800594a:	e79c      	b.n	8005886 <__multiply+0x82>
 800594c:	08007ea7 	.word	0x08007ea7
 8005950:	08007eb8 	.word	0x08007eb8

08005954 <__pow5mult>:
 8005954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005958:	4615      	mov	r5, r2
 800595a:	f012 0203 	ands.w	r2, r2, #3
 800595e:	4607      	mov	r7, r0
 8005960:	460e      	mov	r6, r1
 8005962:	d007      	beq.n	8005974 <__pow5mult+0x20>
 8005964:	4c25      	ldr	r4, [pc, #148]	@ (80059fc <__pow5mult+0xa8>)
 8005966:	3a01      	subs	r2, #1
 8005968:	2300      	movs	r3, #0
 800596a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800596e:	f7ff fe57 	bl	8005620 <__multadd>
 8005972:	4606      	mov	r6, r0
 8005974:	10ad      	asrs	r5, r5, #2
 8005976:	d03d      	beq.n	80059f4 <__pow5mult+0xa0>
 8005978:	69fc      	ldr	r4, [r7, #28]
 800597a:	b97c      	cbnz	r4, 800599c <__pow5mult+0x48>
 800597c:	2010      	movs	r0, #16
 800597e:	f7ff fd37 	bl	80053f0 <malloc>
 8005982:	4602      	mov	r2, r0
 8005984:	61f8      	str	r0, [r7, #28]
 8005986:	b928      	cbnz	r0, 8005994 <__pow5mult+0x40>
 8005988:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800598c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a00 <__pow5mult+0xac>)
 800598e:	481d      	ldr	r0, [pc, #116]	@ (8005a04 <__pow5mult+0xb0>)
 8005990:	f001 fd2c 	bl	80073ec <__assert_func>
 8005994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005998:	6004      	str	r4, [r0, #0]
 800599a:	60c4      	str	r4, [r0, #12]
 800599c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80059a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059a4:	b94c      	cbnz	r4, 80059ba <__pow5mult+0x66>
 80059a6:	f240 2171 	movw	r1, #625	@ 0x271
 80059aa:	4638      	mov	r0, r7
 80059ac:	f7ff ff14 	bl	80057d8 <__i2b>
 80059b0:	2300      	movs	r3, #0
 80059b2:	4604      	mov	r4, r0
 80059b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80059b8:	6003      	str	r3, [r0, #0]
 80059ba:	f04f 0900 	mov.w	r9, #0
 80059be:	07eb      	lsls	r3, r5, #31
 80059c0:	d50a      	bpl.n	80059d8 <__pow5mult+0x84>
 80059c2:	4631      	mov	r1, r6
 80059c4:	4622      	mov	r2, r4
 80059c6:	4638      	mov	r0, r7
 80059c8:	f7ff ff1c 	bl	8005804 <__multiply>
 80059cc:	4680      	mov	r8, r0
 80059ce:	4631      	mov	r1, r6
 80059d0:	4638      	mov	r0, r7
 80059d2:	f7ff fe03 	bl	80055dc <_Bfree>
 80059d6:	4646      	mov	r6, r8
 80059d8:	106d      	asrs	r5, r5, #1
 80059da:	d00b      	beq.n	80059f4 <__pow5mult+0xa0>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	b938      	cbnz	r0, 80059f0 <__pow5mult+0x9c>
 80059e0:	4622      	mov	r2, r4
 80059e2:	4621      	mov	r1, r4
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff ff0d 	bl	8005804 <__multiply>
 80059ea:	6020      	str	r0, [r4, #0]
 80059ec:	f8c0 9000 	str.w	r9, [r0]
 80059f0:	4604      	mov	r4, r0
 80059f2:	e7e4      	b.n	80059be <__pow5mult+0x6a>
 80059f4:	4630      	mov	r0, r6
 80059f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fa:	bf00      	nop
 80059fc:	08007f14 	.word	0x08007f14
 8005a00:	08007e38 	.word	0x08007e38
 8005a04:	08007eb8 	.word	0x08007eb8

08005a08 <__lshift>:
 8005a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	4607      	mov	r7, r0
 8005a10:	4691      	mov	r9, r2
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	6849      	ldr	r1, [r1, #4]
 8005a16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a20:	f108 0601 	add.w	r6, r8, #1
 8005a24:	42b3      	cmp	r3, r6
 8005a26:	db0b      	blt.n	8005a40 <__lshift+0x38>
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f7ff fd97 	bl	800555c <_Balloc>
 8005a2e:	4605      	mov	r5, r0
 8005a30:	b948      	cbnz	r0, 8005a46 <__lshift+0x3e>
 8005a32:	4602      	mov	r2, r0
 8005a34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005a38:	4b27      	ldr	r3, [pc, #156]	@ (8005ad8 <__lshift+0xd0>)
 8005a3a:	4828      	ldr	r0, [pc, #160]	@ (8005adc <__lshift+0xd4>)
 8005a3c:	f001 fcd6 	bl	80073ec <__assert_func>
 8005a40:	3101      	adds	r1, #1
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	e7ee      	b.n	8005a24 <__lshift+0x1c>
 8005a46:	2300      	movs	r3, #0
 8005a48:	f100 0114 	add.w	r1, r0, #20
 8005a4c:	f100 0210 	add.w	r2, r0, #16
 8005a50:	4618      	mov	r0, r3
 8005a52:	4553      	cmp	r3, sl
 8005a54:	db33      	blt.n	8005abe <__lshift+0xb6>
 8005a56:	6920      	ldr	r0, [r4, #16]
 8005a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a5c:	f104 0314 	add.w	r3, r4, #20
 8005a60:	f019 091f 	ands.w	r9, r9, #31
 8005a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a6c:	d02b      	beq.n	8005ac6 <__lshift+0xbe>
 8005a6e:	468a      	mov	sl, r1
 8005a70:	2200      	movs	r2, #0
 8005a72:	f1c9 0e20 	rsb	lr, r9, #32
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	fa00 f009 	lsl.w	r0, r0, r9
 8005a7c:	4310      	orrs	r0, r2
 8005a7e:	f84a 0b04 	str.w	r0, [sl], #4
 8005a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a86:	459c      	cmp	ip, r3
 8005a88:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a8c:	d8f3      	bhi.n	8005a76 <__lshift+0x6e>
 8005a8e:	ebac 0304 	sub.w	r3, ip, r4
 8005a92:	3b15      	subs	r3, #21
 8005a94:	f023 0303 	bic.w	r3, r3, #3
 8005a98:	3304      	adds	r3, #4
 8005a9a:	f104 0015 	add.w	r0, r4, #21
 8005a9e:	4584      	cmp	ip, r0
 8005aa0:	bf38      	it	cc
 8005aa2:	2304      	movcc	r3, #4
 8005aa4:	50ca      	str	r2, [r1, r3]
 8005aa6:	b10a      	cbz	r2, 8005aac <__lshift+0xa4>
 8005aa8:	f108 0602 	add.w	r6, r8, #2
 8005aac:	3e01      	subs	r6, #1
 8005aae:	4638      	mov	r0, r7
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	612e      	str	r6, [r5, #16]
 8005ab4:	f7ff fd92 	bl	80055dc <_Bfree>
 8005ab8:	4628      	mov	r0, r5
 8005aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	e7c5      	b.n	8005a52 <__lshift+0x4a>
 8005ac6:	3904      	subs	r1, #4
 8005ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005acc:	459c      	cmp	ip, r3
 8005ace:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ad2:	d8f9      	bhi.n	8005ac8 <__lshift+0xc0>
 8005ad4:	e7ea      	b.n	8005aac <__lshift+0xa4>
 8005ad6:	bf00      	nop
 8005ad8:	08007ea7 	.word	0x08007ea7
 8005adc:	08007eb8 	.word	0x08007eb8

08005ae0 <__mcmp>:
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	690a      	ldr	r2, [r1, #16]
 8005ae4:	6900      	ldr	r0, [r0, #16]
 8005ae6:	b530      	push	{r4, r5, lr}
 8005ae8:	1a80      	subs	r0, r0, r2
 8005aea:	d10e      	bne.n	8005b0a <__mcmp+0x2a>
 8005aec:	3314      	adds	r3, #20
 8005aee:	3114      	adds	r1, #20
 8005af0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005af4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005af8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005afc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b00:	4295      	cmp	r5, r2
 8005b02:	d003      	beq.n	8005b0c <__mcmp+0x2c>
 8005b04:	d205      	bcs.n	8005b12 <__mcmp+0x32>
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	bd30      	pop	{r4, r5, pc}
 8005b0c:	42a3      	cmp	r3, r4
 8005b0e:	d3f3      	bcc.n	8005af8 <__mcmp+0x18>
 8005b10:	e7fb      	b.n	8005b0a <__mcmp+0x2a>
 8005b12:	2001      	movs	r0, #1
 8005b14:	e7f9      	b.n	8005b0a <__mcmp+0x2a>
	...

08005b18 <__mdiff>:
 8005b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	4689      	mov	r9, r1
 8005b1e:	4606      	mov	r6, r0
 8005b20:	4611      	mov	r1, r2
 8005b22:	4648      	mov	r0, r9
 8005b24:	4614      	mov	r4, r2
 8005b26:	f7ff ffdb 	bl	8005ae0 <__mcmp>
 8005b2a:	1e05      	subs	r5, r0, #0
 8005b2c:	d112      	bne.n	8005b54 <__mdiff+0x3c>
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4630      	mov	r0, r6
 8005b32:	f7ff fd13 	bl	800555c <_Balloc>
 8005b36:	4602      	mov	r2, r0
 8005b38:	b928      	cbnz	r0, 8005b46 <__mdiff+0x2e>
 8005b3a:	f240 2137 	movw	r1, #567	@ 0x237
 8005b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c38 <__mdiff+0x120>)
 8005b40:	483e      	ldr	r0, [pc, #248]	@ (8005c3c <__mdiff+0x124>)
 8005b42:	f001 fc53 	bl	80073ec <__assert_func>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	b003      	add	sp, #12
 8005b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b54:	bfbc      	itt	lt
 8005b56:	464b      	movlt	r3, r9
 8005b58:	46a1      	movlt	r9, r4
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b60:	bfba      	itte	lt
 8005b62:	461c      	movlt	r4, r3
 8005b64:	2501      	movlt	r5, #1
 8005b66:	2500      	movge	r5, #0
 8005b68:	f7ff fcf8 	bl	800555c <_Balloc>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	b918      	cbnz	r0, 8005b78 <__mdiff+0x60>
 8005b70:	f240 2145 	movw	r1, #581	@ 0x245
 8005b74:	4b30      	ldr	r3, [pc, #192]	@ (8005c38 <__mdiff+0x120>)
 8005b76:	e7e3      	b.n	8005b40 <__mdiff+0x28>
 8005b78:	f100 0b14 	add.w	fp, r0, #20
 8005b7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005b80:	f109 0310 	add.w	r3, r9, #16
 8005b84:	60c5      	str	r5, [r0, #12]
 8005b86:	f04f 0c00 	mov.w	ip, #0
 8005b8a:	f109 0514 	add.w	r5, r9, #20
 8005b8e:	46d9      	mov	r9, fp
 8005b90:	6926      	ldr	r6, [r4, #16]
 8005b92:	f104 0e14 	add.w	lr, r4, #20
 8005b96:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b9a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ba6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005baa:	b281      	uxth	r1, r0
 8005bac:	9301      	str	r3, [sp, #4]
 8005bae:	fa1f f38a 	uxth.w	r3, sl
 8005bb2:	1a5b      	subs	r3, r3, r1
 8005bb4:	0c00      	lsrs	r0, r0, #16
 8005bb6:	4463      	add	r3, ip
 8005bb8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005bbc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005bc6:	4576      	cmp	r6, lr
 8005bc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005bcc:	f849 3b04 	str.w	r3, [r9], #4
 8005bd0:	d8e6      	bhi.n	8005ba0 <__mdiff+0x88>
 8005bd2:	1b33      	subs	r3, r6, r4
 8005bd4:	3b15      	subs	r3, #21
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	3415      	adds	r4, #21
 8005bdc:	3304      	adds	r3, #4
 8005bde:	42a6      	cmp	r6, r4
 8005be0:	bf38      	it	cc
 8005be2:	2304      	movcc	r3, #4
 8005be4:	441d      	add	r5, r3
 8005be6:	445b      	add	r3, fp
 8005be8:	461e      	mov	r6, r3
 8005bea:	462c      	mov	r4, r5
 8005bec:	4544      	cmp	r4, r8
 8005bee:	d30e      	bcc.n	8005c0e <__mdiff+0xf6>
 8005bf0:	f108 0103 	add.w	r1, r8, #3
 8005bf4:	1b49      	subs	r1, r1, r5
 8005bf6:	f021 0103 	bic.w	r1, r1, #3
 8005bfa:	3d03      	subs	r5, #3
 8005bfc:	45a8      	cmp	r8, r5
 8005bfe:	bf38      	it	cc
 8005c00:	2100      	movcc	r1, #0
 8005c02:	440b      	add	r3, r1
 8005c04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005c08:	b199      	cbz	r1, 8005c32 <__mdiff+0x11a>
 8005c0a:	6117      	str	r7, [r2, #16]
 8005c0c:	e79e      	b.n	8005b4c <__mdiff+0x34>
 8005c0e:	46e6      	mov	lr, ip
 8005c10:	f854 1b04 	ldr.w	r1, [r4], #4
 8005c14:	fa1f fc81 	uxth.w	ip, r1
 8005c18:	44f4      	add	ip, lr
 8005c1a:	0c08      	lsrs	r0, r1, #16
 8005c1c:	4471      	add	r1, lr
 8005c1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005c22:	b289      	uxth	r1, r1
 8005c24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005c28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c2c:	f846 1b04 	str.w	r1, [r6], #4
 8005c30:	e7dc      	b.n	8005bec <__mdiff+0xd4>
 8005c32:	3f01      	subs	r7, #1
 8005c34:	e7e6      	b.n	8005c04 <__mdiff+0xec>
 8005c36:	bf00      	nop
 8005c38:	08007ea7 	.word	0x08007ea7
 8005c3c:	08007eb8 	.word	0x08007eb8

08005c40 <__ulp>:
 8005c40:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <__ulp+0x3c>)
 8005c42:	400b      	ands	r3, r1
 8005c44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	dc08      	bgt.n	8005c5e <__ulp+0x1e>
 8005c4c:	425b      	negs	r3, r3
 8005c4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005c52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005c56:	da04      	bge.n	8005c62 <__ulp+0x22>
 8005c58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005c5c:	4113      	asrs	r3, r2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	e008      	b.n	8005c74 <__ulp+0x34>
 8005c62:	f1a2 0314 	sub.w	r3, r2, #20
 8005c66:	2b1e      	cmp	r3, #30
 8005c68:	bfd6      	itet	le
 8005c6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8005c6e:	2201      	movgt	r2, #1
 8005c70:	40da      	lsrle	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	4619      	mov	r1, r3
 8005c76:	4610      	mov	r0, r2
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	7ff00000 	.word	0x7ff00000

08005c80 <__b2d>:
 8005c80:	6902      	ldr	r2, [r0, #16]
 8005c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c84:	f100 0614 	add.w	r6, r0, #20
 8005c88:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8005c8c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005c90:	4f1e      	ldr	r7, [pc, #120]	@ (8005d0c <__b2d+0x8c>)
 8005c92:	4620      	mov	r0, r4
 8005c94:	f7ff fd54 	bl	8005740 <__hi0bits>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f1c0 0020 	rsb	r0, r0, #32
 8005c9e:	2b0a      	cmp	r3, #10
 8005ca0:	f1a2 0504 	sub.w	r5, r2, #4
 8005ca4:	6008      	str	r0, [r1, #0]
 8005ca6:	dc12      	bgt.n	8005cce <__b2d+0x4e>
 8005ca8:	42ae      	cmp	r6, r5
 8005caa:	bf2c      	ite	cs
 8005cac:	2200      	movcs	r2, #0
 8005cae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005cb2:	f1c3 0c0b 	rsb	ip, r3, #11
 8005cb6:	3315      	adds	r3, #21
 8005cb8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8005cbc:	fa04 f303 	lsl.w	r3, r4, r3
 8005cc0:	fa22 f20c 	lsr.w	r2, r2, ip
 8005cc4:	ea4e 0107 	orr.w	r1, lr, r7
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cce:	42ae      	cmp	r6, r5
 8005cd0:	bf36      	itet	cc
 8005cd2:	f1a2 0508 	subcc.w	r5, r2, #8
 8005cd6:	2200      	movcs	r2, #0
 8005cd8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005cdc:	3b0b      	subs	r3, #11
 8005cde:	d012      	beq.n	8005d06 <__b2d+0x86>
 8005ce0:	f1c3 0720 	rsb	r7, r3, #32
 8005ce4:	fa22 f107 	lsr.w	r1, r2, r7
 8005ce8:	409c      	lsls	r4, r3
 8005cea:	430c      	orrs	r4, r1
 8005cec:	42b5      	cmp	r5, r6
 8005cee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005cf2:	bf94      	ite	ls
 8005cf4:	2400      	movls	r4, #0
 8005cf6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	40fc      	lsrs	r4, r7
 8005cfe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005d02:	4322      	orrs	r2, r4
 8005d04:	e7e1      	b.n	8005cca <__b2d+0x4a>
 8005d06:	ea44 0107 	orr.w	r1, r4, r7
 8005d0a:	e7de      	b.n	8005cca <__b2d+0x4a>
 8005d0c:	3ff00000 	.word	0x3ff00000

08005d10 <__d2b>:
 8005d10:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005d14:	2101      	movs	r1, #1
 8005d16:	4690      	mov	r8, r2
 8005d18:	4699      	mov	r9, r3
 8005d1a:	9e08      	ldr	r6, [sp, #32]
 8005d1c:	f7ff fc1e 	bl	800555c <_Balloc>
 8005d20:	4604      	mov	r4, r0
 8005d22:	b930      	cbnz	r0, 8005d32 <__d2b+0x22>
 8005d24:	4602      	mov	r2, r0
 8005d26:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d2a:	4b23      	ldr	r3, [pc, #140]	@ (8005db8 <__d2b+0xa8>)
 8005d2c:	4823      	ldr	r0, [pc, #140]	@ (8005dbc <__d2b+0xac>)
 8005d2e:	f001 fb5d 	bl	80073ec <__assert_func>
 8005d32:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d3a:	b10d      	cbz	r5, 8005d40 <__d2b+0x30>
 8005d3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	f1b8 0300 	subs.w	r3, r8, #0
 8005d46:	d024      	beq.n	8005d92 <__d2b+0x82>
 8005d48:	4668      	mov	r0, sp
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	f7ff fd17 	bl	800577e <__lo0bits>
 8005d50:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d54:	b1d8      	cbz	r0, 8005d8e <__d2b+0x7e>
 8005d56:	f1c0 0320 	rsb	r3, r0, #32
 8005d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	40c2      	lsrs	r2, r0
 8005d62:	6163      	str	r3, [r4, #20]
 8005d64:	9201      	str	r2, [sp, #4]
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2201      	moveq	r2, #1
 8005d6e:	2202      	movne	r2, #2
 8005d70:	61a3      	str	r3, [r4, #24]
 8005d72:	6122      	str	r2, [r4, #16]
 8005d74:	b1ad      	cbz	r5, 8005da2 <__d2b+0x92>
 8005d76:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d7a:	4405      	add	r5, r0
 8005d7c:	6035      	str	r5, [r6, #0]
 8005d7e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d84:	6018      	str	r0, [r3, #0]
 8005d86:	4620      	mov	r0, r4
 8005d88:	b002      	add	sp, #8
 8005d8a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005d8e:	6161      	str	r1, [r4, #20]
 8005d90:	e7e9      	b.n	8005d66 <__d2b+0x56>
 8005d92:	a801      	add	r0, sp, #4
 8005d94:	f7ff fcf3 	bl	800577e <__lo0bits>
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	6163      	str	r3, [r4, #20]
 8005d9e:	3020      	adds	r0, #32
 8005da0:	e7e7      	b.n	8005d72 <__d2b+0x62>
 8005da2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005da6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005daa:	6030      	str	r0, [r6, #0]
 8005dac:	6918      	ldr	r0, [r3, #16]
 8005dae:	f7ff fcc7 	bl	8005740 <__hi0bits>
 8005db2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005db6:	e7e4      	b.n	8005d82 <__d2b+0x72>
 8005db8:	08007ea7 	.word	0x08007ea7
 8005dbc:	08007eb8 	.word	0x08007eb8

08005dc0 <__ratio>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	e9cd 1000 	strd	r1, r0, [sp]
 8005dca:	a902      	add	r1, sp, #8
 8005dcc:	f7ff ff58 	bl	8005c80 <__b2d>
 8005dd0:	468b      	mov	fp, r1
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	9800      	ldr	r0, [sp, #0]
 8005dd8:	a903      	add	r1, sp, #12
 8005dda:	f7ff ff51 	bl	8005c80 <__b2d>
 8005dde:	460d      	mov	r5, r1
 8005de0:	9b01      	ldr	r3, [sp, #4]
 8005de2:	4689      	mov	r9, r1
 8005de4:	6919      	ldr	r1, [r3, #16]
 8005de6:	9b00      	ldr	r3, [sp, #0]
 8005de8:	4604      	mov	r4, r0
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	4630      	mov	r0, r6
 8005dee:	1ac9      	subs	r1, r1, r3
 8005df0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005df4:	1a9b      	subs	r3, r3, r2
 8005df6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bfcd      	iteet	gt
 8005dfe:	463a      	movgt	r2, r7
 8005e00:	462a      	movle	r2, r5
 8005e02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005e06:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8005e0a:	bfd8      	it	le
 8005e0c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005e10:	464b      	mov	r3, r9
 8005e12:	4622      	mov	r2, r4
 8005e14:	4659      	mov	r1, fp
 8005e16:	f7fa fc89 	bl	800072c <__aeabi_ddiv>
 8005e1a:	b005      	add	sp, #20
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e20 <__copybits>:
 8005e20:	3901      	subs	r1, #1
 8005e22:	b570      	push	{r4, r5, r6, lr}
 8005e24:	1149      	asrs	r1, r1, #5
 8005e26:	6914      	ldr	r4, [r2, #16]
 8005e28:	3101      	adds	r1, #1
 8005e2a:	f102 0314 	add.w	r3, r2, #20
 8005e2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005e32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005e36:	1f05      	subs	r5, r0, #4
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d30c      	bcc.n	8005e56 <__copybits+0x36>
 8005e3c:	1aa3      	subs	r3, r4, r2
 8005e3e:	3b11      	subs	r3, #17
 8005e40:	f023 0303 	bic.w	r3, r3, #3
 8005e44:	3211      	adds	r2, #17
 8005e46:	42a2      	cmp	r2, r4
 8005e48:	bf88      	it	hi
 8005e4a:	2300      	movhi	r3, #0
 8005e4c:	4418      	add	r0, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4288      	cmp	r0, r1
 8005e52:	d305      	bcc.n	8005e60 <__copybits+0x40>
 8005e54:	bd70      	pop	{r4, r5, r6, pc}
 8005e56:	f853 6b04 	ldr.w	r6, [r3], #4
 8005e5a:	f845 6f04 	str.w	r6, [r5, #4]!
 8005e5e:	e7eb      	b.n	8005e38 <__copybits+0x18>
 8005e60:	f840 3b04 	str.w	r3, [r0], #4
 8005e64:	e7f4      	b.n	8005e50 <__copybits+0x30>

08005e66 <__any_on>:
 8005e66:	f100 0214 	add.w	r2, r0, #20
 8005e6a:	6900      	ldr	r0, [r0, #16]
 8005e6c:	114b      	asrs	r3, r1, #5
 8005e6e:	4298      	cmp	r0, r3
 8005e70:	b510      	push	{r4, lr}
 8005e72:	db11      	blt.n	8005e98 <__any_on+0x32>
 8005e74:	dd0a      	ble.n	8005e8c <__any_on+0x26>
 8005e76:	f011 011f 	ands.w	r1, r1, #31
 8005e7a:	d007      	beq.n	8005e8c <__any_on+0x26>
 8005e7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005e80:	fa24 f001 	lsr.w	r0, r4, r1
 8005e84:	fa00 f101 	lsl.w	r1, r0, r1
 8005e88:	428c      	cmp	r4, r1
 8005e8a:	d10b      	bne.n	8005ea4 <__any_on+0x3e>
 8005e8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d803      	bhi.n	8005e9c <__any_on+0x36>
 8005e94:	2000      	movs	r0, #0
 8005e96:	bd10      	pop	{r4, pc}
 8005e98:	4603      	mov	r3, r0
 8005e9a:	e7f7      	b.n	8005e8c <__any_on+0x26>
 8005e9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ea0:	2900      	cmp	r1, #0
 8005ea2:	d0f5      	beq.n	8005e90 <__any_on+0x2a>
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	e7f6      	b.n	8005e96 <__any_on+0x30>

08005ea8 <sulp>:
 8005ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eac:	460f      	mov	r7, r1
 8005eae:	4690      	mov	r8, r2
 8005eb0:	f7ff fec6 	bl	8005c40 <__ulp>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	f1b8 0f00 	cmp.w	r8, #0
 8005ebc:	d011      	beq.n	8005ee2 <sulp+0x3a>
 8005ebe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005ec2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd0b      	ble.n	8005ee2 <sulp+0x3a>
 8005eca:	2400      	movs	r4, #0
 8005ecc:	051b      	lsls	r3, r3, #20
 8005ece:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005ed2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	462b      	mov	r3, r5
 8005eda:	f7fa fafd 	bl	80004d8 <__aeabi_dmul>
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eea:	0000      	movs	r0, r0
 8005eec:	0000      	movs	r0, r0
	...

08005ef0 <_strtod_l>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	b09f      	sub	sp, #124	@ 0x7c
 8005ef6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005ef8:	2200      	movs	r2, #0
 8005efa:	460c      	mov	r4, r1
 8005efc:	921a      	str	r2, [sp, #104]	@ 0x68
 8005efe:	f04f 0a00 	mov.w	sl, #0
 8005f02:	f04f 0b00 	mov.w	fp, #0
 8005f06:	460a      	mov	r2, r1
 8005f08:	9005      	str	r0, [sp, #20]
 8005f0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f0c:	7811      	ldrb	r1, [r2, #0]
 8005f0e:	292b      	cmp	r1, #43	@ 0x2b
 8005f10:	d048      	beq.n	8005fa4 <_strtod_l+0xb4>
 8005f12:	d836      	bhi.n	8005f82 <_strtod_l+0x92>
 8005f14:	290d      	cmp	r1, #13
 8005f16:	d830      	bhi.n	8005f7a <_strtod_l+0x8a>
 8005f18:	2908      	cmp	r1, #8
 8005f1a:	d830      	bhi.n	8005f7e <_strtod_l+0x8e>
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d039      	beq.n	8005f94 <_strtod_l+0xa4>
 8005f20:	2200      	movs	r2, #0
 8005f22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005f24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005f26:	782a      	ldrb	r2, [r5, #0]
 8005f28:	2a30      	cmp	r2, #48	@ 0x30
 8005f2a:	f040 80b1 	bne.w	8006090 <_strtod_l+0x1a0>
 8005f2e:	786a      	ldrb	r2, [r5, #1]
 8005f30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f34:	2a58      	cmp	r2, #88	@ 0x58
 8005f36:	d16c      	bne.n	8006012 <_strtod_l+0x122>
 8005f38:	9302      	str	r3, [sp, #8]
 8005f3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f3c:	4a8e      	ldr	r2, [pc, #568]	@ (8006178 <_strtod_l+0x288>)
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	ab1a      	add	r3, sp, #104	@ 0x68
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	9805      	ldr	r0, [sp, #20]
 8005f46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f48:	a919      	add	r1, sp, #100	@ 0x64
 8005f4a:	f001 fae9 	bl	8007520 <__gethex>
 8005f4e:	f010 060f 	ands.w	r6, r0, #15
 8005f52:	4604      	mov	r4, r0
 8005f54:	d005      	beq.n	8005f62 <_strtod_l+0x72>
 8005f56:	2e06      	cmp	r6, #6
 8005f58:	d126      	bne.n	8005fa8 <_strtod_l+0xb8>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005f60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 8584 	bne.w	8006a72 <_strtod_l+0xb82>
 8005f6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f6c:	b1bb      	cbz	r3, 8005f9e <_strtod_l+0xae>
 8005f6e:	4650      	mov	r0, sl
 8005f70:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005f74:	b01f      	add	sp, #124	@ 0x7c
 8005f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7a:	2920      	cmp	r1, #32
 8005f7c:	d1d0      	bne.n	8005f20 <_strtod_l+0x30>
 8005f7e:	3201      	adds	r2, #1
 8005f80:	e7c3      	b.n	8005f0a <_strtod_l+0x1a>
 8005f82:	292d      	cmp	r1, #45	@ 0x2d
 8005f84:	d1cc      	bne.n	8005f20 <_strtod_l+0x30>
 8005f86:	2101      	movs	r1, #1
 8005f88:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005f8a:	1c51      	adds	r1, r2, #1
 8005f8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f8e:	7852      	ldrb	r2, [r2, #1]
 8005f90:	2a00      	cmp	r2, #0
 8005f92:	d1c7      	bne.n	8005f24 <_strtod_l+0x34>
 8005f94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f96:	9419      	str	r4, [sp, #100]	@ 0x64
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 8568 	bne.w	8006a6e <_strtod_l+0xb7e>
 8005f9e:	4650      	mov	r0, sl
 8005fa0:	4659      	mov	r1, fp
 8005fa2:	e7e7      	b.n	8005f74 <_strtod_l+0x84>
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	e7ef      	b.n	8005f88 <_strtod_l+0x98>
 8005fa8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005faa:	b13a      	cbz	r2, 8005fbc <_strtod_l+0xcc>
 8005fac:	2135      	movs	r1, #53	@ 0x35
 8005fae:	a81c      	add	r0, sp, #112	@ 0x70
 8005fb0:	f7ff ff36 	bl	8005e20 <__copybits>
 8005fb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fb6:	9805      	ldr	r0, [sp, #20]
 8005fb8:	f7ff fb10 	bl	80055dc <_Bfree>
 8005fbc:	3e01      	subs	r6, #1
 8005fbe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005fc0:	2e04      	cmp	r6, #4
 8005fc2:	d806      	bhi.n	8005fd2 <_strtod_l+0xe2>
 8005fc4:	e8df f006 	tbb	[pc, r6]
 8005fc8:	201d0314 	.word	0x201d0314
 8005fcc:	14          	.byte	0x14
 8005fcd:	00          	.byte	0x00
 8005fce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005fd2:	05e1      	lsls	r1, r4, #23
 8005fd4:	bf48      	it	mi
 8005fd6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005fda:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fde:	0d1b      	lsrs	r3, r3, #20
 8005fe0:	051b      	lsls	r3, r3, #20
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1bd      	bne.n	8005f62 <_strtod_l+0x72>
 8005fe6:	f7fe fb29 	bl	800463c <__errno>
 8005fea:	2322      	movs	r3, #34	@ 0x22
 8005fec:	6003      	str	r3, [r0, #0]
 8005fee:	e7b8      	b.n	8005f62 <_strtod_l+0x72>
 8005ff0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005ff4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005ff8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ffc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006000:	e7e7      	b.n	8005fd2 <_strtod_l+0xe2>
 8006002:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800617c <_strtod_l+0x28c>
 8006006:	e7e4      	b.n	8005fd2 <_strtod_l+0xe2>
 8006008:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800600c:	f04f 3aff 	mov.w	sl, #4294967295
 8006010:	e7df      	b.n	8005fd2 <_strtod_l+0xe2>
 8006012:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	9219      	str	r2, [sp, #100]	@ 0x64
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b30      	cmp	r3, #48	@ 0x30
 800601c:	d0f9      	beq.n	8006012 <_strtod_l+0x122>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d09f      	beq.n	8005f62 <_strtod_l+0x72>
 8006022:	2301      	movs	r3, #1
 8006024:	9309      	str	r3, [sp, #36]	@ 0x24
 8006026:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006028:	220a      	movs	r2, #10
 800602a:	930c      	str	r3, [sp, #48]	@ 0x30
 800602c:	2300      	movs	r3, #0
 800602e:	461f      	mov	r7, r3
 8006030:	9308      	str	r3, [sp, #32]
 8006032:	930a      	str	r3, [sp, #40]	@ 0x28
 8006034:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006036:	7805      	ldrb	r5, [r0, #0]
 8006038:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800603c:	b2d9      	uxtb	r1, r3
 800603e:	2909      	cmp	r1, #9
 8006040:	d928      	bls.n	8006094 <_strtod_l+0x1a4>
 8006042:	2201      	movs	r2, #1
 8006044:	494e      	ldr	r1, [pc, #312]	@ (8006180 <_strtod_l+0x290>)
 8006046:	f001 f99b 	bl	8007380 <strncmp>
 800604a:	2800      	cmp	r0, #0
 800604c:	d032      	beq.n	80060b4 <_strtod_l+0x1c4>
 800604e:	2000      	movs	r0, #0
 8006050:	462a      	mov	r2, r5
 8006052:	4681      	mov	r9, r0
 8006054:	463d      	mov	r5, r7
 8006056:	4603      	mov	r3, r0
 8006058:	2a65      	cmp	r2, #101	@ 0x65
 800605a:	d001      	beq.n	8006060 <_strtod_l+0x170>
 800605c:	2a45      	cmp	r2, #69	@ 0x45
 800605e:	d114      	bne.n	800608a <_strtod_l+0x19a>
 8006060:	b91d      	cbnz	r5, 800606a <_strtod_l+0x17a>
 8006062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006064:	4302      	orrs	r2, r0
 8006066:	d095      	beq.n	8005f94 <_strtod_l+0xa4>
 8006068:	2500      	movs	r5, #0
 800606a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800606c:	1c62      	adds	r2, r4, #1
 800606e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006070:	7862      	ldrb	r2, [r4, #1]
 8006072:	2a2b      	cmp	r2, #43	@ 0x2b
 8006074:	d077      	beq.n	8006166 <_strtod_l+0x276>
 8006076:	2a2d      	cmp	r2, #45	@ 0x2d
 8006078:	d07b      	beq.n	8006172 <_strtod_l+0x282>
 800607a:	f04f 0c00 	mov.w	ip, #0
 800607e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006082:	2909      	cmp	r1, #9
 8006084:	f240 8082 	bls.w	800618c <_strtod_l+0x29c>
 8006088:	9419      	str	r4, [sp, #100]	@ 0x64
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	e0a2      	b.n	80061d6 <_strtod_l+0x2e6>
 8006090:	2300      	movs	r3, #0
 8006092:	e7c7      	b.n	8006024 <_strtod_l+0x134>
 8006094:	2f08      	cmp	r7, #8
 8006096:	bfd5      	itete	le
 8006098:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800609a:	9908      	ldrgt	r1, [sp, #32]
 800609c:	fb02 3301 	mlale	r3, r2, r1, r3
 80060a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80060a4:	f100 0001 	add.w	r0, r0, #1
 80060a8:	bfd4      	ite	le
 80060aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80060ac:	9308      	strgt	r3, [sp, #32]
 80060ae:	3701      	adds	r7, #1
 80060b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80060b2:	e7bf      	b.n	8006034 <_strtod_l+0x144>
 80060b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80060ba:	785a      	ldrb	r2, [r3, #1]
 80060bc:	b37f      	cbz	r7, 800611e <_strtod_l+0x22e>
 80060be:	4681      	mov	r9, r0
 80060c0:	463d      	mov	r5, r7
 80060c2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80060c6:	2b09      	cmp	r3, #9
 80060c8:	d912      	bls.n	80060f0 <_strtod_l+0x200>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e7c4      	b.n	8006058 <_strtod_l+0x168>
 80060ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060d0:	3001      	adds	r0, #1
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80060d6:	785a      	ldrb	r2, [r3, #1]
 80060d8:	2a30      	cmp	r2, #48	@ 0x30
 80060da:	d0f8      	beq.n	80060ce <_strtod_l+0x1de>
 80060dc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	f200 84cb 	bhi.w	8006a7c <_strtod_l+0xb8c>
 80060e6:	4681      	mov	r9, r0
 80060e8:	2000      	movs	r0, #0
 80060ea:	4605      	mov	r5, r0
 80060ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80060f0:	3a30      	subs	r2, #48	@ 0x30
 80060f2:	f100 0301 	add.w	r3, r0, #1
 80060f6:	d02a      	beq.n	800614e <_strtod_l+0x25e>
 80060f8:	4499      	add	r9, r3
 80060fa:	210a      	movs	r1, #10
 80060fc:	462b      	mov	r3, r5
 80060fe:	eb00 0c05 	add.w	ip, r0, r5
 8006102:	4563      	cmp	r3, ip
 8006104:	d10d      	bne.n	8006122 <_strtod_l+0x232>
 8006106:	1c69      	adds	r1, r5, #1
 8006108:	4401      	add	r1, r0
 800610a:	4428      	add	r0, r5
 800610c:	2808      	cmp	r0, #8
 800610e:	dc16      	bgt.n	800613e <_strtod_l+0x24e>
 8006110:	230a      	movs	r3, #10
 8006112:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006114:	fb03 2300 	mla	r3, r3, r0, r2
 8006118:	930a      	str	r3, [sp, #40]	@ 0x28
 800611a:	2300      	movs	r3, #0
 800611c:	e018      	b.n	8006150 <_strtod_l+0x260>
 800611e:	4638      	mov	r0, r7
 8006120:	e7da      	b.n	80060d8 <_strtod_l+0x1e8>
 8006122:	2b08      	cmp	r3, #8
 8006124:	f103 0301 	add.w	r3, r3, #1
 8006128:	dc03      	bgt.n	8006132 <_strtod_l+0x242>
 800612a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800612c:	434e      	muls	r6, r1
 800612e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006130:	e7e7      	b.n	8006102 <_strtod_l+0x212>
 8006132:	2b10      	cmp	r3, #16
 8006134:	bfde      	ittt	le
 8006136:	9e08      	ldrle	r6, [sp, #32]
 8006138:	434e      	mulle	r6, r1
 800613a:	9608      	strle	r6, [sp, #32]
 800613c:	e7e1      	b.n	8006102 <_strtod_l+0x212>
 800613e:	280f      	cmp	r0, #15
 8006140:	dceb      	bgt.n	800611a <_strtod_l+0x22a>
 8006142:	230a      	movs	r3, #10
 8006144:	9808      	ldr	r0, [sp, #32]
 8006146:	fb03 2300 	mla	r3, r3, r0, r2
 800614a:	9308      	str	r3, [sp, #32]
 800614c:	e7e5      	b.n	800611a <_strtod_l+0x22a>
 800614e:	4629      	mov	r1, r5
 8006150:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006152:	460d      	mov	r5, r1
 8006154:	1c50      	adds	r0, r2, #1
 8006156:	9019      	str	r0, [sp, #100]	@ 0x64
 8006158:	7852      	ldrb	r2, [r2, #1]
 800615a:	4618      	mov	r0, r3
 800615c:	e7b1      	b.n	80060c2 <_strtod_l+0x1d2>
 800615e:	f04f 0900 	mov.w	r9, #0
 8006162:	2301      	movs	r3, #1
 8006164:	e77d      	b.n	8006062 <_strtod_l+0x172>
 8006166:	f04f 0c00 	mov.w	ip, #0
 800616a:	1ca2      	adds	r2, r4, #2
 800616c:	9219      	str	r2, [sp, #100]	@ 0x64
 800616e:	78a2      	ldrb	r2, [r4, #2]
 8006170:	e785      	b.n	800607e <_strtod_l+0x18e>
 8006172:	f04f 0c01 	mov.w	ip, #1
 8006176:	e7f8      	b.n	800616a <_strtod_l+0x27a>
 8006178:	08008028 	.word	0x08008028
 800617c:	7ff00000 	.word	0x7ff00000
 8006180:	08008010 	.word	0x08008010
 8006184:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006186:	1c51      	adds	r1, r2, #1
 8006188:	9119      	str	r1, [sp, #100]	@ 0x64
 800618a:	7852      	ldrb	r2, [r2, #1]
 800618c:	2a30      	cmp	r2, #48	@ 0x30
 800618e:	d0f9      	beq.n	8006184 <_strtod_l+0x294>
 8006190:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006194:	2908      	cmp	r1, #8
 8006196:	f63f af78 	bhi.w	800608a <_strtod_l+0x19a>
 800619a:	f04f 080a 	mov.w	r8, #10
 800619e:	3a30      	subs	r2, #48	@ 0x30
 80061a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80061a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80061a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061a8:	1c56      	adds	r6, r2, #1
 80061aa:	9619      	str	r6, [sp, #100]	@ 0x64
 80061ac:	7852      	ldrb	r2, [r2, #1]
 80061ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80061b2:	f1be 0f09 	cmp.w	lr, #9
 80061b6:	d939      	bls.n	800622c <_strtod_l+0x33c>
 80061b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80061ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80061be:	1a76      	subs	r6, r6, r1
 80061c0:	2e08      	cmp	r6, #8
 80061c2:	dc03      	bgt.n	80061cc <_strtod_l+0x2dc>
 80061c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80061c6:	4588      	cmp	r8, r1
 80061c8:	bfa8      	it	ge
 80061ca:	4688      	movge	r8, r1
 80061cc:	f1bc 0f00 	cmp.w	ip, #0
 80061d0:	d001      	beq.n	80061d6 <_strtod_l+0x2e6>
 80061d2:	f1c8 0800 	rsb	r8, r8, #0
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	d14e      	bne.n	8006278 <_strtod_l+0x388>
 80061da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061dc:	4308      	orrs	r0, r1
 80061de:	f47f aec0 	bne.w	8005f62 <_strtod_l+0x72>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f47f aed6 	bne.w	8005f94 <_strtod_l+0xa4>
 80061e8:	2a69      	cmp	r2, #105	@ 0x69
 80061ea:	d028      	beq.n	800623e <_strtod_l+0x34e>
 80061ec:	dc25      	bgt.n	800623a <_strtod_l+0x34a>
 80061ee:	2a49      	cmp	r2, #73	@ 0x49
 80061f0:	d025      	beq.n	800623e <_strtod_l+0x34e>
 80061f2:	2a4e      	cmp	r2, #78	@ 0x4e
 80061f4:	f47f aece 	bne.w	8005f94 <_strtod_l+0xa4>
 80061f8:	499a      	ldr	r1, [pc, #616]	@ (8006464 <_strtod_l+0x574>)
 80061fa:	a819      	add	r0, sp, #100	@ 0x64
 80061fc:	f001 fbb2 	bl	8007964 <__match>
 8006200:	2800      	cmp	r0, #0
 8006202:	f43f aec7 	beq.w	8005f94 <_strtod_l+0xa4>
 8006206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b28      	cmp	r3, #40	@ 0x28
 800620c:	d12e      	bne.n	800626c <_strtod_l+0x37c>
 800620e:	4996      	ldr	r1, [pc, #600]	@ (8006468 <_strtod_l+0x578>)
 8006210:	aa1c      	add	r2, sp, #112	@ 0x70
 8006212:	a819      	add	r0, sp, #100	@ 0x64
 8006214:	f001 fbba 	bl	800798c <__hexnan>
 8006218:	2805      	cmp	r0, #5
 800621a:	d127      	bne.n	800626c <_strtod_l+0x37c>
 800621c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800621e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006222:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006226:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800622a:	e69a      	b.n	8005f62 <_strtod_l+0x72>
 800622c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800622e:	fb08 2101 	mla	r1, r8, r1, r2
 8006232:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006236:	920e      	str	r2, [sp, #56]	@ 0x38
 8006238:	e7b5      	b.n	80061a6 <_strtod_l+0x2b6>
 800623a:	2a6e      	cmp	r2, #110	@ 0x6e
 800623c:	e7da      	b.n	80061f4 <_strtod_l+0x304>
 800623e:	498b      	ldr	r1, [pc, #556]	@ (800646c <_strtod_l+0x57c>)
 8006240:	a819      	add	r0, sp, #100	@ 0x64
 8006242:	f001 fb8f 	bl	8007964 <__match>
 8006246:	2800      	cmp	r0, #0
 8006248:	f43f aea4 	beq.w	8005f94 <_strtod_l+0xa4>
 800624c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800624e:	4988      	ldr	r1, [pc, #544]	@ (8006470 <_strtod_l+0x580>)
 8006250:	3b01      	subs	r3, #1
 8006252:	a819      	add	r0, sp, #100	@ 0x64
 8006254:	9319      	str	r3, [sp, #100]	@ 0x64
 8006256:	f001 fb85 	bl	8007964 <__match>
 800625a:	b910      	cbnz	r0, 8006262 <_strtod_l+0x372>
 800625c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800625e:	3301      	adds	r3, #1
 8006260:	9319      	str	r3, [sp, #100]	@ 0x64
 8006262:	f04f 0a00 	mov.w	sl, #0
 8006266:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006474 <_strtod_l+0x584>
 800626a:	e67a      	b.n	8005f62 <_strtod_l+0x72>
 800626c:	4882      	ldr	r0, [pc, #520]	@ (8006478 <_strtod_l+0x588>)
 800626e:	f001 f8b7 	bl	80073e0 <nan>
 8006272:	4682      	mov	sl, r0
 8006274:	468b      	mov	fp, r1
 8006276:	e674      	b.n	8005f62 <_strtod_l+0x72>
 8006278:	eba8 0309 	sub.w	r3, r8, r9
 800627c:	2f00      	cmp	r7, #0
 800627e:	bf08      	it	eq
 8006280:	462f      	moveq	r7, r5
 8006282:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006284:	2d10      	cmp	r5, #16
 8006286:	462c      	mov	r4, r5
 8006288:	9309      	str	r3, [sp, #36]	@ 0x24
 800628a:	bfa8      	it	ge
 800628c:	2410      	movge	r4, #16
 800628e:	f7fa f8a9 	bl	80003e4 <__aeabi_ui2d>
 8006292:	2d09      	cmp	r5, #9
 8006294:	4682      	mov	sl, r0
 8006296:	468b      	mov	fp, r1
 8006298:	dc11      	bgt.n	80062be <_strtod_l+0x3ce>
 800629a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	f43f ae60 	beq.w	8005f62 <_strtod_l+0x72>
 80062a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a4:	dd76      	ble.n	8006394 <_strtod_l+0x4a4>
 80062a6:	2b16      	cmp	r3, #22
 80062a8:	dc5d      	bgt.n	8006366 <_strtod_l+0x476>
 80062aa:	4974      	ldr	r1, [pc, #464]	@ (800647c <_strtod_l+0x58c>)
 80062ac:	4652      	mov	r2, sl
 80062ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062b2:	465b      	mov	r3, fp
 80062b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062b8:	f7fa f90e 	bl	80004d8 <__aeabi_dmul>
 80062bc:	e7d9      	b.n	8006272 <_strtod_l+0x382>
 80062be:	4b6f      	ldr	r3, [pc, #444]	@ (800647c <_strtod_l+0x58c>)
 80062c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80062c8:	f7fa f906 	bl	80004d8 <__aeabi_dmul>
 80062cc:	4682      	mov	sl, r0
 80062ce:	9808      	ldr	r0, [sp, #32]
 80062d0:	468b      	mov	fp, r1
 80062d2:	f7fa f887 	bl	80003e4 <__aeabi_ui2d>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4650      	mov	r0, sl
 80062dc:	4659      	mov	r1, fp
 80062de:	f7f9 ff45 	bl	800016c <__adddf3>
 80062e2:	2d0f      	cmp	r5, #15
 80062e4:	4682      	mov	sl, r0
 80062e6:	468b      	mov	fp, r1
 80062e8:	ddd7      	ble.n	800629a <_strtod_l+0x3aa>
 80062ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ec:	1b2c      	subs	r4, r5, r4
 80062ee:	441c      	add	r4, r3
 80062f0:	2c00      	cmp	r4, #0
 80062f2:	f340 8096 	ble.w	8006422 <_strtod_l+0x532>
 80062f6:	f014 030f 	ands.w	r3, r4, #15
 80062fa:	d00a      	beq.n	8006312 <_strtod_l+0x422>
 80062fc:	495f      	ldr	r1, [pc, #380]	@ (800647c <_strtod_l+0x58c>)
 80062fe:	4652      	mov	r2, sl
 8006300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006308:	465b      	mov	r3, fp
 800630a:	f7fa f8e5 	bl	80004d8 <__aeabi_dmul>
 800630e:	4682      	mov	sl, r0
 8006310:	468b      	mov	fp, r1
 8006312:	f034 040f 	bics.w	r4, r4, #15
 8006316:	d073      	beq.n	8006400 <_strtod_l+0x510>
 8006318:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800631c:	dd48      	ble.n	80063b0 <_strtod_l+0x4c0>
 800631e:	2400      	movs	r4, #0
 8006320:	46a0      	mov	r8, r4
 8006322:	46a1      	mov	r9, r4
 8006324:	940a      	str	r4, [sp, #40]	@ 0x28
 8006326:	2322      	movs	r3, #34	@ 0x22
 8006328:	f04f 0a00 	mov.w	sl, #0
 800632c:	9a05      	ldr	r2, [sp, #20]
 800632e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006474 <_strtod_l+0x584>
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006336:	2b00      	cmp	r3, #0
 8006338:	f43f ae13 	beq.w	8005f62 <_strtod_l+0x72>
 800633c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800633e:	9805      	ldr	r0, [sp, #20]
 8006340:	f7ff f94c 	bl	80055dc <_Bfree>
 8006344:	4649      	mov	r1, r9
 8006346:	9805      	ldr	r0, [sp, #20]
 8006348:	f7ff f948 	bl	80055dc <_Bfree>
 800634c:	4641      	mov	r1, r8
 800634e:	9805      	ldr	r0, [sp, #20]
 8006350:	f7ff f944 	bl	80055dc <_Bfree>
 8006354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006356:	9805      	ldr	r0, [sp, #20]
 8006358:	f7ff f940 	bl	80055dc <_Bfree>
 800635c:	4621      	mov	r1, r4
 800635e:	9805      	ldr	r0, [sp, #20]
 8006360:	f7ff f93c 	bl	80055dc <_Bfree>
 8006364:	e5fd      	b.n	8005f62 <_strtod_l+0x72>
 8006366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006368:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800636c:	4293      	cmp	r3, r2
 800636e:	dbbc      	blt.n	80062ea <_strtod_l+0x3fa>
 8006370:	4c42      	ldr	r4, [pc, #264]	@ (800647c <_strtod_l+0x58c>)
 8006372:	f1c5 050f 	rsb	r5, r5, #15
 8006376:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800637a:	4652      	mov	r2, sl
 800637c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006380:	465b      	mov	r3, fp
 8006382:	f7fa f8a9 	bl	80004d8 <__aeabi_dmul>
 8006386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006388:	1b5d      	subs	r5, r3, r5
 800638a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800638e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006392:	e791      	b.n	80062b8 <_strtod_l+0x3c8>
 8006394:	3316      	adds	r3, #22
 8006396:	dba8      	blt.n	80062ea <_strtod_l+0x3fa>
 8006398:	4b38      	ldr	r3, [pc, #224]	@ (800647c <_strtod_l+0x58c>)
 800639a:	eba9 0808 	sub.w	r8, r9, r8
 800639e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80063a2:	4650      	mov	r0, sl
 80063a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80063a8:	4659      	mov	r1, fp
 80063aa:	f7fa f9bf 	bl	800072c <__aeabi_ddiv>
 80063ae:	e760      	b.n	8006272 <_strtod_l+0x382>
 80063b0:	4b33      	ldr	r3, [pc, #204]	@ (8006480 <_strtod_l+0x590>)
 80063b2:	4650      	mov	r0, sl
 80063b4:	9308      	str	r3, [sp, #32]
 80063b6:	2300      	movs	r3, #0
 80063b8:	4659      	mov	r1, fp
 80063ba:	461e      	mov	r6, r3
 80063bc:	1124      	asrs	r4, r4, #4
 80063be:	2c01      	cmp	r4, #1
 80063c0:	dc21      	bgt.n	8006406 <_strtod_l+0x516>
 80063c2:	b10b      	cbz	r3, 80063c8 <_strtod_l+0x4d8>
 80063c4:	4682      	mov	sl, r0
 80063c6:	468b      	mov	fp, r1
 80063c8:	492d      	ldr	r1, [pc, #180]	@ (8006480 <_strtod_l+0x590>)
 80063ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80063ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80063d2:	4652      	mov	r2, sl
 80063d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063d8:	465b      	mov	r3, fp
 80063da:	f7fa f87d 	bl	80004d8 <__aeabi_dmul>
 80063de:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <_strtod_l+0x584>)
 80063e0:	460a      	mov	r2, r1
 80063e2:	400b      	ands	r3, r1
 80063e4:	4927      	ldr	r1, [pc, #156]	@ (8006484 <_strtod_l+0x594>)
 80063e6:	4682      	mov	sl, r0
 80063e8:	428b      	cmp	r3, r1
 80063ea:	d898      	bhi.n	800631e <_strtod_l+0x42e>
 80063ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf86      	itte	hi
 80063f4:	f04f 3aff 	movhi.w	sl, #4294967295
 80063f8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006488 <_strtod_l+0x598>
 80063fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006400:	2300      	movs	r3, #0
 8006402:	9308      	str	r3, [sp, #32]
 8006404:	e07a      	b.n	80064fc <_strtod_l+0x60c>
 8006406:	07e2      	lsls	r2, r4, #31
 8006408:	d505      	bpl.n	8006416 <_strtod_l+0x526>
 800640a:	9b08      	ldr	r3, [sp, #32]
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7fa f862 	bl	80004d8 <__aeabi_dmul>
 8006414:	2301      	movs	r3, #1
 8006416:	9a08      	ldr	r2, [sp, #32]
 8006418:	3601      	adds	r6, #1
 800641a:	3208      	adds	r2, #8
 800641c:	1064      	asrs	r4, r4, #1
 800641e:	9208      	str	r2, [sp, #32]
 8006420:	e7cd      	b.n	80063be <_strtod_l+0x4ce>
 8006422:	d0ed      	beq.n	8006400 <_strtod_l+0x510>
 8006424:	4264      	negs	r4, r4
 8006426:	f014 020f 	ands.w	r2, r4, #15
 800642a:	d00a      	beq.n	8006442 <_strtod_l+0x552>
 800642c:	4b13      	ldr	r3, [pc, #76]	@ (800647c <_strtod_l+0x58c>)
 800642e:	4650      	mov	r0, sl
 8006430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006434:	4659      	mov	r1, fp
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7fa f977 	bl	800072c <__aeabi_ddiv>
 800643e:	4682      	mov	sl, r0
 8006440:	468b      	mov	fp, r1
 8006442:	1124      	asrs	r4, r4, #4
 8006444:	d0dc      	beq.n	8006400 <_strtod_l+0x510>
 8006446:	2c1f      	cmp	r4, #31
 8006448:	dd20      	ble.n	800648c <_strtod_l+0x59c>
 800644a:	2400      	movs	r4, #0
 800644c:	46a0      	mov	r8, r4
 800644e:	46a1      	mov	r9, r4
 8006450:	940a      	str	r4, [sp, #40]	@ 0x28
 8006452:	2322      	movs	r3, #34	@ 0x22
 8006454:	9a05      	ldr	r2, [sp, #20]
 8006456:	f04f 0a00 	mov.w	sl, #0
 800645a:	f04f 0b00 	mov.w	fp, #0
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	e768      	b.n	8006334 <_strtod_l+0x444>
 8006462:	bf00      	nop
 8006464:	08007dff 	.word	0x08007dff
 8006468:	08008014 	.word	0x08008014
 800646c:	08007df7 	.word	0x08007df7
 8006470:	08007e2e 	.word	0x08007e2e
 8006474:	7ff00000 	.word	0x7ff00000
 8006478:	080081bd 	.word	0x080081bd
 800647c:	08007f48 	.word	0x08007f48
 8006480:	08007f20 	.word	0x08007f20
 8006484:	7ca00000 	.word	0x7ca00000
 8006488:	7fefffff 	.word	0x7fefffff
 800648c:	f014 0310 	ands.w	r3, r4, #16
 8006490:	bf18      	it	ne
 8006492:	236a      	movne	r3, #106	@ 0x6a
 8006494:	4650      	mov	r0, sl
 8006496:	9308      	str	r3, [sp, #32]
 8006498:	4659      	mov	r1, fp
 800649a:	2300      	movs	r3, #0
 800649c:	4ea9      	ldr	r6, [pc, #676]	@ (8006744 <_strtod_l+0x854>)
 800649e:	07e2      	lsls	r2, r4, #31
 80064a0:	d504      	bpl.n	80064ac <_strtod_l+0x5bc>
 80064a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064a6:	f7fa f817 	bl	80004d8 <__aeabi_dmul>
 80064aa:	2301      	movs	r3, #1
 80064ac:	1064      	asrs	r4, r4, #1
 80064ae:	f106 0608 	add.w	r6, r6, #8
 80064b2:	d1f4      	bne.n	800649e <_strtod_l+0x5ae>
 80064b4:	b10b      	cbz	r3, 80064ba <_strtod_l+0x5ca>
 80064b6:	4682      	mov	sl, r0
 80064b8:	468b      	mov	fp, r1
 80064ba:	9b08      	ldr	r3, [sp, #32]
 80064bc:	b1b3      	cbz	r3, 80064ec <_strtod_l+0x5fc>
 80064be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80064c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	4659      	mov	r1, fp
 80064ca:	dd0f      	ble.n	80064ec <_strtod_l+0x5fc>
 80064cc:	2b1f      	cmp	r3, #31
 80064ce:	dd57      	ble.n	8006580 <_strtod_l+0x690>
 80064d0:	2b34      	cmp	r3, #52	@ 0x34
 80064d2:	bfd8      	it	le
 80064d4:	f04f 33ff 	movle.w	r3, #4294967295
 80064d8:	f04f 0a00 	mov.w	sl, #0
 80064dc:	bfcf      	iteee	gt
 80064de:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80064e2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80064e6:	4093      	lslle	r3, r2
 80064e8:	ea03 0b01 	andle.w	fp, r3, r1
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	f7fa fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d1a6      	bne.n	800644a <_strtod_l+0x55a>
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	463a      	mov	r2, r7
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006504:	462b      	mov	r3, r5
 8006506:	9805      	ldr	r0, [sp, #20]
 8006508:	f7ff f8d0 	bl	80056ac <__s2b>
 800650c:	900a      	str	r0, [sp, #40]	@ 0x28
 800650e:	2800      	cmp	r0, #0
 8006510:	f43f af05 	beq.w	800631e <_strtod_l+0x42e>
 8006514:	2400      	movs	r4, #0
 8006516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006518:	eba9 0308 	sub.w	r3, r9, r8
 800651c:	2a00      	cmp	r2, #0
 800651e:	bfa8      	it	ge
 8006520:	2300      	movge	r3, #0
 8006522:	46a0      	mov	r8, r4
 8006524:	9312      	str	r3, [sp, #72]	@ 0x48
 8006526:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800652a:	9316      	str	r3, [sp, #88]	@ 0x58
 800652c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800652e:	9805      	ldr	r0, [sp, #20]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	f7ff f813 	bl	800555c <_Balloc>
 8006536:	4681      	mov	r9, r0
 8006538:	2800      	cmp	r0, #0
 800653a:	f43f aef4 	beq.w	8006326 <_strtod_l+0x436>
 800653e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006540:	300c      	adds	r0, #12
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	f103 010c 	add.w	r1, r3, #12
 8006548:	3202      	adds	r2, #2
 800654a:	0092      	lsls	r2, r2, #2
 800654c:	f000 ff3a 	bl	80073c4 <memcpy>
 8006550:	ab1c      	add	r3, sp, #112	@ 0x70
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	4652      	mov	r2, sl
 800655a:	465b      	mov	r3, fp
 800655c:	9805      	ldr	r0, [sp, #20]
 800655e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006562:	f7ff fbd5 	bl	8005d10 <__d2b>
 8006566:	901a      	str	r0, [sp, #104]	@ 0x68
 8006568:	2800      	cmp	r0, #0
 800656a:	f43f aedc 	beq.w	8006326 <_strtod_l+0x436>
 800656e:	2101      	movs	r1, #1
 8006570:	9805      	ldr	r0, [sp, #20]
 8006572:	f7ff f931 	bl	80057d8 <__i2b>
 8006576:	4680      	mov	r8, r0
 8006578:	b948      	cbnz	r0, 800658e <_strtod_l+0x69e>
 800657a:	f04f 0800 	mov.w	r8, #0
 800657e:	e6d2      	b.n	8006326 <_strtod_l+0x436>
 8006580:	f04f 32ff 	mov.w	r2, #4294967295
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	ea03 0a0a 	and.w	sl, r3, sl
 800658c:	e7ae      	b.n	80064ec <_strtod_l+0x5fc>
 800658e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006590:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006592:	2d00      	cmp	r5, #0
 8006594:	bfab      	itete	ge
 8006596:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006598:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800659a:	18ef      	addge	r7, r5, r3
 800659c:	1b5e      	sublt	r6, r3, r5
 800659e:	9b08      	ldr	r3, [sp, #32]
 80065a0:	bfa8      	it	ge
 80065a2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80065a4:	eba5 0503 	sub.w	r5, r5, r3
 80065a8:	4415      	add	r5, r2
 80065aa:	4b67      	ldr	r3, [pc, #412]	@ (8006748 <_strtod_l+0x858>)
 80065ac:	f105 35ff 	add.w	r5, r5, #4294967295
 80065b0:	bfb8      	it	lt
 80065b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80065b4:	429d      	cmp	r5, r3
 80065b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80065ba:	da50      	bge.n	800665e <_strtod_l+0x76e>
 80065bc:	1b5b      	subs	r3, r3, r5
 80065be:	2b1f      	cmp	r3, #31
 80065c0:	f04f 0101 	mov.w	r1, #1
 80065c4:	eba2 0203 	sub.w	r2, r2, r3
 80065c8:	dc3d      	bgt.n	8006646 <_strtod_l+0x756>
 80065ca:	fa01 f303 	lsl.w	r3, r1, r3
 80065ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065d0:	2300      	movs	r3, #0
 80065d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80065d4:	18bd      	adds	r5, r7, r2
 80065d6:	9b08      	ldr	r3, [sp, #32]
 80065d8:	42af      	cmp	r7, r5
 80065da:	4416      	add	r6, r2
 80065dc:	441e      	add	r6, r3
 80065de:	463b      	mov	r3, r7
 80065e0:	bfa8      	it	ge
 80065e2:	462b      	movge	r3, r5
 80065e4:	42b3      	cmp	r3, r6
 80065e6:	bfa8      	it	ge
 80065e8:	4633      	movge	r3, r6
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bfc2      	ittt	gt
 80065ee:	1aed      	subgt	r5, r5, r3
 80065f0:	1af6      	subgt	r6, r6, r3
 80065f2:	1aff      	subgt	r7, r7, r3
 80065f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	dd16      	ble.n	8006628 <_strtod_l+0x738>
 80065fa:	4641      	mov	r1, r8
 80065fc:	461a      	mov	r2, r3
 80065fe:	9805      	ldr	r0, [sp, #20]
 8006600:	f7ff f9a8 	bl	8005954 <__pow5mult>
 8006604:	4680      	mov	r8, r0
 8006606:	2800      	cmp	r0, #0
 8006608:	d0b7      	beq.n	800657a <_strtod_l+0x68a>
 800660a:	4601      	mov	r1, r0
 800660c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800660e:	9805      	ldr	r0, [sp, #20]
 8006610:	f7ff f8f8 	bl	8005804 <__multiply>
 8006614:	900e      	str	r0, [sp, #56]	@ 0x38
 8006616:	2800      	cmp	r0, #0
 8006618:	f43f ae85 	beq.w	8006326 <_strtod_l+0x436>
 800661c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800661e:	9805      	ldr	r0, [sp, #20]
 8006620:	f7fe ffdc 	bl	80055dc <_Bfree>
 8006624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006626:	931a      	str	r3, [sp, #104]	@ 0x68
 8006628:	2d00      	cmp	r5, #0
 800662a:	dc1d      	bgt.n	8006668 <_strtod_l+0x778>
 800662c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	dd23      	ble.n	800667a <_strtod_l+0x78a>
 8006632:	4649      	mov	r1, r9
 8006634:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006636:	9805      	ldr	r0, [sp, #20]
 8006638:	f7ff f98c 	bl	8005954 <__pow5mult>
 800663c:	4681      	mov	r9, r0
 800663e:	b9e0      	cbnz	r0, 800667a <_strtod_l+0x78a>
 8006640:	f04f 0900 	mov.w	r9, #0
 8006644:	e66f      	b.n	8006326 <_strtod_l+0x436>
 8006646:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800664a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800664e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006652:	35e2      	adds	r5, #226	@ 0xe2
 8006654:	fa01 f305 	lsl.w	r3, r1, r5
 8006658:	9310      	str	r3, [sp, #64]	@ 0x40
 800665a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800665c:	e7ba      	b.n	80065d4 <_strtod_l+0x6e4>
 800665e:	2300      	movs	r3, #0
 8006660:	9310      	str	r3, [sp, #64]	@ 0x40
 8006662:	2301      	movs	r3, #1
 8006664:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006666:	e7b5      	b.n	80065d4 <_strtod_l+0x6e4>
 8006668:	462a      	mov	r2, r5
 800666a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800666c:	9805      	ldr	r0, [sp, #20]
 800666e:	f7ff f9cb 	bl	8005a08 <__lshift>
 8006672:	901a      	str	r0, [sp, #104]	@ 0x68
 8006674:	2800      	cmp	r0, #0
 8006676:	d1d9      	bne.n	800662c <_strtod_l+0x73c>
 8006678:	e655      	b.n	8006326 <_strtod_l+0x436>
 800667a:	2e00      	cmp	r6, #0
 800667c:	dd07      	ble.n	800668e <_strtod_l+0x79e>
 800667e:	4649      	mov	r1, r9
 8006680:	4632      	mov	r2, r6
 8006682:	9805      	ldr	r0, [sp, #20]
 8006684:	f7ff f9c0 	bl	8005a08 <__lshift>
 8006688:	4681      	mov	r9, r0
 800668a:	2800      	cmp	r0, #0
 800668c:	d0d8      	beq.n	8006640 <_strtod_l+0x750>
 800668e:	2f00      	cmp	r7, #0
 8006690:	dd08      	ble.n	80066a4 <_strtod_l+0x7b4>
 8006692:	4641      	mov	r1, r8
 8006694:	463a      	mov	r2, r7
 8006696:	9805      	ldr	r0, [sp, #20]
 8006698:	f7ff f9b6 	bl	8005a08 <__lshift>
 800669c:	4680      	mov	r8, r0
 800669e:	2800      	cmp	r0, #0
 80066a0:	f43f ae41 	beq.w	8006326 <_strtod_l+0x436>
 80066a4:	464a      	mov	r2, r9
 80066a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066a8:	9805      	ldr	r0, [sp, #20]
 80066aa:	f7ff fa35 	bl	8005b18 <__mdiff>
 80066ae:	4604      	mov	r4, r0
 80066b0:	2800      	cmp	r0, #0
 80066b2:	f43f ae38 	beq.w	8006326 <_strtod_l+0x436>
 80066b6:	68c3      	ldr	r3, [r0, #12]
 80066b8:	4641      	mov	r1, r8
 80066ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066bc:	2300      	movs	r3, #0
 80066be:	60c3      	str	r3, [r0, #12]
 80066c0:	f7ff fa0e 	bl	8005ae0 <__mcmp>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	da45      	bge.n	8006754 <_strtod_l+0x864>
 80066c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ca:	ea53 030a 	orrs.w	r3, r3, sl
 80066ce:	d16b      	bne.n	80067a8 <_strtod_l+0x8b8>
 80066d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d167      	bne.n	80067a8 <_strtod_l+0x8b8>
 80066d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066dc:	0d1b      	lsrs	r3, r3, #20
 80066de:	051b      	lsls	r3, r3, #20
 80066e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066e4:	d960      	bls.n	80067a8 <_strtod_l+0x8b8>
 80066e6:	6963      	ldr	r3, [r4, #20]
 80066e8:	b913      	cbnz	r3, 80066f0 <_strtod_l+0x800>
 80066ea:	6923      	ldr	r3, [r4, #16]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	dd5b      	ble.n	80067a8 <_strtod_l+0x8b8>
 80066f0:	4621      	mov	r1, r4
 80066f2:	2201      	movs	r2, #1
 80066f4:	9805      	ldr	r0, [sp, #20]
 80066f6:	f7ff f987 	bl	8005a08 <__lshift>
 80066fa:	4641      	mov	r1, r8
 80066fc:	4604      	mov	r4, r0
 80066fe:	f7ff f9ef 	bl	8005ae0 <__mcmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	dd50      	ble.n	80067a8 <_strtod_l+0x8b8>
 8006706:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800670a:	9a08      	ldr	r2, [sp, #32]
 800670c:	0d1b      	lsrs	r3, r3, #20
 800670e:	051b      	lsls	r3, r3, #20
 8006710:	2a00      	cmp	r2, #0
 8006712:	d06a      	beq.n	80067ea <_strtod_l+0x8fa>
 8006714:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006718:	d867      	bhi.n	80067ea <_strtod_l+0x8fa>
 800671a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800671e:	f67f ae98 	bls.w	8006452 <_strtod_l+0x562>
 8006722:	4650      	mov	r0, sl
 8006724:	4659      	mov	r1, fp
 8006726:	4b09      	ldr	r3, [pc, #36]	@ (800674c <_strtod_l+0x85c>)
 8006728:	2200      	movs	r2, #0
 800672a:	f7f9 fed5 	bl	80004d8 <__aeabi_dmul>
 800672e:	4b08      	ldr	r3, [pc, #32]	@ (8006750 <_strtod_l+0x860>)
 8006730:	4682      	mov	sl, r0
 8006732:	400b      	ands	r3, r1
 8006734:	468b      	mov	fp, r1
 8006736:	2b00      	cmp	r3, #0
 8006738:	f47f ae00 	bne.w	800633c <_strtod_l+0x44c>
 800673c:	2322      	movs	r3, #34	@ 0x22
 800673e:	9a05      	ldr	r2, [sp, #20]
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	e5fb      	b.n	800633c <_strtod_l+0x44c>
 8006744:	08008040 	.word	0x08008040
 8006748:	fffffc02 	.word	0xfffffc02
 800674c:	39500000 	.word	0x39500000
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006758:	d165      	bne.n	8006826 <_strtod_l+0x936>
 800675a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800675c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006760:	b35a      	cbz	r2, 80067ba <_strtod_l+0x8ca>
 8006762:	4a99      	ldr	r2, [pc, #612]	@ (80069c8 <_strtod_l+0xad8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d12b      	bne.n	80067c0 <_strtod_l+0x8d0>
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	4651      	mov	r1, sl
 800676c:	b303      	cbz	r3, 80067b0 <_strtod_l+0x8c0>
 800676e:	465a      	mov	r2, fp
 8006770:	4b96      	ldr	r3, [pc, #600]	@ (80069cc <_strtod_l+0xadc>)
 8006772:	4013      	ands	r3, r2
 8006774:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006778:	f04f 32ff 	mov.w	r2, #4294967295
 800677c:	d81b      	bhi.n	80067b6 <_strtod_l+0x8c6>
 800677e:	0d1b      	lsrs	r3, r3, #20
 8006780:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	4299      	cmp	r1, r3
 800678a:	d119      	bne.n	80067c0 <_strtod_l+0x8d0>
 800678c:	4b90      	ldr	r3, [pc, #576]	@ (80069d0 <_strtod_l+0xae0>)
 800678e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006790:	429a      	cmp	r2, r3
 8006792:	d102      	bne.n	800679a <_strtod_l+0x8aa>
 8006794:	3101      	adds	r1, #1
 8006796:	f43f adc6 	beq.w	8006326 <_strtod_l+0x436>
 800679a:	f04f 0a00 	mov.w	sl, #0
 800679e:	4b8b      	ldr	r3, [pc, #556]	@ (80069cc <_strtod_l+0xadc>)
 80067a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067a2:	401a      	ands	r2, r3
 80067a4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80067a8:	9b08      	ldr	r3, [sp, #32]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1b9      	bne.n	8006722 <_strtod_l+0x832>
 80067ae:	e5c5      	b.n	800633c <_strtod_l+0x44c>
 80067b0:	f04f 33ff 	mov.w	r3, #4294967295
 80067b4:	e7e8      	b.n	8006788 <_strtod_l+0x898>
 80067b6:	4613      	mov	r3, r2
 80067b8:	e7e6      	b.n	8006788 <_strtod_l+0x898>
 80067ba:	ea53 030a 	orrs.w	r3, r3, sl
 80067be:	d0a2      	beq.n	8006706 <_strtod_l+0x816>
 80067c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067c2:	b1db      	cbz	r3, 80067fc <_strtod_l+0x90c>
 80067c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067c6:	4213      	tst	r3, r2
 80067c8:	d0ee      	beq.n	80067a8 <_strtod_l+0x8b8>
 80067ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067cc:	4650      	mov	r0, sl
 80067ce:	4659      	mov	r1, fp
 80067d0:	9a08      	ldr	r2, [sp, #32]
 80067d2:	b1bb      	cbz	r3, 8006804 <_strtod_l+0x914>
 80067d4:	f7ff fb68 	bl	8005ea8 <sulp>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e0:	f7f9 fcc4 	bl	800016c <__adddf3>
 80067e4:	4682      	mov	sl, r0
 80067e6:	468b      	mov	fp, r1
 80067e8:	e7de      	b.n	80067a8 <_strtod_l+0x8b8>
 80067ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80067ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067f2:	f04f 3aff 	mov.w	sl, #4294967295
 80067f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067fa:	e7d5      	b.n	80067a8 <_strtod_l+0x8b8>
 80067fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067fe:	ea13 0f0a 	tst.w	r3, sl
 8006802:	e7e1      	b.n	80067c8 <_strtod_l+0x8d8>
 8006804:	f7ff fb50 	bl	8005ea8 <sulp>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006810:	f7f9 fcaa 	bl	8000168 <__aeabi_dsub>
 8006814:	2200      	movs	r2, #0
 8006816:	2300      	movs	r3, #0
 8006818:	4682      	mov	sl, r0
 800681a:	468b      	mov	fp, r1
 800681c:	f7fa f8c4 	bl	80009a8 <__aeabi_dcmpeq>
 8006820:	2800      	cmp	r0, #0
 8006822:	d0c1      	beq.n	80067a8 <_strtod_l+0x8b8>
 8006824:	e615      	b.n	8006452 <_strtod_l+0x562>
 8006826:	4641      	mov	r1, r8
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff fac9 	bl	8005dc0 <__ratio>
 800682e:	2200      	movs	r2, #0
 8006830:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006834:	4606      	mov	r6, r0
 8006836:	460f      	mov	r7, r1
 8006838:	f7fa f8ca 	bl	80009d0 <__aeabi_dcmple>
 800683c:	2800      	cmp	r0, #0
 800683e:	d06d      	beq.n	800691c <_strtod_l+0xa2c>
 8006840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d178      	bne.n	8006938 <_strtod_l+0xa48>
 8006846:	f1ba 0f00 	cmp.w	sl, #0
 800684a:	d156      	bne.n	80068fa <_strtod_l+0xa0a>
 800684c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800684e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006852:	2b00      	cmp	r3, #0
 8006854:	d158      	bne.n	8006908 <_strtod_l+0xa18>
 8006856:	2200      	movs	r2, #0
 8006858:	4630      	mov	r0, r6
 800685a:	4639      	mov	r1, r7
 800685c:	4b5d      	ldr	r3, [pc, #372]	@ (80069d4 <_strtod_l+0xae4>)
 800685e:	f7fa f8ad 	bl	80009bc <__aeabi_dcmplt>
 8006862:	2800      	cmp	r0, #0
 8006864:	d157      	bne.n	8006916 <_strtod_l+0xa26>
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	2200      	movs	r2, #0
 800686c:	4b5a      	ldr	r3, [pc, #360]	@ (80069d8 <_strtod_l+0xae8>)
 800686e:	f7f9 fe33 	bl	80004d8 <__aeabi_dmul>
 8006872:	4606      	mov	r6, r0
 8006874:	460f      	mov	r7, r1
 8006876:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800687a:	9606      	str	r6, [sp, #24]
 800687c:	9307      	str	r3, [sp, #28]
 800687e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006882:	4d52      	ldr	r5, [pc, #328]	@ (80069cc <_strtod_l+0xadc>)
 8006884:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800688a:	401d      	ands	r5, r3
 800688c:	4b53      	ldr	r3, [pc, #332]	@ (80069dc <_strtod_l+0xaec>)
 800688e:	429d      	cmp	r5, r3
 8006890:	f040 80aa 	bne.w	80069e8 <_strtod_l+0xaf8>
 8006894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006896:	4650      	mov	r0, sl
 8006898:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800689c:	4659      	mov	r1, fp
 800689e:	f7ff f9cf 	bl	8005c40 <__ulp>
 80068a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068a6:	f7f9 fe17 	bl	80004d8 <__aeabi_dmul>
 80068aa:	4652      	mov	r2, sl
 80068ac:	465b      	mov	r3, fp
 80068ae:	f7f9 fc5d 	bl	800016c <__adddf3>
 80068b2:	460b      	mov	r3, r1
 80068b4:	4945      	ldr	r1, [pc, #276]	@ (80069cc <_strtod_l+0xadc>)
 80068b6:	4a4a      	ldr	r2, [pc, #296]	@ (80069e0 <_strtod_l+0xaf0>)
 80068b8:	4019      	ands	r1, r3
 80068ba:	4291      	cmp	r1, r2
 80068bc:	4682      	mov	sl, r0
 80068be:	d942      	bls.n	8006946 <_strtod_l+0xa56>
 80068c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068c2:	4b43      	ldr	r3, [pc, #268]	@ (80069d0 <_strtod_l+0xae0>)
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d103      	bne.n	80068d0 <_strtod_l+0x9e0>
 80068c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068ca:	3301      	adds	r3, #1
 80068cc:	f43f ad2b 	beq.w	8006326 <_strtod_l+0x436>
 80068d0:	f04f 3aff 	mov.w	sl, #4294967295
 80068d4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80069d0 <_strtod_l+0xae0>
 80068d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068da:	9805      	ldr	r0, [sp, #20]
 80068dc:	f7fe fe7e 	bl	80055dc <_Bfree>
 80068e0:	4649      	mov	r1, r9
 80068e2:	9805      	ldr	r0, [sp, #20]
 80068e4:	f7fe fe7a 	bl	80055dc <_Bfree>
 80068e8:	4641      	mov	r1, r8
 80068ea:	9805      	ldr	r0, [sp, #20]
 80068ec:	f7fe fe76 	bl	80055dc <_Bfree>
 80068f0:	4621      	mov	r1, r4
 80068f2:	9805      	ldr	r0, [sp, #20]
 80068f4:	f7fe fe72 	bl	80055dc <_Bfree>
 80068f8:	e618      	b.n	800652c <_strtod_l+0x63c>
 80068fa:	f1ba 0f01 	cmp.w	sl, #1
 80068fe:	d103      	bne.n	8006908 <_strtod_l+0xa18>
 8006900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006902:	2b00      	cmp	r3, #0
 8006904:	f43f ada5 	beq.w	8006452 <_strtod_l+0x562>
 8006908:	2200      	movs	r2, #0
 800690a:	4b36      	ldr	r3, [pc, #216]	@ (80069e4 <_strtod_l+0xaf4>)
 800690c:	2600      	movs	r6, #0
 800690e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006912:	4f30      	ldr	r7, [pc, #192]	@ (80069d4 <_strtod_l+0xae4>)
 8006914:	e7b3      	b.n	800687e <_strtod_l+0x98e>
 8006916:	2600      	movs	r6, #0
 8006918:	4f2f      	ldr	r7, [pc, #188]	@ (80069d8 <_strtod_l+0xae8>)
 800691a:	e7ac      	b.n	8006876 <_strtod_l+0x986>
 800691c:	4630      	mov	r0, r6
 800691e:	4639      	mov	r1, r7
 8006920:	4b2d      	ldr	r3, [pc, #180]	@ (80069d8 <_strtod_l+0xae8>)
 8006922:	2200      	movs	r2, #0
 8006924:	f7f9 fdd8 	bl	80004d8 <__aeabi_dmul>
 8006928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800692a:	4606      	mov	r6, r0
 800692c:	460f      	mov	r7, r1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0a1      	beq.n	8006876 <_strtod_l+0x986>
 8006932:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006936:	e7a2      	b.n	800687e <_strtod_l+0x98e>
 8006938:	2200      	movs	r2, #0
 800693a:	4b26      	ldr	r3, [pc, #152]	@ (80069d4 <_strtod_l+0xae4>)
 800693c:	4616      	mov	r6, r2
 800693e:	461f      	mov	r7, r3
 8006940:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006944:	e79b      	b.n	800687e <_strtod_l+0x98e>
 8006946:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800694a:	9b08      	ldr	r3, [sp, #32]
 800694c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1c1      	bne.n	80068d8 <_strtod_l+0x9e8>
 8006954:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006958:	0d1b      	lsrs	r3, r3, #20
 800695a:	051b      	lsls	r3, r3, #20
 800695c:	429d      	cmp	r5, r3
 800695e:	d1bb      	bne.n	80068d8 <_strtod_l+0x9e8>
 8006960:	4630      	mov	r0, r6
 8006962:	4639      	mov	r1, r7
 8006964:	f7fa fb5e 	bl	8001024 <__aeabi_d2lz>
 8006968:	f7f9 fd88 	bl	800047c <__aeabi_l2d>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	f7f9 fbf8 	bl	8000168 <__aeabi_dsub>
 8006978:	460b      	mov	r3, r1
 800697a:	4602      	mov	r2, r0
 800697c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006980:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006986:	ea46 060a 	orr.w	r6, r6, sl
 800698a:	431e      	orrs	r6, r3
 800698c:	d069      	beq.n	8006a62 <_strtod_l+0xb72>
 800698e:	a30a      	add	r3, pc, #40	@ (adr r3, 80069b8 <_strtod_l+0xac8>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7fa f812 	bl	80009bc <__aeabi_dcmplt>
 8006998:	2800      	cmp	r0, #0
 800699a:	f47f accf 	bne.w	800633c <_strtod_l+0x44c>
 800699e:	a308      	add	r3, pc, #32	@ (adr r3, 80069c0 <_strtod_l+0xad0>)
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069a8:	f7fa f826 	bl	80009f8 <__aeabi_dcmpgt>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d093      	beq.n	80068d8 <_strtod_l+0x9e8>
 80069b0:	e4c4      	b.n	800633c <_strtod_l+0x44c>
 80069b2:	bf00      	nop
 80069b4:	f3af 8000 	nop.w
 80069b8:	94a03595 	.word	0x94a03595
 80069bc:	3fdfffff 	.word	0x3fdfffff
 80069c0:	35afe535 	.word	0x35afe535
 80069c4:	3fe00000 	.word	0x3fe00000
 80069c8:	000fffff 	.word	0x000fffff
 80069cc:	7ff00000 	.word	0x7ff00000
 80069d0:	7fefffff 	.word	0x7fefffff
 80069d4:	3ff00000 	.word	0x3ff00000
 80069d8:	3fe00000 	.word	0x3fe00000
 80069dc:	7fe00000 	.word	0x7fe00000
 80069e0:	7c9fffff 	.word	0x7c9fffff
 80069e4:	bff00000 	.word	0xbff00000
 80069e8:	9b08      	ldr	r3, [sp, #32]
 80069ea:	b323      	cbz	r3, 8006a36 <_strtod_l+0xb46>
 80069ec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80069f0:	d821      	bhi.n	8006a36 <_strtod_l+0xb46>
 80069f2:	a327      	add	r3, pc, #156	@ (adr r3, 8006a90 <_strtod_l+0xba0>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	4630      	mov	r0, r6
 80069fa:	4639      	mov	r1, r7
 80069fc:	f7f9 ffe8 	bl	80009d0 <__aeabi_dcmple>
 8006a00:	b1a0      	cbz	r0, 8006a2c <_strtod_l+0xb3c>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7fa f83f 	bl	8000a88 <__aeabi_d2uiz>
 8006a0a:	2801      	cmp	r0, #1
 8006a0c:	bf38      	it	cc
 8006a0e:	2001      	movcc	r0, #1
 8006a10:	f7f9 fce8 	bl	80003e4 <__aeabi_ui2d>
 8006a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	b9fb      	cbnz	r3, 8006a5c <_strtod_l+0xb6c>
 8006a1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a20:	9014      	str	r0, [sp, #80]	@ 0x50
 8006a22:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006a28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a2e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006a32:	1b5b      	subs	r3, r3, r5
 8006a34:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006a3e:	f7ff f8ff 	bl	8005c40 <__ulp>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4650      	mov	r0, sl
 8006a48:	4659      	mov	r1, fp
 8006a4a:	f7f9 fd45 	bl	80004d8 <__aeabi_dmul>
 8006a4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a52:	f7f9 fb8b 	bl	800016c <__adddf3>
 8006a56:	4682      	mov	sl, r0
 8006a58:	468b      	mov	fp, r1
 8006a5a:	e776      	b.n	800694a <_strtod_l+0xa5a>
 8006a5c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006a60:	e7e0      	b.n	8006a24 <_strtod_l+0xb34>
 8006a62:	a30d      	add	r3, pc, #52	@ (adr r3, 8006a98 <_strtod_l+0xba8>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7f9 ffa8 	bl	80009bc <__aeabi_dcmplt>
 8006a6c:	e79e      	b.n	80069ac <_strtod_l+0xabc>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a74:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	f7ff ba77 	b.w	8005f6a <_strtod_l+0x7a>
 8006a7c:	2a65      	cmp	r2, #101	@ 0x65
 8006a7e:	f43f ab6e 	beq.w	800615e <_strtod_l+0x26e>
 8006a82:	2a45      	cmp	r2, #69	@ 0x45
 8006a84:	f43f ab6b 	beq.w	800615e <_strtod_l+0x26e>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f7ff bba6 	b.w	80061da <_strtod_l+0x2ea>
 8006a8e:	bf00      	nop
 8006a90:	ffc00000 	.word	0xffc00000
 8006a94:	41dfffff 	.word	0x41dfffff
 8006a98:	94a03595 	.word	0x94a03595
 8006a9c:	3fcfffff 	.word	0x3fcfffff

08006aa0 <_strtod_r>:
 8006aa0:	4b01      	ldr	r3, [pc, #4]	@ (8006aa8 <_strtod_r+0x8>)
 8006aa2:	f7ff ba25 	b.w	8005ef0 <_strtod_l>
 8006aa6:	bf00      	nop
 8006aa8:	20000068 	.word	0x20000068

08006aac <_strtol_l.constprop.0>:
 8006aac:	2b24      	cmp	r3, #36	@ 0x24
 8006aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab2:	4686      	mov	lr, r0
 8006ab4:	4690      	mov	r8, r2
 8006ab6:	d801      	bhi.n	8006abc <_strtol_l.constprop.0+0x10>
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d106      	bne.n	8006aca <_strtol_l.constprop.0+0x1e>
 8006abc:	f7fd fdbe 	bl	800463c <__errno>
 8006ac0:	2316      	movs	r3, #22
 8006ac2:	6003      	str	r3, [r0, #0]
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aca:	460d      	mov	r5, r1
 8006acc:	4833      	ldr	r0, [pc, #204]	@ (8006b9c <_strtol_l.constprop.0+0xf0>)
 8006ace:	462a      	mov	r2, r5
 8006ad0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ad4:	5d06      	ldrb	r6, [r0, r4]
 8006ad6:	f016 0608 	ands.w	r6, r6, #8
 8006ada:	d1f8      	bne.n	8006ace <_strtol_l.constprop.0+0x22>
 8006adc:	2c2d      	cmp	r4, #45	@ 0x2d
 8006ade:	d12d      	bne.n	8006b3c <_strtol_l.constprop.0+0x90>
 8006ae0:	2601      	movs	r6, #1
 8006ae2:	782c      	ldrb	r4, [r5, #0]
 8006ae4:	1c95      	adds	r5, r2, #2
 8006ae6:	f033 0210 	bics.w	r2, r3, #16
 8006aea:	d109      	bne.n	8006b00 <_strtol_l.constprop.0+0x54>
 8006aec:	2c30      	cmp	r4, #48	@ 0x30
 8006aee:	d12a      	bne.n	8006b46 <_strtol_l.constprop.0+0x9a>
 8006af0:	782a      	ldrb	r2, [r5, #0]
 8006af2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006af6:	2a58      	cmp	r2, #88	@ 0x58
 8006af8:	d125      	bne.n	8006b46 <_strtol_l.constprop.0+0x9a>
 8006afa:	2310      	movs	r3, #16
 8006afc:	786c      	ldrb	r4, [r5, #1]
 8006afe:	3502      	adds	r5, #2
 8006b00:	2200      	movs	r2, #0
 8006b02:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b06:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b0a:	fbbc f9f3 	udiv	r9, ip, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b18:	2f09      	cmp	r7, #9
 8006b1a:	d81b      	bhi.n	8006b54 <_strtol_l.constprop.0+0xa8>
 8006b1c:	463c      	mov	r4, r7
 8006b1e:	42a3      	cmp	r3, r4
 8006b20:	dd27      	ble.n	8006b72 <_strtol_l.constprop.0+0xc6>
 8006b22:	1c57      	adds	r7, r2, #1
 8006b24:	d007      	beq.n	8006b36 <_strtol_l.constprop.0+0x8a>
 8006b26:	4581      	cmp	r9, r0
 8006b28:	d320      	bcc.n	8006b6c <_strtol_l.constprop.0+0xc0>
 8006b2a:	d101      	bne.n	8006b30 <_strtol_l.constprop.0+0x84>
 8006b2c:	45a2      	cmp	sl, r4
 8006b2e:	db1d      	blt.n	8006b6c <_strtol_l.constprop.0+0xc0>
 8006b30:	2201      	movs	r2, #1
 8006b32:	fb00 4003 	mla	r0, r0, r3, r4
 8006b36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b3a:	e7eb      	b.n	8006b14 <_strtol_l.constprop.0+0x68>
 8006b3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8006b3e:	bf04      	itt	eq
 8006b40:	782c      	ldrbeq	r4, [r5, #0]
 8006b42:	1c95      	addeq	r5, r2, #2
 8006b44:	e7cf      	b.n	8006ae6 <_strtol_l.constprop.0+0x3a>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1da      	bne.n	8006b00 <_strtol_l.constprop.0+0x54>
 8006b4a:	2c30      	cmp	r4, #48	@ 0x30
 8006b4c:	bf0c      	ite	eq
 8006b4e:	2308      	moveq	r3, #8
 8006b50:	230a      	movne	r3, #10
 8006b52:	e7d5      	b.n	8006b00 <_strtol_l.constprop.0+0x54>
 8006b54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006b58:	2f19      	cmp	r7, #25
 8006b5a:	d801      	bhi.n	8006b60 <_strtol_l.constprop.0+0xb4>
 8006b5c:	3c37      	subs	r4, #55	@ 0x37
 8006b5e:	e7de      	b.n	8006b1e <_strtol_l.constprop.0+0x72>
 8006b60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006b64:	2f19      	cmp	r7, #25
 8006b66:	d804      	bhi.n	8006b72 <_strtol_l.constprop.0+0xc6>
 8006b68:	3c57      	subs	r4, #87	@ 0x57
 8006b6a:	e7d8      	b.n	8006b1e <_strtol_l.constprop.0+0x72>
 8006b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b70:	e7e1      	b.n	8006b36 <_strtol_l.constprop.0+0x8a>
 8006b72:	1c53      	adds	r3, r2, #1
 8006b74:	d108      	bne.n	8006b88 <_strtol_l.constprop.0+0xdc>
 8006b76:	2322      	movs	r3, #34	@ 0x22
 8006b78:	4660      	mov	r0, ip
 8006b7a:	f8ce 3000 	str.w	r3, [lr]
 8006b7e:	f1b8 0f00 	cmp.w	r8, #0
 8006b82:	d0a0      	beq.n	8006ac6 <_strtol_l.constprop.0+0x1a>
 8006b84:	1e69      	subs	r1, r5, #1
 8006b86:	e006      	b.n	8006b96 <_strtol_l.constprop.0+0xea>
 8006b88:	b106      	cbz	r6, 8006b8c <_strtol_l.constprop.0+0xe0>
 8006b8a:	4240      	negs	r0, r0
 8006b8c:	f1b8 0f00 	cmp.w	r8, #0
 8006b90:	d099      	beq.n	8006ac6 <_strtol_l.constprop.0+0x1a>
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	d1f6      	bne.n	8006b84 <_strtol_l.constprop.0+0xd8>
 8006b96:	f8c8 1000 	str.w	r1, [r8]
 8006b9a:	e794      	b.n	8006ac6 <_strtol_l.constprop.0+0x1a>
 8006b9c:	08008069 	.word	0x08008069

08006ba0 <_strtol_r>:
 8006ba0:	f7ff bf84 	b.w	8006aac <_strtol_l.constprop.0>

08006ba4 <__ssputs_r>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	461f      	mov	r7, r3
 8006baa:	688e      	ldr	r6, [r1, #8]
 8006bac:	4682      	mov	sl, r0
 8006bae:	42be      	cmp	r6, r7
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	4690      	mov	r8, r2
 8006bb4:	680b      	ldr	r3, [r1, #0]
 8006bb6:	d82d      	bhi.n	8006c14 <__ssputs_r+0x70>
 8006bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bc0:	d026      	beq.n	8006c10 <__ssputs_r+0x6c>
 8006bc2:	6965      	ldr	r5, [r4, #20]
 8006bc4:	6909      	ldr	r1, [r1, #16]
 8006bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bca:	eba3 0901 	sub.w	r9, r3, r1
 8006bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bd2:	1c7b      	adds	r3, r7, #1
 8006bd4:	444b      	add	r3, r9
 8006bd6:	106d      	asrs	r5, r5, #1
 8006bd8:	429d      	cmp	r5, r3
 8006bda:	bf38      	it	cc
 8006bdc:	461d      	movcc	r5, r3
 8006bde:	0553      	lsls	r3, r2, #21
 8006be0:	d527      	bpl.n	8006c32 <__ssputs_r+0x8e>
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7fe fc2e 	bl	8005444 <_malloc_r>
 8006be8:	4606      	mov	r6, r0
 8006bea:	b360      	cbz	r0, 8006c46 <__ssputs_r+0xa2>
 8006bec:	464a      	mov	r2, r9
 8006bee:	6921      	ldr	r1, [r4, #16]
 8006bf0:	f000 fbe8 	bl	80073c4 <memcpy>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	6126      	str	r6, [r4, #16]
 8006c02:	444e      	add	r6, r9
 8006c04:	6026      	str	r6, [r4, #0]
 8006c06:	463e      	mov	r6, r7
 8006c08:	6165      	str	r5, [r4, #20]
 8006c0a:	eba5 0509 	sub.w	r5, r5, r9
 8006c0e:	60a5      	str	r5, [r4, #8]
 8006c10:	42be      	cmp	r6, r7
 8006c12:	d900      	bls.n	8006c16 <__ssputs_r+0x72>
 8006c14:	463e      	mov	r6, r7
 8006c16:	4632      	mov	r2, r6
 8006c18:	4641      	mov	r1, r8
 8006c1a:	6820      	ldr	r0, [r4, #0]
 8006c1c:	f000 fb96 	bl	800734c <memmove>
 8006c20:	2000      	movs	r0, #0
 8006c22:	68a3      	ldr	r3, [r4, #8]
 8006c24:	1b9b      	subs	r3, r3, r6
 8006c26:	60a3      	str	r3, [r4, #8]
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	4433      	add	r3, r6
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c32:	462a      	mov	r2, r5
 8006c34:	f000 ff57 	bl	8007ae6 <_realloc_r>
 8006c38:	4606      	mov	r6, r0
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d1e0      	bne.n	8006c00 <__ssputs_r+0x5c>
 8006c3e:	4650      	mov	r0, sl
 8006c40:	6921      	ldr	r1, [r4, #16]
 8006c42:	f7fe fb8d 	bl	8005360 <_free_r>
 8006c46:	230c      	movs	r3, #12
 8006c48:	f8ca 3000 	str.w	r3, [sl]
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c56:	81a3      	strh	r3, [r4, #12]
 8006c58:	e7e9      	b.n	8006c2e <__ssputs_r+0x8a>
	...

08006c5c <_svfiprintf_r>:
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	4698      	mov	r8, r3
 8006c62:	898b      	ldrh	r3, [r1, #12]
 8006c64:	4607      	mov	r7, r0
 8006c66:	061b      	lsls	r3, r3, #24
 8006c68:	460d      	mov	r5, r1
 8006c6a:	4614      	mov	r4, r2
 8006c6c:	b09d      	sub	sp, #116	@ 0x74
 8006c6e:	d510      	bpl.n	8006c92 <_svfiprintf_r+0x36>
 8006c70:	690b      	ldr	r3, [r1, #16]
 8006c72:	b973      	cbnz	r3, 8006c92 <_svfiprintf_r+0x36>
 8006c74:	2140      	movs	r1, #64	@ 0x40
 8006c76:	f7fe fbe5 	bl	8005444 <_malloc_r>
 8006c7a:	6028      	str	r0, [r5, #0]
 8006c7c:	6128      	str	r0, [r5, #16]
 8006c7e:	b930      	cbnz	r0, 8006c8e <_svfiprintf_r+0x32>
 8006c80:	230c      	movs	r3, #12
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	b01d      	add	sp, #116	@ 0x74
 8006c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8e:	2340      	movs	r3, #64	@ 0x40
 8006c90:	616b      	str	r3, [r5, #20]
 8006c92:	2300      	movs	r3, #0
 8006c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c96:	2320      	movs	r3, #32
 8006c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c9c:	2330      	movs	r3, #48	@ 0x30
 8006c9e:	f04f 0901 	mov.w	r9, #1
 8006ca2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006e40 <_svfiprintf_r+0x1e4>
 8006caa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006cae:	4623      	mov	r3, r4
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb6:	b10a      	cbz	r2, 8006cbc <_svfiprintf_r+0x60>
 8006cb8:	2a25      	cmp	r2, #37	@ 0x25
 8006cba:	d1f9      	bne.n	8006cb0 <_svfiprintf_r+0x54>
 8006cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc0:	d00b      	beq.n	8006cda <_svfiprintf_r+0x7e>
 8006cc2:	465b      	mov	r3, fp
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	4629      	mov	r1, r5
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7ff ff6b 	bl	8006ba4 <__ssputs_r>
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f000 80a7 	beq.w	8006e22 <_svfiprintf_r+0x1c6>
 8006cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cd6:	445a      	add	r2, fp
 8006cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cda:	f89a 3000 	ldrb.w	r3, [sl]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 809f 	beq.w	8006e22 <_svfiprintf_r+0x1c6>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cee:	f10a 0a01 	add.w	sl, sl, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	9307      	str	r3, [sp, #28]
 8006cf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cfc:	4654      	mov	r4, sl
 8006cfe:	2205      	movs	r2, #5
 8006d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d04:	484e      	ldr	r0, [pc, #312]	@ (8006e40 <_svfiprintf_r+0x1e4>)
 8006d06:	f7fd fcc6 	bl	8004696 <memchr>
 8006d0a:	9a04      	ldr	r2, [sp, #16]
 8006d0c:	b9d8      	cbnz	r0, 8006d46 <_svfiprintf_r+0xea>
 8006d0e:	06d0      	lsls	r0, r2, #27
 8006d10:	bf44      	itt	mi
 8006d12:	2320      	movmi	r3, #32
 8006d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d18:	0711      	lsls	r1, r2, #28
 8006d1a:	bf44      	itt	mi
 8006d1c:	232b      	movmi	r3, #43	@ 0x2b
 8006d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d22:	f89a 3000 	ldrb.w	r3, [sl]
 8006d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d28:	d015      	beq.n	8006d56 <_svfiprintf_r+0xfa>
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f04f 0c0a 	mov.w	ip, #10
 8006d32:	9a07      	ldr	r2, [sp, #28]
 8006d34:	4621      	mov	r1, r4
 8006d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d3a:	3b30      	subs	r3, #48	@ 0x30
 8006d3c:	2b09      	cmp	r3, #9
 8006d3e:	d94b      	bls.n	8006dd8 <_svfiprintf_r+0x17c>
 8006d40:	b1b0      	cbz	r0, 8006d70 <_svfiprintf_r+0x114>
 8006d42:	9207      	str	r2, [sp, #28]
 8006d44:	e014      	b.n	8006d70 <_svfiprintf_r+0x114>
 8006d46:	eba0 0308 	sub.w	r3, r0, r8
 8006d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	46a2      	mov	sl, r4
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	e7d2      	b.n	8006cfc <_svfiprintf_r+0xa0>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	1d19      	adds	r1, r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	9103      	str	r1, [sp, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfbb      	ittet	lt
 8006d62:	425b      	neglt	r3, r3
 8006d64:	f042 0202 	orrlt.w	r2, r2, #2
 8006d68:	9307      	strge	r3, [sp, #28]
 8006d6a:	9307      	strlt	r3, [sp, #28]
 8006d6c:	bfb8      	it	lt
 8006d6e:	9204      	strlt	r2, [sp, #16]
 8006d70:	7823      	ldrb	r3, [r4, #0]
 8006d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d74:	d10a      	bne.n	8006d8c <_svfiprintf_r+0x130>
 8006d76:	7863      	ldrb	r3, [r4, #1]
 8006d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d7a:	d132      	bne.n	8006de2 <_svfiprintf_r+0x186>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	3402      	adds	r4, #2
 8006d80:	1d1a      	adds	r2, r3, #4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	9203      	str	r2, [sp, #12]
 8006d86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d8a:	9305      	str	r3, [sp, #20]
 8006d8c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006e44 <_svfiprintf_r+0x1e8>
 8006d90:	2203      	movs	r2, #3
 8006d92:	4650      	mov	r0, sl
 8006d94:	7821      	ldrb	r1, [r4, #0]
 8006d96:	f7fd fc7e 	bl	8004696 <memchr>
 8006d9a:	b138      	cbz	r0, 8006dac <_svfiprintf_r+0x150>
 8006d9c:	2240      	movs	r2, #64	@ 0x40
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	eba0 000a 	sub.w	r0, r0, sl
 8006da4:	4082      	lsls	r2, r0
 8006da6:	4313      	orrs	r3, r2
 8006da8:	3401      	adds	r4, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db0:	2206      	movs	r2, #6
 8006db2:	4825      	ldr	r0, [pc, #148]	@ (8006e48 <_svfiprintf_r+0x1ec>)
 8006db4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006db8:	f7fd fc6d 	bl	8004696 <memchr>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d036      	beq.n	8006e2e <_svfiprintf_r+0x1d2>
 8006dc0:	4b22      	ldr	r3, [pc, #136]	@ (8006e4c <_svfiprintf_r+0x1f0>)
 8006dc2:	bb1b      	cbnz	r3, 8006e0c <_svfiprintf_r+0x1b0>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	3307      	adds	r3, #7
 8006dc8:	f023 0307 	bic.w	r3, r3, #7
 8006dcc:	3308      	adds	r3, #8
 8006dce:	9303      	str	r3, [sp, #12]
 8006dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd2:	4433      	add	r3, r6
 8006dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dd6:	e76a      	b.n	8006cae <_svfiprintf_r+0x52>
 8006dd8:	460c      	mov	r4, r1
 8006dda:	2001      	movs	r0, #1
 8006ddc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de0:	e7a8      	b.n	8006d34 <_svfiprintf_r+0xd8>
 8006de2:	2300      	movs	r3, #0
 8006de4:	f04f 0c0a 	mov.w	ip, #10
 8006de8:	4619      	mov	r1, r3
 8006dea:	3401      	adds	r4, #1
 8006dec:	9305      	str	r3, [sp, #20]
 8006dee:	4620      	mov	r0, r4
 8006df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df4:	3a30      	subs	r2, #48	@ 0x30
 8006df6:	2a09      	cmp	r2, #9
 8006df8:	d903      	bls.n	8006e02 <_svfiprintf_r+0x1a6>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0c6      	beq.n	8006d8c <_svfiprintf_r+0x130>
 8006dfe:	9105      	str	r1, [sp, #20]
 8006e00:	e7c4      	b.n	8006d8c <_svfiprintf_r+0x130>
 8006e02:	4604      	mov	r4, r0
 8006e04:	2301      	movs	r3, #1
 8006e06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e0a:	e7f0      	b.n	8006dee <_svfiprintf_r+0x192>
 8006e0c:	ab03      	add	r3, sp, #12
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	462a      	mov	r2, r5
 8006e12:	4638      	mov	r0, r7
 8006e14:	4b0e      	ldr	r3, [pc, #56]	@ (8006e50 <_svfiprintf_r+0x1f4>)
 8006e16:	a904      	add	r1, sp, #16
 8006e18:	f7fc fcb8 	bl	800378c <_printf_float>
 8006e1c:	1c42      	adds	r2, r0, #1
 8006e1e:	4606      	mov	r6, r0
 8006e20:	d1d6      	bne.n	8006dd0 <_svfiprintf_r+0x174>
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	065b      	lsls	r3, r3, #25
 8006e26:	f53f af2d 	bmi.w	8006c84 <_svfiprintf_r+0x28>
 8006e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e2c:	e72c      	b.n	8006c88 <_svfiprintf_r+0x2c>
 8006e2e:	ab03      	add	r3, sp, #12
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	462a      	mov	r2, r5
 8006e34:	4638      	mov	r0, r7
 8006e36:	4b06      	ldr	r3, [pc, #24]	@ (8006e50 <_svfiprintf_r+0x1f4>)
 8006e38:	a904      	add	r1, sp, #16
 8006e3a:	f7fc ff45 	bl	8003cc8 <_printf_i>
 8006e3e:	e7ed      	b.n	8006e1c <_svfiprintf_r+0x1c0>
 8006e40:	08008169 	.word	0x08008169
 8006e44:	0800816f 	.word	0x0800816f
 8006e48:	08008173 	.word	0x08008173
 8006e4c:	0800378d 	.word	0x0800378d
 8006e50:	08006ba5 	.word	0x08006ba5

08006e54 <__sfputc_r>:
 8006e54:	6893      	ldr	r3, [r2, #8]
 8006e56:	b410      	push	{r4}
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	6093      	str	r3, [r2, #8]
 8006e5e:	da07      	bge.n	8006e70 <__sfputc_r+0x1c>
 8006e60:	6994      	ldr	r4, [r2, #24]
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	db01      	blt.n	8006e6a <__sfputc_r+0x16>
 8006e66:	290a      	cmp	r1, #10
 8006e68:	d102      	bne.n	8006e70 <__sfputc_r+0x1c>
 8006e6a:	bc10      	pop	{r4}
 8006e6c:	f000 b9da 	b.w	8007224 <__swbuf_r>
 8006e70:	6813      	ldr	r3, [r2, #0]
 8006e72:	1c58      	adds	r0, r3, #1
 8006e74:	6010      	str	r0, [r2, #0]
 8006e76:	7019      	strb	r1, [r3, #0]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	bc10      	pop	{r4}
 8006e7c:	4770      	bx	lr

08006e7e <__sfputs_r>:
 8006e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e80:	4606      	mov	r6, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	18d5      	adds	r5, r2, r3
 8006e88:	42ac      	cmp	r4, r5
 8006e8a:	d101      	bne.n	8006e90 <__sfputs_r+0x12>
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e007      	b.n	8006ea0 <__sfputs_r+0x22>
 8006e90:	463a      	mov	r2, r7
 8006e92:	4630      	mov	r0, r6
 8006e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e98:	f7ff ffdc 	bl	8006e54 <__sfputc_r>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d1f3      	bne.n	8006e88 <__sfputs_r+0xa>
 8006ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ea4 <_vfiprintf_r>:
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	460d      	mov	r5, r1
 8006eaa:	4614      	mov	r4, r2
 8006eac:	4698      	mov	r8, r3
 8006eae:	4606      	mov	r6, r0
 8006eb0:	b09d      	sub	sp, #116	@ 0x74
 8006eb2:	b118      	cbz	r0, 8006ebc <_vfiprintf_r+0x18>
 8006eb4:	6a03      	ldr	r3, [r0, #32]
 8006eb6:	b90b      	cbnz	r3, 8006ebc <_vfiprintf_r+0x18>
 8006eb8:	f7fd fac2 	bl	8004440 <__sinit>
 8006ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ebe:	07d9      	lsls	r1, r3, #31
 8006ec0:	d405      	bmi.n	8006ece <_vfiprintf_r+0x2a>
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	059a      	lsls	r2, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_vfiprintf_r+0x2a>
 8006ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006eca:	f7fd fbe2 	bl	8004692 <__retarget_lock_acquire_recursive>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	071b      	lsls	r3, r3, #28
 8006ed2:	d501      	bpl.n	8006ed8 <_vfiprintf_r+0x34>
 8006ed4:	692b      	ldr	r3, [r5, #16]
 8006ed6:	b99b      	cbnz	r3, 8006f00 <_vfiprintf_r+0x5c>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 f9e0 	bl	80072a0 <__swsetup_r>
 8006ee0:	b170      	cbz	r0, 8006f00 <_vfiprintf_r+0x5c>
 8006ee2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ee4:	07dc      	lsls	r4, r3, #31
 8006ee6:	d504      	bpl.n	8006ef2 <_vfiprintf_r+0x4e>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b01d      	add	sp, #116	@ 0x74
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	89ab      	ldrh	r3, [r5, #12]
 8006ef4:	0598      	lsls	r0, r3, #22
 8006ef6:	d4f7      	bmi.n	8006ee8 <_vfiprintf_r+0x44>
 8006ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006efa:	f7fd fbcb 	bl	8004694 <__retarget_lock_release_recursive>
 8006efe:	e7f3      	b.n	8006ee8 <_vfiprintf_r+0x44>
 8006f00:	2300      	movs	r3, #0
 8006f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f04:	2320      	movs	r3, #32
 8006f06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f0a:	2330      	movs	r3, #48	@ 0x30
 8006f0c:	f04f 0901 	mov.w	r9, #1
 8006f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80070c0 <_vfiprintf_r+0x21c>
 8006f18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	469a      	mov	sl, r3
 8006f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f24:	b10a      	cbz	r2, 8006f2a <_vfiprintf_r+0x86>
 8006f26:	2a25      	cmp	r2, #37	@ 0x25
 8006f28:	d1f9      	bne.n	8006f1e <_vfiprintf_r+0x7a>
 8006f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f2e:	d00b      	beq.n	8006f48 <_vfiprintf_r+0xa4>
 8006f30:	465b      	mov	r3, fp
 8006f32:	4622      	mov	r2, r4
 8006f34:	4629      	mov	r1, r5
 8006f36:	4630      	mov	r0, r6
 8006f38:	f7ff ffa1 	bl	8006e7e <__sfputs_r>
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f000 80a7 	beq.w	8007090 <_vfiprintf_r+0x1ec>
 8006f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f44:	445a      	add	r2, fp
 8006f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f48:	f89a 3000 	ldrb.w	r3, [sl]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 809f 	beq.w	8007090 <_vfiprintf_r+0x1ec>
 8006f52:	2300      	movs	r3, #0
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295
 8006f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f5c:	f10a 0a01 	add.w	sl, sl, #1
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	9307      	str	r3, [sp, #28]
 8006f64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f68:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f6a:	4654      	mov	r4, sl
 8006f6c:	2205      	movs	r2, #5
 8006f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f72:	4853      	ldr	r0, [pc, #332]	@ (80070c0 <_vfiprintf_r+0x21c>)
 8006f74:	f7fd fb8f 	bl	8004696 <memchr>
 8006f78:	9a04      	ldr	r2, [sp, #16]
 8006f7a:	b9d8      	cbnz	r0, 8006fb4 <_vfiprintf_r+0x110>
 8006f7c:	06d1      	lsls	r1, r2, #27
 8006f7e:	bf44      	itt	mi
 8006f80:	2320      	movmi	r3, #32
 8006f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f86:	0713      	lsls	r3, r2, #28
 8006f88:	bf44      	itt	mi
 8006f8a:	232b      	movmi	r3, #43	@ 0x2b
 8006f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f90:	f89a 3000 	ldrb.w	r3, [sl]
 8006f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f96:	d015      	beq.n	8006fc4 <_vfiprintf_r+0x120>
 8006f98:	4654      	mov	r4, sl
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f04f 0c0a 	mov.w	ip, #10
 8006fa0:	9a07      	ldr	r2, [sp, #28]
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa8:	3b30      	subs	r3, #48	@ 0x30
 8006faa:	2b09      	cmp	r3, #9
 8006fac:	d94b      	bls.n	8007046 <_vfiprintf_r+0x1a2>
 8006fae:	b1b0      	cbz	r0, 8006fde <_vfiprintf_r+0x13a>
 8006fb0:	9207      	str	r2, [sp, #28]
 8006fb2:	e014      	b.n	8006fde <_vfiprintf_r+0x13a>
 8006fb4:	eba0 0308 	sub.w	r3, r0, r8
 8006fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	46a2      	mov	sl, r4
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	e7d2      	b.n	8006f6a <_vfiprintf_r+0xc6>
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	1d19      	adds	r1, r3, #4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	9103      	str	r1, [sp, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bfbb      	ittet	lt
 8006fd0:	425b      	neglt	r3, r3
 8006fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8006fd6:	9307      	strge	r3, [sp, #28]
 8006fd8:	9307      	strlt	r3, [sp, #28]
 8006fda:	bfb8      	it	lt
 8006fdc:	9204      	strlt	r2, [sp, #16]
 8006fde:	7823      	ldrb	r3, [r4, #0]
 8006fe0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fe2:	d10a      	bne.n	8006ffa <_vfiprintf_r+0x156>
 8006fe4:	7863      	ldrb	r3, [r4, #1]
 8006fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe8:	d132      	bne.n	8007050 <_vfiprintf_r+0x1ac>
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	3402      	adds	r4, #2
 8006fee:	1d1a      	adds	r2, r3, #4
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	9203      	str	r2, [sp, #12]
 8006ff4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ff8:	9305      	str	r3, [sp, #20]
 8006ffa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80070c4 <_vfiprintf_r+0x220>
 8006ffe:	2203      	movs	r2, #3
 8007000:	4650      	mov	r0, sl
 8007002:	7821      	ldrb	r1, [r4, #0]
 8007004:	f7fd fb47 	bl	8004696 <memchr>
 8007008:	b138      	cbz	r0, 800701a <_vfiprintf_r+0x176>
 800700a:	2240      	movs	r2, #64	@ 0x40
 800700c:	9b04      	ldr	r3, [sp, #16]
 800700e:	eba0 000a 	sub.w	r0, r0, sl
 8007012:	4082      	lsls	r2, r0
 8007014:	4313      	orrs	r3, r2
 8007016:	3401      	adds	r4, #1
 8007018:	9304      	str	r3, [sp, #16]
 800701a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701e:	2206      	movs	r2, #6
 8007020:	4829      	ldr	r0, [pc, #164]	@ (80070c8 <_vfiprintf_r+0x224>)
 8007022:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007026:	f7fd fb36 	bl	8004696 <memchr>
 800702a:	2800      	cmp	r0, #0
 800702c:	d03f      	beq.n	80070ae <_vfiprintf_r+0x20a>
 800702e:	4b27      	ldr	r3, [pc, #156]	@ (80070cc <_vfiprintf_r+0x228>)
 8007030:	bb1b      	cbnz	r3, 800707a <_vfiprintf_r+0x1d6>
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	3307      	adds	r3, #7
 8007036:	f023 0307 	bic.w	r3, r3, #7
 800703a:	3308      	adds	r3, #8
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007040:	443b      	add	r3, r7
 8007042:	9309      	str	r3, [sp, #36]	@ 0x24
 8007044:	e76a      	b.n	8006f1c <_vfiprintf_r+0x78>
 8007046:	460c      	mov	r4, r1
 8007048:	2001      	movs	r0, #1
 800704a:	fb0c 3202 	mla	r2, ip, r2, r3
 800704e:	e7a8      	b.n	8006fa2 <_vfiprintf_r+0xfe>
 8007050:	2300      	movs	r3, #0
 8007052:	f04f 0c0a 	mov.w	ip, #10
 8007056:	4619      	mov	r1, r3
 8007058:	3401      	adds	r4, #1
 800705a:	9305      	str	r3, [sp, #20]
 800705c:	4620      	mov	r0, r4
 800705e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007062:	3a30      	subs	r2, #48	@ 0x30
 8007064:	2a09      	cmp	r2, #9
 8007066:	d903      	bls.n	8007070 <_vfiprintf_r+0x1cc>
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0c6      	beq.n	8006ffa <_vfiprintf_r+0x156>
 800706c:	9105      	str	r1, [sp, #20]
 800706e:	e7c4      	b.n	8006ffa <_vfiprintf_r+0x156>
 8007070:	4604      	mov	r4, r0
 8007072:	2301      	movs	r3, #1
 8007074:	fb0c 2101 	mla	r1, ip, r1, r2
 8007078:	e7f0      	b.n	800705c <_vfiprintf_r+0x1b8>
 800707a:	ab03      	add	r3, sp, #12
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	462a      	mov	r2, r5
 8007080:	4630      	mov	r0, r6
 8007082:	4b13      	ldr	r3, [pc, #76]	@ (80070d0 <_vfiprintf_r+0x22c>)
 8007084:	a904      	add	r1, sp, #16
 8007086:	f7fc fb81 	bl	800378c <_printf_float>
 800708a:	4607      	mov	r7, r0
 800708c:	1c78      	adds	r0, r7, #1
 800708e:	d1d6      	bne.n	800703e <_vfiprintf_r+0x19a>
 8007090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007092:	07d9      	lsls	r1, r3, #31
 8007094:	d405      	bmi.n	80070a2 <_vfiprintf_r+0x1fe>
 8007096:	89ab      	ldrh	r3, [r5, #12]
 8007098:	059a      	lsls	r2, r3, #22
 800709a:	d402      	bmi.n	80070a2 <_vfiprintf_r+0x1fe>
 800709c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800709e:	f7fd faf9 	bl	8004694 <__retarget_lock_release_recursive>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	065b      	lsls	r3, r3, #25
 80070a6:	f53f af1f 	bmi.w	8006ee8 <_vfiprintf_r+0x44>
 80070aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070ac:	e71e      	b.n	8006eec <_vfiprintf_r+0x48>
 80070ae:	ab03      	add	r3, sp, #12
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	462a      	mov	r2, r5
 80070b4:	4630      	mov	r0, r6
 80070b6:	4b06      	ldr	r3, [pc, #24]	@ (80070d0 <_vfiprintf_r+0x22c>)
 80070b8:	a904      	add	r1, sp, #16
 80070ba:	f7fc fe05 	bl	8003cc8 <_printf_i>
 80070be:	e7e4      	b.n	800708a <_vfiprintf_r+0x1e6>
 80070c0:	08008169 	.word	0x08008169
 80070c4:	0800816f 	.word	0x0800816f
 80070c8:	08008173 	.word	0x08008173
 80070cc:	0800378d 	.word	0x0800378d
 80070d0:	08006e7f 	.word	0x08006e7f

080070d4 <__sflush_r>:
 80070d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	0716      	lsls	r6, r2, #28
 80070dc:	4605      	mov	r5, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	d454      	bmi.n	800718c <__sflush_r+0xb8>
 80070e2:	684b      	ldr	r3, [r1, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	dc02      	bgt.n	80070ee <__sflush_r+0x1a>
 80070e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	dd48      	ble.n	8007180 <__sflush_r+0xac>
 80070ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	d045      	beq.n	8007180 <__sflush_r+0xac>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070fa:	682f      	ldr	r7, [r5, #0]
 80070fc:	6a21      	ldr	r1, [r4, #32]
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	d030      	beq.n	8007164 <__sflush_r+0x90>
 8007102:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	0759      	lsls	r1, r3, #29
 8007108:	d505      	bpl.n	8007116 <__sflush_r+0x42>
 800710a:	6863      	ldr	r3, [r4, #4]
 800710c:	1ad2      	subs	r2, r2, r3
 800710e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007110:	b10b      	cbz	r3, 8007116 <__sflush_r+0x42>
 8007112:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007114:	1ad2      	subs	r2, r2, r3
 8007116:	2300      	movs	r3, #0
 8007118:	4628      	mov	r0, r5
 800711a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800711c:	6a21      	ldr	r1, [r4, #32]
 800711e:	47b0      	blx	r6
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	d106      	bne.n	8007134 <__sflush_r+0x60>
 8007126:	6829      	ldr	r1, [r5, #0]
 8007128:	291d      	cmp	r1, #29
 800712a:	d82b      	bhi.n	8007184 <__sflush_r+0xb0>
 800712c:	4a28      	ldr	r2, [pc, #160]	@ (80071d0 <__sflush_r+0xfc>)
 800712e:	410a      	asrs	r2, r1
 8007130:	07d6      	lsls	r6, r2, #31
 8007132:	d427      	bmi.n	8007184 <__sflush_r+0xb0>
 8007134:	2200      	movs	r2, #0
 8007136:	6062      	str	r2, [r4, #4]
 8007138:	6922      	ldr	r2, [r4, #16]
 800713a:	04d9      	lsls	r1, r3, #19
 800713c:	6022      	str	r2, [r4, #0]
 800713e:	d504      	bpl.n	800714a <__sflush_r+0x76>
 8007140:	1c42      	adds	r2, r0, #1
 8007142:	d101      	bne.n	8007148 <__sflush_r+0x74>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b903      	cbnz	r3, 800714a <__sflush_r+0x76>
 8007148:	6560      	str	r0, [r4, #84]	@ 0x54
 800714a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800714c:	602f      	str	r7, [r5, #0]
 800714e:	b1b9      	cbz	r1, 8007180 <__sflush_r+0xac>
 8007150:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007154:	4299      	cmp	r1, r3
 8007156:	d002      	beq.n	800715e <__sflush_r+0x8a>
 8007158:	4628      	mov	r0, r5
 800715a:	f7fe f901 	bl	8005360 <_free_r>
 800715e:	2300      	movs	r3, #0
 8007160:	6363      	str	r3, [r4, #52]	@ 0x34
 8007162:	e00d      	b.n	8007180 <__sflush_r+0xac>
 8007164:	2301      	movs	r3, #1
 8007166:	4628      	mov	r0, r5
 8007168:	47b0      	blx	r6
 800716a:	4602      	mov	r2, r0
 800716c:	1c50      	adds	r0, r2, #1
 800716e:	d1c9      	bne.n	8007104 <__sflush_r+0x30>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0c6      	beq.n	8007104 <__sflush_r+0x30>
 8007176:	2b1d      	cmp	r3, #29
 8007178:	d001      	beq.n	800717e <__sflush_r+0xaa>
 800717a:	2b16      	cmp	r3, #22
 800717c:	d11d      	bne.n	80071ba <__sflush_r+0xe6>
 800717e:	602f      	str	r7, [r5, #0]
 8007180:	2000      	movs	r0, #0
 8007182:	e021      	b.n	80071c8 <__sflush_r+0xf4>
 8007184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007188:	b21b      	sxth	r3, r3
 800718a:	e01a      	b.n	80071c2 <__sflush_r+0xee>
 800718c:	690f      	ldr	r7, [r1, #16]
 800718e:	2f00      	cmp	r7, #0
 8007190:	d0f6      	beq.n	8007180 <__sflush_r+0xac>
 8007192:	0793      	lsls	r3, r2, #30
 8007194:	bf18      	it	ne
 8007196:	2300      	movne	r3, #0
 8007198:	680e      	ldr	r6, [r1, #0]
 800719a:	bf08      	it	eq
 800719c:	694b      	ldreq	r3, [r1, #20]
 800719e:	1bf6      	subs	r6, r6, r7
 80071a0:	600f      	str	r7, [r1, #0]
 80071a2:	608b      	str	r3, [r1, #8]
 80071a4:	2e00      	cmp	r6, #0
 80071a6:	ddeb      	ble.n	8007180 <__sflush_r+0xac>
 80071a8:	4633      	mov	r3, r6
 80071aa:	463a      	mov	r2, r7
 80071ac:	4628      	mov	r0, r5
 80071ae:	6a21      	ldr	r1, [r4, #32]
 80071b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80071b4:	47e0      	blx	ip
 80071b6:	2800      	cmp	r0, #0
 80071b8:	dc07      	bgt.n	80071ca <__sflush_r+0xf6>
 80071ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071c2:	f04f 30ff 	mov.w	r0, #4294967295
 80071c6:	81a3      	strh	r3, [r4, #12]
 80071c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ca:	4407      	add	r7, r0
 80071cc:	1a36      	subs	r6, r6, r0
 80071ce:	e7e9      	b.n	80071a4 <__sflush_r+0xd0>
 80071d0:	dfbffffe 	.word	0xdfbffffe

080071d4 <_fflush_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	690b      	ldr	r3, [r1, #16]
 80071d8:	4605      	mov	r5, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	b913      	cbnz	r3, 80071e4 <_fflush_r+0x10>
 80071de:	2500      	movs	r5, #0
 80071e0:	4628      	mov	r0, r5
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	b118      	cbz	r0, 80071ee <_fflush_r+0x1a>
 80071e6:	6a03      	ldr	r3, [r0, #32]
 80071e8:	b90b      	cbnz	r3, 80071ee <_fflush_r+0x1a>
 80071ea:	f7fd f929 	bl	8004440 <__sinit>
 80071ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0f3      	beq.n	80071de <_fflush_r+0xa>
 80071f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071f8:	07d0      	lsls	r0, r2, #31
 80071fa:	d404      	bmi.n	8007206 <_fflush_r+0x32>
 80071fc:	0599      	lsls	r1, r3, #22
 80071fe:	d402      	bmi.n	8007206 <_fflush_r+0x32>
 8007200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007202:	f7fd fa46 	bl	8004692 <__retarget_lock_acquire_recursive>
 8007206:	4628      	mov	r0, r5
 8007208:	4621      	mov	r1, r4
 800720a:	f7ff ff63 	bl	80070d4 <__sflush_r>
 800720e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007210:	4605      	mov	r5, r0
 8007212:	07da      	lsls	r2, r3, #31
 8007214:	d4e4      	bmi.n	80071e0 <_fflush_r+0xc>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	059b      	lsls	r3, r3, #22
 800721a:	d4e1      	bmi.n	80071e0 <_fflush_r+0xc>
 800721c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800721e:	f7fd fa39 	bl	8004694 <__retarget_lock_release_recursive>
 8007222:	e7dd      	b.n	80071e0 <_fflush_r+0xc>

08007224 <__swbuf_r>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	460e      	mov	r6, r1
 8007228:	4614      	mov	r4, r2
 800722a:	4605      	mov	r5, r0
 800722c:	b118      	cbz	r0, 8007236 <__swbuf_r+0x12>
 800722e:	6a03      	ldr	r3, [r0, #32]
 8007230:	b90b      	cbnz	r3, 8007236 <__swbuf_r+0x12>
 8007232:	f7fd f905 	bl	8004440 <__sinit>
 8007236:	69a3      	ldr	r3, [r4, #24]
 8007238:	60a3      	str	r3, [r4, #8]
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	071a      	lsls	r2, r3, #28
 800723e:	d501      	bpl.n	8007244 <__swbuf_r+0x20>
 8007240:	6923      	ldr	r3, [r4, #16]
 8007242:	b943      	cbnz	r3, 8007256 <__swbuf_r+0x32>
 8007244:	4621      	mov	r1, r4
 8007246:	4628      	mov	r0, r5
 8007248:	f000 f82a 	bl	80072a0 <__swsetup_r>
 800724c:	b118      	cbz	r0, 8007256 <__swbuf_r+0x32>
 800724e:	f04f 37ff 	mov.w	r7, #4294967295
 8007252:	4638      	mov	r0, r7
 8007254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	6922      	ldr	r2, [r4, #16]
 800725a:	b2f6      	uxtb	r6, r6
 800725c:	1a98      	subs	r0, r3, r2
 800725e:	6963      	ldr	r3, [r4, #20]
 8007260:	4637      	mov	r7, r6
 8007262:	4283      	cmp	r3, r0
 8007264:	dc05      	bgt.n	8007272 <__swbuf_r+0x4e>
 8007266:	4621      	mov	r1, r4
 8007268:	4628      	mov	r0, r5
 800726a:	f7ff ffb3 	bl	80071d4 <_fflush_r>
 800726e:	2800      	cmp	r0, #0
 8007270:	d1ed      	bne.n	800724e <__swbuf_r+0x2a>
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	3b01      	subs	r3, #1
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	6022      	str	r2, [r4, #0]
 800727e:	701e      	strb	r6, [r3, #0]
 8007280:	6962      	ldr	r2, [r4, #20]
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	429a      	cmp	r2, r3
 8007286:	d004      	beq.n	8007292 <__swbuf_r+0x6e>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	07db      	lsls	r3, r3, #31
 800728c:	d5e1      	bpl.n	8007252 <__swbuf_r+0x2e>
 800728e:	2e0a      	cmp	r6, #10
 8007290:	d1df      	bne.n	8007252 <__swbuf_r+0x2e>
 8007292:	4621      	mov	r1, r4
 8007294:	4628      	mov	r0, r5
 8007296:	f7ff ff9d 	bl	80071d4 <_fflush_r>
 800729a:	2800      	cmp	r0, #0
 800729c:	d0d9      	beq.n	8007252 <__swbuf_r+0x2e>
 800729e:	e7d6      	b.n	800724e <__swbuf_r+0x2a>

080072a0 <__swsetup_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4b29      	ldr	r3, [pc, #164]	@ (8007348 <__swsetup_r+0xa8>)
 80072a4:	4605      	mov	r5, r0
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	460c      	mov	r4, r1
 80072aa:	b118      	cbz	r0, 80072b4 <__swsetup_r+0x14>
 80072ac:	6a03      	ldr	r3, [r0, #32]
 80072ae:	b90b      	cbnz	r3, 80072b4 <__swsetup_r+0x14>
 80072b0:	f7fd f8c6 	bl	8004440 <__sinit>
 80072b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b8:	0719      	lsls	r1, r3, #28
 80072ba:	d422      	bmi.n	8007302 <__swsetup_r+0x62>
 80072bc:	06da      	lsls	r2, r3, #27
 80072be:	d407      	bmi.n	80072d0 <__swsetup_r+0x30>
 80072c0:	2209      	movs	r2, #9
 80072c2:	602a      	str	r2, [r5, #0]
 80072c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	81a3      	strh	r3, [r4, #12]
 80072ce:	e033      	b.n	8007338 <__swsetup_r+0x98>
 80072d0:	0758      	lsls	r0, r3, #29
 80072d2:	d512      	bpl.n	80072fa <__swsetup_r+0x5a>
 80072d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072d6:	b141      	cbz	r1, 80072ea <__swsetup_r+0x4a>
 80072d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <__swsetup_r+0x46>
 80072e0:	4628      	mov	r0, r5
 80072e2:	f7fe f83d 	bl	8005360 <_free_r>
 80072e6:	2300      	movs	r3, #0
 80072e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072f0:	81a3      	strh	r3, [r4, #12]
 80072f2:	2300      	movs	r3, #0
 80072f4:	6063      	str	r3, [r4, #4]
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f043 0308 	orr.w	r3, r3, #8
 8007300:	81a3      	strh	r3, [r4, #12]
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	b94b      	cbnz	r3, 800731a <__swsetup_r+0x7a>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800730c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007310:	d003      	beq.n	800731a <__swsetup_r+0x7a>
 8007312:	4621      	mov	r1, r4
 8007314:	4628      	mov	r0, r5
 8007316:	f000 fc58 	bl	8007bca <__smakebuf_r>
 800731a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800731e:	f013 0201 	ands.w	r2, r3, #1
 8007322:	d00a      	beq.n	800733a <__swsetup_r+0x9a>
 8007324:	2200      	movs	r2, #0
 8007326:	60a2      	str	r2, [r4, #8]
 8007328:	6962      	ldr	r2, [r4, #20]
 800732a:	4252      	negs	r2, r2
 800732c:	61a2      	str	r2, [r4, #24]
 800732e:	6922      	ldr	r2, [r4, #16]
 8007330:	b942      	cbnz	r2, 8007344 <__swsetup_r+0xa4>
 8007332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007336:	d1c5      	bne.n	80072c4 <__swsetup_r+0x24>
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	0799      	lsls	r1, r3, #30
 800733c:	bf58      	it	pl
 800733e:	6962      	ldrpl	r2, [r4, #20]
 8007340:	60a2      	str	r2, [r4, #8]
 8007342:	e7f4      	b.n	800732e <__swsetup_r+0x8e>
 8007344:	2000      	movs	r0, #0
 8007346:	e7f7      	b.n	8007338 <__swsetup_r+0x98>
 8007348:	20000018 	.word	0x20000018

0800734c <memmove>:
 800734c:	4288      	cmp	r0, r1
 800734e:	b510      	push	{r4, lr}
 8007350:	eb01 0402 	add.w	r4, r1, r2
 8007354:	d902      	bls.n	800735c <memmove+0x10>
 8007356:	4284      	cmp	r4, r0
 8007358:	4623      	mov	r3, r4
 800735a:	d807      	bhi.n	800736c <memmove+0x20>
 800735c:	1e43      	subs	r3, r0, #1
 800735e:	42a1      	cmp	r1, r4
 8007360:	d008      	beq.n	8007374 <memmove+0x28>
 8007362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800736a:	e7f8      	b.n	800735e <memmove+0x12>
 800736c:	4601      	mov	r1, r0
 800736e:	4402      	add	r2, r0
 8007370:	428a      	cmp	r2, r1
 8007372:	d100      	bne.n	8007376 <memmove+0x2a>
 8007374:	bd10      	pop	{r4, pc}
 8007376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800737a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800737e:	e7f7      	b.n	8007370 <memmove+0x24>

08007380 <strncmp>:
 8007380:	b510      	push	{r4, lr}
 8007382:	b16a      	cbz	r2, 80073a0 <strncmp+0x20>
 8007384:	3901      	subs	r1, #1
 8007386:	1884      	adds	r4, r0, r2
 8007388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800738c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007390:	429a      	cmp	r2, r3
 8007392:	d103      	bne.n	800739c <strncmp+0x1c>
 8007394:	42a0      	cmp	r0, r4
 8007396:	d001      	beq.n	800739c <strncmp+0x1c>
 8007398:	2a00      	cmp	r2, #0
 800739a:	d1f5      	bne.n	8007388 <strncmp+0x8>
 800739c:	1ad0      	subs	r0, r2, r3
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	4610      	mov	r0, r2
 80073a2:	e7fc      	b.n	800739e <strncmp+0x1e>

080073a4 <_sbrk_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	2300      	movs	r3, #0
 80073a8:	4d05      	ldr	r5, [pc, #20]	@ (80073c0 <_sbrk_r+0x1c>)
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7fa fa10 	bl	80017d4 <_sbrk>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_sbrk_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_sbrk_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	2000038c 	.word	0x2000038c

080073c4 <memcpy>:
 80073c4:	440a      	add	r2, r1
 80073c6:	4291      	cmp	r1, r2
 80073c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073cc:	d100      	bne.n	80073d0 <memcpy+0xc>
 80073ce:	4770      	bx	lr
 80073d0:	b510      	push	{r4, lr}
 80073d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d6:	4291      	cmp	r1, r2
 80073d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073dc:	d1f9      	bne.n	80073d2 <memcpy+0xe>
 80073de:	bd10      	pop	{r4, pc}

080073e0 <nan>:
 80073e0:	2000      	movs	r0, #0
 80073e2:	4901      	ldr	r1, [pc, #4]	@ (80073e8 <nan+0x8>)
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	7ff80000 	.word	0x7ff80000

080073ec <__assert_func>:
 80073ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ee:	4614      	mov	r4, r2
 80073f0:	461a      	mov	r2, r3
 80073f2:	4b09      	ldr	r3, [pc, #36]	@ (8007418 <__assert_func+0x2c>)
 80073f4:	4605      	mov	r5, r0
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68d8      	ldr	r0, [r3, #12]
 80073fa:	b954      	cbnz	r4, 8007412 <__assert_func+0x26>
 80073fc:	4b07      	ldr	r3, [pc, #28]	@ (800741c <__assert_func+0x30>)
 80073fe:	461c      	mov	r4, r3
 8007400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007404:	9100      	str	r1, [sp, #0]
 8007406:	462b      	mov	r3, r5
 8007408:	4905      	ldr	r1, [pc, #20]	@ (8007420 <__assert_func+0x34>)
 800740a:	f000 fba7 	bl	8007b5c <fiprintf>
 800740e:	f000 fc3b 	bl	8007c88 <abort>
 8007412:	4b04      	ldr	r3, [pc, #16]	@ (8007424 <__assert_func+0x38>)
 8007414:	e7f4      	b.n	8007400 <__assert_func+0x14>
 8007416:	bf00      	nop
 8007418:	20000018 	.word	0x20000018
 800741c:	080081bd 	.word	0x080081bd
 8007420:	0800818f 	.word	0x0800818f
 8007424:	08008182 	.word	0x08008182

08007428 <_calloc_r>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	fba1 5402 	umull	r5, r4, r1, r2
 800742e:	b93c      	cbnz	r4, 8007440 <_calloc_r+0x18>
 8007430:	4629      	mov	r1, r5
 8007432:	f7fe f807 	bl	8005444 <_malloc_r>
 8007436:	4606      	mov	r6, r0
 8007438:	b928      	cbnz	r0, 8007446 <_calloc_r+0x1e>
 800743a:	2600      	movs	r6, #0
 800743c:	4630      	mov	r0, r6
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	220c      	movs	r2, #12
 8007442:	6002      	str	r2, [r0, #0]
 8007444:	e7f9      	b.n	800743a <_calloc_r+0x12>
 8007446:	462a      	mov	r2, r5
 8007448:	4621      	mov	r1, r4
 800744a:	f7fd f8a4 	bl	8004596 <memset>
 800744e:	e7f5      	b.n	800743c <_calloc_r+0x14>

08007450 <rshift>:
 8007450:	6903      	ldr	r3, [r0, #16]
 8007452:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800745a:	f100 0414 	add.w	r4, r0, #20
 800745e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007462:	dd46      	ble.n	80074f2 <rshift+0xa2>
 8007464:	f011 011f 	ands.w	r1, r1, #31
 8007468:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800746c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007470:	d10c      	bne.n	800748c <rshift+0x3c>
 8007472:	4629      	mov	r1, r5
 8007474:	f100 0710 	add.w	r7, r0, #16
 8007478:	42b1      	cmp	r1, r6
 800747a:	d335      	bcc.n	80074e8 <rshift+0x98>
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	1eea      	subs	r2, r5, #3
 8007482:	4296      	cmp	r6, r2
 8007484:	bf38      	it	cc
 8007486:	2300      	movcc	r3, #0
 8007488:	4423      	add	r3, r4
 800748a:	e015      	b.n	80074b8 <rshift+0x68>
 800748c:	46a1      	mov	r9, r4
 800748e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007492:	f1c1 0820 	rsb	r8, r1, #32
 8007496:	40cf      	lsrs	r7, r1
 8007498:	f105 0e04 	add.w	lr, r5, #4
 800749c:	4576      	cmp	r6, lr
 800749e:	46f4      	mov	ip, lr
 80074a0:	d816      	bhi.n	80074d0 <rshift+0x80>
 80074a2:	1a9a      	subs	r2, r3, r2
 80074a4:	0092      	lsls	r2, r2, #2
 80074a6:	3a04      	subs	r2, #4
 80074a8:	3501      	adds	r5, #1
 80074aa:	42ae      	cmp	r6, r5
 80074ac:	bf38      	it	cc
 80074ae:	2200      	movcc	r2, #0
 80074b0:	18a3      	adds	r3, r4, r2
 80074b2:	50a7      	str	r7, [r4, r2]
 80074b4:	b107      	cbz	r7, 80074b8 <rshift+0x68>
 80074b6:	3304      	adds	r3, #4
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	eba3 0204 	sub.w	r2, r3, r4
 80074be:	bf08      	it	eq
 80074c0:	2300      	moveq	r3, #0
 80074c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80074c6:	6102      	str	r2, [r0, #16]
 80074c8:	bf08      	it	eq
 80074ca:	6143      	streq	r3, [r0, #20]
 80074cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d0:	f8dc c000 	ldr.w	ip, [ip]
 80074d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80074d8:	ea4c 0707 	orr.w	r7, ip, r7
 80074dc:	f849 7b04 	str.w	r7, [r9], #4
 80074e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074e4:	40cf      	lsrs	r7, r1
 80074e6:	e7d9      	b.n	800749c <rshift+0x4c>
 80074e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80074ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80074f0:	e7c2      	b.n	8007478 <rshift+0x28>
 80074f2:	4623      	mov	r3, r4
 80074f4:	e7e0      	b.n	80074b8 <rshift+0x68>

080074f6 <__hexdig_fun>:
 80074f6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d802      	bhi.n	8007504 <__hexdig_fun+0xe>
 80074fe:	3820      	subs	r0, #32
 8007500:	b2c0      	uxtb	r0, r0
 8007502:	4770      	bx	lr
 8007504:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007508:	2b05      	cmp	r3, #5
 800750a:	d801      	bhi.n	8007510 <__hexdig_fun+0x1a>
 800750c:	3847      	subs	r0, #71	@ 0x47
 800750e:	e7f7      	b.n	8007500 <__hexdig_fun+0xa>
 8007510:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007514:	2b05      	cmp	r3, #5
 8007516:	d801      	bhi.n	800751c <__hexdig_fun+0x26>
 8007518:	3827      	subs	r0, #39	@ 0x27
 800751a:	e7f1      	b.n	8007500 <__hexdig_fun+0xa>
 800751c:	2000      	movs	r0, #0
 800751e:	4770      	bx	lr

08007520 <__gethex>:
 8007520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007524:	468a      	mov	sl, r1
 8007526:	4690      	mov	r8, r2
 8007528:	b085      	sub	sp, #20
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	680b      	ldr	r3, [r1, #0]
 800752e:	9001      	str	r0, [sp, #4]
 8007530:	1c9c      	adds	r4, r3, #2
 8007532:	46a1      	mov	r9, r4
 8007534:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007538:	2830      	cmp	r0, #48	@ 0x30
 800753a:	d0fa      	beq.n	8007532 <__gethex+0x12>
 800753c:	eba9 0303 	sub.w	r3, r9, r3
 8007540:	f1a3 0b02 	sub.w	fp, r3, #2
 8007544:	f7ff ffd7 	bl	80074f6 <__hexdig_fun>
 8007548:	4605      	mov	r5, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d168      	bne.n	8007620 <__gethex+0x100>
 800754e:	2201      	movs	r2, #1
 8007550:	4648      	mov	r0, r9
 8007552:	499f      	ldr	r1, [pc, #636]	@ (80077d0 <__gethex+0x2b0>)
 8007554:	f7ff ff14 	bl	8007380 <strncmp>
 8007558:	4607      	mov	r7, r0
 800755a:	2800      	cmp	r0, #0
 800755c:	d167      	bne.n	800762e <__gethex+0x10e>
 800755e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007562:	4626      	mov	r6, r4
 8007564:	f7ff ffc7 	bl	80074f6 <__hexdig_fun>
 8007568:	2800      	cmp	r0, #0
 800756a:	d062      	beq.n	8007632 <__gethex+0x112>
 800756c:	4623      	mov	r3, r4
 800756e:	7818      	ldrb	r0, [r3, #0]
 8007570:	4699      	mov	r9, r3
 8007572:	2830      	cmp	r0, #48	@ 0x30
 8007574:	f103 0301 	add.w	r3, r3, #1
 8007578:	d0f9      	beq.n	800756e <__gethex+0x4e>
 800757a:	f7ff ffbc 	bl	80074f6 <__hexdig_fun>
 800757e:	fab0 f580 	clz	r5, r0
 8007582:	f04f 0b01 	mov.w	fp, #1
 8007586:	096d      	lsrs	r5, r5, #5
 8007588:	464a      	mov	r2, r9
 800758a:	4616      	mov	r6, r2
 800758c:	7830      	ldrb	r0, [r6, #0]
 800758e:	3201      	adds	r2, #1
 8007590:	f7ff ffb1 	bl	80074f6 <__hexdig_fun>
 8007594:	2800      	cmp	r0, #0
 8007596:	d1f8      	bne.n	800758a <__gethex+0x6a>
 8007598:	2201      	movs	r2, #1
 800759a:	4630      	mov	r0, r6
 800759c:	498c      	ldr	r1, [pc, #560]	@ (80077d0 <__gethex+0x2b0>)
 800759e:	f7ff feef 	bl	8007380 <strncmp>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d13f      	bne.n	8007626 <__gethex+0x106>
 80075a6:	b944      	cbnz	r4, 80075ba <__gethex+0x9a>
 80075a8:	1c74      	adds	r4, r6, #1
 80075aa:	4622      	mov	r2, r4
 80075ac:	4616      	mov	r6, r2
 80075ae:	7830      	ldrb	r0, [r6, #0]
 80075b0:	3201      	adds	r2, #1
 80075b2:	f7ff ffa0 	bl	80074f6 <__hexdig_fun>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d1f8      	bne.n	80075ac <__gethex+0x8c>
 80075ba:	1ba4      	subs	r4, r4, r6
 80075bc:	00a7      	lsls	r7, r4, #2
 80075be:	7833      	ldrb	r3, [r6, #0]
 80075c0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80075c4:	2b50      	cmp	r3, #80	@ 0x50
 80075c6:	d13e      	bne.n	8007646 <__gethex+0x126>
 80075c8:	7873      	ldrb	r3, [r6, #1]
 80075ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80075cc:	d033      	beq.n	8007636 <__gethex+0x116>
 80075ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80075d0:	d034      	beq.n	800763c <__gethex+0x11c>
 80075d2:	2400      	movs	r4, #0
 80075d4:	1c71      	adds	r1, r6, #1
 80075d6:	7808      	ldrb	r0, [r1, #0]
 80075d8:	f7ff ff8d 	bl	80074f6 <__hexdig_fun>
 80075dc:	1e43      	subs	r3, r0, #1
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b18      	cmp	r3, #24
 80075e2:	d830      	bhi.n	8007646 <__gethex+0x126>
 80075e4:	f1a0 0210 	sub.w	r2, r0, #16
 80075e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075ec:	f7ff ff83 	bl	80074f6 <__hexdig_fun>
 80075f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80075f4:	fa5f fc8c 	uxtb.w	ip, ip
 80075f8:	f1bc 0f18 	cmp.w	ip, #24
 80075fc:	f04f 030a 	mov.w	r3, #10
 8007600:	d91e      	bls.n	8007640 <__gethex+0x120>
 8007602:	b104      	cbz	r4, 8007606 <__gethex+0xe6>
 8007604:	4252      	negs	r2, r2
 8007606:	4417      	add	r7, r2
 8007608:	f8ca 1000 	str.w	r1, [sl]
 800760c:	b1ed      	cbz	r5, 800764a <__gethex+0x12a>
 800760e:	f1bb 0f00 	cmp.w	fp, #0
 8007612:	bf0c      	ite	eq
 8007614:	2506      	moveq	r5, #6
 8007616:	2500      	movne	r5, #0
 8007618:	4628      	mov	r0, r5
 800761a:	b005      	add	sp, #20
 800761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007620:	2500      	movs	r5, #0
 8007622:	462c      	mov	r4, r5
 8007624:	e7b0      	b.n	8007588 <__gethex+0x68>
 8007626:	2c00      	cmp	r4, #0
 8007628:	d1c7      	bne.n	80075ba <__gethex+0x9a>
 800762a:	4627      	mov	r7, r4
 800762c:	e7c7      	b.n	80075be <__gethex+0x9e>
 800762e:	464e      	mov	r6, r9
 8007630:	462f      	mov	r7, r5
 8007632:	2501      	movs	r5, #1
 8007634:	e7c3      	b.n	80075be <__gethex+0x9e>
 8007636:	2400      	movs	r4, #0
 8007638:	1cb1      	adds	r1, r6, #2
 800763a:	e7cc      	b.n	80075d6 <__gethex+0xb6>
 800763c:	2401      	movs	r4, #1
 800763e:	e7fb      	b.n	8007638 <__gethex+0x118>
 8007640:	fb03 0002 	mla	r0, r3, r2, r0
 8007644:	e7ce      	b.n	80075e4 <__gethex+0xc4>
 8007646:	4631      	mov	r1, r6
 8007648:	e7de      	b.n	8007608 <__gethex+0xe8>
 800764a:	4629      	mov	r1, r5
 800764c:	eba6 0309 	sub.w	r3, r6, r9
 8007650:	3b01      	subs	r3, #1
 8007652:	2b07      	cmp	r3, #7
 8007654:	dc0a      	bgt.n	800766c <__gethex+0x14c>
 8007656:	9801      	ldr	r0, [sp, #4]
 8007658:	f7fd ff80 	bl	800555c <_Balloc>
 800765c:	4604      	mov	r4, r0
 800765e:	b940      	cbnz	r0, 8007672 <__gethex+0x152>
 8007660:	4602      	mov	r2, r0
 8007662:	21e4      	movs	r1, #228	@ 0xe4
 8007664:	4b5b      	ldr	r3, [pc, #364]	@ (80077d4 <__gethex+0x2b4>)
 8007666:	485c      	ldr	r0, [pc, #368]	@ (80077d8 <__gethex+0x2b8>)
 8007668:	f7ff fec0 	bl	80073ec <__assert_func>
 800766c:	3101      	adds	r1, #1
 800766e:	105b      	asrs	r3, r3, #1
 8007670:	e7ef      	b.n	8007652 <__gethex+0x132>
 8007672:	2300      	movs	r3, #0
 8007674:	f100 0a14 	add.w	sl, r0, #20
 8007678:	4655      	mov	r5, sl
 800767a:	469b      	mov	fp, r3
 800767c:	45b1      	cmp	r9, r6
 800767e:	d337      	bcc.n	80076f0 <__gethex+0x1d0>
 8007680:	f845 bb04 	str.w	fp, [r5], #4
 8007684:	eba5 050a 	sub.w	r5, r5, sl
 8007688:	10ad      	asrs	r5, r5, #2
 800768a:	6125      	str	r5, [r4, #16]
 800768c:	4658      	mov	r0, fp
 800768e:	f7fe f857 	bl	8005740 <__hi0bits>
 8007692:	016d      	lsls	r5, r5, #5
 8007694:	f8d8 6000 	ldr.w	r6, [r8]
 8007698:	1a2d      	subs	r5, r5, r0
 800769a:	42b5      	cmp	r5, r6
 800769c:	dd54      	ble.n	8007748 <__gethex+0x228>
 800769e:	1bad      	subs	r5, r5, r6
 80076a0:	4629      	mov	r1, r5
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7fe fbdf 	bl	8005e66 <__any_on>
 80076a8:	4681      	mov	r9, r0
 80076aa:	b178      	cbz	r0, 80076cc <__gethex+0x1ac>
 80076ac:	f04f 0901 	mov.w	r9, #1
 80076b0:	1e6b      	subs	r3, r5, #1
 80076b2:	1159      	asrs	r1, r3, #5
 80076b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80076b8:	f003 021f 	and.w	r2, r3, #31
 80076bc:	fa09 f202 	lsl.w	r2, r9, r2
 80076c0:	420a      	tst	r2, r1
 80076c2:	d003      	beq.n	80076cc <__gethex+0x1ac>
 80076c4:	454b      	cmp	r3, r9
 80076c6:	dc36      	bgt.n	8007736 <__gethex+0x216>
 80076c8:	f04f 0902 	mov.w	r9, #2
 80076cc:	4629      	mov	r1, r5
 80076ce:	4620      	mov	r0, r4
 80076d0:	f7ff febe 	bl	8007450 <rshift>
 80076d4:	442f      	add	r7, r5
 80076d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076da:	42bb      	cmp	r3, r7
 80076dc:	da42      	bge.n	8007764 <__gethex+0x244>
 80076de:	4621      	mov	r1, r4
 80076e0:	9801      	ldr	r0, [sp, #4]
 80076e2:	f7fd ff7b 	bl	80055dc <_Bfree>
 80076e6:	2300      	movs	r3, #0
 80076e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ea:	25a3      	movs	r5, #163	@ 0xa3
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	e793      	b.n	8007618 <__gethex+0xf8>
 80076f0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80076f4:	2a2e      	cmp	r2, #46	@ 0x2e
 80076f6:	d012      	beq.n	800771e <__gethex+0x1fe>
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d104      	bne.n	8007706 <__gethex+0x1e6>
 80076fc:	f845 bb04 	str.w	fp, [r5], #4
 8007700:	f04f 0b00 	mov.w	fp, #0
 8007704:	465b      	mov	r3, fp
 8007706:	7830      	ldrb	r0, [r6, #0]
 8007708:	9303      	str	r3, [sp, #12]
 800770a:	f7ff fef4 	bl	80074f6 <__hexdig_fun>
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	f000 000f 	and.w	r0, r0, #15
 8007714:	4098      	lsls	r0, r3
 8007716:	ea4b 0b00 	orr.w	fp, fp, r0
 800771a:	3304      	adds	r3, #4
 800771c:	e7ae      	b.n	800767c <__gethex+0x15c>
 800771e:	45b1      	cmp	r9, r6
 8007720:	d8ea      	bhi.n	80076f8 <__gethex+0x1d8>
 8007722:	2201      	movs	r2, #1
 8007724:	4630      	mov	r0, r6
 8007726:	492a      	ldr	r1, [pc, #168]	@ (80077d0 <__gethex+0x2b0>)
 8007728:	9303      	str	r3, [sp, #12]
 800772a:	f7ff fe29 	bl	8007380 <strncmp>
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	2800      	cmp	r0, #0
 8007732:	d1e1      	bne.n	80076f8 <__gethex+0x1d8>
 8007734:	e7a2      	b.n	800767c <__gethex+0x15c>
 8007736:	4620      	mov	r0, r4
 8007738:	1ea9      	subs	r1, r5, #2
 800773a:	f7fe fb94 	bl	8005e66 <__any_on>
 800773e:	2800      	cmp	r0, #0
 8007740:	d0c2      	beq.n	80076c8 <__gethex+0x1a8>
 8007742:	f04f 0903 	mov.w	r9, #3
 8007746:	e7c1      	b.n	80076cc <__gethex+0x1ac>
 8007748:	da09      	bge.n	800775e <__gethex+0x23e>
 800774a:	1b75      	subs	r5, r6, r5
 800774c:	4621      	mov	r1, r4
 800774e:	462a      	mov	r2, r5
 8007750:	9801      	ldr	r0, [sp, #4]
 8007752:	f7fe f959 	bl	8005a08 <__lshift>
 8007756:	4604      	mov	r4, r0
 8007758:	1b7f      	subs	r7, r7, r5
 800775a:	f100 0a14 	add.w	sl, r0, #20
 800775e:	f04f 0900 	mov.w	r9, #0
 8007762:	e7b8      	b.n	80076d6 <__gethex+0x1b6>
 8007764:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007768:	42bd      	cmp	r5, r7
 800776a:	dd6f      	ble.n	800784c <__gethex+0x32c>
 800776c:	1bed      	subs	r5, r5, r7
 800776e:	42ae      	cmp	r6, r5
 8007770:	dc34      	bgt.n	80077dc <__gethex+0x2bc>
 8007772:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d022      	beq.n	80077c0 <__gethex+0x2a0>
 800777a:	2b03      	cmp	r3, #3
 800777c:	d024      	beq.n	80077c8 <__gethex+0x2a8>
 800777e:	2b01      	cmp	r3, #1
 8007780:	d115      	bne.n	80077ae <__gethex+0x28e>
 8007782:	42ae      	cmp	r6, r5
 8007784:	d113      	bne.n	80077ae <__gethex+0x28e>
 8007786:	2e01      	cmp	r6, #1
 8007788:	d10b      	bne.n	80077a2 <__gethex+0x282>
 800778a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800778e:	9a02      	ldr	r2, [sp, #8]
 8007790:	2562      	movs	r5, #98	@ 0x62
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	2301      	movs	r3, #1
 8007796:	6123      	str	r3, [r4, #16]
 8007798:	f8ca 3000 	str.w	r3, [sl]
 800779c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800779e:	601c      	str	r4, [r3, #0]
 80077a0:	e73a      	b.n	8007618 <__gethex+0xf8>
 80077a2:	4620      	mov	r0, r4
 80077a4:	1e71      	subs	r1, r6, #1
 80077a6:	f7fe fb5e 	bl	8005e66 <__any_on>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d1ed      	bne.n	800778a <__gethex+0x26a>
 80077ae:	4621      	mov	r1, r4
 80077b0:	9801      	ldr	r0, [sp, #4]
 80077b2:	f7fd ff13 	bl	80055dc <_Bfree>
 80077b6:	2300      	movs	r3, #0
 80077b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077ba:	2550      	movs	r5, #80	@ 0x50
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	e72b      	b.n	8007618 <__gethex+0xf8>
 80077c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f3      	bne.n	80077ae <__gethex+0x28e>
 80077c6:	e7e0      	b.n	800778a <__gethex+0x26a>
 80077c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1dd      	bne.n	800778a <__gethex+0x26a>
 80077ce:	e7ee      	b.n	80077ae <__gethex+0x28e>
 80077d0:	08008010 	.word	0x08008010
 80077d4:	08007ea7 	.word	0x08007ea7
 80077d8:	080081be 	.word	0x080081be
 80077dc:	1e6f      	subs	r7, r5, #1
 80077de:	f1b9 0f00 	cmp.w	r9, #0
 80077e2:	d130      	bne.n	8007846 <__gethex+0x326>
 80077e4:	b127      	cbz	r7, 80077f0 <__gethex+0x2d0>
 80077e6:	4639      	mov	r1, r7
 80077e8:	4620      	mov	r0, r4
 80077ea:	f7fe fb3c 	bl	8005e66 <__any_on>
 80077ee:	4681      	mov	r9, r0
 80077f0:	2301      	movs	r3, #1
 80077f2:	4629      	mov	r1, r5
 80077f4:	1b76      	subs	r6, r6, r5
 80077f6:	2502      	movs	r5, #2
 80077f8:	117a      	asrs	r2, r7, #5
 80077fa:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80077fe:	f007 071f 	and.w	r7, r7, #31
 8007802:	40bb      	lsls	r3, r7
 8007804:	4213      	tst	r3, r2
 8007806:	4620      	mov	r0, r4
 8007808:	bf18      	it	ne
 800780a:	f049 0902 	orrne.w	r9, r9, #2
 800780e:	f7ff fe1f 	bl	8007450 <rshift>
 8007812:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007816:	f1b9 0f00 	cmp.w	r9, #0
 800781a:	d047      	beq.n	80078ac <__gethex+0x38c>
 800781c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d015      	beq.n	8007850 <__gethex+0x330>
 8007824:	2b03      	cmp	r3, #3
 8007826:	d017      	beq.n	8007858 <__gethex+0x338>
 8007828:	2b01      	cmp	r3, #1
 800782a:	d109      	bne.n	8007840 <__gethex+0x320>
 800782c:	f019 0f02 	tst.w	r9, #2
 8007830:	d006      	beq.n	8007840 <__gethex+0x320>
 8007832:	f8da 3000 	ldr.w	r3, [sl]
 8007836:	ea49 0903 	orr.w	r9, r9, r3
 800783a:	f019 0f01 	tst.w	r9, #1
 800783e:	d10e      	bne.n	800785e <__gethex+0x33e>
 8007840:	f045 0510 	orr.w	r5, r5, #16
 8007844:	e032      	b.n	80078ac <__gethex+0x38c>
 8007846:	f04f 0901 	mov.w	r9, #1
 800784a:	e7d1      	b.n	80077f0 <__gethex+0x2d0>
 800784c:	2501      	movs	r5, #1
 800784e:	e7e2      	b.n	8007816 <__gethex+0x2f6>
 8007850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007852:	f1c3 0301 	rsb	r3, r3, #1
 8007856:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f0      	beq.n	8007840 <__gethex+0x320>
 800785e:	f04f 0c00 	mov.w	ip, #0
 8007862:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007866:	f104 0314 	add.w	r3, r4, #20
 800786a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800786e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007872:	4618      	mov	r0, r3
 8007874:	f853 2b04 	ldr.w	r2, [r3], #4
 8007878:	f1b2 3fff 	cmp.w	r2, #4294967295
 800787c:	d01b      	beq.n	80078b6 <__gethex+0x396>
 800787e:	3201      	adds	r2, #1
 8007880:	6002      	str	r2, [r0, #0]
 8007882:	2d02      	cmp	r5, #2
 8007884:	f104 0314 	add.w	r3, r4, #20
 8007888:	d13c      	bne.n	8007904 <__gethex+0x3e4>
 800788a:	f8d8 2000 	ldr.w	r2, [r8]
 800788e:	3a01      	subs	r2, #1
 8007890:	42b2      	cmp	r2, r6
 8007892:	d109      	bne.n	80078a8 <__gethex+0x388>
 8007894:	2201      	movs	r2, #1
 8007896:	1171      	asrs	r1, r6, #5
 8007898:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800789c:	f006 061f 	and.w	r6, r6, #31
 80078a0:	fa02 f606 	lsl.w	r6, r2, r6
 80078a4:	421e      	tst	r6, r3
 80078a6:	d13a      	bne.n	800791e <__gethex+0x3fe>
 80078a8:	f045 0520 	orr.w	r5, r5, #32
 80078ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078ae:	601c      	str	r4, [r3, #0]
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	601f      	str	r7, [r3, #0]
 80078b4:	e6b0      	b.n	8007618 <__gethex+0xf8>
 80078b6:	4299      	cmp	r1, r3
 80078b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80078bc:	d8d9      	bhi.n	8007872 <__gethex+0x352>
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	459b      	cmp	fp, r3
 80078c2:	db17      	blt.n	80078f4 <__gethex+0x3d4>
 80078c4:	6861      	ldr	r1, [r4, #4]
 80078c6:	9801      	ldr	r0, [sp, #4]
 80078c8:	3101      	adds	r1, #1
 80078ca:	f7fd fe47 	bl	800555c <_Balloc>
 80078ce:	4681      	mov	r9, r0
 80078d0:	b918      	cbnz	r0, 80078da <__gethex+0x3ba>
 80078d2:	4602      	mov	r2, r0
 80078d4:	2184      	movs	r1, #132	@ 0x84
 80078d6:	4b19      	ldr	r3, [pc, #100]	@ (800793c <__gethex+0x41c>)
 80078d8:	e6c5      	b.n	8007666 <__gethex+0x146>
 80078da:	6922      	ldr	r2, [r4, #16]
 80078dc:	f104 010c 	add.w	r1, r4, #12
 80078e0:	3202      	adds	r2, #2
 80078e2:	0092      	lsls	r2, r2, #2
 80078e4:	300c      	adds	r0, #12
 80078e6:	f7ff fd6d 	bl	80073c4 <memcpy>
 80078ea:	4621      	mov	r1, r4
 80078ec:	9801      	ldr	r0, [sp, #4]
 80078ee:	f7fd fe75 	bl	80055dc <_Bfree>
 80078f2:	464c      	mov	r4, r9
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	6122      	str	r2, [r4, #16]
 80078fa:	2201      	movs	r2, #1
 80078fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007900:	615a      	str	r2, [r3, #20]
 8007902:	e7be      	b.n	8007882 <__gethex+0x362>
 8007904:	6922      	ldr	r2, [r4, #16]
 8007906:	455a      	cmp	r2, fp
 8007908:	dd0b      	ble.n	8007922 <__gethex+0x402>
 800790a:	2101      	movs	r1, #1
 800790c:	4620      	mov	r0, r4
 800790e:	f7ff fd9f 	bl	8007450 <rshift>
 8007912:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007916:	3701      	adds	r7, #1
 8007918:	42bb      	cmp	r3, r7
 800791a:	f6ff aee0 	blt.w	80076de <__gethex+0x1be>
 800791e:	2501      	movs	r5, #1
 8007920:	e7c2      	b.n	80078a8 <__gethex+0x388>
 8007922:	f016 061f 	ands.w	r6, r6, #31
 8007926:	d0fa      	beq.n	800791e <__gethex+0x3fe>
 8007928:	4453      	add	r3, sl
 800792a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800792e:	f7fd ff07 	bl	8005740 <__hi0bits>
 8007932:	f1c6 0620 	rsb	r6, r6, #32
 8007936:	42b0      	cmp	r0, r6
 8007938:	dbe7      	blt.n	800790a <__gethex+0x3ea>
 800793a:	e7f0      	b.n	800791e <__gethex+0x3fe>
 800793c:	08007ea7 	.word	0x08007ea7

08007940 <L_shift>:
 8007940:	f1c2 0208 	rsb	r2, r2, #8
 8007944:	0092      	lsls	r2, r2, #2
 8007946:	b570      	push	{r4, r5, r6, lr}
 8007948:	f1c2 0620 	rsb	r6, r2, #32
 800794c:	6843      	ldr	r3, [r0, #4]
 800794e:	6804      	ldr	r4, [r0, #0]
 8007950:	fa03 f506 	lsl.w	r5, r3, r6
 8007954:	432c      	orrs	r4, r5
 8007956:	40d3      	lsrs	r3, r2
 8007958:	6004      	str	r4, [r0, #0]
 800795a:	f840 3f04 	str.w	r3, [r0, #4]!
 800795e:	4288      	cmp	r0, r1
 8007960:	d3f4      	bcc.n	800794c <L_shift+0xc>
 8007962:	bd70      	pop	{r4, r5, r6, pc}

08007964 <__match>:
 8007964:	b530      	push	{r4, r5, lr}
 8007966:	6803      	ldr	r3, [r0, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796e:	b914      	cbnz	r4, 8007976 <__match+0x12>
 8007970:	6003      	str	r3, [r0, #0]
 8007972:	2001      	movs	r0, #1
 8007974:	bd30      	pop	{r4, r5, pc}
 8007976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800797a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800797e:	2d19      	cmp	r5, #25
 8007980:	bf98      	it	ls
 8007982:	3220      	addls	r2, #32
 8007984:	42a2      	cmp	r2, r4
 8007986:	d0f0      	beq.n	800796a <__match+0x6>
 8007988:	2000      	movs	r0, #0
 800798a:	e7f3      	b.n	8007974 <__match+0x10>

0800798c <__hexnan>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	2500      	movs	r5, #0
 8007992:	680b      	ldr	r3, [r1, #0]
 8007994:	4682      	mov	sl, r0
 8007996:	115e      	asrs	r6, r3, #5
 8007998:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800799c:	f013 031f 	ands.w	r3, r3, #31
 80079a0:	bf18      	it	ne
 80079a2:	3604      	addne	r6, #4
 80079a4:	1f37      	subs	r7, r6, #4
 80079a6:	4690      	mov	r8, r2
 80079a8:	46b9      	mov	r9, r7
 80079aa:	463c      	mov	r4, r7
 80079ac:	46ab      	mov	fp, r5
 80079ae:	b087      	sub	sp, #28
 80079b0:	6801      	ldr	r1, [r0, #0]
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	f846 5c04 	str.w	r5, [r6, #-4]
 80079b8:	9502      	str	r5, [sp, #8]
 80079ba:	784a      	ldrb	r2, [r1, #1]
 80079bc:	1c4b      	adds	r3, r1, #1
 80079be:	9303      	str	r3, [sp, #12]
 80079c0:	b342      	cbz	r2, 8007a14 <__hexnan+0x88>
 80079c2:	4610      	mov	r0, r2
 80079c4:	9105      	str	r1, [sp, #20]
 80079c6:	9204      	str	r2, [sp, #16]
 80079c8:	f7ff fd95 	bl	80074f6 <__hexdig_fun>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d151      	bne.n	8007a74 <__hexnan+0xe8>
 80079d0:	9a04      	ldr	r2, [sp, #16]
 80079d2:	9905      	ldr	r1, [sp, #20]
 80079d4:	2a20      	cmp	r2, #32
 80079d6:	d818      	bhi.n	8007a0a <__hexnan+0x7e>
 80079d8:	9b02      	ldr	r3, [sp, #8]
 80079da:	459b      	cmp	fp, r3
 80079dc:	dd13      	ble.n	8007a06 <__hexnan+0x7a>
 80079de:	454c      	cmp	r4, r9
 80079e0:	d206      	bcs.n	80079f0 <__hexnan+0x64>
 80079e2:	2d07      	cmp	r5, #7
 80079e4:	dc04      	bgt.n	80079f0 <__hexnan+0x64>
 80079e6:	462a      	mov	r2, r5
 80079e8:	4649      	mov	r1, r9
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7ff ffa8 	bl	8007940 <L_shift>
 80079f0:	4544      	cmp	r4, r8
 80079f2:	d952      	bls.n	8007a9a <__hexnan+0x10e>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f1a4 0904 	sub.w	r9, r4, #4
 80079fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80079fe:	461d      	mov	r5, r3
 8007a00:	464c      	mov	r4, r9
 8007a02:	f8cd b008 	str.w	fp, [sp, #8]
 8007a06:	9903      	ldr	r1, [sp, #12]
 8007a08:	e7d7      	b.n	80079ba <__hexnan+0x2e>
 8007a0a:	2a29      	cmp	r2, #41	@ 0x29
 8007a0c:	d157      	bne.n	8007abe <__hexnan+0x132>
 8007a0e:	3102      	adds	r1, #2
 8007a10:	f8ca 1000 	str.w	r1, [sl]
 8007a14:	f1bb 0f00 	cmp.w	fp, #0
 8007a18:	d051      	beq.n	8007abe <__hexnan+0x132>
 8007a1a:	454c      	cmp	r4, r9
 8007a1c:	d206      	bcs.n	8007a2c <__hexnan+0xa0>
 8007a1e:	2d07      	cmp	r5, #7
 8007a20:	dc04      	bgt.n	8007a2c <__hexnan+0xa0>
 8007a22:	462a      	mov	r2, r5
 8007a24:	4649      	mov	r1, r9
 8007a26:	4620      	mov	r0, r4
 8007a28:	f7ff ff8a 	bl	8007940 <L_shift>
 8007a2c:	4544      	cmp	r4, r8
 8007a2e:	d936      	bls.n	8007a9e <__hexnan+0x112>
 8007a30:	4623      	mov	r3, r4
 8007a32:	f1a8 0204 	sub.w	r2, r8, #4
 8007a36:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a3a:	429f      	cmp	r7, r3
 8007a3c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a40:	d2f9      	bcs.n	8007a36 <__hexnan+0xaa>
 8007a42:	1b3b      	subs	r3, r7, r4
 8007a44:	f023 0303 	bic.w	r3, r3, #3
 8007a48:	3304      	adds	r3, #4
 8007a4a:	3401      	adds	r4, #1
 8007a4c:	3e03      	subs	r6, #3
 8007a4e:	42b4      	cmp	r4, r6
 8007a50:	bf88      	it	hi
 8007a52:	2304      	movhi	r3, #4
 8007a54:	2200      	movs	r2, #0
 8007a56:	4443      	add	r3, r8
 8007a58:	f843 2b04 	str.w	r2, [r3], #4
 8007a5c:	429f      	cmp	r7, r3
 8007a5e:	d2fb      	bcs.n	8007a58 <__hexnan+0xcc>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	b91b      	cbnz	r3, 8007a6c <__hexnan+0xe0>
 8007a64:	4547      	cmp	r7, r8
 8007a66:	d128      	bne.n	8007aba <__hexnan+0x12e>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	2005      	movs	r0, #5
 8007a6e:	b007      	add	sp, #28
 8007a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	3501      	adds	r5, #1
 8007a76:	2d08      	cmp	r5, #8
 8007a78:	f10b 0b01 	add.w	fp, fp, #1
 8007a7c:	dd06      	ble.n	8007a8c <__hexnan+0x100>
 8007a7e:	4544      	cmp	r4, r8
 8007a80:	d9c1      	bls.n	8007a06 <__hexnan+0x7a>
 8007a82:	2300      	movs	r3, #0
 8007a84:	2501      	movs	r5, #1
 8007a86:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a8a:	3c04      	subs	r4, #4
 8007a8c:	6822      	ldr	r2, [r4, #0]
 8007a8e:	f000 000f 	and.w	r0, r0, #15
 8007a92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a96:	6020      	str	r0, [r4, #0]
 8007a98:	e7b5      	b.n	8007a06 <__hexnan+0x7a>
 8007a9a:	2508      	movs	r5, #8
 8007a9c:	e7b3      	b.n	8007a06 <__hexnan+0x7a>
 8007a9e:	9b01      	ldr	r3, [sp, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0dd      	beq.n	8007a60 <__hexnan+0xd4>
 8007aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa8:	f1c3 0320 	rsb	r3, r3, #32
 8007aac:	40da      	lsrs	r2, r3
 8007aae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ab8:	e7d2      	b.n	8007a60 <__hexnan+0xd4>
 8007aba:	3f04      	subs	r7, #4
 8007abc:	e7d0      	b.n	8007a60 <__hexnan+0xd4>
 8007abe:	2004      	movs	r0, #4
 8007ac0:	e7d5      	b.n	8007a6e <__hexnan+0xe2>

08007ac2 <__ascii_mbtowc>:
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	b901      	cbnz	r1, 8007ac8 <__ascii_mbtowc+0x6>
 8007ac6:	a901      	add	r1, sp, #4
 8007ac8:	b142      	cbz	r2, 8007adc <__ascii_mbtowc+0x1a>
 8007aca:	b14b      	cbz	r3, 8007ae0 <__ascii_mbtowc+0x1e>
 8007acc:	7813      	ldrb	r3, [r2, #0]
 8007ace:	600b      	str	r3, [r1, #0]
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	1e10      	subs	r0, r2, #0
 8007ad4:	bf18      	it	ne
 8007ad6:	2001      	movne	r0, #1
 8007ad8:	b002      	add	sp, #8
 8007ada:	4770      	bx	lr
 8007adc:	4610      	mov	r0, r2
 8007ade:	e7fb      	b.n	8007ad8 <__ascii_mbtowc+0x16>
 8007ae0:	f06f 0001 	mvn.w	r0, #1
 8007ae4:	e7f8      	b.n	8007ad8 <__ascii_mbtowc+0x16>

08007ae6 <_realloc_r>:
 8007ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aea:	4680      	mov	r8, r0
 8007aec:	4615      	mov	r5, r2
 8007aee:	460c      	mov	r4, r1
 8007af0:	b921      	cbnz	r1, 8007afc <_realloc_r+0x16>
 8007af2:	4611      	mov	r1, r2
 8007af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	f7fd bca4 	b.w	8005444 <_malloc_r>
 8007afc:	b92a      	cbnz	r2, 8007b0a <_realloc_r+0x24>
 8007afe:	f7fd fc2f 	bl	8005360 <_free_r>
 8007b02:	2400      	movs	r4, #0
 8007b04:	4620      	mov	r0, r4
 8007b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b0a:	f000 f8c4 	bl	8007c96 <_malloc_usable_size_r>
 8007b0e:	4285      	cmp	r5, r0
 8007b10:	4606      	mov	r6, r0
 8007b12:	d802      	bhi.n	8007b1a <_realloc_r+0x34>
 8007b14:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b18:	d8f4      	bhi.n	8007b04 <_realloc_r+0x1e>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	f7fd fc91 	bl	8005444 <_malloc_r>
 8007b22:	4607      	mov	r7, r0
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d0ec      	beq.n	8007b02 <_realloc_r+0x1c>
 8007b28:	42b5      	cmp	r5, r6
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	bf28      	it	cs
 8007b30:	4632      	movcs	r2, r6
 8007b32:	f7ff fc47 	bl	80073c4 <memcpy>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4640      	mov	r0, r8
 8007b3a:	f7fd fc11 	bl	8005360 <_free_r>
 8007b3e:	463c      	mov	r4, r7
 8007b40:	e7e0      	b.n	8007b04 <_realloc_r+0x1e>

08007b42 <__ascii_wctomb>:
 8007b42:	4603      	mov	r3, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	b141      	cbz	r1, 8007b5a <__ascii_wctomb+0x18>
 8007b48:	2aff      	cmp	r2, #255	@ 0xff
 8007b4a:	d904      	bls.n	8007b56 <__ascii_wctomb+0x14>
 8007b4c:	228a      	movs	r2, #138	@ 0x8a
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	2001      	movs	r0, #1
 8007b58:	700a      	strb	r2, [r1, #0]
 8007b5a:	4770      	bx	lr

08007b5c <fiprintf>:
 8007b5c:	b40e      	push	{r1, r2, r3}
 8007b5e:	b503      	push	{r0, r1, lr}
 8007b60:	4601      	mov	r1, r0
 8007b62:	ab03      	add	r3, sp, #12
 8007b64:	4805      	ldr	r0, [pc, #20]	@ (8007b7c <fiprintf+0x20>)
 8007b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	9301      	str	r3, [sp, #4]
 8007b6e:	f7ff f999 	bl	8006ea4 <_vfiprintf_r>
 8007b72:	b002      	add	sp, #8
 8007b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b78:	b003      	add	sp, #12
 8007b7a:	4770      	bx	lr
 8007b7c:	20000018 	.word	0x20000018

08007b80 <__swhatbuf_r>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	460c      	mov	r4, r1
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	4615      	mov	r5, r2
 8007b8a:	2900      	cmp	r1, #0
 8007b8c:	461e      	mov	r6, r3
 8007b8e:	b096      	sub	sp, #88	@ 0x58
 8007b90:	da0c      	bge.n	8007bac <__swhatbuf_r+0x2c>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	2100      	movs	r1, #0
 8007b96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b9a:	bf14      	ite	ne
 8007b9c:	2340      	movne	r3, #64	@ 0x40
 8007b9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	6031      	str	r1, [r6, #0]
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	b016      	add	sp, #88	@ 0x58
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	466a      	mov	r2, sp
 8007bae:	f000 f849 	bl	8007c44 <_fstat_r>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	dbed      	blt.n	8007b92 <__swhatbuf_r+0x12>
 8007bb6:	9901      	ldr	r1, [sp, #4]
 8007bb8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bbc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bc0:	4259      	negs	r1, r3
 8007bc2:	4159      	adcs	r1, r3
 8007bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bc8:	e7eb      	b.n	8007ba2 <__swhatbuf_r+0x22>

08007bca <__smakebuf_r>:
 8007bca:	898b      	ldrh	r3, [r1, #12]
 8007bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bce:	079d      	lsls	r5, r3, #30
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	460c      	mov	r4, r1
 8007bd4:	d507      	bpl.n	8007be6 <__smakebuf_r+0x1c>
 8007bd6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	2301      	movs	r3, #1
 8007be0:	6163      	str	r3, [r4, #20]
 8007be2:	b003      	add	sp, #12
 8007be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be6:	466a      	mov	r2, sp
 8007be8:	ab01      	add	r3, sp, #4
 8007bea:	f7ff ffc9 	bl	8007b80 <__swhatbuf_r>
 8007bee:	9f00      	ldr	r7, [sp, #0]
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f7fd fc25 	bl	8005444 <_malloc_r>
 8007bfa:	b948      	cbnz	r0, 8007c10 <__smakebuf_r+0x46>
 8007bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c00:	059a      	lsls	r2, r3, #22
 8007c02:	d4ee      	bmi.n	8007be2 <__smakebuf_r+0x18>
 8007c04:	f023 0303 	bic.w	r3, r3, #3
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	81a3      	strh	r3, [r4, #12]
 8007c0e:	e7e2      	b.n	8007bd6 <__smakebuf_r+0xc>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	9b01      	ldr	r3, [sp, #4]
 8007c1e:	6020      	str	r0, [r4, #0]
 8007c20:	b15b      	cbz	r3, 8007c3a <__smakebuf_r+0x70>
 8007c22:	4630      	mov	r0, r6
 8007c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c28:	f000 f81e 	bl	8007c68 <_isatty_r>
 8007c2c:	b128      	cbz	r0, 8007c3a <__smakebuf_r+0x70>
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	f023 0303 	bic.w	r3, r3, #3
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	431d      	orrs	r5, r3
 8007c3e:	81a5      	strh	r5, [r4, #12]
 8007c40:	e7cf      	b.n	8007be2 <__smakebuf_r+0x18>
	...

08007c44 <_fstat_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	2300      	movs	r3, #0
 8007c48:	4d06      	ldr	r5, [pc, #24]	@ (8007c64 <_fstat_r+0x20>)
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	f7f9 fd99 	bl	8001788 <_fstat>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d102      	bne.n	8007c60 <_fstat_r+0x1c>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	b103      	cbz	r3, 8007c60 <_fstat_r+0x1c>
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	2000038c 	.word	0x2000038c

08007c68 <_isatty_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	4d05      	ldr	r5, [pc, #20]	@ (8007c84 <_isatty_r+0x1c>)
 8007c6e:	4604      	mov	r4, r0
 8007c70:	4608      	mov	r0, r1
 8007c72:	602b      	str	r3, [r5, #0]
 8007c74:	f7f9 fd97 	bl	80017a6 <_isatty>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_isatty_r+0x1a>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_isatty_r+0x1a>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	2000038c 	.word	0x2000038c

08007c88 <abort>:
 8007c88:	2006      	movs	r0, #6
 8007c8a:	b508      	push	{r3, lr}
 8007c8c:	f000 f834 	bl	8007cf8 <raise>
 8007c90:	2001      	movs	r0, #1
 8007c92:	f7f9 fd2a 	bl	80016ea <_exit>

08007c96 <_malloc_usable_size_r>:
 8007c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9a:	1f18      	subs	r0, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfbc      	itt	lt
 8007ca0:	580b      	ldrlt	r3, [r1, r0]
 8007ca2:	18c0      	addlt	r0, r0, r3
 8007ca4:	4770      	bx	lr

08007ca6 <_raise_r>:
 8007ca6:	291f      	cmp	r1, #31
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4605      	mov	r5, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	d904      	bls.n	8007cba <_raise_r+0x14>
 8007cb0:	2316      	movs	r3, #22
 8007cb2:	6003      	str	r3, [r0, #0]
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
 8007cba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cbc:	b112      	cbz	r2, 8007cc4 <_raise_r+0x1e>
 8007cbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cc2:	b94b      	cbnz	r3, 8007cd8 <_raise_r+0x32>
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 f831 	bl	8007d2c <_getpid_r>
 8007cca:	4622      	mov	r2, r4
 8007ccc:	4601      	mov	r1, r0
 8007cce:	4628      	mov	r0, r5
 8007cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cd4:	f000 b818 	b.w	8007d08 <_kill_r>
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d00a      	beq.n	8007cf2 <_raise_r+0x4c>
 8007cdc:	1c59      	adds	r1, r3, #1
 8007cde:	d103      	bne.n	8007ce8 <_raise_r+0x42>
 8007ce0:	2316      	movs	r3, #22
 8007ce2:	6003      	str	r3, [r0, #0]
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	e7e7      	b.n	8007cb8 <_raise_r+0x12>
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4620      	mov	r0, r4
 8007cec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cf0:	4798      	blx	r3
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	e7e0      	b.n	8007cb8 <_raise_r+0x12>
	...

08007cf8 <raise>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	@ (8007d04 <raise+0xc>)
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f7ff bfd2 	b.w	8007ca6 <_raise_r>
 8007d02:	bf00      	nop
 8007d04:	20000018 	.word	0x20000018

08007d08 <_kill_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4d06      	ldr	r5, [pc, #24]	@ (8007d28 <_kill_r+0x20>)
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	4611      	mov	r1, r2
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	f7f9 fcd8 	bl	80016ca <_kill>
 8007d1a:	1c43      	adds	r3, r0, #1
 8007d1c:	d102      	bne.n	8007d24 <_kill_r+0x1c>
 8007d1e:	682b      	ldr	r3, [r5, #0]
 8007d20:	b103      	cbz	r3, 8007d24 <_kill_r+0x1c>
 8007d22:	6023      	str	r3, [r4, #0]
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	bf00      	nop
 8007d28:	2000038c 	.word	0x2000038c

08007d2c <_getpid_r>:
 8007d2c:	f7f9 bcc6 	b.w	80016bc <_getpid>

08007d30 <_init>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	bf00      	nop
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr

08007d3c <_fini>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr
