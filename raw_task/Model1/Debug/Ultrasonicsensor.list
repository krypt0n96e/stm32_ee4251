
Ultrasonicsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  080084e8  080084e8  000094e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008988  08008988  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008988  08008988  00009988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008990  08008990  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008990  08008990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008994  08008994  00009994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008998  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001d4  08008b6c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08008b6c  0000a3f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c861  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eab  00000000  00000000  00016a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00018910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abd  00000000  00000000  000196f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189ba  00000000  00000000  0001a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f935  00000000  00000000  00032b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9c6  00000000  00000000  0004249c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cee62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005010  00000000  00000000  000ceea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d3eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080084cc 	.word	0x080084cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080084cc 	.word	0x080084cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <I2C_LCD_ExpanderWrite+0x60>)
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	785a      	ldrb	r2, [r3, #1]
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	490f      	ldr	r1, [pc, #60]	@ (80010f4 <I2C_LCD_ExpanderWrite+0x64>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3304      	adds	r3, #4
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	490b      	ldr	r1, [pc, #44]	@ (80010f4 <I2C_LCD_ExpanderWrite+0x64>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3308      	adds	r3, #8
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b299      	uxth	r1, r3
 80010da:	f107 020f 	add.w	r2, r7, #15
 80010de:	2364      	movs	r3, #100	@ 0x64
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	f001 faf8 	bl	80026d8 <HAL_I2C_Master_Transmit>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001f0 	.word	0x200001f0
 80010f4:	08008520 	.word	0x08008520

080010f8 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	b2da      	uxtb	r2, r3
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffbb 	bl	8001090 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800111a:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9b      	lsrs	r3, r3, #18
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	491e      	ldr	r1, [pc, #120]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 8001134:	fba1 1303 	umull	r1, r3, r1, r3
 8001138:	0c9b      	lsrs	r3, r3, #18
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	429a      	cmp	r2, r3
 800114c:	d8f8      	bhi.n	8001140 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	b2da      	uxtb	r2, r3
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff98 	bl	8001090 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8001160:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9b      	lsrs	r3, r3, #18
 8001172:	2232      	movs	r2, #50	@ 0x32
 8001174:	fb03 f202 	mul.w	r2, r3, r2
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	490b      	ldr	r1, [pc, #44]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 800117e:	fba1 1303 	umull	r1, r3, r1, r3
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	085b      	lsrs	r3, r3, #1
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f8      	bhi.n	800118a <I2C_LCD_EnPulse+0x92>
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff62 	bl	8001090 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff90 	bl	80010f8 <I2C_LCD_EnPulse>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	460b      	mov	r3, r1
 80011ec:	71bb      	strb	r3, [r7, #6]
 80011ee:	4613      	mov	r3, r2
 80011f0:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	4313      	orrs	r3, r2
 8001206:	b2da      	uxtb	r2, r3
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ffcf 	bl	80011b0 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	4313      	orrs	r3, r2
 8001218:	b2da      	uxtb	r2, r3
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ffc6 	bl	80011b0 <I2C_LCD_Write4Bits>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 800123c:	79b9      	ldrb	r1, [r7, #6]
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2200      	movs	r2, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffcc 	bl	80011e0 <I2C_LCD_Send>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8001260:	79b9      	ldrb	r1, [r7, #6]
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2201      	movs	r2, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffba 	bl	80011e0 <I2C_LCD_Send>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800127e:	bf00      	nop
 8001280:	f000 fdde 	bl	8001e40 <HAL_GetTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b31      	cmp	r3, #49	@ 0x31
 8001288:	d9fa      	bls.n	8001280 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2130      	movs	r1, #48	@ 0x30
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffcc 	bl	800122c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
 8001298:	e01f      	b.n	80012da <I2C_LCD_Init+0x66>
 800129a:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <I2C_LCD_Init+0x154>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4b4a      	ldr	r3, [pc, #296]	@ (80013cc <I2C_LCD_Init+0x158>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a4a      	ldr	r2, [pc, #296]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0c9b      	lsrs	r3, r3, #18
 80012ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b0:	fb03 f202 	mul.w	r2, r3, r2
 80012b4:	4b45      	ldr	r3, [pc, #276]	@ (80013cc <I2C_LCD_Init+0x158>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4945      	ldr	r1, [pc, #276]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 80012ba:	fba1 1303 	umull	r1, r3, r1, r3
 80012be:	0c9b      	lsrs	r3, r3, #18
 80012c0:	085b      	lsrs	r3, r3, #1
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b40      	ldr	r3, [pc, #256]	@ (80013c8 <I2C_LCD_Init+0x154>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f8      	bhi.n	80012c6 <I2C_LCD_Init+0x52>
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	3301      	adds	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d9dc      	bls.n	800129a <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2130      	movs	r1, #48	@ 0x30
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffa1 	bl	800122c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	e01f      	b.n	8001330 <I2C_LCD_Init+0xbc>
 80012f0:	4b35      	ldr	r3, [pc, #212]	@ (80013c8 <I2C_LCD_Init+0x154>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <I2C_LCD_Init+0x158>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a35      	ldr	r2, [pc, #212]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001306:	fb03 f202 	mul.w	r2, r3, r2
 800130a:	4b30      	ldr	r3, [pc, #192]	@ (80013cc <I2C_LCD_Init+0x158>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4930      	ldr	r1, [pc, #192]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 8001310:	fba1 1303 	umull	r1, r3, r1, r3
 8001314:	0c9b      	lsrs	r3, r3, #18
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <I2C_LCD_Init+0x154>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	429a      	cmp	r2, r3
 8001328:	d8f8      	bhi.n	800131c <I2C_LCD_Init+0xa8>
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	3301      	adds	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	2b04      	cmp	r3, #4
 8001334:	d9dc      	bls.n	80012f0 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2130      	movs	r1, #48	@ 0x30
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff76 	bl	800122c <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <I2C_LCD_Init+0x154>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <I2C_LCD_Init+0x158>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	2296      	movs	r2, #150	@ 0x96
 8001354:	fb03 f202 	mul.w	r2, r3, r2
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <I2C_LCD_Init+0x158>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	491c      	ldr	r1, [pc, #112]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 800135e:	fba1 1303 	umull	r1, r3, r1, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <I2C_LCD_Init+0x154>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f8      	bhi.n	800136a <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff55 	bl	800122c <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2128      	movs	r1, #40	@ 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff50 	bl	800122c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	210c      	movs	r1, #12
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff4b 	bl	800122c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2106      	movs	r1, #6
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff46 	bl	800122c <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <I2C_LCD_Init+0x160>)
 80013a4:	2104      	movs	r1, #4
 80013a6:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <I2C_LCD_Init+0x160>)
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	2208      	movs	r2, #8
 80013b4:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f80d 	bl	80013d8 <I2C_LCD_Clear>
}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010
 80013cc:	20000000 	.word	0x20000000
 80013d0:	431bde83 	.word	0x431bde83
 80013d4:	200001f0 	.word	0x200001f0

080013d8 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff20 	bl	800122c <I2C_LCD_Cmd>
    DELAY_MS(2);
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e01f      	b.n	8001432 <I2C_LCD_Clear+0x5a>
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <I2C_LCD_Clear+0x6c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <I2C_LCD_Clear+0x70>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a13      	ldr	r2, [pc, #76]	@ (800144c <I2C_LCD_Clear+0x74>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001408:	fb03 f202 	mul.w	r2, r3, r2
 800140c:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <I2C_LCD_Clear+0x70>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	490e      	ldr	r1, [pc, #56]	@ (800144c <I2C_LCD_Clear+0x74>)
 8001412:	fba1 1303 	umull	r1, r3, r1, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <I2C_LCD_Clear+0x6c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f8      	bhi.n	800141e <I2C_LCD_Clear+0x46>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d9dc      	bls.n	80013f2 <I2C_LCD_Clear+0x1a>
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010
 8001448:	20000000 	.word	0x20000000
 800144c:	431bde83 	.word	0x431bde83

08001450 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	460b      	mov	r3, r1
 800145c:	71bb      	strb	r3, [r7, #6]
 800145e:	4613      	mov	r3, r2
 8001460:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <I2C_LCD_SetCursor+0x7c>)
 8001464:	f107 0408 	add.w	r4, r7, #8
 8001468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	4917      	ldr	r1, [pc, #92]	@ (80014d0 <I2C_LCD_SetCursor+0x80>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	330a      	adds	r3, #10
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	797a      	ldrb	r2, [r7, #5]
 8001482:	429a      	cmp	r2, r3
 8001484:	d90a      	bls.n	800149c <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	4911      	ldr	r1, [pc, #68]	@ (80014d0 <I2C_LCD_SetCursor+0x80>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	330a      	adds	r3, #10
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	3318      	adds	r3, #24
 80014a2:	443b      	add	r3, r7
 80014a4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff feb4 	bl	800122c <I2C_LCD_Cmd>
}
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	080084e8 	.word	0x080084e8
 80014d0:	08008520 	.word	0x08008520

080014d4 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 80014e0:	e008      	b.n	80014f4 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	603a      	str	r2, [r7, #0]
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff feae 	bl	8001250 <I2C_LCD_Data>
    while (*Str)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f2      	bne.n	80014e2 <I2C_LCD_WriteString+0xe>
    }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <Delay_us>:
	HCSR04_COMPLETE_STATE,
}HCSR04_State;

HCSR04_State hc04_state = HCSR04_IDLE_STATE;

void Delay_us(uint16_t us){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	htim1.Instance -> CNT = 0;
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <Delay_us+0x34>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24
	//TIM2 -> CNT = 0; (Cach 2)
	HAL_TIM_Base_Start(&htim1);
 800151a:	4808      	ldr	r0, [pc, #32]	@ (800153c <Delay_us+0x34>)
 800151c:	f002 f880 	bl	8003620 <HAL_TIM_Base_Start>
	while (htim1.Instance -> CNT < us);
 8001520:	bf00      	nop
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <Delay_us+0x34>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3f9      	bcc.n	8001522 <Delay_us+0x1a>
	HAL_TIM_Base_Stop(&htim1);
 800152e:	4803      	ldr	r0, [pc, #12]	@ (800153c <Delay_us+0x34>)
 8001530:	f002 f8c0 	bl	80036b4 <HAL_TIM_Base_Stop>
	}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000248 	.word	0x20000248

08001540 <pulseGPIO>:
	for (int i = 0;i<ms;i++){
		Delay_us(1000);
	}
}

void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	2201      	movs	r2, #1
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 ff4b 	bl	80023ee <HAL_GPIO_WritePin>
	Delay_us(20);
 8001558:	2014      	movs	r0, #20
 800155a:	f7ff ffd5 	bl	8001508 <Delay_us>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 ff42 	bl	80023ee <HAL_GPIO_WritePin>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HCSR04_Start>:

void HCSR04_Start(){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	if (hc04_state == HCSR04_IDLE_STATE){
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HCSR04_Start+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d107      	bne.n	8001590 <HCSR04_Start+0x1c>
	pulseGPIO(GPIOA, GPIO_PIN_8);
 8001580:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <HCSR04_Start+0x24>)
 8001586:	f7ff ffdb 	bl	8001540 <pulseGPIO>
	hc04_state = HCSR04_WAIT_RISING_STATE;
 800158a:	4b02      	ldr	r3, [pc, #8]	@ (8001594 <HCSR04_Start+0x20>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
	}
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000298 	.word	0x20000298
 8001598:	40010800 	.word	0x40010800

0800159c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
	switch (hc04_state) {
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <HAL_GPIO_EXTI_Callback+0x80>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d002      	beq.n	80015b4 <HAL_GPIO_EXTI_Callback+0x18>
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d017      	beq.n	80015e2 <HAL_GPIO_EXTI_Callback+0x46>
			}else {
				hc04_state = HCSR04_IDLE_STATE;
			}
			break;
		default:
			break;
 80015b2:	e029      	b.n	8001608 <HAL_GPIO_EXTI_Callback+0x6c>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 80015b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b8:	4819      	ldr	r0, [pc, #100]	@ (8001620 <HAL_GPIO_EXTI_Callback+0x84>)
 80015ba:	f000 ff01 	bl	80023c0 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10a      	bne.n	80015da <HAL_GPIO_EXTI_Callback+0x3e>
			htim1.Instance -> CNT = 0;
 80015c4:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <HAL_GPIO_EXTI_Callback+0x88>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	@ 0x24
			hc04_state = HCSRO4_WAIT_FALLING_STATE;
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <HAL_GPIO_EXTI_Callback+0x80>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim1);
 80015d2:	4814      	ldr	r0, [pc, #80]	@ (8001624 <HAL_GPIO_EXTI_Callback+0x88>)
 80015d4:	f002 f824 	bl	8003620 <HAL_TIM_Base_Start>
			break;
 80015d8:	e016      	b.n	8001608 <HAL_GPIO_EXTI_Callback+0x6c>
				hc04_state = HCSR04_IDLE_STATE;
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <HAL_GPIO_EXTI_Callback+0x80>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
			break;
 80015e0:	e012      	b.n	8001608 <HAL_GPIO_EXTI_Callback+0x6c>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 0){
 80015e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <HAL_GPIO_EXTI_Callback+0x84>)
 80015e8:	f000 feea 	bl	80023c0 <HAL_GPIO_ReadPin>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <HAL_GPIO_EXTI_Callback+0x64>
			HAL_TIM_Base_Stop(&htim1);
 80015f2:	480c      	ldr	r0, [pc, #48]	@ (8001624 <HAL_GPIO_EXTI_Callback+0x88>)
 80015f4:	f002 f85e 	bl	80036b4 <HAL_TIM_Base_Stop>
			hc04_state = HCSR04_COMPLETE_STATE;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_GPIO_EXTI_Callback+0x80>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	701a      	strb	r2, [r3, #0]
			break;
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_EXTI_Callback+0x6a>
				hc04_state = HCSR04_IDLE_STATE;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_GPIO_EXTI_Callback+0x80>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
			break;
 8001606:	bf00      	nop
	}
		count1 ++;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <HAL_GPIO_EXTI_Callback+0x8c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001610:	6013      	str	r3, [r2, #0]
	}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000298 	.word	0x20000298
 8001620:	40010c00 	.word	0x40010c00
 8001624:	20000248 	.word	0x20000248
 8001628:	20000294 	.word	0x20000294

0800162c <HC04_Complete_Callback>:

void HC04_Complete_Callback(float Distance){
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	//Dieu khien dong co.
	//Hien thi len LCD.
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
	...

08001640 <HC04_Handle>:

void HC04_Handle(){
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	if (hc04_state == HCSR04_COMPLETE_STATE){
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HC04_Handle+0x50>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d11b      	bne.n	8001684 <HC04_Handle+0x44>
		//Tinh toan khoang cach
		Distance = 0.017 * htim1.Instance->CNT;
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HC04_Handle+0x54>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fec6 	bl	80003e4 <__aeabi_ui2d>
 8001658:	a30b      	add	r3, pc, #44	@ (adr r3, 8001688 <HC04_Handle+0x48>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ff3b 	bl	80004d8 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa2d 	bl	8000ac8 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HC04_Handle+0x58>)
 8001672:	6013      	str	r3, [r2, #0]
		HC04_Complete_Callback(Distance);
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HC04_Handle+0x58>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffd7 	bl	800162c <HC04_Complete_Callback>
		hc04_state = HCSR04_IDLE_STATE;
 800167e:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <HC04_Handle+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
	}
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	b020c49c 	.word	0xb020c49c
 800168c:	3f916872 	.word	0x3f916872
 8001690:	20000298 	.word	0x20000298
 8001694:	20000248 	.word	0x20000248
 8001698:	20000290 	.word	0x20000290

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b098      	sub	sp, #96	@ 0x60
 80016a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f000 fb75 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 f887 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f000 f945 	bl	8001938 <MX_GPIO_Init>
  MX_TIM1_Init();
 80016ae:	f000 f8f3 	bl	8001898 <MX_TIM1_Init>
  MX_I2C1_Init();
 80016b2:	f000 f8c3 	bl	800183c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <main+0xfc>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4a37      	ldr	r2, [pc, #220]	@ (8001798 <main+0xfc>)
 80016bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016c0:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016c2:	4b36      	ldr	r3, [pc, #216]	@ (800179c <main+0x100>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a35      	ldr	r2, [pc, #212]	@ (800179c <main+0x100>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6013      	str	r3, [r2, #0]

//  uint32_t t_get_distance=0;

  char buf[64];
  I2C_LCD_Init(MyI2C_LCD);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fdd0 	bl	8001274 <I2C_LCD_Init>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff feb9 	bl	8001450 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "Start...");
 80016de:	4930      	ldr	r1, [pc, #192]	@ (80017a0 <main+0x104>)
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fef7 	bl	80014d4 <I2C_LCD_WriteString>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Đo thời gian thực thi lệnh HCSR04_Start()
	  uint32_t start = DWT->CYCCNT; // Lấy giá trị bắt đầu
 80016e6:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <main+0x100>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	657b      	str	r3, [r7, #84]	@ 0x54
	  if (hc04_state == HCSR04_IDLE_STATE) {
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <main+0x108>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <main+0x5c>
	      HCSR04_Start();
 80016f4:	f7ff ff3e 	bl	8001574 <HCSR04_Start>
	  }
	  HC04_Handle();
 80016f8:	f7ff ffa2 	bl	8001640 <HC04_Handle>
	  uint32_t end = DWT->CYCCNT;   // Lấy giá trị kết thúc
 80016fc:	4b27      	ldr	r3, [pc, #156]	@ (800179c <main+0x100>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	653b      	str	r3, [r7, #80]	@ 0x50

	  // Tính thời gian thực thi
	  uint32_t elapsed_cycles = end - start;
 8001702:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  float time_us = (float)elapsed_cycles / (64000000  / 1000000); // thời gian tính bằng µs
 800170a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800170c:	f7ff fae2 	bl	8000cd4 <__aeabi_ui2f>
 8001710:	4603      	mov	r3, r0
 8001712:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fbe8 	bl	8000eec <__aeabi_fdiv>
 800171c:	4603      	mov	r3, r0
 800171e:	64bb      	str	r3, [r7, #72]	@ 0x48
	  float time_ms = time_us / 1000;                            // thời gian tính bằng ms
 8001720:	4921      	ldr	r1, [pc, #132]	@ (80017a8 <main+0x10c>)
 8001722:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001724:	f7ff fbe2 	bl	8000eec <__aeabi_fdiv>
 8001728:	4603      	mov	r3, r0
 800172a:	647b      	str	r3, [r7, #68]	@ 0x44

	  // Hiển thị khoảng cách kèm đơn vị
	  I2C_LCD_Clear(MyI2C_LCD);
 800172c:	2000      	movs	r0, #0
 800172e:	f7ff fe53 	bl	80013d8 <I2C_LCD_Clear>
	  snprintf(buf, 64, "Dis: %.2f cm", Distance); // Thêm "cm"
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <main+0x110>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe76 	bl	8000428 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	1d38      	adds	r0, r7, #4
 8001742:	e9cd 2300 	strd	r2, r3, [sp]
 8001746:	4a1a      	ldr	r2, [pc, #104]	@ (80017b0 <main+0x114>)
 8001748:	2140      	movs	r1, #64	@ 0x40
 800174a:	f003 fa5f 	bl	8004c0c <sniprintf>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fe7c 	bl	8001450 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, buf);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff feb9 	bl	80014d4 <I2C_LCD_WriteString>

	  // Hiển thị thời gian thực thi lệnh
	  snprintf(buf, 64, "t: %.2f us", time_us); // Hiển thị µs
 8001762:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001764:	f7fe fe60 	bl	8000428 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	1d38      	adds	r0, r7, #4
 800176e:	e9cd 2300 	strd	r2, r3, [sp]
 8001772:	4a10      	ldr	r2, [pc, #64]	@ (80017b4 <main+0x118>)
 8001774:	2140      	movs	r1, #64	@ 0x40
 8001776:	f003 fa49 	bl	8004c0c <sniprintf>
	  // snprintf(buf, 64, "t: %.2f ms", time_ms); // Hiển thị ms nếu cần
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 800177a:	2201      	movs	r2, #1
 800177c:	2100      	movs	r1, #0
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fe66 	bl	8001450 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, buf);
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4619      	mov	r1, r3
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fea3 	bl	80014d4 <I2C_LCD_WriteString>

	  HAL_Delay(300);
 800178e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001792:	f000 fb5f 	bl	8001e54 <HAL_Delay>
  {
 8001796:	e7a6      	b.n	80016e6 <main+0x4a>
 8001798:	e000edf0 	.word	0xe000edf0
 800179c:	e0001000 	.word	0xe0001000
 80017a0:	080084f8 	.word	0x080084f8
 80017a4:	20000298 	.word	0x20000298
 80017a8:	447a0000 	.word	0x447a0000
 80017ac:	20000290 	.word	0x20000290
 80017b0:	08008504 	.word	0x08008504
 80017b4:	08008514 	.word	0x08008514

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b090      	sub	sp, #64	@ 0x40
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	2228      	movs	r2, #40	@ 0x28
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fab7 	bl	8004d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017de:	2301      	movs	r3, #1
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e2:	2310      	movs	r3, #16
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e6:	2302      	movs	r3, #2
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017ee:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80017f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 0318 	add.w	r3, r7, #24
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 fac5 	bl	8002d88 <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001804:	f000 f8fc 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001808:	230f      	movs	r3, #15
 800180a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180c:	2302      	movs	r3, #2
 800180e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001814:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800181a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800181e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2102      	movs	r1, #2
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fd31 	bl	800328c <HAL_RCC_ClockConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001830:	f000 f8e6 	bl	8001a00 <Error_Handler>
  }
}
 8001834:	bf00      	nop
 8001836:	3740      	adds	r7, #64	@ 0x40
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <MX_I2C1_Init+0x50>)
 8001842:	4a13      	ldr	r2, [pc, #76]	@ (8001890 <MX_I2C1_Init+0x54>)
 8001844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_I2C1_Init+0x50>)
 8001848:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <MX_I2C1_Init+0x58>)
 800184a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_I2C1_Init+0x50>)
 800185a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800185e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	@ (800188c <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_I2C1_Init+0x50>)
 800187a:	f000 fde9 	bl	8002450 <HAL_I2C_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001884:	f000 f8bc 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200001f4 	.word	0x200001f4
 8001890:	40005400 	.word	0x40005400
 8001894:	000186a0 	.word	0x000186a0

08001898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018bc:	223f      	movs	r2, #63	@ 0x3f
 80018be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d4:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e0:	4813      	ldr	r0, [pc, #76]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018e2:	f001 fe4d 	bl	8003580 <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018ec:	f000 f888 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	4619      	mov	r1, r3
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <MX_TIM1_Init+0x98>)
 80018fe:	f001 ffef 	bl	80038e0 <HAL_TIM_ConfigClockSource>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001908:	f000 f87a 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	@ (8001930 <MX_TIM1_Init+0x98>)
 800191a:	f002 f9d9 	bl	8003cd0 <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001924:	f000 f86c 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000248 	.word	0x20000248
 8001934:	40012c00 	.word	0x40012c00

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a27      	ldr	r2, [pc, #156]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <MX_GPIO_Init+0xb8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800199a:	4816      	ldr	r0, [pc, #88]	@ (80019f4 <MX_GPIO_Init+0xbc>)
 800199c:	f000 fd27 	bl	80023ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_GPIO_Init+0xc0>)
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4619      	mov	r1, r3
 80019b4:	4811      	ldr	r0, [pc, #68]	@ (80019fc <MX_GPIO_Init+0xc4>)
 80019b6:	f000 fb7f 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	4808      	ldr	r0, [pc, #32]	@ (80019f4 <MX_GPIO_Init+0xbc>)
 80019d4:	f000 fb70 	bl	80020b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2028      	movs	r0, #40	@ 0x28
 80019de:	f000 fb34 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019e2:	2028      	movs	r0, #40	@ 0x28
 80019e4:	f000 fb4d 	bl	8002082 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	10310000 	.word	0x10310000
 80019fc:	40010c00 	.word	0x40010c00

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <Error_Handler+0x8>

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_MspInit+0x5c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_MspInit+0x60>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_MspInit+0x60>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a15      	ldr	r2, [pc, #84]	@ (8001ae0 <HAL_I2C_MspInit+0x70>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d123      	bne.n	8001ad8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa8:	23c0      	movs	r3, #192	@ 0xc0
 8001aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aac:	2312      	movs	r3, #18
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480b      	ldr	r0, [pc, #44]	@ (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001abc:	f000 fafc 	bl	80020b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	@ (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aca:	61d3      	str	r3, [r2, #28]
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010c00 	.word	0x40010c00

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d113      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2101      	movs	r1, #1
 8001b1a:	2019      	movs	r0, #25
 8001b1c:	f000 fa95 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b20:	2019      	movs	r0, #25
 8001b22:	f000 faae 	bl	8002082 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40012c00 	.word	0x40012c00
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f948 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <TIM1_UP_IRQHandler+0x10>)
 8001b96:	f001 fdb3 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000248 	.word	0x20000248

08001ba4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001ba8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bac:	f000 fc38 	bl	8002420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <_kill>:

int _kill(int pid, int sig)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bcc:	f003 f908 	bl	8004de0 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2216      	movs	r2, #22
 8001bd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_exit>:

void _exit (int status)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bea:	f04f 31ff 	mov.w	r1, #4294967295
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffe7 	bl	8001bc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <_exit+0x12>

08001bf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e00a      	b.n	8001c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0a:	f3af 8000 	nop.w
 8001c0e:	4601      	mov	r1, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbf0      	blt.n	8001c0a <_read+0x12>
  }

  return len;
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e009      	b.n	8001c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf1      	blt.n	8001c44 <_write+0x12>
  }
  return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_close>:

int _close(int file)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c90:	605a      	str	r2, [r3, #4]
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <_isatty>:

int _isatty(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd4:	4a14      	ldr	r2, [pc, #80]	@ (8001d28 <_sbrk+0x5c>)
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <_sbrk+0x60>)
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <_sbrk+0x64>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <_sbrk+0x68>)
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d207      	bcs.n	8001d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cfc:	f003 f870 	bl	8004de0 <__errno>
 8001d00:	4603      	mov	r3, r0
 8001d02:	220c      	movs	r2, #12
 8001d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	e009      	b.n	8001d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d12:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a05      	ldr	r2, [pc, #20]	@ (8001d30 <_sbrk+0x64>)
 8001d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3718      	adds	r7, #24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20005000 	.word	0x20005000
 8001d2c:	00000400 	.word	0x00000400
 8001d30:	2000029c 	.word	0x2000029c
 8001d34:	200003f0 	.word	0x200003f0

08001d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d44:	f7ff fff8 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d4a:	490c      	ldr	r1, [pc, #48]	@ (8001d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d60:	4c09      	ldr	r4, [pc, #36]	@ (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f003 f83d 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d72:	f7ff fc93 	bl	800169c <main>
  bx lr
 8001d76:	4770      	bx	lr
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d80:	08008998 	.word	0x08008998
  ldr r2, =_sbss
 8001d84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d88:	200003f0 	.word	0x200003f0

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	@ (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 f947 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff fe2e 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f95f 	bl	800209e <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 f927 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	200002a0 	.word	0x200002a0

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	200002a0 	.word	0x200002a0

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffe0 	bl	8001e40 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000008 	.word	0x20000008

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4906      	ldr	r1, [pc, #24]	@ (8001f34 <__NVIC_EnableIRQ+0x34>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	@ (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	@ (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	@ 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
         );
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff90 	bl	8001f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff2d 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff42 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff90 	bl	8001f8c <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5f 	bl	8001f38 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff35 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	@ 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e169      	b.n	80023a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8158 	bne.w	800239a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d05e      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 80020f4:	4a98      	ldr	r2, [pc, #608]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d875      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 80020fa:	4a98      	ldr	r2, [pc, #608]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d058      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002100:	4a96      	ldr	r2, [pc, #600]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d86f      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002106:	4a96      	ldr	r2, [pc, #600]	@ (8002360 <HAL_GPIO_Init+0x2a8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d052      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 800210c:	4a94      	ldr	r2, [pc, #592]	@ (8002360 <HAL_GPIO_Init+0x2a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d869      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002112:	4a94      	ldr	r2, [pc, #592]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04c      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002118:	4a92      	ldr	r2, [pc, #584]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d863      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800211e:	4a92      	ldr	r2, [pc, #584]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002124:	4a90      	ldr	r2, [pc, #576]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d85d      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800212a:	2b12      	cmp	r3, #18
 800212c:	d82a      	bhi.n	8002184 <HAL_GPIO_Init+0xcc>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d859      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <HAL_GPIO_Init+0x80>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	080021b3 	.word	0x080021b3
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800219f 	.word	0x0800219f
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e7 	.word	0x080021e7
 800214c:	080021e7 	.word	0x080021e7
 8002150:	080021e7 	.word	0x080021e7
 8002154:	080021e7 	.word	0x080021e7
 8002158:	080021e7 	.word	0x080021e7
 800215c:	080021e7 	.word	0x080021e7
 8002160:	080021e7 	.word	0x080021e7
 8002164:	080021e7 	.word	0x080021e7
 8002168:	080021e7 	.word	0x080021e7
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021e7 	.word	0x080021e7
 8002174:	080021e7 	.word	0x080021e7
 8002178:	080021e7 	.word	0x080021e7
 800217c:	08002195 	.word	0x08002195
 8002180:	080021a9 	.word	0x080021a9
 8002184:	4a79      	ldr	r2, [pc, #484]	@ (800236c <HAL_GPIO_Init+0x2b4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218a:	e02c      	b.n	80021e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e029      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3308      	adds	r3, #8
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e01f      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	330c      	adds	r3, #12
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e01a      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ba:	2304      	movs	r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e013      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	611a      	str	r2, [r3, #16]
          break;
 80021d2:	e009      	b.n	80021e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	615a      	str	r2, [r3, #20]
          break;
 80021de:	e003      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          break;
 80021e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_Init+0x13a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_Init+0x13e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	@ 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_Init+0x14c>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x152>
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80b1 	beq.w	800239a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	4b4d      	ldr	r3, [pc, #308]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a4c      	ldr	r2, [pc, #304]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002250:	4a48      	ldr	r2, [pc, #288]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_GPIO_Init+0x1ec>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3f      	ldr	r2, [pc, #252]	@ (800237c <HAL_GPIO_Init+0x2c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00d      	beq.n	80022a0 <HAL_GPIO_Init+0x1e8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3e      	ldr	r2, [pc, #248]	@ (8002380 <HAL_GPIO_Init+0x2c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <HAL_GPIO_Init+0x1e4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3d      	ldr	r2, [pc, #244]	@ (8002384 <HAL_GPIO_Init+0x2cc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_GPIO_Init+0x1e0>
 8002294:	2303      	movs	r3, #3
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 8002298:	2304      	movs	r3, #4
 800229a:	e004      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 800229c:	2302      	movs	r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a4:	2300      	movs	r3, #0
 80022a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022b6:	492f      	ldr	r1, [pc, #188]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	492c      	ldr	r1, [pc, #176]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022de:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4928      	ldr	r1, [pc, #160]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f8:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4922      	ldr	r1, [pc, #136]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	43db      	mvns	r3, r3
 800230e:	491e      	ldr	r1, [pc, #120]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002310:	4013      	ands	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4918      	ldr	r1, [pc, #96]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4914      	ldr	r1, [pc, #80]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d021      	beq.n	800238c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	490e      	ldr	r1, [pc, #56]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e021      	b.n	800239a <HAL_GPIO_Init+0x2e2>
 8002356:	bf00      	nop
 8002358:	10320000 	.word	0x10320000
 800235c:	10310000 	.word	0x10310000
 8002360:	10220000 	.word	0x10220000
 8002364:	10210000 	.word	0x10210000
 8002368:	10120000 	.word	0x10120000
 800236c:	10110000 	.word	0x10110000
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	40010800 	.word	0x40010800
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40011000 	.word	0x40011000
 8002384:	40011400 	.word	0x40011400
 8002388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_GPIO_Init+0x304>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	4909      	ldr	r1, [pc, #36]	@ (80023bc <HAL_GPIO_Init+0x304>)
 8002396:	4013      	ands	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f47f ae8e 	bne.w	80020cc <HAL_GPIO_Init+0x14>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	372c      	adds	r7, #44	@ 0x2c
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e001      	b.n	80023e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	807b      	strh	r3, [r7, #2]
 80023fa:	4613      	mov	r3, r2
 80023fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023fe:	787b      	ldrb	r3, [r7, #1]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002404:	887a      	ldrh	r2, [r7, #2]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800240a:	e003      	b.n	8002414 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	041a      	lsls	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	611a      	str	r2, [r3, #16]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
	...

08002420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f8ac 	bl	800159c <HAL_GPIO_EXTI_Callback>
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e12b      	b.n	80026ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fafa 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2224      	movs	r2, #36	@ 0x24
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b4:	f001 f832 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 80024b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a81      	ldr	r2, [pc, #516]	@ (80026c4 <HAL_I2C_Init+0x274>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d807      	bhi.n	80024d4 <HAL_I2C_Init+0x84>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a80      	ldr	r2, [pc, #512]	@ (80026c8 <HAL_I2C_Init+0x278>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e006      	b.n	80024e2 <HAL_I2C_Init+0x92>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a7d      	ldr	r2, [pc, #500]	@ (80026cc <HAL_I2C_Init+0x27c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	bf94      	ite	ls
 80024dc:	2301      	movls	r3, #1
 80024de:	2300      	movhi	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0e7      	b.n	80026ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4a78      	ldr	r2, [pc, #480]	@ (80026d0 <HAL_I2C_Init+0x280>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0c9b      	lsrs	r3, r3, #18
 80024f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a6a      	ldr	r2, [pc, #424]	@ (80026c4 <HAL_I2C_Init+0x274>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d802      	bhi.n	8002524 <HAL_I2C_Init+0xd4>
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3301      	adds	r3, #1
 8002522:	e009      	b.n	8002538 <HAL_I2C_Init+0xe8>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	4a69      	ldr	r2, [pc, #420]	@ (80026d4 <HAL_I2C_Init+0x284>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	3301      	adds	r3, #1
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	430b      	orrs	r3, r1
 800253e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800254a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	495c      	ldr	r1, [pc, #368]	@ (80026c4 <HAL_I2C_Init+0x274>)
 8002554:	428b      	cmp	r3, r1
 8002556:	d819      	bhi.n	800258c <HAL_I2C_Init+0x13c>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e59      	subs	r1, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fbb1 f3f3 	udiv	r3, r1, r3
 8002566:	1c59      	adds	r1, r3, #1
 8002568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800256c:	400b      	ands	r3, r1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_I2C_Init+0x138>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e59      	subs	r1, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002580:	3301      	adds	r3, #1
 8002582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002586:	e051      	b.n	800262c <HAL_I2C_Init+0x1dc>
 8002588:	2304      	movs	r3, #4
 800258a:	e04f      	b.n	800262c <HAL_I2C_Init+0x1dc>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <HAL_I2C_Init+0x168>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1e58      	subs	r0, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e012      	b.n	80025de <HAL_I2C_Init+0x18e>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x196>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e022      	b.n	800262c <HAL_I2C_Init+0x1dc>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10e      	bne.n	800260c <HAL_I2C_Init+0x1bc>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e58      	subs	r0, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800260a:	e00f      	b.n	800262c <HAL_I2C_Init+0x1dc>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	6809      	ldr	r1, [r1, #0]
 8002630:	4313      	orrs	r3, r2
 8002632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800265a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6911      	ldr	r1, [r2, #16]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68d2      	ldr	r2, [r2, #12]
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	430b      	orrs	r3, r1
 800266e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	000186a0 	.word	0x000186a0
 80026c8:	001e847f 	.word	0x001e847f
 80026cc:	003d08ff 	.word	0x003d08ff
 80026d0:	431bde83 	.word	0x431bde83
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af02      	add	r7, sp, #8
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	461a      	mov	r2, r3
 80026e4:	460b      	mov	r3, r1
 80026e6:	817b      	strh	r3, [r7, #10]
 80026e8:	4613      	mov	r3, r2
 80026ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fba8 	bl	8001e40 <HAL_GetTick>
 80026f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	f040 80e0 	bne.w	80028c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2319      	movs	r3, #25
 8002706:	2201      	movs	r2, #1
 8002708:	4970      	ldr	r1, [pc, #448]	@ (80028cc <HAL_I2C_Master_Transmit+0x1f4>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f964 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002716:	2302      	movs	r3, #2
 8002718:	e0d3      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_I2C_Master_Transmit+0x50>
 8002724:	2302      	movs	r3, #2
 8002726:	e0cc      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x1ea>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d007      	beq.n	800274e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2221      	movs	r2, #33	@ 0x21
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2210      	movs	r2, #16
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	893a      	ldrh	r2, [r7, #8]
 800277e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a50      	ldr	r2, [pc, #320]	@ (80028d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002790:	8979      	ldrh	r1, [r7, #10]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f89c 	bl	80028d4 <I2C_MasterRequestWrite>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e08d      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027bc:	e066      	b.n	800288c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fa22 	bl	8002c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d107      	bne.n	80027e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e06b      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b04      	cmp	r3, #4
 8002826:	d11b      	bne.n	8002860 <HAL_I2C_Master_Transmit+0x188>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	2b00      	cmp	r3, #0
 800282e:	d017      	beq.n	8002860 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	6a39      	ldr	r1, [r7, #32]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 fa19 	bl	8002c9c <I2C_WaitOnBTFFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e01a      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d194      	bne.n	80027be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	00100002 	.word	0x00100002
 80028d0:	ffff0000 	.word	0xffff0000

080028d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	460b      	mov	r3, r1
 80028e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d006      	beq.n	80028fe <I2C_MasterRequestWrite+0x2a>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d003      	beq.n	80028fe <I2C_MasterRequestWrite+0x2a>
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028fc:	d108      	bne.n	8002910 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e00b      	b.n	8002928 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	2b12      	cmp	r3, #18
 8002916:	d107      	bne.n	8002928 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002926:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f84f 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00d      	beq.n	800295c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800294e:	d103      	bne.n	8002958 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e035      	b.n	80029c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002964:	d108      	bne.n	8002978 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	e01b      	b.n	80029b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002978:	897b      	ldrh	r3, [r7, #10]
 800297a:	11db      	asrs	r3, r3, #7
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 0306 	and.w	r3, r3, #6
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f063 030f 	orn	r3, r3, #15
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	490e      	ldr	r1, [pc, #56]	@ (80029d0 <I2C_MasterRequestWrite+0xfc>)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f898 	bl	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e010      	b.n	80029c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029a6:	897b      	ldrh	r3, [r7, #10]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4907      	ldr	r1, [pc, #28]	@ (80029d4 <I2C_MasterRequestWrite+0x100>)
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f888 	bl	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	00010008 	.word	0x00010008
 80029d4:	00010002 	.word	0x00010002

080029d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e8:	e048      	b.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d044      	beq.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7ff fa25 	bl	8001e40 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d139      	bne.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0c1b      	lsrs	r3, r3, #16
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10d      	bne.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	e00c      	b.n	8002a48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	43da      	mvns	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d116      	bne.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e023      	b.n	8002ac4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0c1b      	lsrs	r3, r3, #16
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d10d      	bne.n	8002aa2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4013      	ands	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	e00c      	b.n	8002abc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4013      	ands	r3, r2
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d093      	beq.n	80029ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ada:	e071      	b.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aea:	d123      	bne.n	8002b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	f043 0204 	orr.w	r2, r3, #4
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e067      	b.n	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d041      	beq.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3c:	f7ff f980 	bl	8001e40 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d302      	bcc.n	8002b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d136      	bne.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10c      	bne.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4013      	ands	r3, r2
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	e00b      	b.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4013      	ands	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e021      	b.n	8002c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10c      	bne.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	43da      	mvns	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e00b      	b.n	8002bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f47f af6d 	bne.w	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c18:	e034      	b.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f886 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e034      	b.n	8002c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d028      	beq.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7ff f905 	bl	8001e40 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11d      	bne.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c52:	2b80      	cmp	r3, #128	@ 0x80
 8002c54:	d016      	beq.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e007      	b.n	8002c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b80      	cmp	r3, #128	@ 0x80
 8002c90:	d1c3      	bne.n	8002c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca8:	e034      	b.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f83e 	bl	8002d2c <I2C_IsAcknowledgeFailed>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e034      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d028      	beq.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7ff f8bd 	bl	8001e40 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d11d      	bne.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d016      	beq.n	8002d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e007      	b.n	8002d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d1c3      	bne.n	8002caa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d11b      	bne.n	8002d7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e272      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8087 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da8:	4b92      	ldr	r3, [pc, #584]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d00c      	beq.n	8002dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db4:	4b8f      	ldr	r3, [pc, #572]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d112      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
 8002dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	4b89      	ldr	r3, [pc, #548]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d168      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e24c      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x76>
 8002df0:	4b80      	ldr	r3, [pc, #512]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7f      	ldr	r2, [pc, #508]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e02e      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x98>
 8002e06:	4b7b      	ldr	r3, [pc, #492]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b78      	ldr	r3, [pc, #480]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a77      	ldr	r2, [pc, #476]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0xbc>
 8002e2a:	4b72      	ldr	r3, [pc, #456]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a71      	ldr	r2, [pc, #452]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e44:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b68      	ldr	r3, [pc, #416]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a67      	ldr	r2, [pc, #412]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe ffec 	bl	8001e40 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe ffe8 	bl	8001e40 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e200      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe4>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe ffd8 	bl	8001e40 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe ffd4 	bl	8001e40 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1ec      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b53      	ldr	r3, [pc, #332]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x10c>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ece:	4b49      	ldr	r3, [pc, #292]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
 8002eda:	4b46      	ldr	r3, [pc, #280]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b43      	ldr	r3, [pc, #268]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1c0      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4939      	ldr	r1, [pc, #228]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe ff8d 	bl	8001e40 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fe ff89 	bl	8001e40 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1a1      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4927      	ldr	r1, [pc, #156]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b26      	ldr	r3, [pc, #152]	@ (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe ff6c 	bl	8001e40 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe ff68 	bl	8001e40 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e180      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d03a      	beq.n	800300c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b17      	ldr	r3, [pc, #92]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7fe ff4c 	bl	8001e40 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fe ff48 	bl	8001e40 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e160      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f000 faba 	bl	8003544 <RCC_Delay>
 8002fd0:	e01c      	b.n	800300c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe ff32 	bl	8001e40 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fde:	e00f      	b.n	8003000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fe ff2e 	bl	8001e40 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d908      	bls.n	8003000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e146      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	42420000 	.word	0x42420000
 8002ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	4b92      	ldr	r3, [pc, #584]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e9      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a6 	beq.w	8003166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301e:	4b8b      	ldr	r3, [pc, #556]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10d      	bne.n	8003046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b88      	ldr	r3, [pc, #544]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a87      	ldr	r2, [pc, #540]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b85      	ldr	r3, [pc, #532]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b82      	ldr	r3, [pc, #520]	@ (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003052:	4b7f      	ldr	r3, [pc, #508]	@ (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7e      	ldr	r2, [pc, #504]	@ (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fe feef 	bl	8001e40 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fe feeb 	bl	8001e40 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	@ 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e103      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b75      	ldr	r3, [pc, #468]	@ (8003250 <HAL_RCC_OscConfig+0x4c8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x312>
 800308c:	4b6f      	ldr	r3, [pc, #444]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a6e      	ldr	r2, [pc, #440]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e02d      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x334>
 80030a2:	4b6a      	ldr	r3, [pc, #424]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a69      	ldr	r2, [pc, #420]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	4b67      	ldr	r3, [pc, #412]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a66      	ldr	r2, [pc, #408]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6213      	str	r3, [r2, #32]
 80030ba:	e01c      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x356>
 80030c4:	4b61      	ldr	r3, [pc, #388]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a60      	ldr	r2, [pc, #384]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	4b5e      	ldr	r3, [pc, #376]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a5d      	ldr	r2, [pc, #372]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6213      	str	r3, [r2, #32]
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030de:	4b5b      	ldr	r3, [pc, #364]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a5a      	ldr	r2, [pc, #360]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b58      	ldr	r3, [pc, #352]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a57      	ldr	r2, [pc, #348]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fe9f 	bl	8001e40 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe fe9b 	bl	8001e40 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0b1      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b4b      	ldr	r3, [pc, #300]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCC_OscConfig+0x37e>
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fe fe89 	bl	8001e40 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe fe85 	bl	8001e40 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e09b      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	4b40      	ldr	r3, [pc, #256]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b3c      	ldr	r3, [pc, #240]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4a3b      	ldr	r2, [pc, #236]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8087 	beq.w	800327e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	4b36      	ldr	r3, [pc, #216]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d061      	beq.n	8003240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d146      	bne.n	8003212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	4b33      	ldr	r3, [pc, #204]	@ (8003254 <HAL_RCC_OscConfig+0x4cc>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe fe59 	bl	8001e40 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fe fe55 	bl	8001e40 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e06d      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a4:	4b29      	ldr	r3, [pc, #164]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b8:	d108      	bne.n	80031cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ba:	4b24      	ldr	r3, [pc, #144]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4921      	ldr	r1, [pc, #132]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031cc:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a19      	ldr	r1, [r3, #32]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	430b      	orrs	r3, r1
 80031de:	491b      	ldr	r1, [pc, #108]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fe fe29 	bl	8001e40 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fe25 	bl	8001e40 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e03d      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46a>
 8003210:	e035      	b.n	800327e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b10      	ldr	r3, [pc, #64]	@ (8003254 <HAL_RCC_OscConfig+0x4cc>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fe12 	bl	8001e40 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fe fe0e 	bl	8001e40 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e026      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x498>
 800323e:	e01e      	b.n	800327e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e019      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_OscConfig+0x500>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	429a      	cmp	r2, r3
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000

0800328c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0d0      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b6a      	ldr	r3, [pc, #424]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d910      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b67      	ldr	r3, [pc, #412]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4965      	ldr	r1, [pc, #404]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b63      	ldr	r3, [pc, #396]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b59      	ldr	r3, [pc, #356]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003300:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a52      	ldr	r2, [pc, #328]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800330a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	494d      	ldr	r1, [pc, #308]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d040      	beq.n	80033ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d115      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e07f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e073      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	4b3d      	ldr	r3, [pc, #244]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06b      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4936      	ldr	r1, [pc, #216]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337c:	f7fe fd60 	bl	8001e40 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fe fd5c 	bl	8001e40 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e053      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b2d      	ldr	r3, [pc, #180]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b27      	ldr	r3, [pc, #156]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d210      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b24      	ldr	r3, [pc, #144]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	4922      	ldr	r1, [pc, #136]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e032      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4916      	ldr	r1, [pc, #88]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003406:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	490e      	ldr	r1, [pc, #56]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341a:	f000 f821 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490a      	ldr	r1, [pc, #40]	@ (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1d0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fcbe 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40022000 	.word	0x40022000
 8003450:	40021000 	.word	0x40021000
 8003454:	0800852c 	.word	0x0800852c
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800347a:	4b1e      	ldr	r3, [pc, #120]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x30>
 800348a:	2b08      	cmp	r3, #8
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x36>
 800348e:	e027      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003490:	4b19      	ldr	r3, [pc, #100]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003492:	613b      	str	r3, [r7, #16]
      break;
 8003494:	e027      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	0c9b      	lsrs	r3, r3, #18
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	4a17      	ldr	r2, [pc, #92]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0c5b      	lsrs	r3, r3, #17
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	4a11      	ldr	r2, [pc, #68]	@ (8003500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a0d      	ldr	r2, [pc, #52]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034c2:	fb03 f202 	mul.w	r2, r3, r2
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e004      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	613b      	str	r3, [r7, #16]
      break;
 80034de:	e002      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034e2:	613b      	str	r3, [r7, #16]
      break;
 80034e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e6:	693b      	ldr	r3, [r7, #16]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	007a1200 	.word	0x007a1200
 80034fc:	08008544 	.word	0x08008544
 8003500:	08008554 	.word	0x08008554
 8003504:	003d0900 	.word	0x003d0900

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b02      	ldr	r3, [pc, #8]	@ (8003518 <HAL_RCC_GetHCLKFreq+0x10>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003520:	f7ff fff2 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	@ (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	0800853c 	.word	0x0800853c

08003544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <RCC_Delay+0x34>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	@ (800357c <RCC_Delay+0x38>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0a5b      	lsrs	r3, r3, #9
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003560:	bf00      	nop
  }
  while (Delay --);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <RCC_Delay+0x1c>
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e041      	b.n	8003616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe faa0 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 fa82 	bl	8003ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e032      	b.n	800369e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a18      	ldr	r2, [pc, #96]	@ (80036a8 <HAL_TIM_Base_Start+0x88>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00e      	beq.n	8003668 <HAL_TIM_Base_Start+0x48>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003652:	d009      	beq.n	8003668 <HAL_TIM_Base_Start+0x48>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a14      	ldr	r2, [pc, #80]	@ (80036ac <HAL_TIM_Base_Start+0x8c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d004      	beq.n	8003668 <HAL_TIM_Base_Start+0x48>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a13      	ldr	r2, [pc, #76]	@ (80036b0 <HAL_TIM_Base_Start+0x90>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d111      	bne.n	800368c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b06      	cmp	r3, #6
 8003678:	d010      	beq.n	800369c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	e007      	b.n	800369c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800

080036b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a1a      	ldr	r2, [r3, #32]
 80036c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10f      	bne.n	80036ec <HAL_TIM_Base_Stop+0x38>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_TIM_Base_Stop+0x38>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0202 	mvn.w	r2, #2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9a1 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f994 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f9a3 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f97b 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f96e 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f97d 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0208 	mvn.w	r2, #8
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2204      	movs	r2, #4
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f955 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f948 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f957 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f92f 	bl	8003a92 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f922 	bl	8003a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f931 	bl	8003aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0201 	mvn.w	r2, #1
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f901 	bl	8003a6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa87 	bl	8003d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f901 	bl	8003ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fa5a 	bl	8003d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_ConfigClockSource+0x1c>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0b4      	b.n	8003a66 <HAL_TIM_ConfigClockSource+0x186>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003934:	d03e      	beq.n	80039b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393a:	f200 8087 	bhi.w	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003942:	f000 8086 	beq.w	8003a52 <HAL_TIM_ConfigClockSource+0x172>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	d87f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b70      	cmp	r3, #112	@ 0x70
 800394e:	d01a      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xa6>
 8003950:	2b70      	cmp	r3, #112	@ 0x70
 8003952:	d87b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b60      	cmp	r3, #96	@ 0x60
 8003956:	d050      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x11a>
 8003958:	2b60      	cmp	r3, #96	@ 0x60
 800395a:	d877      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b50      	cmp	r3, #80	@ 0x50
 800395e:	d03c      	beq.n	80039da <HAL_TIM_ConfigClockSource+0xfa>
 8003960:	2b50      	cmp	r3, #80	@ 0x50
 8003962:	d873      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b40      	cmp	r3, #64	@ 0x40
 8003966:	d058      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x13a>
 8003968:	2b40      	cmp	r3, #64	@ 0x40
 800396a:	d86f      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b30      	cmp	r3, #48	@ 0x30
 800396e:	d064      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003970:	2b30      	cmp	r3, #48	@ 0x30
 8003972:	d86b      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d060      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	2b20      	cmp	r3, #32
 800397a:	d867      	bhi.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b10      	cmp	r3, #16
 8003982:	d05a      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	e062      	b.n	8003a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	f000 f97c 	bl	8003c92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	609a      	str	r2, [r3, #8]
      break;
 80039b2:	e04f      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039c4:	f000 f965 	bl	8003c92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039d6:	609a      	str	r2, [r3, #8]
      break;
 80039d8:	e03c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 f8dc 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2150      	movs	r1, #80	@ 0x50
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f933 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 80039f8:	e02c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 f8fa 	bl	8003c00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2160      	movs	r1, #96	@ 0x60
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f923 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003a18:	e01c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	461a      	mov	r2, r3
 8003a28:	f000 f8bc 	bl	8003ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2140      	movs	r1, #64	@ 0x40
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f913 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003a38:	e00c      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4619      	mov	r1, r3
 8003a44:	4610      	mov	r0, r2
 8003a46:	f000 f90a 	bl	8003c5e <TIM_ITRx_SetConfig>
      break;
 8003a4a:	e003      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e000      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2f      	ldr	r2, [pc, #188]	@ (8003b98 <TIM_Base_SetConfig+0xd0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00b      	beq.n	8003af8 <TIM_Base_SetConfig+0x30>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae6:	d007      	beq.n	8003af8 <TIM_Base_SetConfig+0x30>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a2c      	ldr	r2, [pc, #176]	@ (8003b9c <TIM_Base_SetConfig+0xd4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_Base_SetConfig+0x30>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <TIM_Base_SetConfig+0xd8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d108      	bne.n	8003b0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a22      	ldr	r2, [pc, #136]	@ (8003b98 <TIM_Base_SetConfig+0xd0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <TIM_Base_SetConfig+0x62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b18:	d007      	beq.n	8003b2a <TIM_Base_SetConfig+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b9c <TIM_Base_SetConfig+0xd4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <TIM_Base_SetConfig+0x62>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <TIM_Base_SetConfig+0xd8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d108      	bne.n	8003b3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <TIM_Base_SetConfig+0xd0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d103      	bne.n	8003b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f023 0201 	bic.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f023 030a 	bic.w	r3, r3, #10
 8003be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0210 	bic.w	r2, r3, #16
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	031b      	lsls	r3, r3, #12
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f043 0307 	orr.w	r3, r3, #7
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	021a      	lsls	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	609a      	str	r2, [r3, #8]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e046      	b.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a16      	ldr	r2, [pc, #88]	@ (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d009      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a10      	ldr	r2, [pc, #64]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10c      	bne.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800

08003d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <__cvt>:
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db6:	461d      	mov	r5, r3
 8003db8:	bfbb      	ittet	lt
 8003dba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003dbe:	461d      	movlt	r5, r3
 8003dc0:	2300      	movge	r3, #0
 8003dc2:	232d      	movlt	r3, #45	@ 0x2d
 8003dc4:	b088      	sub	sp, #32
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	bfb8      	it	lt
 8003dca:	4614      	movlt	r4, r2
 8003dcc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003dce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003dd0:	7013      	strb	r3, [r2, #0]
 8003dd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003dd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003dd8:	f023 0820 	bic.w	r8, r3, #32
 8003ddc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003de0:	d005      	beq.n	8003dee <__cvt+0x3e>
 8003de2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003de6:	d100      	bne.n	8003dea <__cvt+0x3a>
 8003de8:	3601      	adds	r6, #1
 8003dea:	2302      	movs	r3, #2
 8003dec:	e000      	b.n	8003df0 <__cvt+0x40>
 8003dee:	2303      	movs	r3, #3
 8003df0:	aa07      	add	r2, sp, #28
 8003df2:	9204      	str	r2, [sp, #16]
 8003df4:	aa06      	add	r2, sp, #24
 8003df6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003dfa:	e9cd 3600 	strd	r3, r6, [sp]
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	f001 f8b5 	bl	8004f70 <_dtoa_r>
 8003e06:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e0a:	4607      	mov	r7, r0
 8003e0c:	d119      	bne.n	8003e42 <__cvt+0x92>
 8003e0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003e10:	07db      	lsls	r3, r3, #31
 8003e12:	d50e      	bpl.n	8003e32 <__cvt+0x82>
 8003e14:	eb00 0906 	add.w	r9, r0, r6
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc fdc2 	bl	80009a8 <__aeabi_dcmpeq>
 8003e24:	b108      	cbz	r0, 8003e2a <__cvt+0x7a>
 8003e26:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e2a:	2230      	movs	r2, #48	@ 0x30
 8003e2c:	9b07      	ldr	r3, [sp, #28]
 8003e2e:	454b      	cmp	r3, r9
 8003e30:	d31e      	bcc.n	8003e70 <__cvt+0xc0>
 8003e32:	4638      	mov	r0, r7
 8003e34:	9b07      	ldr	r3, [sp, #28]
 8003e36:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003e38:	1bdb      	subs	r3, r3, r7
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	b008      	add	sp, #32
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e42:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e46:	eb00 0906 	add.w	r9, r0, r6
 8003e4a:	d1e5      	bne.n	8003e18 <__cvt+0x68>
 8003e4c:	7803      	ldrb	r3, [r0, #0]
 8003e4e:	2b30      	cmp	r3, #48	@ 0x30
 8003e50:	d10a      	bne.n	8003e68 <__cvt+0xb8>
 8003e52:	2200      	movs	r2, #0
 8003e54:	2300      	movs	r3, #0
 8003e56:	4620      	mov	r0, r4
 8003e58:	4629      	mov	r1, r5
 8003e5a:	f7fc fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8003e5e:	b918      	cbnz	r0, 8003e68 <__cvt+0xb8>
 8003e60:	f1c6 0601 	rsb	r6, r6, #1
 8003e64:	f8ca 6000 	str.w	r6, [sl]
 8003e68:	f8da 3000 	ldr.w	r3, [sl]
 8003e6c:	4499      	add	r9, r3
 8003e6e:	e7d3      	b.n	8003e18 <__cvt+0x68>
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	9107      	str	r1, [sp, #28]
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e7d9      	b.n	8003e2c <__cvt+0x7c>

08003e78 <__exponent>:
 8003e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7a:	2900      	cmp	r1, #0
 8003e7c:	bfb6      	itet	lt
 8003e7e:	232d      	movlt	r3, #45	@ 0x2d
 8003e80:	232b      	movge	r3, #43	@ 0x2b
 8003e82:	4249      	neglt	r1, r1
 8003e84:	2909      	cmp	r1, #9
 8003e86:	7002      	strb	r2, [r0, #0]
 8003e88:	7043      	strb	r3, [r0, #1]
 8003e8a:	dd29      	ble.n	8003ee0 <__exponent+0x68>
 8003e8c:	f10d 0307 	add.w	r3, sp, #7
 8003e90:	461d      	mov	r5, r3
 8003e92:	270a      	movs	r7, #10
 8003e94:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e98:	461a      	mov	r2, r3
 8003e9a:	fb07 1416 	mls	r4, r7, r6, r1
 8003e9e:	3430      	adds	r4, #48	@ 0x30
 8003ea0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	2c63      	cmp	r4, #99	@ 0x63
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8003eae:	dcf1      	bgt.n	8003e94 <__exponent+0x1c>
 8003eb0:	3130      	adds	r1, #48	@ 0x30
 8003eb2:	1e94      	subs	r4, r2, #2
 8003eb4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003eb8:	4623      	mov	r3, r4
 8003eba:	1c41      	adds	r1, r0, #1
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	d30a      	bcc.n	8003ed6 <__exponent+0x5e>
 8003ec0:	f10d 0309 	add.w	r3, sp, #9
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	42ac      	cmp	r4, r5
 8003ec8:	bf88      	it	hi
 8003eca:	2300      	movhi	r3, #0
 8003ecc:	3302      	adds	r3, #2
 8003ece:	4403      	add	r3, r0
 8003ed0:	1a18      	subs	r0, r3, r0
 8003ed2:	b003      	add	sp, #12
 8003ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003eda:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ede:	e7ed      	b.n	8003ebc <__exponent+0x44>
 8003ee0:	2330      	movs	r3, #48	@ 0x30
 8003ee2:	3130      	adds	r1, #48	@ 0x30
 8003ee4:	7083      	strb	r3, [r0, #2]
 8003ee6:	70c1      	strb	r1, [r0, #3]
 8003ee8:	1d03      	adds	r3, r0, #4
 8003eea:	e7f1      	b.n	8003ed0 <__exponent+0x58>

08003eec <_printf_float>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	b091      	sub	sp, #68	@ 0x44
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003ef8:	4616      	mov	r6, r2
 8003efa:	461f      	mov	r7, r3
 8003efc:	4605      	mov	r5, r0
 8003efe:	f000 ff25 	bl	8004d4c <_localeconv_r>
 8003f02:	6803      	ldr	r3, [r0, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	9308      	str	r3, [sp, #32]
 8003f08:	f7fc f922 	bl	8000150 <strlen>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f10:	f8d8 3000 	ldr.w	r3, [r8]
 8003f14:	9009      	str	r0, [sp, #36]	@ 0x24
 8003f16:	3307      	adds	r3, #7
 8003f18:	f023 0307 	bic.w	r3, r3, #7
 8003f1c:	f103 0208 	add.w	r2, r3, #8
 8003f20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f24:	f8d4 b000 	ldr.w	fp, [r4]
 8003f28:	f8c8 2000 	str.w	r2, [r8]
 8003f2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f36:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f46:	4b9c      	ldr	r3, [pc, #624]	@ (80041b8 <_printf_float+0x2cc>)
 8003f48:	f7fc fd60 	bl	8000a0c <__aeabi_dcmpun>
 8003f4c:	bb70      	cbnz	r0, 8003fac <_printf_float+0xc0>
 8003f4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295
 8003f56:	4b98      	ldr	r3, [pc, #608]	@ (80041b8 <_printf_float+0x2cc>)
 8003f58:	f7fc fd3a 	bl	80009d0 <__aeabi_dcmple>
 8003f5c:	bb30      	cbnz	r0, 8003fac <_printf_float+0xc0>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2300      	movs	r3, #0
 8003f62:	4640      	mov	r0, r8
 8003f64:	4649      	mov	r1, r9
 8003f66:	f7fc fd29 	bl	80009bc <__aeabi_dcmplt>
 8003f6a:	b110      	cbz	r0, 8003f72 <_printf_float+0x86>
 8003f6c:	232d      	movs	r3, #45	@ 0x2d
 8003f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f72:	4a92      	ldr	r2, [pc, #584]	@ (80041bc <_printf_float+0x2d0>)
 8003f74:	4b92      	ldr	r3, [pc, #584]	@ (80041c0 <_printf_float+0x2d4>)
 8003f76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f7a:	bf94      	ite	ls
 8003f7c:	4690      	movls	r8, r2
 8003f7e:	4698      	movhi	r8, r3
 8003f80:	2303      	movs	r3, #3
 8003f82:	f04f 0900 	mov.w	r9, #0
 8003f86:	6123      	str	r3, [r4, #16]
 8003f88:	f02b 0304 	bic.w	r3, fp, #4
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	4633      	mov	r3, r6
 8003f90:	4621      	mov	r1, r4
 8003f92:	4628      	mov	r0, r5
 8003f94:	9700      	str	r7, [sp, #0]
 8003f96:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003f98:	f000 f9d4 	bl	8004344 <_printf_common>
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	f040 8090 	bne.w	80040c2 <_printf_float+0x1d6>
 8003fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa6:	b011      	add	sp, #68	@ 0x44
 8003fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fac:	4642      	mov	r2, r8
 8003fae:	464b      	mov	r3, r9
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	f7fc fd2a 	bl	8000a0c <__aeabi_dcmpun>
 8003fb8:	b148      	cbz	r0, 8003fce <_printf_float+0xe2>
 8003fba:	464b      	mov	r3, r9
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	bfb8      	it	lt
 8003fc0:	232d      	movlt	r3, #45	@ 0x2d
 8003fc2:	4a80      	ldr	r2, [pc, #512]	@ (80041c4 <_printf_float+0x2d8>)
 8003fc4:	bfb8      	it	lt
 8003fc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fca:	4b7f      	ldr	r3, [pc, #508]	@ (80041c8 <_printf_float+0x2dc>)
 8003fcc:	e7d3      	b.n	8003f76 <_printf_float+0x8a>
 8003fce:	6863      	ldr	r3, [r4, #4]
 8003fd0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	d13f      	bne.n	8004058 <_printf_float+0x16c>
 8003fd8:	2306      	movs	r3, #6
 8003fda:	6063      	str	r3, [r4, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	9206      	str	r2, [sp, #24]
 8003fe6:	aa0e      	add	r2, sp, #56	@ 0x38
 8003fe8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003fec:	aa0d      	add	r2, sp, #52	@ 0x34
 8003fee:	9203      	str	r2, [sp, #12]
 8003ff0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003ff4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	4628      	mov	r0, r5
 8004000:	464b      	mov	r3, r9
 8004002:	910a      	str	r1, [sp, #40]	@ 0x28
 8004004:	f7ff fed4 	bl	8003db0 <__cvt>
 8004008:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800400a:	4680      	mov	r8, r0
 800400c:	2947      	cmp	r1, #71	@ 0x47
 800400e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004010:	d128      	bne.n	8004064 <_printf_float+0x178>
 8004012:	1cc8      	adds	r0, r1, #3
 8004014:	db02      	blt.n	800401c <_printf_float+0x130>
 8004016:	6863      	ldr	r3, [r4, #4]
 8004018:	4299      	cmp	r1, r3
 800401a:	dd40      	ble.n	800409e <_printf_float+0x1b2>
 800401c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004020:	fa5f fa8a 	uxtb.w	sl, sl
 8004024:	4652      	mov	r2, sl
 8004026:	3901      	subs	r1, #1
 8004028:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800402c:	910d      	str	r1, [sp, #52]	@ 0x34
 800402e:	f7ff ff23 	bl	8003e78 <__exponent>
 8004032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004034:	4681      	mov	r9, r0
 8004036:	1813      	adds	r3, r2, r0
 8004038:	2a01      	cmp	r2, #1
 800403a:	6123      	str	r3, [r4, #16]
 800403c:	dc02      	bgt.n	8004044 <_printf_float+0x158>
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	07d2      	lsls	r2, r2, #31
 8004042:	d501      	bpl.n	8004048 <_printf_float+0x15c>
 8004044:	3301      	adds	r3, #1
 8004046:	6123      	str	r3, [r4, #16]
 8004048:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800404c:	2b00      	cmp	r3, #0
 800404e:	d09e      	beq.n	8003f8e <_printf_float+0xa2>
 8004050:	232d      	movs	r3, #45	@ 0x2d
 8004052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004056:	e79a      	b.n	8003f8e <_printf_float+0xa2>
 8004058:	2947      	cmp	r1, #71	@ 0x47
 800405a:	d1bf      	bne.n	8003fdc <_printf_float+0xf0>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1bd      	bne.n	8003fdc <_printf_float+0xf0>
 8004060:	2301      	movs	r3, #1
 8004062:	e7ba      	b.n	8003fda <_printf_float+0xee>
 8004064:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004068:	d9dc      	bls.n	8004024 <_printf_float+0x138>
 800406a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800406e:	d118      	bne.n	80040a2 <_printf_float+0x1b6>
 8004070:	2900      	cmp	r1, #0
 8004072:	6863      	ldr	r3, [r4, #4]
 8004074:	dd0b      	ble.n	800408e <_printf_float+0x1a2>
 8004076:	6121      	str	r1, [r4, #16]
 8004078:	b913      	cbnz	r3, 8004080 <_printf_float+0x194>
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	07d0      	lsls	r0, r2, #31
 800407e:	d502      	bpl.n	8004086 <_printf_float+0x19a>
 8004080:	3301      	adds	r3, #1
 8004082:	440b      	add	r3, r1
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	f04f 0900 	mov.w	r9, #0
 800408a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800408c:	e7dc      	b.n	8004048 <_printf_float+0x15c>
 800408e:	b913      	cbnz	r3, 8004096 <_printf_float+0x1aa>
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	07d2      	lsls	r2, r2, #31
 8004094:	d501      	bpl.n	800409a <_printf_float+0x1ae>
 8004096:	3302      	adds	r3, #2
 8004098:	e7f4      	b.n	8004084 <_printf_float+0x198>
 800409a:	2301      	movs	r3, #1
 800409c:	e7f2      	b.n	8004084 <_printf_float+0x198>
 800409e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040a4:	4299      	cmp	r1, r3
 80040a6:	db05      	blt.n	80040b4 <_printf_float+0x1c8>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	6121      	str	r1, [r4, #16]
 80040ac:	07d8      	lsls	r0, r3, #31
 80040ae:	d5ea      	bpl.n	8004086 <_printf_float+0x19a>
 80040b0:	1c4b      	adds	r3, r1, #1
 80040b2:	e7e7      	b.n	8004084 <_printf_float+0x198>
 80040b4:	2900      	cmp	r1, #0
 80040b6:	bfcc      	ite	gt
 80040b8:	2201      	movgt	r2, #1
 80040ba:	f1c1 0202 	rsble	r2, r1, #2
 80040be:	4413      	add	r3, r2
 80040c0:	e7e0      	b.n	8004084 <_printf_float+0x198>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	055a      	lsls	r2, r3, #21
 80040c6:	d407      	bmi.n	80040d8 <_printf_float+0x1ec>
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	4642      	mov	r2, r8
 80040cc:	4631      	mov	r1, r6
 80040ce:	4628      	mov	r0, r5
 80040d0:	47b8      	blx	r7
 80040d2:	3001      	adds	r0, #1
 80040d4:	d12b      	bne.n	800412e <_printf_float+0x242>
 80040d6:	e764      	b.n	8003fa2 <_printf_float+0xb6>
 80040d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040dc:	f240 80dc 	bls.w	8004298 <_printf_float+0x3ac>
 80040e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040e4:	2200      	movs	r2, #0
 80040e6:	2300      	movs	r3, #0
 80040e8:	f7fc fc5e 	bl	80009a8 <__aeabi_dcmpeq>
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d033      	beq.n	8004158 <_printf_float+0x26c>
 80040f0:	2301      	movs	r3, #1
 80040f2:	4631      	mov	r1, r6
 80040f4:	4628      	mov	r0, r5
 80040f6:	4a35      	ldr	r2, [pc, #212]	@ (80041cc <_printf_float+0x2e0>)
 80040f8:	47b8      	blx	r7
 80040fa:	3001      	adds	r0, #1
 80040fc:	f43f af51 	beq.w	8003fa2 <_printf_float+0xb6>
 8004100:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004104:	4543      	cmp	r3, r8
 8004106:	db02      	blt.n	800410e <_printf_float+0x222>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	07d8      	lsls	r0, r3, #31
 800410c:	d50f      	bpl.n	800412e <_printf_float+0x242>
 800410e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004112:	4631      	mov	r1, r6
 8004114:	4628      	mov	r0, r5
 8004116:	47b8      	blx	r7
 8004118:	3001      	adds	r0, #1
 800411a:	f43f af42 	beq.w	8003fa2 <_printf_float+0xb6>
 800411e:	f04f 0900 	mov.w	r9, #0
 8004122:	f108 38ff 	add.w	r8, r8, #4294967295
 8004126:	f104 0a1a 	add.w	sl, r4, #26
 800412a:	45c8      	cmp	r8, r9
 800412c:	dc09      	bgt.n	8004142 <_printf_float+0x256>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	079b      	lsls	r3, r3, #30
 8004132:	f100 8102 	bmi.w	800433a <_printf_float+0x44e>
 8004136:	68e0      	ldr	r0, [r4, #12]
 8004138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800413a:	4298      	cmp	r0, r3
 800413c:	bfb8      	it	lt
 800413e:	4618      	movlt	r0, r3
 8004140:	e731      	b.n	8003fa6 <_printf_float+0xba>
 8004142:	2301      	movs	r3, #1
 8004144:	4652      	mov	r2, sl
 8004146:	4631      	mov	r1, r6
 8004148:	4628      	mov	r0, r5
 800414a:	47b8      	blx	r7
 800414c:	3001      	adds	r0, #1
 800414e:	f43f af28 	beq.w	8003fa2 <_printf_float+0xb6>
 8004152:	f109 0901 	add.w	r9, r9, #1
 8004156:	e7e8      	b.n	800412a <_printf_float+0x23e>
 8004158:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800415a:	2b00      	cmp	r3, #0
 800415c:	dc38      	bgt.n	80041d0 <_printf_float+0x2e4>
 800415e:	2301      	movs	r3, #1
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	4a19      	ldr	r2, [pc, #100]	@ (80041cc <_printf_float+0x2e0>)
 8004166:	47b8      	blx	r7
 8004168:	3001      	adds	r0, #1
 800416a:	f43f af1a 	beq.w	8003fa2 <_printf_float+0xb6>
 800416e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004172:	ea59 0303 	orrs.w	r3, r9, r3
 8004176:	d102      	bne.n	800417e <_printf_float+0x292>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	07d9      	lsls	r1, r3, #31
 800417c:	d5d7      	bpl.n	800412e <_printf_float+0x242>
 800417e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004182:	4631      	mov	r1, r6
 8004184:	4628      	mov	r0, r5
 8004186:	47b8      	blx	r7
 8004188:	3001      	adds	r0, #1
 800418a:	f43f af0a 	beq.w	8003fa2 <_printf_float+0xb6>
 800418e:	f04f 0a00 	mov.w	sl, #0
 8004192:	f104 0b1a 	add.w	fp, r4, #26
 8004196:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004198:	425b      	negs	r3, r3
 800419a:	4553      	cmp	r3, sl
 800419c:	dc01      	bgt.n	80041a2 <_printf_float+0x2b6>
 800419e:	464b      	mov	r3, r9
 80041a0:	e793      	b.n	80040ca <_printf_float+0x1de>
 80041a2:	2301      	movs	r3, #1
 80041a4:	465a      	mov	r2, fp
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	47b8      	blx	r7
 80041ac:	3001      	adds	r0, #1
 80041ae:	f43f aef8 	beq.w	8003fa2 <_printf_float+0xb6>
 80041b2:	f10a 0a01 	add.w	sl, sl, #1
 80041b6:	e7ee      	b.n	8004196 <_printf_float+0x2aa>
 80041b8:	7fefffff 	.word	0x7fefffff
 80041bc:	08008556 	.word	0x08008556
 80041c0:	0800855a 	.word	0x0800855a
 80041c4:	0800855e 	.word	0x0800855e
 80041c8:	08008562 	.word	0x08008562
 80041cc:	08008566 	.word	0x08008566
 80041d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041d2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80041d6:	4553      	cmp	r3, sl
 80041d8:	bfa8      	it	ge
 80041da:	4653      	movge	r3, sl
 80041dc:	2b00      	cmp	r3, #0
 80041de:	4699      	mov	r9, r3
 80041e0:	dc36      	bgt.n	8004250 <_printf_float+0x364>
 80041e2:	f04f 0b00 	mov.w	fp, #0
 80041e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041ea:	f104 021a 	add.w	r2, r4, #26
 80041ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80041f2:	eba3 0309 	sub.w	r3, r3, r9
 80041f6:	455b      	cmp	r3, fp
 80041f8:	dc31      	bgt.n	800425e <_printf_float+0x372>
 80041fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041fc:	459a      	cmp	sl, r3
 80041fe:	dc3a      	bgt.n	8004276 <_printf_float+0x38a>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	07da      	lsls	r2, r3, #31
 8004204:	d437      	bmi.n	8004276 <_printf_float+0x38a>
 8004206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004208:	ebaa 0903 	sub.w	r9, sl, r3
 800420c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800420e:	ebaa 0303 	sub.w	r3, sl, r3
 8004212:	4599      	cmp	r9, r3
 8004214:	bfa8      	it	ge
 8004216:	4699      	movge	r9, r3
 8004218:	f1b9 0f00 	cmp.w	r9, #0
 800421c:	dc33      	bgt.n	8004286 <_printf_float+0x39a>
 800421e:	f04f 0800 	mov.w	r8, #0
 8004222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004226:	f104 0b1a 	add.w	fp, r4, #26
 800422a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800422c:	ebaa 0303 	sub.w	r3, sl, r3
 8004230:	eba3 0309 	sub.w	r3, r3, r9
 8004234:	4543      	cmp	r3, r8
 8004236:	f77f af7a 	ble.w	800412e <_printf_float+0x242>
 800423a:	2301      	movs	r3, #1
 800423c:	465a      	mov	r2, fp
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	f43f aeac 	beq.w	8003fa2 <_printf_float+0xb6>
 800424a:	f108 0801 	add.w	r8, r8, #1
 800424e:	e7ec      	b.n	800422a <_printf_float+0x33e>
 8004250:	4642      	mov	r2, r8
 8004252:	4631      	mov	r1, r6
 8004254:	4628      	mov	r0, r5
 8004256:	47b8      	blx	r7
 8004258:	3001      	adds	r0, #1
 800425a:	d1c2      	bne.n	80041e2 <_printf_float+0x2f6>
 800425c:	e6a1      	b.n	8003fa2 <_printf_float+0xb6>
 800425e:	2301      	movs	r3, #1
 8004260:	4631      	mov	r1, r6
 8004262:	4628      	mov	r0, r5
 8004264:	920a      	str	r2, [sp, #40]	@ 0x28
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f ae9a 	beq.w	8003fa2 <_printf_float+0xb6>
 800426e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004270:	f10b 0b01 	add.w	fp, fp, #1
 8004274:	e7bb      	b.n	80041ee <_printf_float+0x302>
 8004276:	4631      	mov	r1, r6
 8004278:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800427c:	4628      	mov	r0, r5
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	d1c0      	bne.n	8004206 <_printf_float+0x31a>
 8004284:	e68d      	b.n	8003fa2 <_printf_float+0xb6>
 8004286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004288:	464b      	mov	r3, r9
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	4442      	add	r2, r8
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	d1c3      	bne.n	800421e <_printf_float+0x332>
 8004296:	e684      	b.n	8003fa2 <_printf_float+0xb6>
 8004298:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800429c:	f1ba 0f01 	cmp.w	sl, #1
 80042a0:	dc01      	bgt.n	80042a6 <_printf_float+0x3ba>
 80042a2:	07db      	lsls	r3, r3, #31
 80042a4:	d536      	bpl.n	8004314 <_printf_float+0x428>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4642      	mov	r2, r8
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae76 	beq.w	8003fa2 <_printf_float+0xb6>
 80042b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	f43f ae6e 	beq.w	8003fa2 <_printf_float+0xb6>
 80042c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042ca:	2200      	movs	r2, #0
 80042cc:	2300      	movs	r3, #0
 80042ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042d2:	f7fc fb69 	bl	80009a8 <__aeabi_dcmpeq>
 80042d6:	b9c0      	cbnz	r0, 800430a <_printf_float+0x41e>
 80042d8:	4653      	mov	r3, sl
 80042da:	f108 0201 	add.w	r2, r8, #1
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	d10c      	bne.n	8004302 <_printf_float+0x416>
 80042e8:	e65b      	b.n	8003fa2 <_printf_float+0xb6>
 80042ea:	2301      	movs	r3, #1
 80042ec:	465a      	mov	r2, fp
 80042ee:	4631      	mov	r1, r6
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b8      	blx	r7
 80042f4:	3001      	adds	r0, #1
 80042f6:	f43f ae54 	beq.w	8003fa2 <_printf_float+0xb6>
 80042fa:	f108 0801 	add.w	r8, r8, #1
 80042fe:	45d0      	cmp	r8, sl
 8004300:	dbf3      	blt.n	80042ea <_printf_float+0x3fe>
 8004302:	464b      	mov	r3, r9
 8004304:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004308:	e6e0      	b.n	80040cc <_printf_float+0x1e0>
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	f104 0b1a 	add.w	fp, r4, #26
 8004312:	e7f4      	b.n	80042fe <_printf_float+0x412>
 8004314:	2301      	movs	r3, #1
 8004316:	4642      	mov	r2, r8
 8004318:	e7e1      	b.n	80042de <_printf_float+0x3f2>
 800431a:	2301      	movs	r3, #1
 800431c:	464a      	mov	r2, r9
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f ae3c 	beq.w	8003fa2 <_printf_float+0xb6>
 800432a:	f108 0801 	add.w	r8, r8, #1
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	4543      	cmp	r3, r8
 8004336:	dcf0      	bgt.n	800431a <_printf_float+0x42e>
 8004338:	e6fd      	b.n	8004136 <_printf_float+0x24a>
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	f104 0919 	add.w	r9, r4, #25
 8004342:	e7f4      	b.n	800432e <_printf_float+0x442>

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4616      	mov	r6, r2
 800434a:	4698      	mov	r8, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	4607      	mov	r7, r0
 8004352:	4293      	cmp	r3, r2
 8004354:	bfb8      	it	lt
 8004356:	4613      	movlt	r3, r2
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800435e:	460c      	mov	r4, r1
 8004360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004364:	b10a      	cbz	r2, 800436a <_printf_common+0x26>
 8004366:	3301      	adds	r3, #1
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	6833      	ldrmi	r3, [r6, #0]
 8004372:	3302      	addmi	r3, #2
 8004374:	6033      	strmi	r3, [r6, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	f015 0506 	ands.w	r5, r5, #6
 800437c:	d106      	bne.n	800438c <_printf_common+0x48>
 800437e:	f104 0a19 	add.w	sl, r4, #25
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	6832      	ldr	r2, [r6, #0]
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	42ab      	cmp	r3, r5
 800438a:	dc2b      	bgt.n	80043e4 <_printf_common+0xa0>
 800438c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	3b00      	subs	r3, #0
 8004394:	bf18      	it	ne
 8004396:	2301      	movne	r3, #1
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d430      	bmi.n	80043fe <_printf_common+0xba>
 800439c:	4641      	mov	r1, r8
 800439e:	4638      	mov	r0, r7
 80043a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043a4:	47c8      	blx	r9
 80043a6:	3001      	adds	r0, #1
 80043a8:	d023      	beq.n	80043f2 <_printf_common+0xae>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	f003 0306 	and.w	r3, r3, #6
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf14      	ite	ne
 80043b6:	2500      	movne	r5, #0
 80043b8:	6833      	ldreq	r3, [r6, #0]
 80043ba:	f04f 0600 	mov.w	r6, #0
 80043be:	bf08      	it	eq
 80043c0:	68e5      	ldreq	r5, [r4, #12]
 80043c2:	f104 041a 	add.w	r4, r4, #26
 80043c6:	bf08      	it	eq
 80043c8:	1aed      	subeq	r5, r5, r3
 80043ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043ce:	bf08      	it	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bfc4      	itt	gt
 80043d8:	1a9b      	subgt	r3, r3, r2
 80043da:	18ed      	addgt	r5, r5, r3
 80043dc:	42b5      	cmp	r5, r6
 80043de:	d11a      	bne.n	8004416 <_printf_common+0xd2>
 80043e0:	2000      	movs	r0, #0
 80043e2:	e008      	b.n	80043f6 <_printf_common+0xb2>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4652      	mov	r2, sl
 80043e8:	4641      	mov	r1, r8
 80043ea:	4638      	mov	r0, r7
 80043ec:	47c8      	blx	r9
 80043ee:	3001      	adds	r0, #1
 80043f0:	d103      	bne.n	80043fa <_printf_common+0xb6>
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	3501      	adds	r5, #1
 80043fc:	e7c1      	b.n	8004382 <_printf_common+0x3e>
 80043fe:	2030      	movs	r0, #48	@ 0x30
 8004400:	18e1      	adds	r1, r4, r3
 8004402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800440c:	4422      	add	r2, r4
 800440e:	3302      	adds	r3, #2
 8004410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004414:	e7c2      	b.n	800439c <_printf_common+0x58>
 8004416:	2301      	movs	r3, #1
 8004418:	4622      	mov	r2, r4
 800441a:	4641      	mov	r1, r8
 800441c:	4638      	mov	r0, r7
 800441e:	47c8      	blx	r9
 8004420:	3001      	adds	r0, #1
 8004422:	d0e6      	beq.n	80043f2 <_printf_common+0xae>
 8004424:	3601      	adds	r6, #1
 8004426:	e7d9      	b.n	80043dc <_printf_common+0x98>

08004428 <_printf_i>:
 8004428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	7e0f      	ldrb	r7, [r1, #24]
 800442e:	4691      	mov	r9, r2
 8004430:	2f78      	cmp	r7, #120	@ 0x78
 8004432:	4680      	mov	r8, r0
 8004434:	460c      	mov	r4, r1
 8004436:	469a      	mov	sl, r3
 8004438:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800443a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800443e:	d807      	bhi.n	8004450 <_printf_i+0x28>
 8004440:	2f62      	cmp	r7, #98	@ 0x62
 8004442:	d80a      	bhi.n	800445a <_printf_i+0x32>
 8004444:	2f00      	cmp	r7, #0
 8004446:	f000 80d3 	beq.w	80045f0 <_printf_i+0x1c8>
 800444a:	2f58      	cmp	r7, #88	@ 0x58
 800444c:	f000 80ba 	beq.w	80045c4 <_printf_i+0x19c>
 8004450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004458:	e03a      	b.n	80044d0 <_printf_i+0xa8>
 800445a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800445e:	2b15      	cmp	r3, #21
 8004460:	d8f6      	bhi.n	8004450 <_printf_i+0x28>
 8004462:	a101      	add	r1, pc, #4	@ (adr r1, 8004468 <_printf_i+0x40>)
 8004464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044d5 	.word	0x080044d5
 8004470:	08004451 	.word	0x08004451
 8004474:	08004451 	.word	0x08004451
 8004478:	08004451 	.word	0x08004451
 800447c:	08004451 	.word	0x08004451
 8004480:	080044d5 	.word	0x080044d5
 8004484:	08004451 	.word	0x08004451
 8004488:	08004451 	.word	0x08004451
 800448c:	08004451 	.word	0x08004451
 8004490:	08004451 	.word	0x08004451
 8004494:	080045d7 	.word	0x080045d7
 8004498:	080044ff 	.word	0x080044ff
 800449c:	08004591 	.word	0x08004591
 80044a0:	08004451 	.word	0x08004451
 80044a4:	08004451 	.word	0x08004451
 80044a8:	080045f9 	.word	0x080045f9
 80044ac:	08004451 	.word	0x08004451
 80044b0:	080044ff 	.word	0x080044ff
 80044b4:	08004451 	.word	0x08004451
 80044b8:	08004451 	.word	0x08004451
 80044bc:	08004599 	.word	0x08004599
 80044c0:	6833      	ldr	r3, [r6, #0]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6032      	str	r2, [r6, #0]
 80044c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d0:	2301      	movs	r3, #1
 80044d2:	e09e      	b.n	8004612 <_printf_i+0x1ea>
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	6820      	ldr	r0, [r4, #0]
 80044d8:	1d19      	adds	r1, r3, #4
 80044da:	6031      	str	r1, [r6, #0]
 80044dc:	0606      	lsls	r6, r0, #24
 80044de:	d501      	bpl.n	80044e4 <_printf_i+0xbc>
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	e003      	b.n	80044ec <_printf_i+0xc4>
 80044e4:	0645      	lsls	r5, r0, #25
 80044e6:	d5fb      	bpl.n	80044e0 <_printf_i+0xb8>
 80044e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	da03      	bge.n	80044f8 <_printf_i+0xd0>
 80044f0:	232d      	movs	r3, #45	@ 0x2d
 80044f2:	426d      	negs	r5, r5
 80044f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044f8:	230a      	movs	r3, #10
 80044fa:	4859      	ldr	r0, [pc, #356]	@ (8004660 <_printf_i+0x238>)
 80044fc:	e011      	b.n	8004522 <_printf_i+0xfa>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	6833      	ldr	r3, [r6, #0]
 8004502:	0608      	lsls	r0, r1, #24
 8004504:	f853 5b04 	ldr.w	r5, [r3], #4
 8004508:	d402      	bmi.n	8004510 <_printf_i+0xe8>
 800450a:	0649      	lsls	r1, r1, #25
 800450c:	bf48      	it	mi
 800450e:	b2ad      	uxthmi	r5, r5
 8004510:	2f6f      	cmp	r7, #111	@ 0x6f
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	bf14      	ite	ne
 8004516:	230a      	movne	r3, #10
 8004518:	2308      	moveq	r3, #8
 800451a:	4851      	ldr	r0, [pc, #324]	@ (8004660 <_printf_i+0x238>)
 800451c:	2100      	movs	r1, #0
 800451e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004522:	6866      	ldr	r6, [r4, #4]
 8004524:	2e00      	cmp	r6, #0
 8004526:	bfa8      	it	ge
 8004528:	6821      	ldrge	r1, [r4, #0]
 800452a:	60a6      	str	r6, [r4, #8]
 800452c:	bfa4      	itt	ge
 800452e:	f021 0104 	bicge.w	r1, r1, #4
 8004532:	6021      	strge	r1, [r4, #0]
 8004534:	b90d      	cbnz	r5, 800453a <_printf_i+0x112>
 8004536:	2e00      	cmp	r6, #0
 8004538:	d04b      	beq.n	80045d2 <_printf_i+0x1aa>
 800453a:	4616      	mov	r6, r2
 800453c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004540:	fb03 5711 	mls	r7, r3, r1, r5
 8004544:	5dc7      	ldrb	r7, [r0, r7]
 8004546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800454a:	462f      	mov	r7, r5
 800454c:	42bb      	cmp	r3, r7
 800454e:	460d      	mov	r5, r1
 8004550:	d9f4      	bls.n	800453c <_printf_i+0x114>
 8004552:	2b08      	cmp	r3, #8
 8004554:	d10b      	bne.n	800456e <_printf_i+0x146>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	07df      	lsls	r7, r3, #31
 800455a:	d508      	bpl.n	800456e <_printf_i+0x146>
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	6861      	ldr	r1, [r4, #4]
 8004560:	4299      	cmp	r1, r3
 8004562:	bfde      	ittt	le
 8004564:	2330      	movle	r3, #48	@ 0x30
 8004566:	f806 3c01 	strble.w	r3, [r6, #-1]
 800456a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800456e:	1b92      	subs	r2, r2, r6
 8004570:	6122      	str	r2, [r4, #16]
 8004572:	464b      	mov	r3, r9
 8004574:	4621      	mov	r1, r4
 8004576:	4640      	mov	r0, r8
 8004578:	f8cd a000 	str.w	sl, [sp]
 800457c:	aa03      	add	r2, sp, #12
 800457e:	f7ff fee1 	bl	8004344 <_printf_common>
 8004582:	3001      	adds	r0, #1
 8004584:	d14a      	bne.n	800461c <_printf_i+0x1f4>
 8004586:	f04f 30ff 	mov.w	r0, #4294967295
 800458a:	b004      	add	sp, #16
 800458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	f043 0320 	orr.w	r3, r3, #32
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	2778      	movs	r7, #120	@ 0x78
 800459a:	4832      	ldr	r0, [pc, #200]	@ (8004664 <_printf_i+0x23c>)
 800459c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	061f      	lsls	r7, r3, #24
 80045a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80045aa:	d402      	bmi.n	80045b2 <_printf_i+0x18a>
 80045ac:	065f      	lsls	r7, r3, #25
 80045ae:	bf48      	it	mi
 80045b0:	b2ad      	uxthmi	r5, r5
 80045b2:	6031      	str	r1, [r6, #0]
 80045b4:	07d9      	lsls	r1, r3, #31
 80045b6:	bf44      	itt	mi
 80045b8:	f043 0320 	orrmi.w	r3, r3, #32
 80045bc:	6023      	strmi	r3, [r4, #0]
 80045be:	b11d      	cbz	r5, 80045c8 <_printf_i+0x1a0>
 80045c0:	2310      	movs	r3, #16
 80045c2:	e7ab      	b.n	800451c <_printf_i+0xf4>
 80045c4:	4826      	ldr	r0, [pc, #152]	@ (8004660 <_printf_i+0x238>)
 80045c6:	e7e9      	b.n	800459c <_printf_i+0x174>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	f023 0320 	bic.w	r3, r3, #32
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	e7f6      	b.n	80045c0 <_printf_i+0x198>
 80045d2:	4616      	mov	r6, r2
 80045d4:	e7bd      	b.n	8004552 <_printf_i+0x12a>
 80045d6:	6833      	ldr	r3, [r6, #0]
 80045d8:	6825      	ldr	r5, [r4, #0]
 80045da:	1d18      	adds	r0, r3, #4
 80045dc:	6961      	ldr	r1, [r4, #20]
 80045de:	6030      	str	r0, [r6, #0]
 80045e0:	062e      	lsls	r6, r5, #24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	d501      	bpl.n	80045ea <_printf_i+0x1c2>
 80045e6:	6019      	str	r1, [r3, #0]
 80045e8:	e002      	b.n	80045f0 <_printf_i+0x1c8>
 80045ea:	0668      	lsls	r0, r5, #25
 80045ec:	d5fb      	bpl.n	80045e6 <_printf_i+0x1be>
 80045ee:	8019      	strh	r1, [r3, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	4616      	mov	r6, r2
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	e7bc      	b.n	8004572 <_printf_i+0x14a>
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	2100      	movs	r1, #0
 80045fc:	1d1a      	adds	r2, r3, #4
 80045fe:	6032      	str	r2, [r6, #0]
 8004600:	681e      	ldr	r6, [r3, #0]
 8004602:	6862      	ldr	r2, [r4, #4]
 8004604:	4630      	mov	r0, r6
 8004606:	f000 fc18 	bl	8004e3a <memchr>
 800460a:	b108      	cbz	r0, 8004610 <_printf_i+0x1e8>
 800460c:	1b80      	subs	r0, r0, r6
 800460e:	6060      	str	r0, [r4, #4]
 8004610:	6863      	ldr	r3, [r4, #4]
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	2300      	movs	r3, #0
 8004616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800461a:	e7aa      	b.n	8004572 <_printf_i+0x14a>
 800461c:	4632      	mov	r2, r6
 800461e:	4649      	mov	r1, r9
 8004620:	4640      	mov	r0, r8
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	47d0      	blx	sl
 8004626:	3001      	adds	r0, #1
 8004628:	d0ad      	beq.n	8004586 <_printf_i+0x15e>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	079b      	lsls	r3, r3, #30
 800462e:	d413      	bmi.n	8004658 <_printf_i+0x230>
 8004630:	68e0      	ldr	r0, [r4, #12]
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	4298      	cmp	r0, r3
 8004636:	bfb8      	it	lt
 8004638:	4618      	movlt	r0, r3
 800463a:	e7a6      	b.n	800458a <_printf_i+0x162>
 800463c:	2301      	movs	r3, #1
 800463e:	4632      	mov	r2, r6
 8004640:	4649      	mov	r1, r9
 8004642:	4640      	mov	r0, r8
 8004644:	47d0      	blx	sl
 8004646:	3001      	adds	r0, #1
 8004648:	d09d      	beq.n	8004586 <_printf_i+0x15e>
 800464a:	3501      	adds	r5, #1
 800464c:	68e3      	ldr	r3, [r4, #12]
 800464e:	9903      	ldr	r1, [sp, #12]
 8004650:	1a5b      	subs	r3, r3, r1
 8004652:	42ab      	cmp	r3, r5
 8004654:	dcf2      	bgt.n	800463c <_printf_i+0x214>
 8004656:	e7eb      	b.n	8004630 <_printf_i+0x208>
 8004658:	2500      	movs	r5, #0
 800465a:	f104 0619 	add.w	r6, r4, #25
 800465e:	e7f5      	b.n	800464c <_printf_i+0x224>
 8004660:	08008568 	.word	0x08008568
 8004664:	08008579 	.word	0x08008579

08004668 <_scanf_float>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	b087      	sub	sp, #28
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	688b      	ldr	r3, [r1, #8]
 8004672:	4617      	mov	r7, r2
 8004674:	1e5a      	subs	r2, r3, #1
 8004676:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800467a:	bf82      	ittt	hi
 800467c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004680:	eb03 0b05 	addhi.w	fp, r3, r5
 8004684:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004688:	460a      	mov	r2, r1
 800468a:	f04f 0500 	mov.w	r5, #0
 800468e:	bf88      	it	hi
 8004690:	608b      	strhi	r3, [r1, #8]
 8004692:	680b      	ldr	r3, [r1, #0]
 8004694:	4680      	mov	r8, r0
 8004696:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800469a:	f842 3b1c 	str.w	r3, [r2], #28
 800469e:	460c      	mov	r4, r1
 80046a0:	bf98      	it	ls
 80046a2:	f04f 0b00 	movls.w	fp, #0
 80046a6:	4616      	mov	r6, r2
 80046a8:	46aa      	mov	sl, r5
 80046aa:	46a9      	mov	r9, r5
 80046ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046b0:	9201      	str	r2, [sp, #4]
 80046b2:	9502      	str	r5, [sp, #8]
 80046b4:	68a2      	ldr	r2, [r4, #8]
 80046b6:	b152      	cbz	r2, 80046ce <_scanf_float+0x66>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80046be:	d865      	bhi.n	800478c <_scanf_float+0x124>
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d83d      	bhi.n	8004740 <_scanf_float+0xd8>
 80046c4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80046c8:	b2c8      	uxtb	r0, r1
 80046ca:	280e      	cmp	r0, #14
 80046cc:	d93b      	bls.n	8004746 <_scanf_float+0xde>
 80046ce:	f1b9 0f00 	cmp.w	r9, #0
 80046d2:	d003      	beq.n	80046dc <_scanf_float+0x74>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046e0:	f1ba 0f01 	cmp.w	sl, #1
 80046e4:	f200 8118 	bhi.w	8004918 <_scanf_float+0x2b0>
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	429e      	cmp	r6, r3
 80046ec:	f200 8109 	bhi.w	8004902 <_scanf_float+0x29a>
 80046f0:	2001      	movs	r0, #1
 80046f2:	b007      	add	sp, #28
 80046f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80046fc:	2a0d      	cmp	r2, #13
 80046fe:	d8e6      	bhi.n	80046ce <_scanf_float+0x66>
 8004700:	a101      	add	r1, pc, #4	@ (adr r1, 8004708 <_scanf_float+0xa0>)
 8004702:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800484f 	.word	0x0800484f
 800470c:	080046cf 	.word	0x080046cf
 8004710:	080046cf 	.word	0x080046cf
 8004714:	080046cf 	.word	0x080046cf
 8004718:	080048af 	.word	0x080048af
 800471c:	08004887 	.word	0x08004887
 8004720:	080046cf 	.word	0x080046cf
 8004724:	080046cf 	.word	0x080046cf
 8004728:	0800485d 	.word	0x0800485d
 800472c:	080046cf 	.word	0x080046cf
 8004730:	080046cf 	.word	0x080046cf
 8004734:	080046cf 	.word	0x080046cf
 8004738:	080046cf 	.word	0x080046cf
 800473c:	08004815 	.word	0x08004815
 8004740:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004744:	e7da      	b.n	80046fc <_scanf_float+0x94>
 8004746:	290e      	cmp	r1, #14
 8004748:	d8c1      	bhi.n	80046ce <_scanf_float+0x66>
 800474a:	a001      	add	r0, pc, #4	@ (adr r0, 8004750 <_scanf_float+0xe8>)
 800474c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004750:	08004805 	.word	0x08004805
 8004754:	080046cf 	.word	0x080046cf
 8004758:	08004805 	.word	0x08004805
 800475c:	0800489b 	.word	0x0800489b
 8004760:	080046cf 	.word	0x080046cf
 8004764:	080047ad 	.word	0x080047ad
 8004768:	080047eb 	.word	0x080047eb
 800476c:	080047eb 	.word	0x080047eb
 8004770:	080047eb 	.word	0x080047eb
 8004774:	080047eb 	.word	0x080047eb
 8004778:	080047eb 	.word	0x080047eb
 800477c:	080047eb 	.word	0x080047eb
 8004780:	080047eb 	.word	0x080047eb
 8004784:	080047eb 	.word	0x080047eb
 8004788:	080047eb 	.word	0x080047eb
 800478c:	2b6e      	cmp	r3, #110	@ 0x6e
 800478e:	d809      	bhi.n	80047a4 <_scanf_float+0x13c>
 8004790:	2b60      	cmp	r3, #96	@ 0x60
 8004792:	d8b1      	bhi.n	80046f8 <_scanf_float+0x90>
 8004794:	2b54      	cmp	r3, #84	@ 0x54
 8004796:	d07b      	beq.n	8004890 <_scanf_float+0x228>
 8004798:	2b59      	cmp	r3, #89	@ 0x59
 800479a:	d198      	bne.n	80046ce <_scanf_float+0x66>
 800479c:	2d07      	cmp	r5, #7
 800479e:	d196      	bne.n	80046ce <_scanf_float+0x66>
 80047a0:	2508      	movs	r5, #8
 80047a2:	e02c      	b.n	80047fe <_scanf_float+0x196>
 80047a4:	2b74      	cmp	r3, #116	@ 0x74
 80047a6:	d073      	beq.n	8004890 <_scanf_float+0x228>
 80047a8:	2b79      	cmp	r3, #121	@ 0x79
 80047aa:	e7f6      	b.n	800479a <_scanf_float+0x132>
 80047ac:	6821      	ldr	r1, [r4, #0]
 80047ae:	05c8      	lsls	r0, r1, #23
 80047b0:	d51b      	bpl.n	80047ea <_scanf_float+0x182>
 80047b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80047b6:	6021      	str	r1, [r4, #0]
 80047b8:	f109 0901 	add.w	r9, r9, #1
 80047bc:	f1bb 0f00 	cmp.w	fp, #0
 80047c0:	d003      	beq.n	80047ca <_scanf_float+0x162>
 80047c2:	3201      	adds	r2, #1
 80047c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047c8:	60a2      	str	r2, [r4, #8]
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	60a3      	str	r3, [r4, #8]
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	3301      	adds	r3, #1
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3b01      	subs	r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	f340 8087 	ble.w	80048f0 <_scanf_float+0x288>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	e764      	b.n	80046b4 <_scanf_float+0x4c>
 80047ea:	eb1a 0105 	adds.w	r1, sl, r5
 80047ee:	f47f af6e 	bne.w	80046ce <_scanf_float+0x66>
 80047f2:	460d      	mov	r5, r1
 80047f4:	468a      	mov	sl, r1
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80047fc:	6022      	str	r2, [r4, #0]
 80047fe:	f806 3b01 	strb.w	r3, [r6], #1
 8004802:	e7e2      	b.n	80047ca <_scanf_float+0x162>
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	0610      	lsls	r0, r2, #24
 8004808:	f57f af61 	bpl.w	80046ce <_scanf_float+0x66>
 800480c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004810:	6022      	str	r2, [r4, #0]
 8004812:	e7f4      	b.n	80047fe <_scanf_float+0x196>
 8004814:	f1ba 0f00 	cmp.w	sl, #0
 8004818:	d10e      	bne.n	8004838 <_scanf_float+0x1d0>
 800481a:	f1b9 0f00 	cmp.w	r9, #0
 800481e:	d10e      	bne.n	800483e <_scanf_float+0x1d6>
 8004820:	6822      	ldr	r2, [r4, #0]
 8004822:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004826:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800482a:	d108      	bne.n	800483e <_scanf_float+0x1d6>
 800482c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004830:	f04f 0a01 	mov.w	sl, #1
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	e7e2      	b.n	80047fe <_scanf_float+0x196>
 8004838:	f1ba 0f02 	cmp.w	sl, #2
 800483c:	d055      	beq.n	80048ea <_scanf_float+0x282>
 800483e:	2d01      	cmp	r5, #1
 8004840:	d002      	beq.n	8004848 <_scanf_float+0x1e0>
 8004842:	2d04      	cmp	r5, #4
 8004844:	f47f af43 	bne.w	80046ce <_scanf_float+0x66>
 8004848:	3501      	adds	r5, #1
 800484a:	b2ed      	uxtb	r5, r5
 800484c:	e7d7      	b.n	80047fe <_scanf_float+0x196>
 800484e:	f1ba 0f01 	cmp.w	sl, #1
 8004852:	f47f af3c 	bne.w	80046ce <_scanf_float+0x66>
 8004856:	f04f 0a02 	mov.w	sl, #2
 800485a:	e7d0      	b.n	80047fe <_scanf_float+0x196>
 800485c:	b97d      	cbnz	r5, 800487e <_scanf_float+0x216>
 800485e:	f1b9 0f00 	cmp.w	r9, #0
 8004862:	f47f af37 	bne.w	80046d4 <_scanf_float+0x6c>
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800486c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004870:	f040 8103 	bne.w	8004a7a <_scanf_float+0x412>
 8004874:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004878:	2501      	movs	r5, #1
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	e7bf      	b.n	80047fe <_scanf_float+0x196>
 800487e:	2d03      	cmp	r5, #3
 8004880:	d0e2      	beq.n	8004848 <_scanf_float+0x1e0>
 8004882:	2d05      	cmp	r5, #5
 8004884:	e7de      	b.n	8004844 <_scanf_float+0x1dc>
 8004886:	2d02      	cmp	r5, #2
 8004888:	f47f af21 	bne.w	80046ce <_scanf_float+0x66>
 800488c:	2503      	movs	r5, #3
 800488e:	e7b6      	b.n	80047fe <_scanf_float+0x196>
 8004890:	2d06      	cmp	r5, #6
 8004892:	f47f af1c 	bne.w	80046ce <_scanf_float+0x66>
 8004896:	2507      	movs	r5, #7
 8004898:	e7b1      	b.n	80047fe <_scanf_float+0x196>
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	0591      	lsls	r1, r2, #22
 800489e:	f57f af16 	bpl.w	80046ce <_scanf_float+0x66>
 80048a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80048ac:	e7a7      	b.n	80047fe <_scanf_float+0x196>
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80048b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80048b8:	d006      	beq.n	80048c8 <_scanf_float+0x260>
 80048ba:	0550      	lsls	r0, r2, #21
 80048bc:	f57f af07 	bpl.w	80046ce <_scanf_float+0x66>
 80048c0:	f1b9 0f00 	cmp.w	r9, #0
 80048c4:	f000 80d9 	beq.w	8004a7a <_scanf_float+0x412>
 80048c8:	0591      	lsls	r1, r2, #22
 80048ca:	bf58      	it	pl
 80048cc:	9902      	ldrpl	r1, [sp, #8]
 80048ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048d2:	bf58      	it	pl
 80048d4:	eba9 0101 	subpl.w	r1, r9, r1
 80048d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80048dc:	f04f 0900 	mov.w	r9, #0
 80048e0:	bf58      	it	pl
 80048e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048e6:	6022      	str	r2, [r4, #0]
 80048e8:	e789      	b.n	80047fe <_scanf_float+0x196>
 80048ea:	f04f 0a03 	mov.w	sl, #3
 80048ee:	e786      	b.n	80047fe <_scanf_float+0x196>
 80048f0:	4639      	mov	r1, r7
 80048f2:	4640      	mov	r0, r8
 80048f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80048f8:	4798      	blx	r3
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f43f aeda 	beq.w	80046b4 <_scanf_float+0x4c>
 8004900:	e6e5      	b.n	80046ce <_scanf_float+0x66>
 8004902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004906:	463a      	mov	r2, r7
 8004908:	4640      	mov	r0, r8
 800490a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800490e:	4798      	blx	r3
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	3b01      	subs	r3, #1
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	e6e7      	b.n	80046e8 <_scanf_float+0x80>
 8004918:	1e6b      	subs	r3, r5, #1
 800491a:	2b06      	cmp	r3, #6
 800491c:	d824      	bhi.n	8004968 <_scanf_float+0x300>
 800491e:	2d02      	cmp	r5, #2
 8004920:	d836      	bhi.n	8004990 <_scanf_float+0x328>
 8004922:	9b01      	ldr	r3, [sp, #4]
 8004924:	429e      	cmp	r6, r3
 8004926:	f67f aee3 	bls.w	80046f0 <_scanf_float+0x88>
 800492a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800492e:	463a      	mov	r2, r7
 8004930:	4640      	mov	r0, r8
 8004932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004936:	4798      	blx	r3
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	3b01      	subs	r3, #1
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	e7f0      	b.n	8004922 <_scanf_float+0x2ba>
 8004940:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004944:	463a      	mov	r2, r7
 8004946:	4640      	mov	r0, r8
 8004948:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800494c:	4798      	blx	r3
 800494e:	6923      	ldr	r3, [r4, #16]
 8004950:	3b01      	subs	r3, #1
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004958:	fa5f fa8a 	uxtb.w	sl, sl
 800495c:	f1ba 0f02 	cmp.w	sl, #2
 8004960:	d1ee      	bne.n	8004940 <_scanf_float+0x2d8>
 8004962:	3d03      	subs	r5, #3
 8004964:	b2ed      	uxtb	r5, r5
 8004966:	1b76      	subs	r6, r6, r5
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	05da      	lsls	r2, r3, #23
 800496c:	d530      	bpl.n	80049d0 <_scanf_float+0x368>
 800496e:	055b      	lsls	r3, r3, #21
 8004970:	d511      	bpl.n	8004996 <_scanf_float+0x32e>
 8004972:	9b01      	ldr	r3, [sp, #4]
 8004974:	429e      	cmp	r6, r3
 8004976:	f67f aebb 	bls.w	80046f0 <_scanf_float+0x88>
 800497a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800497e:	463a      	mov	r2, r7
 8004980:	4640      	mov	r0, r8
 8004982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004986:	4798      	blx	r3
 8004988:	6923      	ldr	r3, [r4, #16]
 800498a:	3b01      	subs	r3, #1
 800498c:	6123      	str	r3, [r4, #16]
 800498e:	e7f0      	b.n	8004972 <_scanf_float+0x30a>
 8004990:	46aa      	mov	sl, r5
 8004992:	46b3      	mov	fp, r6
 8004994:	e7de      	b.n	8004954 <_scanf_float+0x2ec>
 8004996:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	2965      	cmp	r1, #101	@ 0x65
 800499e:	f103 33ff 	add.w	r3, r3, #4294967295
 80049a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80049a6:	6123      	str	r3, [r4, #16]
 80049a8:	d00c      	beq.n	80049c4 <_scanf_float+0x35c>
 80049aa:	2945      	cmp	r1, #69	@ 0x45
 80049ac:	d00a      	beq.n	80049c4 <_scanf_float+0x35c>
 80049ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049b2:	463a      	mov	r2, r7
 80049b4:	4640      	mov	r0, r8
 80049b6:	4798      	blx	r3
 80049b8:	6923      	ldr	r3, [r4, #16]
 80049ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049be:	3b01      	subs	r3, #1
 80049c0:	1eb5      	subs	r5, r6, #2
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	463a      	mov	r2, r7
 80049c6:	4640      	mov	r0, r8
 80049c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049cc:	4798      	blx	r3
 80049ce:	462e      	mov	r6, r5
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	f012 0210 	ands.w	r2, r2, #16
 80049d6:	d001      	beq.n	80049dc <_scanf_float+0x374>
 80049d8:	2000      	movs	r0, #0
 80049da:	e68a      	b.n	80046f2 <_scanf_float+0x8a>
 80049dc:	7032      	strb	r2, [r6, #0]
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049e8:	d11c      	bne.n	8004a24 <_scanf_float+0x3bc>
 80049ea:	9b02      	ldr	r3, [sp, #8]
 80049ec:	454b      	cmp	r3, r9
 80049ee:	eba3 0209 	sub.w	r2, r3, r9
 80049f2:	d123      	bne.n	8004a3c <_scanf_float+0x3d4>
 80049f4:	2200      	movs	r2, #0
 80049f6:	4640      	mov	r0, r8
 80049f8:	9901      	ldr	r1, [sp, #4]
 80049fa:	f002 fc21 	bl	8007240 <_strtod_r>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	6825      	ldr	r5, [r4, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f015 0f02 	tst.w	r5, #2
 8004a08:	4606      	mov	r6, r0
 8004a0a:	460f      	mov	r7, r1
 8004a0c:	f103 0204 	add.w	r2, r3, #4
 8004a10:	d01f      	beq.n	8004a52 <_scanf_float+0x3ea>
 8004a12:	9903      	ldr	r1, [sp, #12]
 8004a14:	600a      	str	r2, [r1, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	e9c3 6700 	strd	r6, r7, [r3]
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60e3      	str	r3, [r4, #12]
 8004a22:	e7d9      	b.n	80049d8 <_scanf_float+0x370>
 8004a24:	9b04      	ldr	r3, [sp, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0e4      	beq.n	80049f4 <_scanf_float+0x38c>
 8004a2a:	9905      	ldr	r1, [sp, #20]
 8004a2c:	230a      	movs	r3, #10
 8004a2e:	4640      	mov	r0, r8
 8004a30:	3101      	adds	r1, #1
 8004a32:	f002 fc85 	bl	8007340 <_strtol_r>
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	9e05      	ldr	r6, [sp, #20]
 8004a3a:	1ac2      	subs	r2, r0, r3
 8004a3c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004a40:	429e      	cmp	r6, r3
 8004a42:	bf28      	it	cs
 8004a44:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004a48:	4630      	mov	r0, r6
 8004a4a:	490d      	ldr	r1, [pc, #52]	@ (8004a80 <_scanf_float+0x418>)
 8004a4c:	f000 f912 	bl	8004c74 <siprintf>
 8004a50:	e7d0      	b.n	80049f4 <_scanf_float+0x38c>
 8004a52:	076d      	lsls	r5, r5, #29
 8004a54:	d4dd      	bmi.n	8004a12 <_scanf_float+0x3aa>
 8004a56:	9d03      	ldr	r5, [sp, #12]
 8004a58:	602a      	str	r2, [r5, #0]
 8004a5a:	681d      	ldr	r5, [r3, #0]
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	f7fb ffd4 	bl	8000a0c <__aeabi_dcmpun>
 8004a64:	b120      	cbz	r0, 8004a70 <_scanf_float+0x408>
 8004a66:	4807      	ldr	r0, [pc, #28]	@ (8004a84 <_scanf_float+0x41c>)
 8004a68:	f000 f9f6 	bl	8004e58 <nanf>
 8004a6c:	6028      	str	r0, [r5, #0]
 8004a6e:	e7d5      	b.n	8004a1c <_scanf_float+0x3b4>
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7fc f828 	bl	8000ac8 <__aeabi_d2f>
 8004a78:	e7f8      	b.n	8004a6c <_scanf_float+0x404>
 8004a7a:	f04f 0900 	mov.w	r9, #0
 8004a7e:	e62d      	b.n	80046dc <_scanf_float+0x74>
 8004a80:	0800858a 	.word	0x0800858a
 8004a84:	08008925 	.word	0x08008925

08004a88 <std>:
 8004a88:	2300      	movs	r3, #0
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a96:	6083      	str	r3, [r0, #8]
 8004a98:	8181      	strh	r1, [r0, #12]
 8004a9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a9c:	81c2      	strh	r2, [r0, #14]
 8004a9e:	6183      	str	r3, [r0, #24]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	305c      	adds	r0, #92	@ 0x5c
 8004aa6:	f000 f948 	bl	8004d3a <memset>
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <std+0x58>)
 8004aac:	6224      	str	r4, [r4, #32]
 8004aae:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <std+0x5c>)
 8004ab2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <std+0x60>)
 8004ab6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <std+0x64>)
 8004aba:	6323      	str	r3, [r4, #48]	@ 0x30
 8004abc:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <std+0x68>)
 8004abe:	429c      	cmp	r4, r3
 8004ac0:	d006      	beq.n	8004ad0 <std+0x48>
 8004ac2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ac6:	4294      	cmp	r4, r2
 8004ac8:	d002      	beq.n	8004ad0 <std+0x48>
 8004aca:	33d0      	adds	r3, #208	@ 0xd0
 8004acc:	429c      	cmp	r4, r3
 8004ace:	d105      	bne.n	8004adc <std+0x54>
 8004ad0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad8:	f000 b9ac 	b.w	8004e34 <__retarget_lock_init_recursive>
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	bf00      	nop
 8004ae0:	08004cb5 	.word	0x08004cb5
 8004ae4:	08004cd7 	.word	0x08004cd7
 8004ae8:	08004d0f 	.word	0x08004d0f
 8004aec:	08004d33 	.word	0x08004d33
 8004af0:	200002a4 	.word	0x200002a4

08004af4 <stdio_exit_handler>:
 8004af4:	4a02      	ldr	r2, [pc, #8]	@ (8004b00 <stdio_exit_handler+0xc>)
 8004af6:	4903      	ldr	r1, [pc, #12]	@ (8004b04 <stdio_exit_handler+0x10>)
 8004af8:	4803      	ldr	r0, [pc, #12]	@ (8004b08 <stdio_exit_handler+0x14>)
 8004afa:	f000 b869 	b.w	8004bd0 <_fwalk_sglue>
 8004afe:	bf00      	nop
 8004b00:	2000000c 	.word	0x2000000c
 8004b04:	080076f5 	.word	0x080076f5
 8004b08:	2000001c 	.word	0x2000001c

08004b0c <cleanup_stdio>:
 8004b0c:	6841      	ldr	r1, [r0, #4]
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b40 <cleanup_stdio+0x34>)
 8004b10:	b510      	push	{r4, lr}
 8004b12:	4299      	cmp	r1, r3
 8004b14:	4604      	mov	r4, r0
 8004b16:	d001      	beq.n	8004b1c <cleanup_stdio+0x10>
 8004b18:	f002 fdec 	bl	80076f4 <_fflush_r>
 8004b1c:	68a1      	ldr	r1, [r4, #8]
 8004b1e:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <cleanup_stdio+0x38>)
 8004b20:	4299      	cmp	r1, r3
 8004b22:	d002      	beq.n	8004b2a <cleanup_stdio+0x1e>
 8004b24:	4620      	mov	r0, r4
 8004b26:	f002 fde5 	bl	80076f4 <_fflush_r>
 8004b2a:	68e1      	ldr	r1, [r4, #12]
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <cleanup_stdio+0x3c>)
 8004b2e:	4299      	cmp	r1, r3
 8004b30:	d004      	beq.n	8004b3c <cleanup_stdio+0x30>
 8004b32:	4620      	mov	r0, r4
 8004b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b38:	f002 bddc 	b.w	80076f4 <_fflush_r>
 8004b3c:	bd10      	pop	{r4, pc}
 8004b3e:	bf00      	nop
 8004b40:	200002a4 	.word	0x200002a4
 8004b44:	2000030c 	.word	0x2000030c
 8004b48:	20000374 	.word	0x20000374

08004b4c <global_stdio_init.part.0>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <global_stdio_init.part.0+0x30>)
 8004b50:	4c0b      	ldr	r4, [pc, #44]	@ (8004b80 <global_stdio_init.part.0+0x34>)
 8004b52:	4a0c      	ldr	r2, [pc, #48]	@ (8004b84 <global_stdio_init.part.0+0x38>)
 8004b54:	4620      	mov	r0, r4
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	2104      	movs	r1, #4
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f7ff ff94 	bl	8004a88 <std>
 8004b60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b64:	2201      	movs	r2, #1
 8004b66:	2109      	movs	r1, #9
 8004b68:	f7ff ff8e 	bl	8004a88 <std>
 8004b6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b70:	2202      	movs	r2, #2
 8004b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b76:	2112      	movs	r1, #18
 8004b78:	f7ff bf86 	b.w	8004a88 <std>
 8004b7c:	200003dc 	.word	0x200003dc
 8004b80:	200002a4 	.word	0x200002a4
 8004b84:	08004af5 	.word	0x08004af5

08004b88 <__sfp_lock_acquire>:
 8004b88:	4801      	ldr	r0, [pc, #4]	@ (8004b90 <__sfp_lock_acquire+0x8>)
 8004b8a:	f000 b954 	b.w	8004e36 <__retarget_lock_acquire_recursive>
 8004b8e:	bf00      	nop
 8004b90:	200003e5 	.word	0x200003e5

08004b94 <__sfp_lock_release>:
 8004b94:	4801      	ldr	r0, [pc, #4]	@ (8004b9c <__sfp_lock_release+0x8>)
 8004b96:	f000 b94f 	b.w	8004e38 <__retarget_lock_release_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	200003e5 	.word	0x200003e5

08004ba0 <__sinit>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	f7ff fff0 	bl	8004b88 <__sfp_lock_acquire>
 8004ba8:	6a23      	ldr	r3, [r4, #32]
 8004baa:	b11b      	cbz	r3, 8004bb4 <__sinit+0x14>
 8004bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb0:	f7ff bff0 	b.w	8004b94 <__sfp_lock_release>
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <__sinit+0x28>)
 8004bb6:	6223      	str	r3, [r4, #32]
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <__sinit+0x2c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f5      	bne.n	8004bac <__sinit+0xc>
 8004bc0:	f7ff ffc4 	bl	8004b4c <global_stdio_init.part.0>
 8004bc4:	e7f2      	b.n	8004bac <__sinit+0xc>
 8004bc6:	bf00      	nop
 8004bc8:	08004b0d 	.word	0x08004b0d
 8004bcc:	200003dc 	.word	0x200003dc

08004bd0 <_fwalk_sglue>:
 8004bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	4688      	mov	r8, r1
 8004bd8:	4614      	mov	r4, r2
 8004bda:	2600      	movs	r6, #0
 8004bdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004be0:	f1b9 0901 	subs.w	r9, r9, #1
 8004be4:	d505      	bpl.n	8004bf2 <_fwalk_sglue+0x22>
 8004be6:	6824      	ldr	r4, [r4, #0]
 8004be8:	2c00      	cmp	r4, #0
 8004bea:	d1f7      	bne.n	8004bdc <_fwalk_sglue+0xc>
 8004bec:	4630      	mov	r0, r6
 8004bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf2:	89ab      	ldrh	r3, [r5, #12]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d907      	bls.n	8004c08 <_fwalk_sglue+0x38>
 8004bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	d003      	beq.n	8004c08 <_fwalk_sglue+0x38>
 8004c00:	4629      	mov	r1, r5
 8004c02:	4638      	mov	r0, r7
 8004c04:	47c0      	blx	r8
 8004c06:	4306      	orrs	r6, r0
 8004c08:	3568      	adds	r5, #104	@ 0x68
 8004c0a:	e7e9      	b.n	8004be0 <_fwalk_sglue+0x10>

08004c0c <sniprintf>:
 8004c0c:	b40c      	push	{r2, r3}
 8004c0e:	b530      	push	{r4, r5, lr}
 8004c10:	4b17      	ldr	r3, [pc, #92]	@ (8004c70 <sniprintf+0x64>)
 8004c12:	1e0c      	subs	r4, r1, #0
 8004c14:	681d      	ldr	r5, [r3, #0]
 8004c16:	b09d      	sub	sp, #116	@ 0x74
 8004c18:	da08      	bge.n	8004c2c <sniprintf+0x20>
 8004c1a:	238b      	movs	r3, #139	@ 0x8b
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	b01d      	add	sp, #116	@ 0x74
 8004c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c28:	b002      	add	sp, #8
 8004c2a:	4770      	bx	lr
 8004c2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c34:	bf0c      	ite	eq
 8004c36:	4623      	moveq	r3, r4
 8004c38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c3c:	9304      	str	r3, [sp, #16]
 8004c3e:	9307      	str	r3, [sp, #28]
 8004c40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c44:	9002      	str	r0, [sp, #8]
 8004c46:	9006      	str	r0, [sp, #24]
 8004c48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	ab21      	add	r3, sp, #132	@ 0x84
 8004c50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c52:	a902      	add	r1, sp, #8
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	f002 fbd1 	bl	80073fc <_svfiprintf_r>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	bfbc      	itt	lt
 8004c5e:	238b      	movlt	r3, #139	@ 0x8b
 8004c60:	602b      	strlt	r3, [r5, #0]
 8004c62:	2c00      	cmp	r4, #0
 8004c64:	d0dd      	beq.n	8004c22 <sniprintf+0x16>
 8004c66:	2200      	movs	r2, #0
 8004c68:	9b02      	ldr	r3, [sp, #8]
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e7d9      	b.n	8004c22 <sniprintf+0x16>
 8004c6e:	bf00      	nop
 8004c70:	20000018 	.word	0x20000018

08004c74 <siprintf>:
 8004c74:	b40e      	push	{r1, r2, r3}
 8004c76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c7a:	b500      	push	{lr}
 8004c7c:	b09c      	sub	sp, #112	@ 0x70
 8004c7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c80:	9002      	str	r0, [sp, #8]
 8004c82:	9006      	str	r0, [sp, #24]
 8004c84:	9107      	str	r1, [sp, #28]
 8004c86:	9104      	str	r1, [sp, #16]
 8004c88:	4808      	ldr	r0, [pc, #32]	@ (8004cac <siprintf+0x38>)
 8004c8a:	4909      	ldr	r1, [pc, #36]	@ (8004cb0 <siprintf+0x3c>)
 8004c8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c90:	9105      	str	r1, [sp, #20]
 8004c92:	6800      	ldr	r0, [r0, #0]
 8004c94:	a902      	add	r1, sp, #8
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f002 fbb0 	bl	80073fc <_svfiprintf_r>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	9b02      	ldr	r3, [sp, #8]
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	b01c      	add	sp, #112	@ 0x70
 8004ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ca8:	b003      	add	sp, #12
 8004caa:	4770      	bx	lr
 8004cac:	20000018 	.word	0x20000018
 8004cb0:	ffff0208 	.word	0xffff0208

08004cb4 <__sread>:
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cbc:	f000 f86c 	bl	8004d98 <_read_r>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	bfab      	itete	ge
 8004cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8004cc8:	181b      	addge	r3, r3, r0
 8004cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cce:	bfac      	ite	ge
 8004cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cd2:	81a3      	strhlt	r3, [r4, #12]
 8004cd4:	bd10      	pop	{r4, pc}

08004cd6 <__swrite>:
 8004cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cda:	461f      	mov	r7, r3
 8004cdc:	898b      	ldrh	r3, [r1, #12]
 8004cde:	4605      	mov	r5, r0
 8004ce0:	05db      	lsls	r3, r3, #23
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	d505      	bpl.n	8004cf4 <__swrite+0x1e>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	2200      	movs	r2, #0
 8004cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf0:	f000 f840 	bl	8004d74 <_lseek_r>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	4632      	mov	r2, r6
 8004cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cfc:	81a3      	strh	r3, [r4, #12]
 8004cfe:	4628      	mov	r0, r5
 8004d00:	463b      	mov	r3, r7
 8004d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0a:	f000 b857 	b.w	8004dbc <_write_r>

08004d0e <__sseek>:
 8004d0e:	b510      	push	{r4, lr}
 8004d10:	460c      	mov	r4, r1
 8004d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d16:	f000 f82d 	bl	8004d74 <_lseek_r>
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	bf15      	itete	ne
 8004d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d2a:	81a3      	strheq	r3, [r4, #12]
 8004d2c:	bf18      	it	ne
 8004d2e:	81a3      	strhne	r3, [r4, #12]
 8004d30:	bd10      	pop	{r4, pc}

08004d32 <__sclose>:
 8004d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d36:	f000 b80d 	b.w	8004d54 <_close_r>

08004d3a <memset>:
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d100      	bne.n	8004d44 <memset+0xa>
 8004d42:	4770      	bx	lr
 8004d44:	f803 1b01 	strb.w	r1, [r3], #1
 8004d48:	e7f9      	b.n	8004d3e <memset+0x4>
	...

08004d4c <_localeconv_r>:
 8004d4c:	4800      	ldr	r0, [pc, #0]	@ (8004d50 <_localeconv_r+0x4>)
 8004d4e:	4770      	bx	lr
 8004d50:	20000158 	.word	0x20000158

08004d54 <_close_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	2300      	movs	r3, #0
 8004d58:	4d05      	ldr	r5, [pc, #20]	@ (8004d70 <_close_r+0x1c>)
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	602b      	str	r3, [r5, #0]
 8004d60:	f7fc ff83 	bl	8001c6a <_close>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_close_r+0x1a>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_close_r+0x1a>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	200003e0 	.word	0x200003e0

08004d74 <_lseek_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4604      	mov	r4, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4d05      	ldr	r5, [pc, #20]	@ (8004d94 <_lseek_r+0x20>)
 8004d80:	602a      	str	r2, [r5, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	f7fc ff95 	bl	8001cb2 <_lseek>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_lseek_r+0x1e>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_lseek_r+0x1e>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	200003e0 	.word	0x200003e0

08004d98 <_read_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	2200      	movs	r2, #0
 8004da2:	4d05      	ldr	r5, [pc, #20]	@ (8004db8 <_read_r+0x20>)
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f7fc ff26 	bl	8001bf8 <_read>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_read_r+0x1e>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_read_r+0x1e>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	200003e0 	.word	0x200003e0

08004dbc <_write_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4d05      	ldr	r5, [pc, #20]	@ (8004ddc <_write_r+0x20>)
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7fc ff31 	bl	8001c32 <_write>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_write_r+0x1e>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_write_r+0x1e>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	200003e0 	.word	0x200003e0

08004de0 <__errno>:
 8004de0:	4b01      	ldr	r3, [pc, #4]	@ (8004de8 <__errno+0x8>)
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000018 	.word	0x20000018

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	2600      	movs	r6, #0
 8004df0:	4d0c      	ldr	r5, [pc, #48]	@ (8004e24 <__libc_init_array+0x38>)
 8004df2:	4c0d      	ldr	r4, [pc, #52]	@ (8004e28 <__libc_init_array+0x3c>)
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	42a6      	cmp	r6, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	f003 fb66 	bl	80084cc <_init>
 8004e00:	2600      	movs	r6, #0
 8004e02:	4d0a      	ldr	r5, [pc, #40]	@ (8004e2c <__libc_init_array+0x40>)
 8004e04:	4c0a      	ldr	r4, [pc, #40]	@ (8004e30 <__libc_init_array+0x44>)
 8004e06:	1b64      	subs	r4, r4, r5
 8004e08:	10a4      	asrs	r4, r4, #2
 8004e0a:	42a6      	cmp	r6, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e14:	4798      	blx	r3
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1e:	4798      	blx	r3
 8004e20:	3601      	adds	r6, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	08008990 	.word	0x08008990
 8004e28:	08008990 	.word	0x08008990
 8004e2c:	08008990 	.word	0x08008990
 8004e30:	08008994 	.word	0x08008994

08004e34 <__retarget_lock_init_recursive>:
 8004e34:	4770      	bx	lr

08004e36 <__retarget_lock_acquire_recursive>:
 8004e36:	4770      	bx	lr

08004e38 <__retarget_lock_release_recursive>:
 8004e38:	4770      	bx	lr

08004e3a <memchr>:
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	b510      	push	{r4, lr}
 8004e3e:	b2c9      	uxtb	r1, r1
 8004e40:	4402      	add	r2, r0
 8004e42:	4293      	cmp	r3, r2
 8004e44:	4618      	mov	r0, r3
 8004e46:	d101      	bne.n	8004e4c <memchr+0x12>
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e003      	b.n	8004e54 <memchr+0x1a>
 8004e4c:	7804      	ldrb	r4, [r0, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	428c      	cmp	r4, r1
 8004e52:	d1f6      	bne.n	8004e42 <memchr+0x8>
 8004e54:	bd10      	pop	{r4, pc}
	...

08004e58 <nanf>:
 8004e58:	4800      	ldr	r0, [pc, #0]	@ (8004e5c <nanf+0x4>)
 8004e5a:	4770      	bx	lr
 8004e5c:	7fc00000 	.word	0x7fc00000

08004e60 <quorem>:
 8004e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	6903      	ldr	r3, [r0, #16]
 8004e66:	690c      	ldr	r4, [r1, #16]
 8004e68:	4607      	mov	r7, r0
 8004e6a:	42a3      	cmp	r3, r4
 8004e6c:	db7e      	blt.n	8004f6c <quorem+0x10c>
 8004e6e:	3c01      	subs	r4, #1
 8004e70:	00a3      	lsls	r3, r4, #2
 8004e72:	f100 0514 	add.w	r5, r0, #20
 8004e76:	f101 0814 	add.w	r8, r1, #20
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e80:	9301      	str	r3, [sp, #4]
 8004e82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e96:	d32e      	bcc.n	8004ef6 <quorem+0x96>
 8004e98:	f04f 0a00 	mov.w	sl, #0
 8004e9c:	46c4      	mov	ip, r8
 8004e9e:	46ae      	mov	lr, r5
 8004ea0:	46d3      	mov	fp, sl
 8004ea2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ea6:	b298      	uxth	r0, r3
 8004ea8:	fb06 a000 	mla	r0, r6, r0, sl
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	0c02      	lsrs	r2, r0, #16
 8004eb0:	fb06 2303 	mla	r3, r6, r3, r2
 8004eb4:	f8de 2000 	ldr.w	r2, [lr]
 8004eb8:	b280      	uxth	r0, r0
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	1a12      	subs	r2, r2, r0
 8004ebe:	445a      	add	r2, fp
 8004ec0:	f8de 0000 	ldr.w	r0, [lr]
 8004ec4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ece:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ed2:	b292      	uxth	r2, r2
 8004ed4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ed8:	45e1      	cmp	r9, ip
 8004eda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ede:	f84e 2b04 	str.w	r2, [lr], #4
 8004ee2:	d2de      	bcs.n	8004ea2 <quorem+0x42>
 8004ee4:	9b00      	ldr	r3, [sp, #0]
 8004ee6:	58eb      	ldr	r3, [r5, r3]
 8004ee8:	b92b      	cbnz	r3, 8004ef6 <quorem+0x96>
 8004eea:	9b01      	ldr	r3, [sp, #4]
 8004eec:	3b04      	subs	r3, #4
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	d32f      	bcc.n	8004f54 <quorem+0xf4>
 8004ef4:	613c      	str	r4, [r7, #16]
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f001 f9c2 	bl	8006280 <__mcmp>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	db25      	blt.n	8004f4c <quorem+0xec>
 8004f00:	4629      	mov	r1, r5
 8004f02:	2000      	movs	r0, #0
 8004f04:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f08:	f8d1 c000 	ldr.w	ip, [r1]
 8004f0c:	fa1f fe82 	uxth.w	lr, r2
 8004f10:	fa1f f38c 	uxth.w	r3, ip
 8004f14:	eba3 030e 	sub.w	r3, r3, lr
 8004f18:	4403      	add	r3, r0
 8004f1a:	0c12      	lsrs	r2, r2, #16
 8004f1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f2a:	45c1      	cmp	r9, r8
 8004f2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f30:	f841 3b04 	str.w	r3, [r1], #4
 8004f34:	d2e6      	bcs.n	8004f04 <quorem+0xa4>
 8004f36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f3e:	b922      	cbnz	r2, 8004f4a <quorem+0xea>
 8004f40:	3b04      	subs	r3, #4
 8004f42:	429d      	cmp	r5, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	d30b      	bcc.n	8004f60 <quorem+0x100>
 8004f48:	613c      	str	r4, [r7, #16]
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	b003      	add	sp, #12
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	3b04      	subs	r3, #4
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	d1cb      	bne.n	8004ef4 <quorem+0x94>
 8004f5c:	3c01      	subs	r4, #1
 8004f5e:	e7c6      	b.n	8004eee <quorem+0x8e>
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	3b04      	subs	r3, #4
 8004f64:	2a00      	cmp	r2, #0
 8004f66:	d1ef      	bne.n	8004f48 <quorem+0xe8>
 8004f68:	3c01      	subs	r4, #1
 8004f6a:	e7ea      	b.n	8004f42 <quorem+0xe2>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e7ee      	b.n	8004f4e <quorem+0xee>

08004f70 <_dtoa_r>:
 8004f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	4614      	mov	r4, r2
 8004f76:	461d      	mov	r5, r3
 8004f78:	69c7      	ldr	r7, [r0, #28]
 8004f7a:	b097      	sub	sp, #92	@ 0x5c
 8004f7c:	4683      	mov	fp, r0
 8004f7e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004f82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004f84:	b97f      	cbnz	r7, 8004fa6 <_dtoa_r+0x36>
 8004f86:	2010      	movs	r0, #16
 8004f88:	f000 fe02 	bl	8005b90 <malloc>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004f92:	b920      	cbnz	r0, 8004f9e <_dtoa_r+0x2e>
 8004f94:	21ef      	movs	r1, #239	@ 0xef
 8004f96:	4ba8      	ldr	r3, [pc, #672]	@ (8005238 <_dtoa_r+0x2c8>)
 8004f98:	48a8      	ldr	r0, [pc, #672]	@ (800523c <_dtoa_r+0x2cc>)
 8004f9a:	f002 fc23 	bl	80077e4 <__assert_func>
 8004f9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004fa2:	6007      	str	r7, [r0, #0]
 8004fa4:	60c7      	str	r7, [r0, #12]
 8004fa6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004faa:	6819      	ldr	r1, [r3, #0]
 8004fac:	b159      	cbz	r1, 8004fc6 <_dtoa_r+0x56>
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	4093      	lsls	r3, r2
 8004fb4:	604a      	str	r2, [r1, #4]
 8004fb6:	608b      	str	r3, [r1, #8]
 8004fb8:	4658      	mov	r0, fp
 8004fba:	f000 fedf 	bl	8005d7c <_Bfree>
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	1e2b      	subs	r3, r5, #0
 8004fc8:	bfaf      	iteee	ge
 8004fca:	2300      	movge	r3, #0
 8004fcc:	2201      	movlt	r2, #1
 8004fce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004fd2:	9303      	strlt	r3, [sp, #12]
 8004fd4:	bfa8      	it	ge
 8004fd6:	6033      	strge	r3, [r6, #0]
 8004fd8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004fdc:	4b98      	ldr	r3, [pc, #608]	@ (8005240 <_dtoa_r+0x2d0>)
 8004fde:	bfb8      	it	lt
 8004fe0:	6032      	strlt	r2, [r6, #0]
 8004fe2:	ea33 0308 	bics.w	r3, r3, r8
 8004fe6:	d112      	bne.n	800500e <_dtoa_r+0x9e>
 8004fe8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004fec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004fee:	6013      	str	r3, [r2, #0]
 8004ff0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004ff4:	4323      	orrs	r3, r4
 8004ff6:	f000 8550 	beq.w	8005a9a <_dtoa_r+0xb2a>
 8004ffa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ffc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005244 <_dtoa_r+0x2d4>
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8552 	beq.w	8005aaa <_dtoa_r+0xb3a>
 8005006:	f10a 0303 	add.w	r3, sl, #3
 800500a:	f000 bd4c 	b.w	8005aa6 <_dtoa_r+0xb36>
 800500e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005012:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	f7fb fcc3 	bl	80009a8 <__aeabi_dcmpeq>
 8005022:	4607      	mov	r7, r0
 8005024:	b158      	cbz	r0, 800503e <_dtoa_r+0xce>
 8005026:	2301      	movs	r3, #1
 8005028:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800502e:	b113      	cbz	r3, 8005036 <_dtoa_r+0xc6>
 8005030:	4b85      	ldr	r3, [pc, #532]	@ (8005248 <_dtoa_r+0x2d8>)
 8005032:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800524c <_dtoa_r+0x2dc>
 800503a:	f000 bd36 	b.w	8005aaa <_dtoa_r+0xb3a>
 800503e:	ab14      	add	r3, sp, #80	@ 0x50
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	ab15      	add	r3, sp, #84	@ 0x54
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4658      	mov	r0, fp
 8005048:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800504c:	f001 fa30 	bl	80064b0 <__d2b>
 8005050:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005054:	4681      	mov	r9, r0
 8005056:	2e00      	cmp	r6, #0
 8005058:	d077      	beq.n	800514a <_dtoa_r+0x1da>
 800505a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800505e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005060:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005068:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800506c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005070:	9712      	str	r7, [sp, #72]	@ 0x48
 8005072:	4619      	mov	r1, r3
 8005074:	2200      	movs	r2, #0
 8005076:	4b76      	ldr	r3, [pc, #472]	@ (8005250 <_dtoa_r+0x2e0>)
 8005078:	f7fb f876 	bl	8000168 <__aeabi_dsub>
 800507c:	a368      	add	r3, pc, #416	@ (adr r3, 8005220 <_dtoa_r+0x2b0>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb fa29 	bl	80004d8 <__aeabi_dmul>
 8005086:	a368      	add	r3, pc, #416	@ (adr r3, 8005228 <_dtoa_r+0x2b8>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f7fb f86e 	bl	800016c <__adddf3>
 8005090:	4604      	mov	r4, r0
 8005092:	4630      	mov	r0, r6
 8005094:	460d      	mov	r5, r1
 8005096:	f7fb f9b5 	bl	8000404 <__aeabi_i2d>
 800509a:	a365      	add	r3, pc, #404	@ (adr r3, 8005230 <_dtoa_r+0x2c0>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f7fb fa1a 	bl	80004d8 <__aeabi_dmul>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4620      	mov	r0, r4
 80050aa:	4629      	mov	r1, r5
 80050ac:	f7fb f85e 	bl	800016c <__adddf3>
 80050b0:	4604      	mov	r4, r0
 80050b2:	460d      	mov	r5, r1
 80050b4:	f7fb fcc0 	bl	8000a38 <__aeabi_d2iz>
 80050b8:	2200      	movs	r2, #0
 80050ba:	4607      	mov	r7, r0
 80050bc:	2300      	movs	r3, #0
 80050be:	4620      	mov	r0, r4
 80050c0:	4629      	mov	r1, r5
 80050c2:	f7fb fc7b 	bl	80009bc <__aeabi_dcmplt>
 80050c6:	b140      	cbz	r0, 80050da <_dtoa_r+0x16a>
 80050c8:	4638      	mov	r0, r7
 80050ca:	f7fb f99b 	bl	8000404 <__aeabi_i2d>
 80050ce:	4622      	mov	r2, r4
 80050d0:	462b      	mov	r3, r5
 80050d2:	f7fb fc69 	bl	80009a8 <__aeabi_dcmpeq>
 80050d6:	b900      	cbnz	r0, 80050da <_dtoa_r+0x16a>
 80050d8:	3f01      	subs	r7, #1
 80050da:	2f16      	cmp	r7, #22
 80050dc:	d853      	bhi.n	8005186 <_dtoa_r+0x216>
 80050de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005254 <_dtoa_r+0x2e4>)
 80050e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f7fb fc66 	bl	80009bc <__aeabi_dcmplt>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d04a      	beq.n	800518a <_dtoa_r+0x21a>
 80050f4:	2300      	movs	r3, #0
 80050f6:	3f01      	subs	r7, #1
 80050f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80050fc:	1b9b      	subs	r3, r3, r6
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	bf46      	itte	mi
 8005102:	f1c3 0801 	rsbmi	r8, r3, #1
 8005106:	2300      	movmi	r3, #0
 8005108:	f04f 0800 	movpl.w	r8, #0
 800510c:	9209      	str	r2, [sp, #36]	@ 0x24
 800510e:	bf48      	it	mi
 8005110:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005112:	2f00      	cmp	r7, #0
 8005114:	db3b      	blt.n	800518e <_dtoa_r+0x21e>
 8005116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005118:	970e      	str	r7, [sp, #56]	@ 0x38
 800511a:	443b      	add	r3, r7
 800511c:	9309      	str	r3, [sp, #36]	@ 0x24
 800511e:	2300      	movs	r3, #0
 8005120:	930a      	str	r3, [sp, #40]	@ 0x28
 8005122:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005124:	2b09      	cmp	r3, #9
 8005126:	d866      	bhi.n	80051f6 <_dtoa_r+0x286>
 8005128:	2b05      	cmp	r3, #5
 800512a:	bfc4      	itt	gt
 800512c:	3b04      	subgt	r3, #4
 800512e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005130:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005132:	bfc8      	it	gt
 8005134:	2400      	movgt	r4, #0
 8005136:	f1a3 0302 	sub.w	r3, r3, #2
 800513a:	bfd8      	it	le
 800513c:	2401      	movle	r4, #1
 800513e:	2b03      	cmp	r3, #3
 8005140:	d864      	bhi.n	800520c <_dtoa_r+0x29c>
 8005142:	e8df f003 	tbb	[pc, r3]
 8005146:	382b      	.short	0x382b
 8005148:	5636      	.short	0x5636
 800514a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800514e:	441e      	add	r6, r3
 8005150:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005154:	2b20      	cmp	r3, #32
 8005156:	bfc1      	itttt	gt
 8005158:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800515c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005160:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005164:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005168:	bfd6      	itet	le
 800516a:	f1c3 0320 	rsble	r3, r3, #32
 800516e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005172:	fa04 f003 	lslle.w	r0, r4, r3
 8005176:	f7fb f935 	bl	80003e4 <__aeabi_ui2d>
 800517a:	2201      	movs	r2, #1
 800517c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005180:	3e01      	subs	r6, #1
 8005182:	9212      	str	r2, [sp, #72]	@ 0x48
 8005184:	e775      	b.n	8005072 <_dtoa_r+0x102>
 8005186:	2301      	movs	r3, #1
 8005188:	e7b6      	b.n	80050f8 <_dtoa_r+0x188>
 800518a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800518c:	e7b5      	b.n	80050fa <_dtoa_r+0x18a>
 800518e:	427b      	negs	r3, r7
 8005190:	930a      	str	r3, [sp, #40]	@ 0x28
 8005192:	2300      	movs	r3, #0
 8005194:	eba8 0807 	sub.w	r8, r8, r7
 8005198:	930e      	str	r3, [sp, #56]	@ 0x38
 800519a:	e7c2      	b.n	8005122 <_dtoa_r+0x1b2>
 800519c:	2300      	movs	r3, #0
 800519e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	dc35      	bgt.n	8005212 <_dtoa_r+0x2a2>
 80051a6:	2301      	movs	r3, #1
 80051a8:	461a      	mov	r2, r3
 80051aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80051ae:	9221      	str	r2, [sp, #132]	@ 0x84
 80051b0:	e00b      	b.n	80051ca <_dtoa_r+0x25a>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e7f3      	b.n	800519e <_dtoa_r+0x22e>
 80051b6:	2300      	movs	r3, #0
 80051b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	9308      	str	r3, [sp, #32]
 80051c0:	3301      	adds	r3, #1
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	9307      	str	r3, [sp, #28]
 80051c6:	bfb8      	it	lt
 80051c8:	2301      	movlt	r3, #1
 80051ca:	2100      	movs	r1, #0
 80051cc:	2204      	movs	r2, #4
 80051ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 80051d2:	f102 0514 	add.w	r5, r2, #20
 80051d6:	429d      	cmp	r5, r3
 80051d8:	d91f      	bls.n	800521a <_dtoa_r+0x2aa>
 80051da:	6041      	str	r1, [r0, #4]
 80051dc:	4658      	mov	r0, fp
 80051de:	f000 fd8d 	bl	8005cfc <_Balloc>
 80051e2:	4682      	mov	sl, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d139      	bne.n	800525c <_dtoa_r+0x2ec>
 80051e8:	4602      	mov	r2, r0
 80051ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80051ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005258 <_dtoa_r+0x2e8>)
 80051f0:	e6d2      	b.n	8004f98 <_dtoa_r+0x28>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e7e0      	b.n	80051b8 <_dtoa_r+0x248>
 80051f6:	2401      	movs	r4, #1
 80051f8:	2300      	movs	r3, #0
 80051fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80051fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	2200      	movs	r2, #0
 8005204:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005208:	2312      	movs	r3, #18
 800520a:	e7d0      	b.n	80051ae <_dtoa_r+0x23e>
 800520c:	2301      	movs	r3, #1
 800520e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005210:	e7f5      	b.n	80051fe <_dtoa_r+0x28e>
 8005212:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005214:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005218:	e7d7      	b.n	80051ca <_dtoa_r+0x25a>
 800521a:	3101      	adds	r1, #1
 800521c:	0052      	lsls	r2, r2, #1
 800521e:	e7d8      	b.n	80051d2 <_dtoa_r+0x262>
 8005220:	636f4361 	.word	0x636f4361
 8005224:	3fd287a7 	.word	0x3fd287a7
 8005228:	8b60c8b3 	.word	0x8b60c8b3
 800522c:	3fc68a28 	.word	0x3fc68a28
 8005230:	509f79fb 	.word	0x509f79fb
 8005234:	3fd34413 	.word	0x3fd34413
 8005238:	0800859c 	.word	0x0800859c
 800523c:	080085b3 	.word	0x080085b3
 8005240:	7ff00000 	.word	0x7ff00000
 8005244:	08008598 	.word	0x08008598
 8005248:	08008567 	.word	0x08008567
 800524c:	08008566 	.word	0x08008566
 8005250:	3ff80000 	.word	0x3ff80000
 8005254:	080086b0 	.word	0x080086b0
 8005258:	0800860b 	.word	0x0800860b
 800525c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005260:	6018      	str	r0, [r3, #0]
 8005262:	9b07      	ldr	r3, [sp, #28]
 8005264:	2b0e      	cmp	r3, #14
 8005266:	f200 80a4 	bhi.w	80053b2 <_dtoa_r+0x442>
 800526a:	2c00      	cmp	r4, #0
 800526c:	f000 80a1 	beq.w	80053b2 <_dtoa_r+0x442>
 8005270:	2f00      	cmp	r7, #0
 8005272:	dd33      	ble.n	80052dc <_dtoa_r+0x36c>
 8005274:	4b86      	ldr	r3, [pc, #536]	@ (8005490 <_dtoa_r+0x520>)
 8005276:	f007 020f 	and.w	r2, r7, #15
 800527a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800527e:	05f8      	lsls	r0, r7, #23
 8005280:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005284:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005288:	ea4f 1427 	mov.w	r4, r7, asr #4
 800528c:	d516      	bpl.n	80052bc <_dtoa_r+0x34c>
 800528e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005292:	4b80      	ldr	r3, [pc, #512]	@ (8005494 <_dtoa_r+0x524>)
 8005294:	2603      	movs	r6, #3
 8005296:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800529a:	f7fb fa47 	bl	800072c <__aeabi_ddiv>
 800529e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052a2:	f004 040f 	and.w	r4, r4, #15
 80052a6:	4d7b      	ldr	r5, [pc, #492]	@ (8005494 <_dtoa_r+0x524>)
 80052a8:	b954      	cbnz	r4, 80052c0 <_dtoa_r+0x350>
 80052aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052b2:	f7fb fa3b 	bl	800072c <__aeabi_ddiv>
 80052b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ba:	e028      	b.n	800530e <_dtoa_r+0x39e>
 80052bc:	2602      	movs	r6, #2
 80052be:	e7f2      	b.n	80052a6 <_dtoa_r+0x336>
 80052c0:	07e1      	lsls	r1, r4, #31
 80052c2:	d508      	bpl.n	80052d6 <_dtoa_r+0x366>
 80052c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052cc:	f7fb f904 	bl	80004d8 <__aeabi_dmul>
 80052d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052d4:	3601      	adds	r6, #1
 80052d6:	1064      	asrs	r4, r4, #1
 80052d8:	3508      	adds	r5, #8
 80052da:	e7e5      	b.n	80052a8 <_dtoa_r+0x338>
 80052dc:	f000 80d2 	beq.w	8005484 <_dtoa_r+0x514>
 80052e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052e4:	427c      	negs	r4, r7
 80052e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005490 <_dtoa_r+0x520>)
 80052e8:	f004 020f 	and.w	r2, r4, #15
 80052ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f4:	f7fb f8f0 	bl	80004d8 <__aeabi_dmul>
 80052f8:	2602      	movs	r6, #2
 80052fa:	2300      	movs	r3, #0
 80052fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005300:	4d64      	ldr	r5, [pc, #400]	@ (8005494 <_dtoa_r+0x524>)
 8005302:	1124      	asrs	r4, r4, #4
 8005304:	2c00      	cmp	r4, #0
 8005306:	f040 80b2 	bne.w	800546e <_dtoa_r+0x4fe>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1d3      	bne.n	80052b6 <_dtoa_r+0x346>
 800530e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005312:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80b7 	beq.w	8005488 <_dtoa_r+0x518>
 800531a:	2200      	movs	r2, #0
 800531c:	4620      	mov	r0, r4
 800531e:	4629      	mov	r1, r5
 8005320:	4b5d      	ldr	r3, [pc, #372]	@ (8005498 <_dtoa_r+0x528>)
 8005322:	f7fb fb4b 	bl	80009bc <__aeabi_dcmplt>
 8005326:	2800      	cmp	r0, #0
 8005328:	f000 80ae 	beq.w	8005488 <_dtoa_r+0x518>
 800532c:	9b07      	ldr	r3, [sp, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80aa 	beq.w	8005488 <_dtoa_r+0x518>
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	dd37      	ble.n	80053aa <_dtoa_r+0x43a>
 800533a:	1e7b      	subs	r3, r7, #1
 800533c:	4620      	mov	r0, r4
 800533e:	9304      	str	r3, [sp, #16]
 8005340:	2200      	movs	r2, #0
 8005342:	4629      	mov	r1, r5
 8005344:	4b55      	ldr	r3, [pc, #340]	@ (800549c <_dtoa_r+0x52c>)
 8005346:	f7fb f8c7 	bl	80004d8 <__aeabi_dmul>
 800534a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800534e:	9c08      	ldr	r4, [sp, #32]
 8005350:	3601      	adds	r6, #1
 8005352:	4630      	mov	r0, r6
 8005354:	f7fb f856 	bl	8000404 <__aeabi_i2d>
 8005358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800535c:	f7fb f8bc 	bl	80004d8 <__aeabi_dmul>
 8005360:	2200      	movs	r2, #0
 8005362:	4b4f      	ldr	r3, [pc, #316]	@ (80054a0 <_dtoa_r+0x530>)
 8005364:	f7fa ff02 	bl	800016c <__adddf3>
 8005368:	4605      	mov	r5, r0
 800536a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800536e:	2c00      	cmp	r4, #0
 8005370:	f040 809a 	bne.w	80054a8 <_dtoa_r+0x538>
 8005374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	4b4a      	ldr	r3, [pc, #296]	@ (80054a4 <_dtoa_r+0x534>)
 800537c:	f7fa fef4 	bl	8000168 <__aeabi_dsub>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005388:	462a      	mov	r2, r5
 800538a:	4633      	mov	r3, r6
 800538c:	f7fb fb34 	bl	80009f8 <__aeabi_dcmpgt>
 8005390:	2800      	cmp	r0, #0
 8005392:	f040 828e 	bne.w	80058b2 <_dtoa_r+0x942>
 8005396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800539a:	462a      	mov	r2, r5
 800539c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053a0:	f7fb fb0c 	bl	80009bc <__aeabi_dcmplt>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f040 8127 	bne.w	80055f8 <_dtoa_r+0x688>
 80053aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80053ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f2c0 8163 	blt.w	8005680 <_dtoa_r+0x710>
 80053ba:	2f0e      	cmp	r7, #14
 80053bc:	f300 8160 	bgt.w	8005680 <_dtoa_r+0x710>
 80053c0:	4b33      	ldr	r3, [pc, #204]	@ (8005490 <_dtoa_r+0x520>)
 80053c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	da03      	bge.n	80053dc <_dtoa_r+0x46c>
 80053d4:	9b07      	ldr	r3, [sp, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f340 8100 	ble.w	80055dc <_dtoa_r+0x66c>
 80053dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053e0:	4656      	mov	r6, sl
 80053e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7fb f99f 	bl	800072c <__aeabi_ddiv>
 80053ee:	f7fb fb23 	bl	8000a38 <__aeabi_d2iz>
 80053f2:	4680      	mov	r8, r0
 80053f4:	f7fb f806 	bl	8000404 <__aeabi_i2d>
 80053f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053fc:	f7fb f86c 	bl	80004d8 <__aeabi_dmul>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4620      	mov	r0, r4
 8005406:	4629      	mov	r1, r5
 8005408:	f7fa feae 	bl	8000168 <__aeabi_dsub>
 800540c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005410:	9d07      	ldr	r5, [sp, #28]
 8005412:	f806 4b01 	strb.w	r4, [r6], #1
 8005416:	eba6 040a 	sub.w	r4, r6, sl
 800541a:	42a5      	cmp	r5, r4
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	f040 8116 	bne.w	8005650 <_dtoa_r+0x6e0>
 8005424:	f7fa fea2 	bl	800016c <__adddf3>
 8005428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542c:	4604      	mov	r4, r0
 800542e:	460d      	mov	r5, r1
 8005430:	f7fb fae2 	bl	80009f8 <__aeabi_dcmpgt>
 8005434:	2800      	cmp	r0, #0
 8005436:	f040 80f8 	bne.w	800562a <_dtoa_r+0x6ba>
 800543a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fb fab1 	bl	80009a8 <__aeabi_dcmpeq>
 8005446:	b118      	cbz	r0, 8005450 <_dtoa_r+0x4e0>
 8005448:	f018 0f01 	tst.w	r8, #1
 800544c:	f040 80ed 	bne.w	800562a <_dtoa_r+0x6ba>
 8005450:	4649      	mov	r1, r9
 8005452:	4658      	mov	r0, fp
 8005454:	f000 fc92 	bl	8005d7c <_Bfree>
 8005458:	2300      	movs	r3, #0
 800545a:	7033      	strb	r3, [r6, #0]
 800545c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800545e:	3701      	adds	r7, #1
 8005460:	601f      	str	r7, [r3, #0]
 8005462:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8320 	beq.w	8005aaa <_dtoa_r+0xb3a>
 800546a:	601e      	str	r6, [r3, #0]
 800546c:	e31d      	b.n	8005aaa <_dtoa_r+0xb3a>
 800546e:	07e2      	lsls	r2, r4, #31
 8005470:	d505      	bpl.n	800547e <_dtoa_r+0x50e>
 8005472:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005476:	f7fb f82f 	bl	80004d8 <__aeabi_dmul>
 800547a:	2301      	movs	r3, #1
 800547c:	3601      	adds	r6, #1
 800547e:	1064      	asrs	r4, r4, #1
 8005480:	3508      	adds	r5, #8
 8005482:	e73f      	b.n	8005304 <_dtoa_r+0x394>
 8005484:	2602      	movs	r6, #2
 8005486:	e742      	b.n	800530e <_dtoa_r+0x39e>
 8005488:	9c07      	ldr	r4, [sp, #28]
 800548a:	9704      	str	r7, [sp, #16]
 800548c:	e761      	b.n	8005352 <_dtoa_r+0x3e2>
 800548e:	bf00      	nop
 8005490:	080086b0 	.word	0x080086b0
 8005494:	08008688 	.word	0x08008688
 8005498:	3ff00000 	.word	0x3ff00000
 800549c:	40240000 	.word	0x40240000
 80054a0:	401c0000 	.word	0x401c0000
 80054a4:	40140000 	.word	0x40140000
 80054a8:	4b70      	ldr	r3, [pc, #448]	@ (800566c <_dtoa_r+0x6fc>)
 80054aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054b4:	4454      	add	r4, sl
 80054b6:	2900      	cmp	r1, #0
 80054b8:	d045      	beq.n	8005546 <_dtoa_r+0x5d6>
 80054ba:	2000      	movs	r0, #0
 80054bc:	496c      	ldr	r1, [pc, #432]	@ (8005670 <_dtoa_r+0x700>)
 80054be:	f7fb f935 	bl	800072c <__aeabi_ddiv>
 80054c2:	4633      	mov	r3, r6
 80054c4:	462a      	mov	r2, r5
 80054c6:	f7fa fe4f 	bl	8000168 <__aeabi_dsub>
 80054ca:	4656      	mov	r6, sl
 80054cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d4:	f7fb fab0 	bl	8000a38 <__aeabi_d2iz>
 80054d8:	4605      	mov	r5, r0
 80054da:	f7fa ff93 	bl	8000404 <__aeabi_i2d>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e6:	f7fa fe3f 	bl	8000168 <__aeabi_dsub>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	3530      	adds	r5, #48	@ 0x30
 80054f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054f8:	f806 5b01 	strb.w	r5, [r6], #1
 80054fc:	f7fb fa5e 	bl	80009bc <__aeabi_dcmplt>
 8005500:	2800      	cmp	r0, #0
 8005502:	d163      	bne.n	80055cc <_dtoa_r+0x65c>
 8005504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005508:	2000      	movs	r0, #0
 800550a:	495a      	ldr	r1, [pc, #360]	@ (8005674 <_dtoa_r+0x704>)
 800550c:	f7fa fe2c 	bl	8000168 <__aeabi_dsub>
 8005510:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005514:	f7fb fa52 	bl	80009bc <__aeabi_dcmplt>
 8005518:	2800      	cmp	r0, #0
 800551a:	f040 8087 	bne.w	800562c <_dtoa_r+0x6bc>
 800551e:	42a6      	cmp	r6, r4
 8005520:	f43f af43 	beq.w	80053aa <_dtoa_r+0x43a>
 8005524:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005528:	2200      	movs	r2, #0
 800552a:	4b53      	ldr	r3, [pc, #332]	@ (8005678 <_dtoa_r+0x708>)
 800552c:	f7fa ffd4 	bl	80004d8 <__aeabi_dmul>
 8005530:	2200      	movs	r2, #0
 8005532:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800553a:	4b4f      	ldr	r3, [pc, #316]	@ (8005678 <_dtoa_r+0x708>)
 800553c:	f7fa ffcc 	bl	80004d8 <__aeabi_dmul>
 8005540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005544:	e7c4      	b.n	80054d0 <_dtoa_r+0x560>
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	f7fa ffc5 	bl	80004d8 <__aeabi_dmul>
 800554e:	4656      	mov	r6, sl
 8005550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005554:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800555a:	f7fb fa6d 	bl	8000a38 <__aeabi_d2iz>
 800555e:	4605      	mov	r5, r0
 8005560:	f7fa ff50 	bl	8000404 <__aeabi_i2d>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800556c:	f7fa fdfc 	bl	8000168 <__aeabi_dsub>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	3530      	adds	r5, #48	@ 0x30
 8005576:	f806 5b01 	strb.w	r5, [r6], #1
 800557a:	42a6      	cmp	r6, r4
 800557c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	d124      	bne.n	80055d0 <_dtoa_r+0x660>
 8005586:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800558a:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <_dtoa_r+0x700>)
 800558c:	f7fa fdee 	bl	800016c <__adddf3>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005598:	f7fb fa2e 	bl	80009f8 <__aeabi_dcmpgt>
 800559c:	2800      	cmp	r0, #0
 800559e:	d145      	bne.n	800562c <_dtoa_r+0x6bc>
 80055a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055a4:	2000      	movs	r0, #0
 80055a6:	4932      	ldr	r1, [pc, #200]	@ (8005670 <_dtoa_r+0x700>)
 80055a8:	f7fa fdde 	bl	8000168 <__aeabi_dsub>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b4:	f7fb fa02 	bl	80009bc <__aeabi_dcmplt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f43f aef6 	beq.w	80053aa <_dtoa_r+0x43a>
 80055be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80055c0:	1e73      	subs	r3, r6, #1
 80055c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055c8:	2b30      	cmp	r3, #48	@ 0x30
 80055ca:	d0f8      	beq.n	80055be <_dtoa_r+0x64e>
 80055cc:	9f04      	ldr	r7, [sp, #16]
 80055ce:	e73f      	b.n	8005450 <_dtoa_r+0x4e0>
 80055d0:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <_dtoa_r+0x708>)
 80055d2:	f7fa ff81 	bl	80004d8 <__aeabi_dmul>
 80055d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055da:	e7bc      	b.n	8005556 <_dtoa_r+0x5e6>
 80055dc:	d10c      	bne.n	80055f8 <_dtoa_r+0x688>
 80055de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055e2:	2200      	movs	r2, #0
 80055e4:	4b25      	ldr	r3, [pc, #148]	@ (800567c <_dtoa_r+0x70c>)
 80055e6:	f7fa ff77 	bl	80004d8 <__aeabi_dmul>
 80055ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ee:	f7fb f9f9 	bl	80009e4 <__aeabi_dcmpge>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f000 815b 	beq.w	80058ae <_dtoa_r+0x93e>
 80055f8:	2400      	movs	r4, #0
 80055fa:	4625      	mov	r5, r4
 80055fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055fe:	4656      	mov	r6, sl
 8005600:	43db      	mvns	r3, r3
 8005602:	9304      	str	r3, [sp, #16]
 8005604:	2700      	movs	r7, #0
 8005606:	4621      	mov	r1, r4
 8005608:	4658      	mov	r0, fp
 800560a:	f000 fbb7 	bl	8005d7c <_Bfree>
 800560e:	2d00      	cmp	r5, #0
 8005610:	d0dc      	beq.n	80055cc <_dtoa_r+0x65c>
 8005612:	b12f      	cbz	r7, 8005620 <_dtoa_r+0x6b0>
 8005614:	42af      	cmp	r7, r5
 8005616:	d003      	beq.n	8005620 <_dtoa_r+0x6b0>
 8005618:	4639      	mov	r1, r7
 800561a:	4658      	mov	r0, fp
 800561c:	f000 fbae 	bl	8005d7c <_Bfree>
 8005620:	4629      	mov	r1, r5
 8005622:	4658      	mov	r0, fp
 8005624:	f000 fbaa 	bl	8005d7c <_Bfree>
 8005628:	e7d0      	b.n	80055cc <_dtoa_r+0x65c>
 800562a:	9704      	str	r7, [sp, #16]
 800562c:	4633      	mov	r3, r6
 800562e:	461e      	mov	r6, r3
 8005630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005634:	2a39      	cmp	r2, #57	@ 0x39
 8005636:	d107      	bne.n	8005648 <_dtoa_r+0x6d8>
 8005638:	459a      	cmp	sl, r3
 800563a:	d1f8      	bne.n	800562e <_dtoa_r+0x6be>
 800563c:	9a04      	ldr	r2, [sp, #16]
 800563e:	3201      	adds	r2, #1
 8005640:	9204      	str	r2, [sp, #16]
 8005642:	2230      	movs	r2, #48	@ 0x30
 8005644:	f88a 2000 	strb.w	r2, [sl]
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	3201      	adds	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e7bd      	b.n	80055cc <_dtoa_r+0x65c>
 8005650:	2200      	movs	r2, #0
 8005652:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <_dtoa_r+0x708>)
 8005654:	f7fa ff40 	bl	80004d8 <__aeabi_dmul>
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	4604      	mov	r4, r0
 800565e:	460d      	mov	r5, r1
 8005660:	f7fb f9a2 	bl	80009a8 <__aeabi_dcmpeq>
 8005664:	2800      	cmp	r0, #0
 8005666:	f43f aebc 	beq.w	80053e2 <_dtoa_r+0x472>
 800566a:	e6f1      	b.n	8005450 <_dtoa_r+0x4e0>
 800566c:	080086b0 	.word	0x080086b0
 8005670:	3fe00000 	.word	0x3fe00000
 8005674:	3ff00000 	.word	0x3ff00000
 8005678:	40240000 	.word	0x40240000
 800567c:	40140000 	.word	0x40140000
 8005680:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005682:	2a00      	cmp	r2, #0
 8005684:	f000 80db 	beq.w	800583e <_dtoa_r+0x8ce>
 8005688:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800568a:	2a01      	cmp	r2, #1
 800568c:	f300 80bf 	bgt.w	800580e <_dtoa_r+0x89e>
 8005690:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005692:	2a00      	cmp	r2, #0
 8005694:	f000 80b7 	beq.w	8005806 <_dtoa_r+0x896>
 8005698:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800569c:	4646      	mov	r6, r8
 800569e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056a2:	2101      	movs	r1, #1
 80056a4:	441a      	add	r2, r3
 80056a6:	4658      	mov	r0, fp
 80056a8:	4498      	add	r8, r3
 80056aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80056ac:	f000 fc64 	bl	8005f78 <__i2b>
 80056b0:	4605      	mov	r5, r0
 80056b2:	b15e      	cbz	r6, 80056cc <_dtoa_r+0x75c>
 80056b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dd08      	ble.n	80056cc <_dtoa_r+0x75c>
 80056ba:	42b3      	cmp	r3, r6
 80056bc:	bfa8      	it	ge
 80056be:	4633      	movge	r3, r6
 80056c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056c2:	eba8 0803 	sub.w	r8, r8, r3
 80056c6:	1af6      	subs	r6, r6, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80056cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056ce:	b1f3      	cbz	r3, 800570e <_dtoa_r+0x79e>
 80056d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80b7 	beq.w	8005846 <_dtoa_r+0x8d6>
 80056d8:	b18c      	cbz	r4, 80056fe <_dtoa_r+0x78e>
 80056da:	4629      	mov	r1, r5
 80056dc:	4622      	mov	r2, r4
 80056de:	4658      	mov	r0, fp
 80056e0:	f000 fd08 	bl	80060f4 <__pow5mult>
 80056e4:	464a      	mov	r2, r9
 80056e6:	4601      	mov	r1, r0
 80056e8:	4605      	mov	r5, r0
 80056ea:	4658      	mov	r0, fp
 80056ec:	f000 fc5a 	bl	8005fa4 <__multiply>
 80056f0:	4649      	mov	r1, r9
 80056f2:	9004      	str	r0, [sp, #16]
 80056f4:	4658      	mov	r0, fp
 80056f6:	f000 fb41 	bl	8005d7c <_Bfree>
 80056fa:	9b04      	ldr	r3, [sp, #16]
 80056fc:	4699      	mov	r9, r3
 80056fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005700:	1b1a      	subs	r2, r3, r4
 8005702:	d004      	beq.n	800570e <_dtoa_r+0x79e>
 8005704:	4649      	mov	r1, r9
 8005706:	4658      	mov	r0, fp
 8005708:	f000 fcf4 	bl	80060f4 <__pow5mult>
 800570c:	4681      	mov	r9, r0
 800570e:	2101      	movs	r1, #1
 8005710:	4658      	mov	r0, fp
 8005712:	f000 fc31 	bl	8005f78 <__i2b>
 8005716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005718:	4604      	mov	r4, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 81c9 	beq.w	8005ab2 <_dtoa_r+0xb42>
 8005720:	461a      	mov	r2, r3
 8005722:	4601      	mov	r1, r0
 8005724:	4658      	mov	r0, fp
 8005726:	f000 fce5 	bl	80060f4 <__pow5mult>
 800572a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800572c:	4604      	mov	r4, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	f300 808f 	bgt.w	8005852 <_dtoa_r+0x8e2>
 8005734:	9b02      	ldr	r3, [sp, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 8087 	bne.w	800584a <_dtoa_r+0x8da>
 800573c:	9b03      	ldr	r3, [sp, #12]
 800573e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005742:	2b00      	cmp	r3, #0
 8005744:	f040 8083 	bne.w	800584e <_dtoa_r+0x8de>
 8005748:	9b03      	ldr	r3, [sp, #12]
 800574a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800574e:	0d1b      	lsrs	r3, r3, #20
 8005750:	051b      	lsls	r3, r3, #20
 8005752:	b12b      	cbz	r3, 8005760 <_dtoa_r+0x7f0>
 8005754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005756:	f108 0801 	add.w	r8, r8, #1
 800575a:	3301      	adds	r3, #1
 800575c:	9309      	str	r3, [sp, #36]	@ 0x24
 800575e:	2301      	movs	r3, #1
 8005760:	930a      	str	r3, [sp, #40]	@ 0x28
 8005762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 81aa 	beq.w	8005abe <_dtoa_r+0xb4e>
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005770:	6918      	ldr	r0, [r3, #16]
 8005772:	f000 fbb5 	bl	8005ee0 <__hi0bits>
 8005776:	f1c0 0020 	rsb	r0, r0, #32
 800577a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577c:	4418      	add	r0, r3
 800577e:	f010 001f 	ands.w	r0, r0, #31
 8005782:	d071      	beq.n	8005868 <_dtoa_r+0x8f8>
 8005784:	f1c0 0320 	rsb	r3, r0, #32
 8005788:	2b04      	cmp	r3, #4
 800578a:	dd65      	ble.n	8005858 <_dtoa_r+0x8e8>
 800578c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800578e:	f1c0 001c 	rsb	r0, r0, #28
 8005792:	4403      	add	r3, r0
 8005794:	4480      	add	r8, r0
 8005796:	4406      	add	r6, r0
 8005798:	9309      	str	r3, [sp, #36]	@ 0x24
 800579a:	f1b8 0f00 	cmp.w	r8, #0
 800579e:	dd05      	ble.n	80057ac <_dtoa_r+0x83c>
 80057a0:	4649      	mov	r1, r9
 80057a2:	4642      	mov	r2, r8
 80057a4:	4658      	mov	r0, fp
 80057a6:	f000 fcff 	bl	80061a8 <__lshift>
 80057aa:	4681      	mov	r9, r0
 80057ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	dd05      	ble.n	80057be <_dtoa_r+0x84e>
 80057b2:	4621      	mov	r1, r4
 80057b4:	461a      	mov	r2, r3
 80057b6:	4658      	mov	r0, fp
 80057b8:	f000 fcf6 	bl	80061a8 <__lshift>
 80057bc:	4604      	mov	r4, r0
 80057be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d053      	beq.n	800586c <_dtoa_r+0x8fc>
 80057c4:	4621      	mov	r1, r4
 80057c6:	4648      	mov	r0, r9
 80057c8:	f000 fd5a 	bl	8006280 <__mcmp>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	da4d      	bge.n	800586c <_dtoa_r+0x8fc>
 80057d0:	1e7b      	subs	r3, r7, #1
 80057d2:	4649      	mov	r1, r9
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	220a      	movs	r2, #10
 80057d8:	2300      	movs	r3, #0
 80057da:	4658      	mov	r0, fp
 80057dc:	f000 faf0 	bl	8005dc0 <__multadd>
 80057e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057e2:	4681      	mov	r9, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 816c 	beq.w	8005ac2 <_dtoa_r+0xb52>
 80057ea:	2300      	movs	r3, #0
 80057ec:	4629      	mov	r1, r5
 80057ee:	220a      	movs	r2, #10
 80057f0:	4658      	mov	r0, fp
 80057f2:	f000 fae5 	bl	8005dc0 <__multadd>
 80057f6:	9b08      	ldr	r3, [sp, #32]
 80057f8:	4605      	mov	r5, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dc61      	bgt.n	80058c2 <_dtoa_r+0x952>
 80057fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005800:	2b02      	cmp	r3, #2
 8005802:	dc3b      	bgt.n	800587c <_dtoa_r+0x90c>
 8005804:	e05d      	b.n	80058c2 <_dtoa_r+0x952>
 8005806:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005808:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800580c:	e746      	b.n	800569c <_dtoa_r+0x72c>
 800580e:	9b07      	ldr	r3, [sp, #28]
 8005810:	1e5c      	subs	r4, r3, #1
 8005812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005814:	42a3      	cmp	r3, r4
 8005816:	bfbf      	itttt	lt
 8005818:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800581a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800581c:	1ae3      	sublt	r3, r4, r3
 800581e:	18d2      	addlt	r2, r2, r3
 8005820:	bfa8      	it	ge
 8005822:	1b1c      	subge	r4, r3, r4
 8005824:	9b07      	ldr	r3, [sp, #28]
 8005826:	bfbe      	ittt	lt
 8005828:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800582a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800582c:	2400      	movlt	r4, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfb5      	itete	lt
 8005832:	eba8 0603 	sublt.w	r6, r8, r3
 8005836:	4646      	movge	r6, r8
 8005838:	2300      	movlt	r3, #0
 800583a:	9b07      	ldrge	r3, [sp, #28]
 800583c:	e730      	b.n	80056a0 <_dtoa_r+0x730>
 800583e:	4646      	mov	r6, r8
 8005840:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005842:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005844:	e735      	b.n	80056b2 <_dtoa_r+0x742>
 8005846:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005848:	e75c      	b.n	8005704 <_dtoa_r+0x794>
 800584a:	2300      	movs	r3, #0
 800584c:	e788      	b.n	8005760 <_dtoa_r+0x7f0>
 800584e:	9b02      	ldr	r3, [sp, #8]
 8005850:	e786      	b.n	8005760 <_dtoa_r+0x7f0>
 8005852:	2300      	movs	r3, #0
 8005854:	930a      	str	r3, [sp, #40]	@ 0x28
 8005856:	e788      	b.n	800576a <_dtoa_r+0x7fa>
 8005858:	d09f      	beq.n	800579a <_dtoa_r+0x82a>
 800585a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800585c:	331c      	adds	r3, #28
 800585e:	441a      	add	r2, r3
 8005860:	4498      	add	r8, r3
 8005862:	441e      	add	r6, r3
 8005864:	9209      	str	r2, [sp, #36]	@ 0x24
 8005866:	e798      	b.n	800579a <_dtoa_r+0x82a>
 8005868:	4603      	mov	r3, r0
 800586a:	e7f6      	b.n	800585a <_dtoa_r+0x8ea>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	9704      	str	r7, [sp, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	dc20      	bgt.n	80058b6 <_dtoa_r+0x946>
 8005874:	9308      	str	r3, [sp, #32]
 8005876:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005878:	2b02      	cmp	r3, #2
 800587a:	dd1e      	ble.n	80058ba <_dtoa_r+0x94a>
 800587c:	9b08      	ldr	r3, [sp, #32]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f47f aebc 	bne.w	80055fc <_dtoa_r+0x68c>
 8005884:	4621      	mov	r1, r4
 8005886:	2205      	movs	r2, #5
 8005888:	4658      	mov	r0, fp
 800588a:	f000 fa99 	bl	8005dc0 <__multadd>
 800588e:	4601      	mov	r1, r0
 8005890:	4604      	mov	r4, r0
 8005892:	4648      	mov	r0, r9
 8005894:	f000 fcf4 	bl	8006280 <__mcmp>
 8005898:	2800      	cmp	r0, #0
 800589a:	f77f aeaf 	ble.w	80055fc <_dtoa_r+0x68c>
 800589e:	2331      	movs	r3, #49	@ 0x31
 80058a0:	4656      	mov	r6, sl
 80058a2:	f806 3b01 	strb.w	r3, [r6], #1
 80058a6:	9b04      	ldr	r3, [sp, #16]
 80058a8:	3301      	adds	r3, #1
 80058aa:	9304      	str	r3, [sp, #16]
 80058ac:	e6aa      	b.n	8005604 <_dtoa_r+0x694>
 80058ae:	9c07      	ldr	r4, [sp, #28]
 80058b0:	9704      	str	r7, [sp, #16]
 80058b2:	4625      	mov	r5, r4
 80058b4:	e7f3      	b.n	800589e <_dtoa_r+0x92e>
 80058b6:	9b07      	ldr	r3, [sp, #28]
 80058b8:	9308      	str	r3, [sp, #32]
 80058ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8104 	beq.w	8005aca <_dtoa_r+0xb5a>
 80058c2:	2e00      	cmp	r6, #0
 80058c4:	dd05      	ble.n	80058d2 <_dtoa_r+0x962>
 80058c6:	4629      	mov	r1, r5
 80058c8:	4632      	mov	r2, r6
 80058ca:	4658      	mov	r0, fp
 80058cc:	f000 fc6c 	bl	80061a8 <__lshift>
 80058d0:	4605      	mov	r5, r0
 80058d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d05a      	beq.n	800598e <_dtoa_r+0xa1e>
 80058d8:	4658      	mov	r0, fp
 80058da:	6869      	ldr	r1, [r5, #4]
 80058dc:	f000 fa0e 	bl	8005cfc <_Balloc>
 80058e0:	4606      	mov	r6, r0
 80058e2:	b928      	cbnz	r0, 80058f0 <_dtoa_r+0x980>
 80058e4:	4602      	mov	r2, r0
 80058e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80058ea:	4b83      	ldr	r3, [pc, #524]	@ (8005af8 <_dtoa_r+0xb88>)
 80058ec:	f7ff bb54 	b.w	8004f98 <_dtoa_r+0x28>
 80058f0:	692a      	ldr	r2, [r5, #16]
 80058f2:	f105 010c 	add.w	r1, r5, #12
 80058f6:	3202      	adds	r2, #2
 80058f8:	0092      	lsls	r2, r2, #2
 80058fa:	300c      	adds	r0, #12
 80058fc:	f001 ff5e 	bl	80077bc <memcpy>
 8005900:	2201      	movs	r2, #1
 8005902:	4631      	mov	r1, r6
 8005904:	4658      	mov	r0, fp
 8005906:	f000 fc4f 	bl	80061a8 <__lshift>
 800590a:	462f      	mov	r7, r5
 800590c:	4605      	mov	r5, r0
 800590e:	f10a 0301 	add.w	r3, sl, #1
 8005912:	9307      	str	r3, [sp, #28]
 8005914:	9b08      	ldr	r3, [sp, #32]
 8005916:	4453      	add	r3, sl
 8005918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800591a:	9b02      	ldr	r3, [sp, #8]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	930a      	str	r3, [sp, #40]	@ 0x28
 8005922:	9b07      	ldr	r3, [sp, #28]
 8005924:	4621      	mov	r1, r4
 8005926:	3b01      	subs	r3, #1
 8005928:	4648      	mov	r0, r9
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	f7ff fa98 	bl	8004e60 <quorem>
 8005930:	4639      	mov	r1, r7
 8005932:	9008      	str	r0, [sp, #32]
 8005934:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005938:	4648      	mov	r0, r9
 800593a:	f000 fca1 	bl	8006280 <__mcmp>
 800593e:	462a      	mov	r2, r5
 8005940:	9009      	str	r0, [sp, #36]	@ 0x24
 8005942:	4621      	mov	r1, r4
 8005944:	4658      	mov	r0, fp
 8005946:	f000 fcb7 	bl	80062b8 <__mdiff>
 800594a:	68c2      	ldr	r2, [r0, #12]
 800594c:	4606      	mov	r6, r0
 800594e:	bb02      	cbnz	r2, 8005992 <_dtoa_r+0xa22>
 8005950:	4601      	mov	r1, r0
 8005952:	4648      	mov	r0, r9
 8005954:	f000 fc94 	bl	8006280 <__mcmp>
 8005958:	4602      	mov	r2, r0
 800595a:	4631      	mov	r1, r6
 800595c:	4658      	mov	r0, fp
 800595e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005960:	f000 fa0c 	bl	8005d7c <_Bfree>
 8005964:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005966:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005968:	9e07      	ldr	r6, [sp, #28]
 800596a:	ea43 0102 	orr.w	r1, r3, r2
 800596e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005970:	4319      	orrs	r1, r3
 8005972:	d110      	bne.n	8005996 <_dtoa_r+0xa26>
 8005974:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005978:	d029      	beq.n	80059ce <_dtoa_r+0xa5e>
 800597a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	dd02      	ble.n	8005986 <_dtoa_r+0xa16>
 8005980:	9b08      	ldr	r3, [sp, #32]
 8005982:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005986:	9b02      	ldr	r3, [sp, #8]
 8005988:	f883 8000 	strb.w	r8, [r3]
 800598c:	e63b      	b.n	8005606 <_dtoa_r+0x696>
 800598e:	4628      	mov	r0, r5
 8005990:	e7bb      	b.n	800590a <_dtoa_r+0x99a>
 8005992:	2201      	movs	r2, #1
 8005994:	e7e1      	b.n	800595a <_dtoa_r+0x9ea>
 8005996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	db04      	blt.n	80059a6 <_dtoa_r+0xa36>
 800599c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800599e:	430b      	orrs	r3, r1
 80059a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059a2:	430b      	orrs	r3, r1
 80059a4:	d120      	bne.n	80059e8 <_dtoa_r+0xa78>
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	dded      	ble.n	8005986 <_dtoa_r+0xa16>
 80059aa:	4649      	mov	r1, r9
 80059ac:	2201      	movs	r2, #1
 80059ae:	4658      	mov	r0, fp
 80059b0:	f000 fbfa 	bl	80061a8 <__lshift>
 80059b4:	4621      	mov	r1, r4
 80059b6:	4681      	mov	r9, r0
 80059b8:	f000 fc62 	bl	8006280 <__mcmp>
 80059bc:	2800      	cmp	r0, #0
 80059be:	dc03      	bgt.n	80059c8 <_dtoa_r+0xa58>
 80059c0:	d1e1      	bne.n	8005986 <_dtoa_r+0xa16>
 80059c2:	f018 0f01 	tst.w	r8, #1
 80059c6:	d0de      	beq.n	8005986 <_dtoa_r+0xa16>
 80059c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059cc:	d1d8      	bne.n	8005980 <_dtoa_r+0xa10>
 80059ce:	2339      	movs	r3, #57	@ 0x39
 80059d0:	9a02      	ldr	r2, [sp, #8]
 80059d2:	7013      	strb	r3, [r2, #0]
 80059d4:	4633      	mov	r3, r6
 80059d6:	461e      	mov	r6, r3
 80059d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80059dc:	3b01      	subs	r3, #1
 80059de:	2a39      	cmp	r2, #57	@ 0x39
 80059e0:	d052      	beq.n	8005a88 <_dtoa_r+0xb18>
 80059e2:	3201      	adds	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e60e      	b.n	8005606 <_dtoa_r+0x696>
 80059e8:	2a00      	cmp	r2, #0
 80059ea:	dd07      	ble.n	80059fc <_dtoa_r+0xa8c>
 80059ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059f0:	d0ed      	beq.n	80059ce <_dtoa_r+0xa5e>
 80059f2:	9a02      	ldr	r2, [sp, #8]
 80059f4:	f108 0301 	add.w	r3, r8, #1
 80059f8:	7013      	strb	r3, [r2, #0]
 80059fa:	e604      	b.n	8005606 <_dtoa_r+0x696>
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	9a07      	ldr	r2, [sp, #28]
 8005a00:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d028      	beq.n	8005a5c <_dtoa_r+0xaec>
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	220a      	movs	r2, #10
 8005a10:	4658      	mov	r0, fp
 8005a12:	f000 f9d5 	bl	8005dc0 <__multadd>
 8005a16:	42af      	cmp	r7, r5
 8005a18:	4681      	mov	r9, r0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	f04f 020a 	mov.w	r2, #10
 8005a22:	4639      	mov	r1, r7
 8005a24:	4658      	mov	r0, fp
 8005a26:	d107      	bne.n	8005a38 <_dtoa_r+0xac8>
 8005a28:	f000 f9ca 	bl	8005dc0 <__multadd>
 8005a2c:	4607      	mov	r7, r0
 8005a2e:	4605      	mov	r5, r0
 8005a30:	9b07      	ldr	r3, [sp, #28]
 8005a32:	3301      	adds	r3, #1
 8005a34:	9307      	str	r3, [sp, #28]
 8005a36:	e774      	b.n	8005922 <_dtoa_r+0x9b2>
 8005a38:	f000 f9c2 	bl	8005dc0 <__multadd>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	4607      	mov	r7, r0
 8005a40:	2300      	movs	r3, #0
 8005a42:	220a      	movs	r2, #10
 8005a44:	4658      	mov	r0, fp
 8005a46:	f000 f9bb 	bl	8005dc0 <__multadd>
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	e7f0      	b.n	8005a30 <_dtoa_r+0xac0>
 8005a4e:	9b08      	ldr	r3, [sp, #32]
 8005a50:	2700      	movs	r7, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bfcc      	ite	gt
 8005a56:	461e      	movgt	r6, r3
 8005a58:	2601      	movle	r6, #1
 8005a5a:	4456      	add	r6, sl
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4658      	mov	r0, fp
 8005a62:	f000 fba1 	bl	80061a8 <__lshift>
 8005a66:	4621      	mov	r1, r4
 8005a68:	4681      	mov	r9, r0
 8005a6a:	f000 fc09 	bl	8006280 <__mcmp>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	dcb0      	bgt.n	80059d4 <_dtoa_r+0xa64>
 8005a72:	d102      	bne.n	8005a7a <_dtoa_r+0xb0a>
 8005a74:	f018 0f01 	tst.w	r8, #1
 8005a78:	d1ac      	bne.n	80059d4 <_dtoa_r+0xa64>
 8005a7a:	4633      	mov	r3, r6
 8005a7c:	461e      	mov	r6, r3
 8005a7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a82:	2a30      	cmp	r2, #48	@ 0x30
 8005a84:	d0fa      	beq.n	8005a7c <_dtoa_r+0xb0c>
 8005a86:	e5be      	b.n	8005606 <_dtoa_r+0x696>
 8005a88:	459a      	cmp	sl, r3
 8005a8a:	d1a4      	bne.n	80059d6 <_dtoa_r+0xa66>
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	2331      	movs	r3, #49	@ 0x31
 8005a94:	f88a 3000 	strb.w	r3, [sl]
 8005a98:	e5b5      	b.n	8005606 <_dtoa_r+0x696>
 8005a9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a9c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005afc <_dtoa_r+0xb8c>
 8005aa0:	b11b      	cbz	r3, 8005aaa <_dtoa_r+0xb3a>
 8005aa2:	f10a 0308 	add.w	r3, sl, #8
 8005aa6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4650      	mov	r0, sl
 8005aac:	b017      	add	sp, #92	@ 0x5c
 8005aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	f77f ae3d 	ble.w	8005734 <_dtoa_r+0x7c4>
 8005aba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005abc:	930a      	str	r3, [sp, #40]	@ 0x28
 8005abe:	2001      	movs	r0, #1
 8005ac0:	e65b      	b.n	800577a <_dtoa_r+0x80a>
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f77f aed6 	ble.w	8005876 <_dtoa_r+0x906>
 8005aca:	4656      	mov	r6, sl
 8005acc:	4621      	mov	r1, r4
 8005ace:	4648      	mov	r0, r9
 8005ad0:	f7ff f9c6 	bl	8004e60 <quorem>
 8005ad4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ad8:	9b08      	ldr	r3, [sp, #32]
 8005ada:	f806 8b01 	strb.w	r8, [r6], #1
 8005ade:	eba6 020a 	sub.w	r2, r6, sl
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	ddb3      	ble.n	8005a4e <_dtoa_r+0xade>
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	2300      	movs	r3, #0
 8005aea:	220a      	movs	r2, #10
 8005aec:	4658      	mov	r0, fp
 8005aee:	f000 f967 	bl	8005dc0 <__multadd>
 8005af2:	4681      	mov	r9, r0
 8005af4:	e7ea      	b.n	8005acc <_dtoa_r+0xb5c>
 8005af6:	bf00      	nop
 8005af8:	0800860b 	.word	0x0800860b
 8005afc:	0800858f 	.word	0x0800858f

08005b00 <_free_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4605      	mov	r5, r0
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d040      	beq.n	8005b8a <_free_r+0x8a>
 8005b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0c:	1f0c      	subs	r4, r1, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfb8      	it	lt
 8005b12:	18e4      	addlt	r4, r4, r3
 8005b14:	f000 f8e6 	bl	8005ce4 <__malloc_lock>
 8005b18:	4a1c      	ldr	r2, [pc, #112]	@ (8005b8c <_free_r+0x8c>)
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	b933      	cbnz	r3, 8005b2c <_free_r+0x2c>
 8005b1e:	6063      	str	r3, [r4, #4]
 8005b20:	6014      	str	r4, [r2, #0]
 8005b22:	4628      	mov	r0, r5
 8005b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b28:	f000 b8e2 	b.w	8005cf0 <__malloc_unlock>
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	d908      	bls.n	8005b42 <_free_r+0x42>
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	1821      	adds	r1, r4, r0
 8005b34:	428b      	cmp	r3, r1
 8005b36:	bf01      	itttt	eq
 8005b38:	6819      	ldreq	r1, [r3, #0]
 8005b3a:	685b      	ldreq	r3, [r3, #4]
 8005b3c:	1809      	addeq	r1, r1, r0
 8005b3e:	6021      	streq	r1, [r4, #0]
 8005b40:	e7ed      	b.n	8005b1e <_free_r+0x1e>
 8005b42:	461a      	mov	r2, r3
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	b10b      	cbz	r3, 8005b4c <_free_r+0x4c>
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	d9fa      	bls.n	8005b42 <_free_r+0x42>
 8005b4c:	6811      	ldr	r1, [r2, #0]
 8005b4e:	1850      	adds	r0, r2, r1
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	d10b      	bne.n	8005b6c <_free_r+0x6c>
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	4401      	add	r1, r0
 8005b58:	1850      	adds	r0, r2, r1
 8005b5a:	4283      	cmp	r3, r0
 8005b5c:	6011      	str	r1, [r2, #0]
 8005b5e:	d1e0      	bne.n	8005b22 <_free_r+0x22>
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	4408      	add	r0, r1
 8005b66:	6010      	str	r0, [r2, #0]
 8005b68:	6053      	str	r3, [r2, #4]
 8005b6a:	e7da      	b.n	8005b22 <_free_r+0x22>
 8005b6c:	d902      	bls.n	8005b74 <_free_r+0x74>
 8005b6e:	230c      	movs	r3, #12
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	e7d6      	b.n	8005b22 <_free_r+0x22>
 8005b74:	6820      	ldr	r0, [r4, #0]
 8005b76:	1821      	adds	r1, r4, r0
 8005b78:	428b      	cmp	r3, r1
 8005b7a:	bf01      	itttt	eq
 8005b7c:	6819      	ldreq	r1, [r3, #0]
 8005b7e:	685b      	ldreq	r3, [r3, #4]
 8005b80:	1809      	addeq	r1, r1, r0
 8005b82:	6021      	streq	r1, [r4, #0]
 8005b84:	6063      	str	r3, [r4, #4]
 8005b86:	6054      	str	r4, [r2, #4]
 8005b88:	e7cb      	b.n	8005b22 <_free_r+0x22>
 8005b8a:	bd38      	pop	{r3, r4, r5, pc}
 8005b8c:	200003ec 	.word	0x200003ec

08005b90 <malloc>:
 8005b90:	4b02      	ldr	r3, [pc, #8]	@ (8005b9c <malloc+0xc>)
 8005b92:	4601      	mov	r1, r0
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	f000 b825 	b.w	8005be4 <_malloc_r>
 8005b9a:	bf00      	nop
 8005b9c:	20000018 	.word	0x20000018

08005ba0 <sbrk_aligned>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8005be0 <sbrk_aligned+0x40>)
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	6831      	ldr	r1, [r6, #0]
 8005ba8:	4605      	mov	r5, r0
 8005baa:	b911      	cbnz	r1, 8005bb2 <sbrk_aligned+0x12>
 8005bac:	f001 fdf6 	bl	800779c <_sbrk_r>
 8005bb0:	6030      	str	r0, [r6, #0]
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f001 fdf1 	bl	800779c <_sbrk_r>
 8005bba:	1c43      	adds	r3, r0, #1
 8005bbc:	d103      	bne.n	8005bc6 <sbrk_aligned+0x26>
 8005bbe:	f04f 34ff 	mov.w	r4, #4294967295
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	bd70      	pop	{r4, r5, r6, pc}
 8005bc6:	1cc4      	adds	r4, r0, #3
 8005bc8:	f024 0403 	bic.w	r4, r4, #3
 8005bcc:	42a0      	cmp	r0, r4
 8005bce:	d0f8      	beq.n	8005bc2 <sbrk_aligned+0x22>
 8005bd0:	1a21      	subs	r1, r4, r0
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f001 fde2 	bl	800779c <_sbrk_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d1f2      	bne.n	8005bc2 <sbrk_aligned+0x22>
 8005bdc:	e7ef      	b.n	8005bbe <sbrk_aligned+0x1e>
 8005bde:	bf00      	nop
 8005be0:	200003e8 	.word	0x200003e8

08005be4 <_malloc_r>:
 8005be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be8:	1ccd      	adds	r5, r1, #3
 8005bea:	f025 0503 	bic.w	r5, r5, #3
 8005bee:	3508      	adds	r5, #8
 8005bf0:	2d0c      	cmp	r5, #12
 8005bf2:	bf38      	it	cc
 8005bf4:	250c      	movcc	r5, #12
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	db01      	blt.n	8005c00 <_malloc_r+0x1c>
 8005bfc:	42a9      	cmp	r1, r5
 8005bfe:	d904      	bls.n	8005c0a <_malloc_r+0x26>
 8005c00:	230c      	movs	r3, #12
 8005c02:	6033      	str	r3, [r6, #0]
 8005c04:	2000      	movs	r0, #0
 8005c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ce0 <_malloc_r+0xfc>
 8005c0e:	f000 f869 	bl	8005ce4 <__malloc_lock>
 8005c12:	f8d8 3000 	ldr.w	r3, [r8]
 8005c16:	461c      	mov	r4, r3
 8005c18:	bb44      	cbnz	r4, 8005c6c <_malloc_r+0x88>
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7ff ffbf 	bl	8005ba0 <sbrk_aligned>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	4604      	mov	r4, r0
 8005c26:	d158      	bne.n	8005cda <_malloc_r+0xf6>
 8005c28:	f8d8 4000 	ldr.w	r4, [r8]
 8005c2c:	4627      	mov	r7, r4
 8005c2e:	2f00      	cmp	r7, #0
 8005c30:	d143      	bne.n	8005cba <_malloc_r+0xd6>
 8005c32:	2c00      	cmp	r4, #0
 8005c34:	d04b      	beq.n	8005cce <_malloc_r+0xea>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	4639      	mov	r1, r7
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	eb04 0903 	add.w	r9, r4, r3
 8005c40:	f001 fdac 	bl	800779c <_sbrk_r>
 8005c44:	4581      	cmp	r9, r0
 8005c46:	d142      	bne.n	8005cce <_malloc_r+0xea>
 8005c48:	6821      	ldr	r1, [r4, #0]
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	1a6d      	subs	r5, r5, r1
 8005c4e:	4629      	mov	r1, r5
 8005c50:	f7ff ffa6 	bl	8005ba0 <sbrk_aligned>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d03a      	beq.n	8005cce <_malloc_r+0xea>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	442b      	add	r3, r5
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	bb62      	cbnz	r2, 8005cc0 <_malloc_r+0xdc>
 8005c66:	f8c8 7000 	str.w	r7, [r8]
 8005c6a:	e00f      	b.n	8005c8c <_malloc_r+0xa8>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	1b52      	subs	r2, r2, r5
 8005c70:	d420      	bmi.n	8005cb4 <_malloc_r+0xd0>
 8005c72:	2a0b      	cmp	r2, #11
 8005c74:	d917      	bls.n	8005ca6 <_malloc_r+0xc2>
 8005c76:	1961      	adds	r1, r4, r5
 8005c78:	42a3      	cmp	r3, r4
 8005c7a:	6025      	str	r5, [r4, #0]
 8005c7c:	bf18      	it	ne
 8005c7e:	6059      	strne	r1, [r3, #4]
 8005c80:	6863      	ldr	r3, [r4, #4]
 8005c82:	bf08      	it	eq
 8005c84:	f8c8 1000 	streq.w	r1, [r8]
 8005c88:	5162      	str	r2, [r4, r5]
 8005c8a:	604b      	str	r3, [r1, #4]
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f000 f82f 	bl	8005cf0 <__malloc_unlock>
 8005c92:	f104 000b 	add.w	r0, r4, #11
 8005c96:	1d23      	adds	r3, r4, #4
 8005c98:	f020 0007 	bic.w	r0, r0, #7
 8005c9c:	1ac2      	subs	r2, r0, r3
 8005c9e:	bf1c      	itt	ne
 8005ca0:	1a1b      	subne	r3, r3, r0
 8005ca2:	50a3      	strne	r3, [r4, r2]
 8005ca4:	e7af      	b.n	8005c06 <_malloc_r+0x22>
 8005ca6:	6862      	ldr	r2, [r4, #4]
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	bf0c      	ite	eq
 8005cac:	f8c8 2000 	streq.w	r2, [r8]
 8005cb0:	605a      	strne	r2, [r3, #4]
 8005cb2:	e7eb      	b.n	8005c8c <_malloc_r+0xa8>
 8005cb4:	4623      	mov	r3, r4
 8005cb6:	6864      	ldr	r4, [r4, #4]
 8005cb8:	e7ae      	b.n	8005c18 <_malloc_r+0x34>
 8005cba:	463c      	mov	r4, r7
 8005cbc:	687f      	ldr	r7, [r7, #4]
 8005cbe:	e7b6      	b.n	8005c2e <_malloc_r+0x4a>
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d1fb      	bne.n	8005cc0 <_malloc_r+0xdc>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6053      	str	r3, [r2, #4]
 8005ccc:	e7de      	b.n	8005c8c <_malloc_r+0xa8>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	6033      	str	r3, [r6, #0]
 8005cd4:	f000 f80c 	bl	8005cf0 <__malloc_unlock>
 8005cd8:	e794      	b.n	8005c04 <_malloc_r+0x20>
 8005cda:	6005      	str	r5, [r0, #0]
 8005cdc:	e7d6      	b.n	8005c8c <_malloc_r+0xa8>
 8005cde:	bf00      	nop
 8005ce0:	200003ec 	.word	0x200003ec

08005ce4 <__malloc_lock>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	@ (8005cec <__malloc_lock+0x8>)
 8005ce6:	f7ff b8a6 	b.w	8004e36 <__retarget_lock_acquire_recursive>
 8005cea:	bf00      	nop
 8005cec:	200003e4 	.word	0x200003e4

08005cf0 <__malloc_unlock>:
 8005cf0:	4801      	ldr	r0, [pc, #4]	@ (8005cf8 <__malloc_unlock+0x8>)
 8005cf2:	f7ff b8a1 	b.w	8004e38 <__retarget_lock_release_recursive>
 8005cf6:	bf00      	nop
 8005cf8:	200003e4 	.word	0x200003e4

08005cfc <_Balloc>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	69c6      	ldr	r6, [r0, #28]
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	b976      	cbnz	r6, 8005d24 <_Balloc+0x28>
 8005d06:	2010      	movs	r0, #16
 8005d08:	f7ff ff42 	bl	8005b90 <malloc>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	61e0      	str	r0, [r4, #28]
 8005d10:	b920      	cbnz	r0, 8005d1c <_Balloc+0x20>
 8005d12:	216b      	movs	r1, #107	@ 0x6b
 8005d14:	4b17      	ldr	r3, [pc, #92]	@ (8005d74 <_Balloc+0x78>)
 8005d16:	4818      	ldr	r0, [pc, #96]	@ (8005d78 <_Balloc+0x7c>)
 8005d18:	f001 fd64 	bl	80077e4 <__assert_func>
 8005d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d20:	6006      	str	r6, [r0, #0]
 8005d22:	60c6      	str	r6, [r0, #12]
 8005d24:	69e6      	ldr	r6, [r4, #28]
 8005d26:	68f3      	ldr	r3, [r6, #12]
 8005d28:	b183      	cbz	r3, 8005d4c <_Balloc+0x50>
 8005d2a:	69e3      	ldr	r3, [r4, #28]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d32:	b9b8      	cbnz	r0, 8005d64 <_Balloc+0x68>
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f605 	lsl.w	r6, r1, r5
 8005d3a:	1d72      	adds	r2, r6, #5
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	0092      	lsls	r2, r2, #2
 8005d40:	f001 fd6e 	bl	8007820 <_calloc_r>
 8005d44:	b160      	cbz	r0, 8005d60 <_Balloc+0x64>
 8005d46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d4a:	e00e      	b.n	8005d6a <_Balloc+0x6e>
 8005d4c:	2221      	movs	r2, #33	@ 0x21
 8005d4e:	2104      	movs	r1, #4
 8005d50:	4620      	mov	r0, r4
 8005d52:	f001 fd65 	bl	8007820 <_calloc_r>
 8005d56:	69e3      	ldr	r3, [r4, #28]
 8005d58:	60f0      	str	r0, [r6, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e4      	bne.n	8005d2a <_Balloc+0x2e>
 8005d60:	2000      	movs	r0, #0
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	6802      	ldr	r2, [r0, #0]
 8005d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d70:	e7f7      	b.n	8005d62 <_Balloc+0x66>
 8005d72:	bf00      	nop
 8005d74:	0800859c 	.word	0x0800859c
 8005d78:	0800861c 	.word	0x0800861c

08005d7c <_Bfree>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	69c6      	ldr	r6, [r0, #28]
 8005d80:	4605      	mov	r5, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	b976      	cbnz	r6, 8005da4 <_Bfree+0x28>
 8005d86:	2010      	movs	r0, #16
 8005d88:	f7ff ff02 	bl	8005b90 <malloc>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	61e8      	str	r0, [r5, #28]
 8005d90:	b920      	cbnz	r0, 8005d9c <_Bfree+0x20>
 8005d92:	218f      	movs	r1, #143	@ 0x8f
 8005d94:	4b08      	ldr	r3, [pc, #32]	@ (8005db8 <_Bfree+0x3c>)
 8005d96:	4809      	ldr	r0, [pc, #36]	@ (8005dbc <_Bfree+0x40>)
 8005d98:	f001 fd24 	bl	80077e4 <__assert_func>
 8005d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005da0:	6006      	str	r6, [r0, #0]
 8005da2:	60c6      	str	r6, [r0, #12]
 8005da4:	b13c      	cbz	r4, 8005db6 <_Bfree+0x3a>
 8005da6:	69eb      	ldr	r3, [r5, #28]
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005db0:	6021      	str	r1, [r4, #0]
 8005db2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
 8005db8:	0800859c 	.word	0x0800859c
 8005dbc:	0800861c 	.word	0x0800861c

08005dc0 <__multadd>:
 8005dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	461e      	mov	r6, r3
 8005dca:	2000      	movs	r0, #0
 8005dcc:	690d      	ldr	r5, [r1, #16]
 8005dce:	f101 0c14 	add.w	ip, r1, #20
 8005dd2:	f8dc 3000 	ldr.w	r3, [ip]
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	b299      	uxth	r1, r3
 8005dda:	fb02 6101 	mla	r1, r2, r1, r6
 8005dde:	0c1e      	lsrs	r6, r3, #16
 8005de0:	0c0b      	lsrs	r3, r1, #16
 8005de2:	fb02 3306 	mla	r3, r2, r6, r3
 8005de6:	b289      	uxth	r1, r1
 8005de8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dec:	4285      	cmp	r5, r0
 8005dee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005df2:	f84c 1b04 	str.w	r1, [ip], #4
 8005df6:	dcec      	bgt.n	8005dd2 <__multadd+0x12>
 8005df8:	b30e      	cbz	r6, 8005e3e <__multadd+0x7e>
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dc19      	bgt.n	8005e34 <__multadd+0x74>
 8005e00:	6861      	ldr	r1, [r4, #4]
 8005e02:	4638      	mov	r0, r7
 8005e04:	3101      	adds	r1, #1
 8005e06:	f7ff ff79 	bl	8005cfc <_Balloc>
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	b928      	cbnz	r0, 8005e1a <__multadd+0x5a>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	21ba      	movs	r1, #186	@ 0xba
 8005e12:	4b0c      	ldr	r3, [pc, #48]	@ (8005e44 <__multadd+0x84>)
 8005e14:	480c      	ldr	r0, [pc, #48]	@ (8005e48 <__multadd+0x88>)
 8005e16:	f001 fce5 	bl	80077e4 <__assert_func>
 8005e1a:	6922      	ldr	r2, [r4, #16]
 8005e1c:	f104 010c 	add.w	r1, r4, #12
 8005e20:	3202      	adds	r2, #2
 8005e22:	0092      	lsls	r2, r2, #2
 8005e24:	300c      	adds	r0, #12
 8005e26:	f001 fcc9 	bl	80077bc <memcpy>
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff ffa5 	bl	8005d7c <_Bfree>
 8005e32:	4644      	mov	r4, r8
 8005e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e38:	3501      	adds	r5, #1
 8005e3a:	615e      	str	r6, [r3, #20]
 8005e3c:	6125      	str	r5, [r4, #16]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e44:	0800860b 	.word	0x0800860b
 8005e48:	0800861c 	.word	0x0800861c

08005e4c <__s2b>:
 8005e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e50:	4615      	mov	r5, r2
 8005e52:	2209      	movs	r2, #9
 8005e54:	461f      	mov	r7, r3
 8005e56:	3308      	adds	r3, #8
 8005e58:	460c      	mov	r4, r1
 8005e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e5e:	4606      	mov	r6, r0
 8005e60:	2201      	movs	r2, #1
 8005e62:	2100      	movs	r1, #0
 8005e64:	429a      	cmp	r2, r3
 8005e66:	db09      	blt.n	8005e7c <__s2b+0x30>
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f7ff ff47 	bl	8005cfc <_Balloc>
 8005e6e:	b940      	cbnz	r0, 8005e82 <__s2b+0x36>
 8005e70:	4602      	mov	r2, r0
 8005e72:	21d3      	movs	r1, #211	@ 0xd3
 8005e74:	4b18      	ldr	r3, [pc, #96]	@ (8005ed8 <__s2b+0x8c>)
 8005e76:	4819      	ldr	r0, [pc, #100]	@ (8005edc <__s2b+0x90>)
 8005e78:	f001 fcb4 	bl	80077e4 <__assert_func>
 8005e7c:	0052      	lsls	r2, r2, #1
 8005e7e:	3101      	adds	r1, #1
 8005e80:	e7f0      	b.n	8005e64 <__s2b+0x18>
 8005e82:	9b08      	ldr	r3, [sp, #32]
 8005e84:	2d09      	cmp	r5, #9
 8005e86:	6143      	str	r3, [r0, #20]
 8005e88:	f04f 0301 	mov.w	r3, #1
 8005e8c:	6103      	str	r3, [r0, #16]
 8005e8e:	dd16      	ble.n	8005ebe <__s2b+0x72>
 8005e90:	f104 0909 	add.w	r9, r4, #9
 8005e94:	46c8      	mov	r8, r9
 8005e96:	442c      	add	r4, r5
 8005e98:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	3b30      	subs	r3, #48	@ 0x30
 8005ea4:	f7ff ff8c 	bl	8005dc0 <__multadd>
 8005ea8:	45a0      	cmp	r8, r4
 8005eaa:	d1f5      	bne.n	8005e98 <__s2b+0x4c>
 8005eac:	f1a5 0408 	sub.w	r4, r5, #8
 8005eb0:	444c      	add	r4, r9
 8005eb2:	1b2d      	subs	r5, r5, r4
 8005eb4:	1963      	adds	r3, r4, r5
 8005eb6:	42bb      	cmp	r3, r7
 8005eb8:	db04      	blt.n	8005ec4 <__s2b+0x78>
 8005eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebe:	2509      	movs	r5, #9
 8005ec0:	340a      	adds	r4, #10
 8005ec2:	e7f6      	b.n	8005eb2 <__s2b+0x66>
 8005ec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ec8:	4601      	mov	r1, r0
 8005eca:	220a      	movs	r2, #10
 8005ecc:	4630      	mov	r0, r6
 8005ece:	3b30      	subs	r3, #48	@ 0x30
 8005ed0:	f7ff ff76 	bl	8005dc0 <__multadd>
 8005ed4:	e7ee      	b.n	8005eb4 <__s2b+0x68>
 8005ed6:	bf00      	nop
 8005ed8:	0800860b 	.word	0x0800860b
 8005edc:	0800861c 	.word	0x0800861c

08005ee0 <__hi0bits>:
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ee6:	bf3a      	itte	cc
 8005ee8:	0403      	lslcc	r3, r0, #16
 8005eea:	2010      	movcc	r0, #16
 8005eec:	2000      	movcs	r0, #0
 8005eee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ef2:	bf3c      	itt	cc
 8005ef4:	021b      	lslcc	r3, r3, #8
 8005ef6:	3008      	addcc	r0, #8
 8005ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005efc:	bf3c      	itt	cc
 8005efe:	011b      	lslcc	r3, r3, #4
 8005f00:	3004      	addcc	r0, #4
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f06:	bf3c      	itt	cc
 8005f08:	009b      	lslcc	r3, r3, #2
 8005f0a:	3002      	addcc	r0, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	db05      	blt.n	8005f1c <__hi0bits+0x3c>
 8005f10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f14:	f100 0001 	add.w	r0, r0, #1
 8005f18:	bf08      	it	eq
 8005f1a:	2020      	moveq	r0, #32
 8005f1c:	4770      	bx	lr

08005f1e <__lo0bits>:
 8005f1e:	6803      	ldr	r3, [r0, #0]
 8005f20:	4602      	mov	r2, r0
 8005f22:	f013 0007 	ands.w	r0, r3, #7
 8005f26:	d00b      	beq.n	8005f40 <__lo0bits+0x22>
 8005f28:	07d9      	lsls	r1, r3, #31
 8005f2a:	d421      	bmi.n	8005f70 <__lo0bits+0x52>
 8005f2c:	0798      	lsls	r0, r3, #30
 8005f2e:	bf49      	itett	mi
 8005f30:	085b      	lsrmi	r3, r3, #1
 8005f32:	089b      	lsrpl	r3, r3, #2
 8005f34:	2001      	movmi	r0, #1
 8005f36:	6013      	strmi	r3, [r2, #0]
 8005f38:	bf5c      	itt	pl
 8005f3a:	2002      	movpl	r0, #2
 8005f3c:	6013      	strpl	r3, [r2, #0]
 8005f3e:	4770      	bx	lr
 8005f40:	b299      	uxth	r1, r3
 8005f42:	b909      	cbnz	r1, 8005f48 <__lo0bits+0x2a>
 8005f44:	2010      	movs	r0, #16
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	b2d9      	uxtb	r1, r3
 8005f4a:	b909      	cbnz	r1, 8005f50 <__lo0bits+0x32>
 8005f4c:	3008      	adds	r0, #8
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	0719      	lsls	r1, r3, #28
 8005f52:	bf04      	itt	eq
 8005f54:	091b      	lsreq	r3, r3, #4
 8005f56:	3004      	addeq	r0, #4
 8005f58:	0799      	lsls	r1, r3, #30
 8005f5a:	bf04      	itt	eq
 8005f5c:	089b      	lsreq	r3, r3, #2
 8005f5e:	3002      	addeq	r0, #2
 8005f60:	07d9      	lsls	r1, r3, #31
 8005f62:	d403      	bmi.n	8005f6c <__lo0bits+0x4e>
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	f100 0001 	add.w	r0, r0, #1
 8005f6a:	d003      	beq.n	8005f74 <__lo0bits+0x56>
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	4770      	bx	lr
 8005f70:	2000      	movs	r0, #0
 8005f72:	4770      	bx	lr
 8005f74:	2020      	movs	r0, #32
 8005f76:	4770      	bx	lr

08005f78 <__i2b>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	f7ff febd 	bl	8005cfc <_Balloc>
 8005f82:	4602      	mov	r2, r0
 8005f84:	b928      	cbnz	r0, 8005f92 <__i2b+0x1a>
 8005f86:	f240 1145 	movw	r1, #325	@ 0x145
 8005f8a:	4b04      	ldr	r3, [pc, #16]	@ (8005f9c <__i2b+0x24>)
 8005f8c:	4804      	ldr	r0, [pc, #16]	@ (8005fa0 <__i2b+0x28>)
 8005f8e:	f001 fc29 	bl	80077e4 <__assert_func>
 8005f92:	2301      	movs	r3, #1
 8005f94:	6144      	str	r4, [r0, #20]
 8005f96:	6103      	str	r3, [r0, #16]
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	bf00      	nop
 8005f9c:	0800860b 	.word	0x0800860b
 8005fa0:	0800861c 	.word	0x0800861c

08005fa4 <__multiply>:
 8005fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa8:	4614      	mov	r4, r2
 8005faa:	690a      	ldr	r2, [r1, #16]
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	460f      	mov	r7, r1
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	bfa2      	ittt	ge
 8005fb4:	4623      	movge	r3, r4
 8005fb6:	460c      	movge	r4, r1
 8005fb8:	461f      	movge	r7, r3
 8005fba:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005fbe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005fc2:	68a3      	ldr	r3, [r4, #8]
 8005fc4:	6861      	ldr	r1, [r4, #4]
 8005fc6:	eb0a 0609 	add.w	r6, sl, r9
 8005fca:	42b3      	cmp	r3, r6
 8005fcc:	b085      	sub	sp, #20
 8005fce:	bfb8      	it	lt
 8005fd0:	3101      	addlt	r1, #1
 8005fd2:	f7ff fe93 	bl	8005cfc <_Balloc>
 8005fd6:	b930      	cbnz	r0, 8005fe6 <__multiply+0x42>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fde:	4b43      	ldr	r3, [pc, #268]	@ (80060ec <__multiply+0x148>)
 8005fe0:	4843      	ldr	r0, [pc, #268]	@ (80060f0 <__multiply+0x14c>)
 8005fe2:	f001 fbff 	bl	80077e4 <__assert_func>
 8005fe6:	f100 0514 	add.w	r5, r0, #20
 8005fea:	462b      	mov	r3, r5
 8005fec:	2200      	movs	r2, #0
 8005fee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ff2:	4543      	cmp	r3, r8
 8005ff4:	d321      	bcc.n	800603a <__multiply+0x96>
 8005ff6:	f107 0114 	add.w	r1, r7, #20
 8005ffa:	f104 0214 	add.w	r2, r4, #20
 8005ffe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006002:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006006:	9302      	str	r3, [sp, #8]
 8006008:	1b13      	subs	r3, r2, r4
 800600a:	3b15      	subs	r3, #21
 800600c:	f023 0303 	bic.w	r3, r3, #3
 8006010:	3304      	adds	r3, #4
 8006012:	f104 0715 	add.w	r7, r4, #21
 8006016:	42ba      	cmp	r2, r7
 8006018:	bf38      	it	cc
 800601a:	2304      	movcc	r3, #4
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	9b02      	ldr	r3, [sp, #8]
 8006020:	9103      	str	r1, [sp, #12]
 8006022:	428b      	cmp	r3, r1
 8006024:	d80c      	bhi.n	8006040 <__multiply+0x9c>
 8006026:	2e00      	cmp	r6, #0
 8006028:	dd03      	ble.n	8006032 <__multiply+0x8e>
 800602a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800602e:	2b00      	cmp	r3, #0
 8006030:	d05a      	beq.n	80060e8 <__multiply+0x144>
 8006032:	6106      	str	r6, [r0, #16]
 8006034:	b005      	add	sp, #20
 8006036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603a:	f843 2b04 	str.w	r2, [r3], #4
 800603e:	e7d8      	b.n	8005ff2 <__multiply+0x4e>
 8006040:	f8b1 a000 	ldrh.w	sl, [r1]
 8006044:	f1ba 0f00 	cmp.w	sl, #0
 8006048:	d023      	beq.n	8006092 <__multiply+0xee>
 800604a:	46a9      	mov	r9, r5
 800604c:	f04f 0c00 	mov.w	ip, #0
 8006050:	f104 0e14 	add.w	lr, r4, #20
 8006054:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006058:	f8d9 3000 	ldr.w	r3, [r9]
 800605c:	fa1f fb87 	uxth.w	fp, r7
 8006060:	b29b      	uxth	r3, r3
 8006062:	fb0a 330b 	mla	r3, sl, fp, r3
 8006066:	4463      	add	r3, ip
 8006068:	f8d9 c000 	ldr.w	ip, [r9]
 800606c:	0c3f      	lsrs	r7, r7, #16
 800606e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006072:	fb0a c707 	mla	r7, sl, r7, ip
 8006076:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006080:	4572      	cmp	r2, lr
 8006082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006086:	f849 3b04 	str.w	r3, [r9], #4
 800608a:	d8e3      	bhi.n	8006054 <__multiply+0xb0>
 800608c:	9b01      	ldr	r3, [sp, #4]
 800608e:	f845 c003 	str.w	ip, [r5, r3]
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	3104      	adds	r1, #4
 8006096:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800609a:	f1b9 0f00 	cmp.w	r9, #0
 800609e:	d021      	beq.n	80060e4 <__multiply+0x140>
 80060a0:	46ae      	mov	lr, r5
 80060a2:	f04f 0a00 	mov.w	sl, #0
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	f104 0c14 	add.w	ip, r4, #20
 80060ac:	f8bc b000 	ldrh.w	fp, [ip]
 80060b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	fb09 770b 	mla	r7, r9, fp, r7
 80060ba:	4457      	add	r7, sl
 80060bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060c0:	f84e 3b04 	str.w	r3, [lr], #4
 80060c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060cc:	f8be 3000 	ldrh.w	r3, [lr]
 80060d0:	4562      	cmp	r2, ip
 80060d2:	fb09 330a 	mla	r3, r9, sl, r3
 80060d6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80060da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060de:	d8e5      	bhi.n	80060ac <__multiply+0x108>
 80060e0:	9f01      	ldr	r7, [sp, #4]
 80060e2:	51eb      	str	r3, [r5, r7]
 80060e4:	3504      	adds	r5, #4
 80060e6:	e79a      	b.n	800601e <__multiply+0x7a>
 80060e8:	3e01      	subs	r6, #1
 80060ea:	e79c      	b.n	8006026 <__multiply+0x82>
 80060ec:	0800860b 	.word	0x0800860b
 80060f0:	0800861c 	.word	0x0800861c

080060f4 <__pow5mult>:
 80060f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f8:	4615      	mov	r5, r2
 80060fa:	f012 0203 	ands.w	r2, r2, #3
 80060fe:	4607      	mov	r7, r0
 8006100:	460e      	mov	r6, r1
 8006102:	d007      	beq.n	8006114 <__pow5mult+0x20>
 8006104:	4c25      	ldr	r4, [pc, #148]	@ (800619c <__pow5mult+0xa8>)
 8006106:	3a01      	subs	r2, #1
 8006108:	2300      	movs	r3, #0
 800610a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800610e:	f7ff fe57 	bl	8005dc0 <__multadd>
 8006112:	4606      	mov	r6, r0
 8006114:	10ad      	asrs	r5, r5, #2
 8006116:	d03d      	beq.n	8006194 <__pow5mult+0xa0>
 8006118:	69fc      	ldr	r4, [r7, #28]
 800611a:	b97c      	cbnz	r4, 800613c <__pow5mult+0x48>
 800611c:	2010      	movs	r0, #16
 800611e:	f7ff fd37 	bl	8005b90 <malloc>
 8006122:	4602      	mov	r2, r0
 8006124:	61f8      	str	r0, [r7, #28]
 8006126:	b928      	cbnz	r0, 8006134 <__pow5mult+0x40>
 8006128:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800612c:	4b1c      	ldr	r3, [pc, #112]	@ (80061a0 <__pow5mult+0xac>)
 800612e:	481d      	ldr	r0, [pc, #116]	@ (80061a4 <__pow5mult+0xb0>)
 8006130:	f001 fb58 	bl	80077e4 <__assert_func>
 8006134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006138:	6004      	str	r4, [r0, #0]
 800613a:	60c4      	str	r4, [r0, #12]
 800613c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006140:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006144:	b94c      	cbnz	r4, 800615a <__pow5mult+0x66>
 8006146:	f240 2171 	movw	r1, #625	@ 0x271
 800614a:	4638      	mov	r0, r7
 800614c:	f7ff ff14 	bl	8005f78 <__i2b>
 8006150:	2300      	movs	r3, #0
 8006152:	4604      	mov	r4, r0
 8006154:	f8c8 0008 	str.w	r0, [r8, #8]
 8006158:	6003      	str	r3, [r0, #0]
 800615a:	f04f 0900 	mov.w	r9, #0
 800615e:	07eb      	lsls	r3, r5, #31
 8006160:	d50a      	bpl.n	8006178 <__pow5mult+0x84>
 8006162:	4631      	mov	r1, r6
 8006164:	4622      	mov	r2, r4
 8006166:	4638      	mov	r0, r7
 8006168:	f7ff ff1c 	bl	8005fa4 <__multiply>
 800616c:	4680      	mov	r8, r0
 800616e:	4631      	mov	r1, r6
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff fe03 	bl	8005d7c <_Bfree>
 8006176:	4646      	mov	r6, r8
 8006178:	106d      	asrs	r5, r5, #1
 800617a:	d00b      	beq.n	8006194 <__pow5mult+0xa0>
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	b938      	cbnz	r0, 8006190 <__pow5mult+0x9c>
 8006180:	4622      	mov	r2, r4
 8006182:	4621      	mov	r1, r4
 8006184:	4638      	mov	r0, r7
 8006186:	f7ff ff0d 	bl	8005fa4 <__multiply>
 800618a:	6020      	str	r0, [r4, #0]
 800618c:	f8c0 9000 	str.w	r9, [r0]
 8006190:	4604      	mov	r4, r0
 8006192:	e7e4      	b.n	800615e <__pow5mult+0x6a>
 8006194:	4630      	mov	r0, r6
 8006196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800619a:	bf00      	nop
 800619c:	08008678 	.word	0x08008678
 80061a0:	0800859c 	.word	0x0800859c
 80061a4:	0800861c 	.word	0x0800861c

080061a8 <__lshift>:
 80061a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ac:	460c      	mov	r4, r1
 80061ae:	4607      	mov	r7, r0
 80061b0:	4691      	mov	r9, r2
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	6849      	ldr	r1, [r1, #4]
 80061b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061c0:	f108 0601 	add.w	r6, r8, #1
 80061c4:	42b3      	cmp	r3, r6
 80061c6:	db0b      	blt.n	80061e0 <__lshift+0x38>
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff fd97 	bl	8005cfc <_Balloc>
 80061ce:	4605      	mov	r5, r0
 80061d0:	b948      	cbnz	r0, 80061e6 <__lshift+0x3e>
 80061d2:	4602      	mov	r2, r0
 80061d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061d8:	4b27      	ldr	r3, [pc, #156]	@ (8006278 <__lshift+0xd0>)
 80061da:	4828      	ldr	r0, [pc, #160]	@ (800627c <__lshift+0xd4>)
 80061dc:	f001 fb02 	bl	80077e4 <__assert_func>
 80061e0:	3101      	adds	r1, #1
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	e7ee      	b.n	80061c4 <__lshift+0x1c>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f100 0114 	add.w	r1, r0, #20
 80061ec:	f100 0210 	add.w	r2, r0, #16
 80061f0:	4618      	mov	r0, r3
 80061f2:	4553      	cmp	r3, sl
 80061f4:	db33      	blt.n	800625e <__lshift+0xb6>
 80061f6:	6920      	ldr	r0, [r4, #16]
 80061f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061fc:	f104 0314 	add.w	r3, r4, #20
 8006200:	f019 091f 	ands.w	r9, r9, #31
 8006204:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006208:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800620c:	d02b      	beq.n	8006266 <__lshift+0xbe>
 800620e:	468a      	mov	sl, r1
 8006210:	2200      	movs	r2, #0
 8006212:	f1c9 0e20 	rsb	lr, r9, #32
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	fa00 f009 	lsl.w	r0, r0, r9
 800621c:	4310      	orrs	r0, r2
 800621e:	f84a 0b04 	str.w	r0, [sl], #4
 8006222:	f853 2b04 	ldr.w	r2, [r3], #4
 8006226:	459c      	cmp	ip, r3
 8006228:	fa22 f20e 	lsr.w	r2, r2, lr
 800622c:	d8f3      	bhi.n	8006216 <__lshift+0x6e>
 800622e:	ebac 0304 	sub.w	r3, ip, r4
 8006232:	3b15      	subs	r3, #21
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	3304      	adds	r3, #4
 800623a:	f104 0015 	add.w	r0, r4, #21
 800623e:	4584      	cmp	ip, r0
 8006240:	bf38      	it	cc
 8006242:	2304      	movcc	r3, #4
 8006244:	50ca      	str	r2, [r1, r3]
 8006246:	b10a      	cbz	r2, 800624c <__lshift+0xa4>
 8006248:	f108 0602 	add.w	r6, r8, #2
 800624c:	3e01      	subs	r6, #1
 800624e:	4638      	mov	r0, r7
 8006250:	4621      	mov	r1, r4
 8006252:	612e      	str	r6, [r5, #16]
 8006254:	f7ff fd92 	bl	8005d7c <_Bfree>
 8006258:	4628      	mov	r0, r5
 800625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006262:	3301      	adds	r3, #1
 8006264:	e7c5      	b.n	80061f2 <__lshift+0x4a>
 8006266:	3904      	subs	r1, #4
 8006268:	f853 2b04 	ldr.w	r2, [r3], #4
 800626c:	459c      	cmp	ip, r3
 800626e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006272:	d8f9      	bhi.n	8006268 <__lshift+0xc0>
 8006274:	e7ea      	b.n	800624c <__lshift+0xa4>
 8006276:	bf00      	nop
 8006278:	0800860b 	.word	0x0800860b
 800627c:	0800861c 	.word	0x0800861c

08006280 <__mcmp>:
 8006280:	4603      	mov	r3, r0
 8006282:	690a      	ldr	r2, [r1, #16]
 8006284:	6900      	ldr	r0, [r0, #16]
 8006286:	b530      	push	{r4, r5, lr}
 8006288:	1a80      	subs	r0, r0, r2
 800628a:	d10e      	bne.n	80062aa <__mcmp+0x2a>
 800628c:	3314      	adds	r3, #20
 800628e:	3114      	adds	r1, #20
 8006290:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006294:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006298:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800629c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062a0:	4295      	cmp	r5, r2
 80062a2:	d003      	beq.n	80062ac <__mcmp+0x2c>
 80062a4:	d205      	bcs.n	80062b2 <__mcmp+0x32>
 80062a6:	f04f 30ff 	mov.w	r0, #4294967295
 80062aa:	bd30      	pop	{r4, r5, pc}
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	d3f3      	bcc.n	8006298 <__mcmp+0x18>
 80062b0:	e7fb      	b.n	80062aa <__mcmp+0x2a>
 80062b2:	2001      	movs	r0, #1
 80062b4:	e7f9      	b.n	80062aa <__mcmp+0x2a>
	...

080062b8 <__mdiff>:
 80062b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	4689      	mov	r9, r1
 80062be:	4606      	mov	r6, r0
 80062c0:	4611      	mov	r1, r2
 80062c2:	4648      	mov	r0, r9
 80062c4:	4614      	mov	r4, r2
 80062c6:	f7ff ffdb 	bl	8006280 <__mcmp>
 80062ca:	1e05      	subs	r5, r0, #0
 80062cc:	d112      	bne.n	80062f4 <__mdiff+0x3c>
 80062ce:	4629      	mov	r1, r5
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7ff fd13 	bl	8005cfc <_Balloc>
 80062d6:	4602      	mov	r2, r0
 80062d8:	b928      	cbnz	r0, 80062e6 <__mdiff+0x2e>
 80062da:	f240 2137 	movw	r1, #567	@ 0x237
 80062de:	4b3e      	ldr	r3, [pc, #248]	@ (80063d8 <__mdiff+0x120>)
 80062e0:	483e      	ldr	r0, [pc, #248]	@ (80063dc <__mdiff+0x124>)
 80062e2:	f001 fa7f 	bl	80077e4 <__assert_func>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062ec:	4610      	mov	r0, r2
 80062ee:	b003      	add	sp, #12
 80062f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f4:	bfbc      	itt	lt
 80062f6:	464b      	movlt	r3, r9
 80062f8:	46a1      	movlt	r9, r4
 80062fa:	4630      	mov	r0, r6
 80062fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006300:	bfba      	itte	lt
 8006302:	461c      	movlt	r4, r3
 8006304:	2501      	movlt	r5, #1
 8006306:	2500      	movge	r5, #0
 8006308:	f7ff fcf8 	bl	8005cfc <_Balloc>
 800630c:	4602      	mov	r2, r0
 800630e:	b918      	cbnz	r0, 8006318 <__mdiff+0x60>
 8006310:	f240 2145 	movw	r1, #581	@ 0x245
 8006314:	4b30      	ldr	r3, [pc, #192]	@ (80063d8 <__mdiff+0x120>)
 8006316:	e7e3      	b.n	80062e0 <__mdiff+0x28>
 8006318:	f100 0b14 	add.w	fp, r0, #20
 800631c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006320:	f109 0310 	add.w	r3, r9, #16
 8006324:	60c5      	str	r5, [r0, #12]
 8006326:	f04f 0c00 	mov.w	ip, #0
 800632a:	f109 0514 	add.w	r5, r9, #20
 800632e:	46d9      	mov	r9, fp
 8006330:	6926      	ldr	r6, [r4, #16]
 8006332:	f104 0e14 	add.w	lr, r4, #20
 8006336:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800633a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006346:	f853 af04 	ldr.w	sl, [r3, #4]!
 800634a:	b281      	uxth	r1, r0
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	fa1f f38a 	uxth.w	r3, sl
 8006352:	1a5b      	subs	r3, r3, r1
 8006354:	0c00      	lsrs	r0, r0, #16
 8006356:	4463      	add	r3, ip
 8006358:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800635c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006366:	4576      	cmp	r6, lr
 8006368:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800636c:	f849 3b04 	str.w	r3, [r9], #4
 8006370:	d8e6      	bhi.n	8006340 <__mdiff+0x88>
 8006372:	1b33      	subs	r3, r6, r4
 8006374:	3b15      	subs	r3, #21
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	3415      	adds	r4, #21
 800637c:	3304      	adds	r3, #4
 800637e:	42a6      	cmp	r6, r4
 8006380:	bf38      	it	cc
 8006382:	2304      	movcc	r3, #4
 8006384:	441d      	add	r5, r3
 8006386:	445b      	add	r3, fp
 8006388:	461e      	mov	r6, r3
 800638a:	462c      	mov	r4, r5
 800638c:	4544      	cmp	r4, r8
 800638e:	d30e      	bcc.n	80063ae <__mdiff+0xf6>
 8006390:	f108 0103 	add.w	r1, r8, #3
 8006394:	1b49      	subs	r1, r1, r5
 8006396:	f021 0103 	bic.w	r1, r1, #3
 800639a:	3d03      	subs	r5, #3
 800639c:	45a8      	cmp	r8, r5
 800639e:	bf38      	it	cc
 80063a0:	2100      	movcc	r1, #0
 80063a2:	440b      	add	r3, r1
 80063a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063a8:	b199      	cbz	r1, 80063d2 <__mdiff+0x11a>
 80063aa:	6117      	str	r7, [r2, #16]
 80063ac:	e79e      	b.n	80062ec <__mdiff+0x34>
 80063ae:	46e6      	mov	lr, ip
 80063b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80063b4:	fa1f fc81 	uxth.w	ip, r1
 80063b8:	44f4      	add	ip, lr
 80063ba:	0c08      	lsrs	r0, r1, #16
 80063bc:	4471      	add	r1, lr
 80063be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80063c2:	b289      	uxth	r1, r1
 80063c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063cc:	f846 1b04 	str.w	r1, [r6], #4
 80063d0:	e7dc      	b.n	800638c <__mdiff+0xd4>
 80063d2:	3f01      	subs	r7, #1
 80063d4:	e7e6      	b.n	80063a4 <__mdiff+0xec>
 80063d6:	bf00      	nop
 80063d8:	0800860b 	.word	0x0800860b
 80063dc:	0800861c 	.word	0x0800861c

080063e0 <__ulp>:
 80063e0:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <__ulp+0x3c>)
 80063e2:	400b      	ands	r3, r1
 80063e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	dc08      	bgt.n	80063fe <__ulp+0x1e>
 80063ec:	425b      	negs	r3, r3
 80063ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80063f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063f6:	da04      	bge.n	8006402 <__ulp+0x22>
 80063f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80063fc:	4113      	asrs	r3, r2
 80063fe:	2200      	movs	r2, #0
 8006400:	e008      	b.n	8006414 <__ulp+0x34>
 8006402:	f1a2 0314 	sub.w	r3, r2, #20
 8006406:	2b1e      	cmp	r3, #30
 8006408:	bfd6      	itet	le
 800640a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800640e:	2201      	movgt	r2, #1
 8006410:	40da      	lsrle	r2, r3
 8006412:	2300      	movs	r3, #0
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	7ff00000 	.word	0x7ff00000

08006420 <__b2d>:
 8006420:	6902      	ldr	r2, [r0, #16]
 8006422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006424:	f100 0614 	add.w	r6, r0, #20
 8006428:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800642c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006430:	4f1e      	ldr	r7, [pc, #120]	@ (80064ac <__b2d+0x8c>)
 8006432:	4620      	mov	r0, r4
 8006434:	f7ff fd54 	bl	8005ee0 <__hi0bits>
 8006438:	4603      	mov	r3, r0
 800643a:	f1c0 0020 	rsb	r0, r0, #32
 800643e:	2b0a      	cmp	r3, #10
 8006440:	f1a2 0504 	sub.w	r5, r2, #4
 8006444:	6008      	str	r0, [r1, #0]
 8006446:	dc12      	bgt.n	800646e <__b2d+0x4e>
 8006448:	42ae      	cmp	r6, r5
 800644a:	bf2c      	ite	cs
 800644c:	2200      	movcs	r2, #0
 800644e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006452:	f1c3 0c0b 	rsb	ip, r3, #11
 8006456:	3315      	adds	r3, #21
 8006458:	fa24 fe0c 	lsr.w	lr, r4, ip
 800645c:	fa04 f303 	lsl.w	r3, r4, r3
 8006460:	fa22 f20c 	lsr.w	r2, r2, ip
 8006464:	ea4e 0107 	orr.w	r1, lr, r7
 8006468:	431a      	orrs	r2, r3
 800646a:	4610      	mov	r0, r2
 800646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646e:	42ae      	cmp	r6, r5
 8006470:	bf36      	itet	cc
 8006472:	f1a2 0508 	subcc.w	r5, r2, #8
 8006476:	2200      	movcs	r2, #0
 8006478:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800647c:	3b0b      	subs	r3, #11
 800647e:	d012      	beq.n	80064a6 <__b2d+0x86>
 8006480:	f1c3 0720 	rsb	r7, r3, #32
 8006484:	fa22 f107 	lsr.w	r1, r2, r7
 8006488:	409c      	lsls	r4, r3
 800648a:	430c      	orrs	r4, r1
 800648c:	42b5      	cmp	r5, r6
 800648e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006492:	bf94      	ite	ls
 8006494:	2400      	movls	r4, #0
 8006496:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800649a:	409a      	lsls	r2, r3
 800649c:	40fc      	lsrs	r4, r7
 800649e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80064a2:	4322      	orrs	r2, r4
 80064a4:	e7e1      	b.n	800646a <__b2d+0x4a>
 80064a6:	ea44 0107 	orr.w	r1, r4, r7
 80064aa:	e7de      	b.n	800646a <__b2d+0x4a>
 80064ac:	3ff00000 	.word	0x3ff00000

080064b0 <__d2b>:
 80064b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80064b4:	2101      	movs	r1, #1
 80064b6:	4690      	mov	r8, r2
 80064b8:	4699      	mov	r9, r3
 80064ba:	9e08      	ldr	r6, [sp, #32]
 80064bc:	f7ff fc1e 	bl	8005cfc <_Balloc>
 80064c0:	4604      	mov	r4, r0
 80064c2:	b930      	cbnz	r0, 80064d2 <__d2b+0x22>
 80064c4:	4602      	mov	r2, r0
 80064c6:	f240 310f 	movw	r1, #783	@ 0x30f
 80064ca:	4b23      	ldr	r3, [pc, #140]	@ (8006558 <__d2b+0xa8>)
 80064cc:	4823      	ldr	r0, [pc, #140]	@ (800655c <__d2b+0xac>)
 80064ce:	f001 f989 	bl	80077e4 <__assert_func>
 80064d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064da:	b10d      	cbz	r5, 80064e0 <__d2b+0x30>
 80064dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f1b8 0300 	subs.w	r3, r8, #0
 80064e6:	d024      	beq.n	8006532 <__d2b+0x82>
 80064e8:	4668      	mov	r0, sp
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	f7ff fd17 	bl	8005f1e <__lo0bits>
 80064f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064f4:	b1d8      	cbz	r0, 800652e <__d2b+0x7e>
 80064f6:	f1c0 0320 	rsb	r3, r0, #32
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	430b      	orrs	r3, r1
 8006500:	40c2      	lsrs	r2, r0
 8006502:	6163      	str	r3, [r4, #20]
 8006504:	9201      	str	r2, [sp, #4]
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	bf0c      	ite	eq
 800650c:	2201      	moveq	r2, #1
 800650e:	2202      	movne	r2, #2
 8006510:	61a3      	str	r3, [r4, #24]
 8006512:	6122      	str	r2, [r4, #16]
 8006514:	b1ad      	cbz	r5, 8006542 <__d2b+0x92>
 8006516:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800651a:	4405      	add	r5, r0
 800651c:	6035      	str	r5, [r6, #0]
 800651e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006524:	6018      	str	r0, [r3, #0]
 8006526:	4620      	mov	r0, r4
 8006528:	b002      	add	sp, #8
 800652a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800652e:	6161      	str	r1, [r4, #20]
 8006530:	e7e9      	b.n	8006506 <__d2b+0x56>
 8006532:	a801      	add	r0, sp, #4
 8006534:	f7ff fcf3 	bl	8005f1e <__lo0bits>
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	6163      	str	r3, [r4, #20]
 800653e:	3020      	adds	r0, #32
 8006540:	e7e7      	b.n	8006512 <__d2b+0x62>
 8006542:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006546:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800654a:	6030      	str	r0, [r6, #0]
 800654c:	6918      	ldr	r0, [r3, #16]
 800654e:	f7ff fcc7 	bl	8005ee0 <__hi0bits>
 8006552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006556:	e7e4      	b.n	8006522 <__d2b+0x72>
 8006558:	0800860b 	.word	0x0800860b
 800655c:	0800861c 	.word	0x0800861c

08006560 <__ratio>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	b085      	sub	sp, #20
 8006566:	e9cd 1000 	strd	r1, r0, [sp]
 800656a:	a902      	add	r1, sp, #8
 800656c:	f7ff ff58 	bl	8006420 <__b2d>
 8006570:	468b      	mov	fp, r1
 8006572:	4606      	mov	r6, r0
 8006574:	460f      	mov	r7, r1
 8006576:	9800      	ldr	r0, [sp, #0]
 8006578:	a903      	add	r1, sp, #12
 800657a:	f7ff ff51 	bl	8006420 <__b2d>
 800657e:	460d      	mov	r5, r1
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	4689      	mov	r9, r1
 8006584:	6919      	ldr	r1, [r3, #16]
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	4604      	mov	r4, r0
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	4630      	mov	r0, r6
 800658e:	1ac9      	subs	r1, r1, r3
 8006590:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800659a:	2b00      	cmp	r3, #0
 800659c:	bfcd      	iteet	gt
 800659e:	463a      	movgt	r2, r7
 80065a0:	462a      	movle	r2, r5
 80065a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065a6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80065aa:	bfd8      	it	le
 80065ac:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80065b0:	464b      	mov	r3, r9
 80065b2:	4622      	mov	r2, r4
 80065b4:	4659      	mov	r1, fp
 80065b6:	f7fa f8b9 	bl	800072c <__aeabi_ddiv>
 80065ba:	b005      	add	sp, #20
 80065bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065c0 <__copybits>:
 80065c0:	3901      	subs	r1, #1
 80065c2:	b570      	push	{r4, r5, r6, lr}
 80065c4:	1149      	asrs	r1, r1, #5
 80065c6:	6914      	ldr	r4, [r2, #16]
 80065c8:	3101      	adds	r1, #1
 80065ca:	f102 0314 	add.w	r3, r2, #20
 80065ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065d6:	1f05      	subs	r5, r0, #4
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d30c      	bcc.n	80065f6 <__copybits+0x36>
 80065dc:	1aa3      	subs	r3, r4, r2
 80065de:	3b11      	subs	r3, #17
 80065e0:	f023 0303 	bic.w	r3, r3, #3
 80065e4:	3211      	adds	r2, #17
 80065e6:	42a2      	cmp	r2, r4
 80065e8:	bf88      	it	hi
 80065ea:	2300      	movhi	r3, #0
 80065ec:	4418      	add	r0, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	4288      	cmp	r0, r1
 80065f2:	d305      	bcc.n	8006600 <__copybits+0x40>
 80065f4:	bd70      	pop	{r4, r5, r6, pc}
 80065f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80065fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80065fe:	e7eb      	b.n	80065d8 <__copybits+0x18>
 8006600:	f840 3b04 	str.w	r3, [r0], #4
 8006604:	e7f4      	b.n	80065f0 <__copybits+0x30>

08006606 <__any_on>:
 8006606:	f100 0214 	add.w	r2, r0, #20
 800660a:	6900      	ldr	r0, [r0, #16]
 800660c:	114b      	asrs	r3, r1, #5
 800660e:	4298      	cmp	r0, r3
 8006610:	b510      	push	{r4, lr}
 8006612:	db11      	blt.n	8006638 <__any_on+0x32>
 8006614:	dd0a      	ble.n	800662c <__any_on+0x26>
 8006616:	f011 011f 	ands.w	r1, r1, #31
 800661a:	d007      	beq.n	800662c <__any_on+0x26>
 800661c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006620:	fa24 f001 	lsr.w	r0, r4, r1
 8006624:	fa00 f101 	lsl.w	r1, r0, r1
 8006628:	428c      	cmp	r4, r1
 800662a:	d10b      	bne.n	8006644 <__any_on+0x3e>
 800662c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006630:	4293      	cmp	r3, r2
 8006632:	d803      	bhi.n	800663c <__any_on+0x36>
 8006634:	2000      	movs	r0, #0
 8006636:	bd10      	pop	{r4, pc}
 8006638:	4603      	mov	r3, r0
 800663a:	e7f7      	b.n	800662c <__any_on+0x26>
 800663c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006640:	2900      	cmp	r1, #0
 8006642:	d0f5      	beq.n	8006630 <__any_on+0x2a>
 8006644:	2001      	movs	r0, #1
 8006646:	e7f6      	b.n	8006636 <__any_on+0x30>

08006648 <sulp>:
 8006648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664c:	460f      	mov	r7, r1
 800664e:	4690      	mov	r8, r2
 8006650:	f7ff fec6 	bl	80063e0 <__ulp>
 8006654:	4604      	mov	r4, r0
 8006656:	460d      	mov	r5, r1
 8006658:	f1b8 0f00 	cmp.w	r8, #0
 800665c:	d011      	beq.n	8006682 <sulp+0x3a>
 800665e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006662:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006666:	2b00      	cmp	r3, #0
 8006668:	dd0b      	ble.n	8006682 <sulp+0x3a>
 800666a:	2400      	movs	r4, #0
 800666c:	051b      	lsls	r3, r3, #20
 800666e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006672:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006676:	4622      	mov	r2, r4
 8006678:	462b      	mov	r3, r5
 800667a:	f7f9 ff2d 	bl	80004d8 <__aeabi_dmul>
 800667e:	4604      	mov	r4, r0
 8006680:	460d      	mov	r5, r1
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668a:	0000      	movs	r0, r0
 800668c:	0000      	movs	r0, r0
	...

08006690 <_strtod_l>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b09f      	sub	sp, #124	@ 0x7c
 8006696:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006698:	2200      	movs	r2, #0
 800669a:	460c      	mov	r4, r1
 800669c:	921a      	str	r2, [sp, #104]	@ 0x68
 800669e:	f04f 0a00 	mov.w	sl, #0
 80066a2:	f04f 0b00 	mov.w	fp, #0
 80066a6:	460a      	mov	r2, r1
 80066a8:	9005      	str	r0, [sp, #20]
 80066aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80066ac:	7811      	ldrb	r1, [r2, #0]
 80066ae:	292b      	cmp	r1, #43	@ 0x2b
 80066b0:	d048      	beq.n	8006744 <_strtod_l+0xb4>
 80066b2:	d836      	bhi.n	8006722 <_strtod_l+0x92>
 80066b4:	290d      	cmp	r1, #13
 80066b6:	d830      	bhi.n	800671a <_strtod_l+0x8a>
 80066b8:	2908      	cmp	r1, #8
 80066ba:	d830      	bhi.n	800671e <_strtod_l+0x8e>
 80066bc:	2900      	cmp	r1, #0
 80066be:	d039      	beq.n	8006734 <_strtod_l+0xa4>
 80066c0:	2200      	movs	r2, #0
 80066c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80066c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80066c6:	782a      	ldrb	r2, [r5, #0]
 80066c8:	2a30      	cmp	r2, #48	@ 0x30
 80066ca:	f040 80b1 	bne.w	8006830 <_strtod_l+0x1a0>
 80066ce:	786a      	ldrb	r2, [r5, #1]
 80066d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066d4:	2a58      	cmp	r2, #88	@ 0x58
 80066d6:	d16c      	bne.n	80067b2 <_strtod_l+0x122>
 80066d8:	9302      	str	r3, [sp, #8]
 80066da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066dc:	4a8e      	ldr	r2, [pc, #568]	@ (8006918 <_strtod_l+0x288>)
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	ab1a      	add	r3, sp, #104	@ 0x68
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	9805      	ldr	r0, [sp, #20]
 80066e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80066e8:	a919      	add	r1, sp, #100	@ 0x64
 80066ea:	f001 f915 	bl	8007918 <__gethex>
 80066ee:	f010 060f 	ands.w	r6, r0, #15
 80066f2:	4604      	mov	r4, r0
 80066f4:	d005      	beq.n	8006702 <_strtod_l+0x72>
 80066f6:	2e06      	cmp	r6, #6
 80066f8:	d126      	bne.n	8006748 <_strtod_l+0xb8>
 80066fa:	2300      	movs	r3, #0
 80066fc:	3501      	adds	r5, #1
 80066fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8006700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006702:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8584 	bne.w	8007212 <_strtod_l+0xb82>
 800670a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800670c:	b1bb      	cbz	r3, 800673e <_strtod_l+0xae>
 800670e:	4650      	mov	r0, sl
 8006710:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006714:	b01f      	add	sp, #124	@ 0x7c
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	2920      	cmp	r1, #32
 800671c:	d1d0      	bne.n	80066c0 <_strtod_l+0x30>
 800671e:	3201      	adds	r2, #1
 8006720:	e7c3      	b.n	80066aa <_strtod_l+0x1a>
 8006722:	292d      	cmp	r1, #45	@ 0x2d
 8006724:	d1cc      	bne.n	80066c0 <_strtod_l+0x30>
 8006726:	2101      	movs	r1, #1
 8006728:	910b      	str	r1, [sp, #44]	@ 0x2c
 800672a:	1c51      	adds	r1, r2, #1
 800672c:	9119      	str	r1, [sp, #100]	@ 0x64
 800672e:	7852      	ldrb	r2, [r2, #1]
 8006730:	2a00      	cmp	r2, #0
 8006732:	d1c7      	bne.n	80066c4 <_strtod_l+0x34>
 8006734:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006736:	9419      	str	r4, [sp, #100]	@ 0x64
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 8568 	bne.w	800720e <_strtod_l+0xb7e>
 800673e:	4650      	mov	r0, sl
 8006740:	4659      	mov	r1, fp
 8006742:	e7e7      	b.n	8006714 <_strtod_l+0x84>
 8006744:	2100      	movs	r1, #0
 8006746:	e7ef      	b.n	8006728 <_strtod_l+0x98>
 8006748:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800674a:	b13a      	cbz	r2, 800675c <_strtod_l+0xcc>
 800674c:	2135      	movs	r1, #53	@ 0x35
 800674e:	a81c      	add	r0, sp, #112	@ 0x70
 8006750:	f7ff ff36 	bl	80065c0 <__copybits>
 8006754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006756:	9805      	ldr	r0, [sp, #20]
 8006758:	f7ff fb10 	bl	8005d7c <_Bfree>
 800675c:	3e01      	subs	r6, #1
 800675e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006760:	2e04      	cmp	r6, #4
 8006762:	d806      	bhi.n	8006772 <_strtod_l+0xe2>
 8006764:	e8df f006 	tbb	[pc, r6]
 8006768:	201d0314 	.word	0x201d0314
 800676c:	14          	.byte	0x14
 800676d:	00          	.byte	0x00
 800676e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006772:	05e1      	lsls	r1, r4, #23
 8006774:	bf48      	it	mi
 8006776:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800677a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800677e:	0d1b      	lsrs	r3, r3, #20
 8006780:	051b      	lsls	r3, r3, #20
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1bd      	bne.n	8006702 <_strtod_l+0x72>
 8006786:	f7fe fb2b 	bl	8004de0 <__errno>
 800678a:	2322      	movs	r3, #34	@ 0x22
 800678c:	6003      	str	r3, [r0, #0]
 800678e:	e7b8      	b.n	8006702 <_strtod_l+0x72>
 8006790:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006794:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006798:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800679c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067a0:	e7e7      	b.n	8006772 <_strtod_l+0xe2>
 80067a2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800691c <_strtod_l+0x28c>
 80067a6:	e7e4      	b.n	8006772 <_strtod_l+0xe2>
 80067a8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80067ac:	f04f 3aff 	mov.w	sl, #4294967295
 80067b0:	e7df      	b.n	8006772 <_strtod_l+0xe2>
 80067b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b30      	cmp	r3, #48	@ 0x30
 80067bc:	d0f9      	beq.n	80067b2 <_strtod_l+0x122>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d09f      	beq.n	8006702 <_strtod_l+0x72>
 80067c2:	2301      	movs	r3, #1
 80067c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067c8:	220a      	movs	r2, #10
 80067ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80067cc:	2300      	movs	r3, #0
 80067ce:	461f      	mov	r7, r3
 80067d0:	9308      	str	r3, [sp, #32]
 80067d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80067d4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80067d6:	7805      	ldrb	r5, [r0, #0]
 80067d8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80067dc:	b2d9      	uxtb	r1, r3
 80067de:	2909      	cmp	r1, #9
 80067e0:	d928      	bls.n	8006834 <_strtod_l+0x1a4>
 80067e2:	2201      	movs	r2, #1
 80067e4:	494e      	ldr	r1, [pc, #312]	@ (8006920 <_strtod_l+0x290>)
 80067e6:	f000 ffc7 	bl	8007778 <strncmp>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d032      	beq.n	8006854 <_strtod_l+0x1c4>
 80067ee:	2000      	movs	r0, #0
 80067f0:	462a      	mov	r2, r5
 80067f2:	4681      	mov	r9, r0
 80067f4:	463d      	mov	r5, r7
 80067f6:	4603      	mov	r3, r0
 80067f8:	2a65      	cmp	r2, #101	@ 0x65
 80067fa:	d001      	beq.n	8006800 <_strtod_l+0x170>
 80067fc:	2a45      	cmp	r2, #69	@ 0x45
 80067fe:	d114      	bne.n	800682a <_strtod_l+0x19a>
 8006800:	b91d      	cbnz	r5, 800680a <_strtod_l+0x17a>
 8006802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006804:	4302      	orrs	r2, r0
 8006806:	d095      	beq.n	8006734 <_strtod_l+0xa4>
 8006808:	2500      	movs	r5, #0
 800680a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800680c:	1c62      	adds	r2, r4, #1
 800680e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006810:	7862      	ldrb	r2, [r4, #1]
 8006812:	2a2b      	cmp	r2, #43	@ 0x2b
 8006814:	d077      	beq.n	8006906 <_strtod_l+0x276>
 8006816:	2a2d      	cmp	r2, #45	@ 0x2d
 8006818:	d07b      	beq.n	8006912 <_strtod_l+0x282>
 800681a:	f04f 0c00 	mov.w	ip, #0
 800681e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006822:	2909      	cmp	r1, #9
 8006824:	f240 8082 	bls.w	800692c <_strtod_l+0x29c>
 8006828:	9419      	str	r4, [sp, #100]	@ 0x64
 800682a:	f04f 0800 	mov.w	r8, #0
 800682e:	e0a2      	b.n	8006976 <_strtod_l+0x2e6>
 8006830:	2300      	movs	r3, #0
 8006832:	e7c7      	b.n	80067c4 <_strtod_l+0x134>
 8006834:	2f08      	cmp	r7, #8
 8006836:	bfd5      	itete	le
 8006838:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800683a:	9908      	ldrgt	r1, [sp, #32]
 800683c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006840:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006844:	f100 0001 	add.w	r0, r0, #1
 8006848:	bfd4      	ite	le
 800684a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800684c:	9308      	strgt	r3, [sp, #32]
 800684e:	3701      	adds	r7, #1
 8006850:	9019      	str	r0, [sp, #100]	@ 0x64
 8006852:	e7bf      	b.n	80067d4 <_strtod_l+0x144>
 8006854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	9219      	str	r2, [sp, #100]	@ 0x64
 800685a:	785a      	ldrb	r2, [r3, #1]
 800685c:	b37f      	cbz	r7, 80068be <_strtod_l+0x22e>
 800685e:	4681      	mov	r9, r0
 8006860:	463d      	mov	r5, r7
 8006862:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006866:	2b09      	cmp	r3, #9
 8006868:	d912      	bls.n	8006890 <_strtod_l+0x200>
 800686a:	2301      	movs	r3, #1
 800686c:	e7c4      	b.n	80067f8 <_strtod_l+0x168>
 800686e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006870:	3001      	adds	r0, #1
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	9219      	str	r2, [sp, #100]	@ 0x64
 8006876:	785a      	ldrb	r2, [r3, #1]
 8006878:	2a30      	cmp	r2, #48	@ 0x30
 800687a:	d0f8      	beq.n	800686e <_strtod_l+0x1de>
 800687c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006880:	2b08      	cmp	r3, #8
 8006882:	f200 84cb 	bhi.w	800721c <_strtod_l+0xb8c>
 8006886:	4681      	mov	r9, r0
 8006888:	2000      	movs	r0, #0
 800688a:	4605      	mov	r5, r0
 800688c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800688e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006890:	3a30      	subs	r2, #48	@ 0x30
 8006892:	f100 0301 	add.w	r3, r0, #1
 8006896:	d02a      	beq.n	80068ee <_strtod_l+0x25e>
 8006898:	4499      	add	r9, r3
 800689a:	210a      	movs	r1, #10
 800689c:	462b      	mov	r3, r5
 800689e:	eb00 0c05 	add.w	ip, r0, r5
 80068a2:	4563      	cmp	r3, ip
 80068a4:	d10d      	bne.n	80068c2 <_strtod_l+0x232>
 80068a6:	1c69      	adds	r1, r5, #1
 80068a8:	4401      	add	r1, r0
 80068aa:	4428      	add	r0, r5
 80068ac:	2808      	cmp	r0, #8
 80068ae:	dc16      	bgt.n	80068de <_strtod_l+0x24e>
 80068b0:	230a      	movs	r3, #10
 80068b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068b4:	fb03 2300 	mla	r3, r3, r0, r2
 80068b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ba:	2300      	movs	r3, #0
 80068bc:	e018      	b.n	80068f0 <_strtod_l+0x260>
 80068be:	4638      	mov	r0, r7
 80068c0:	e7da      	b.n	8006878 <_strtod_l+0x1e8>
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	f103 0301 	add.w	r3, r3, #1
 80068c8:	dc03      	bgt.n	80068d2 <_strtod_l+0x242>
 80068ca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80068cc:	434e      	muls	r6, r1
 80068ce:	960a      	str	r6, [sp, #40]	@ 0x28
 80068d0:	e7e7      	b.n	80068a2 <_strtod_l+0x212>
 80068d2:	2b10      	cmp	r3, #16
 80068d4:	bfde      	ittt	le
 80068d6:	9e08      	ldrle	r6, [sp, #32]
 80068d8:	434e      	mulle	r6, r1
 80068da:	9608      	strle	r6, [sp, #32]
 80068dc:	e7e1      	b.n	80068a2 <_strtod_l+0x212>
 80068de:	280f      	cmp	r0, #15
 80068e0:	dceb      	bgt.n	80068ba <_strtod_l+0x22a>
 80068e2:	230a      	movs	r3, #10
 80068e4:	9808      	ldr	r0, [sp, #32]
 80068e6:	fb03 2300 	mla	r3, r3, r0, r2
 80068ea:	9308      	str	r3, [sp, #32]
 80068ec:	e7e5      	b.n	80068ba <_strtod_l+0x22a>
 80068ee:	4629      	mov	r1, r5
 80068f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068f2:	460d      	mov	r5, r1
 80068f4:	1c50      	adds	r0, r2, #1
 80068f6:	9019      	str	r0, [sp, #100]	@ 0x64
 80068f8:	7852      	ldrb	r2, [r2, #1]
 80068fa:	4618      	mov	r0, r3
 80068fc:	e7b1      	b.n	8006862 <_strtod_l+0x1d2>
 80068fe:	f04f 0900 	mov.w	r9, #0
 8006902:	2301      	movs	r3, #1
 8006904:	e77d      	b.n	8006802 <_strtod_l+0x172>
 8006906:	f04f 0c00 	mov.w	ip, #0
 800690a:	1ca2      	adds	r2, r4, #2
 800690c:	9219      	str	r2, [sp, #100]	@ 0x64
 800690e:	78a2      	ldrb	r2, [r4, #2]
 8006910:	e785      	b.n	800681e <_strtod_l+0x18e>
 8006912:	f04f 0c01 	mov.w	ip, #1
 8006916:	e7f8      	b.n	800690a <_strtod_l+0x27a>
 8006918:	08008790 	.word	0x08008790
 800691c:	7ff00000 	.word	0x7ff00000
 8006920:	08008778 	.word	0x08008778
 8006924:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006926:	1c51      	adds	r1, r2, #1
 8006928:	9119      	str	r1, [sp, #100]	@ 0x64
 800692a:	7852      	ldrb	r2, [r2, #1]
 800692c:	2a30      	cmp	r2, #48	@ 0x30
 800692e:	d0f9      	beq.n	8006924 <_strtod_l+0x294>
 8006930:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006934:	2908      	cmp	r1, #8
 8006936:	f63f af78 	bhi.w	800682a <_strtod_l+0x19a>
 800693a:	f04f 080a 	mov.w	r8, #10
 800693e:	3a30      	subs	r2, #48	@ 0x30
 8006940:	920e      	str	r2, [sp, #56]	@ 0x38
 8006942:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006944:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006946:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006948:	1c56      	adds	r6, r2, #1
 800694a:	9619      	str	r6, [sp, #100]	@ 0x64
 800694c:	7852      	ldrb	r2, [r2, #1]
 800694e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006952:	f1be 0f09 	cmp.w	lr, #9
 8006956:	d939      	bls.n	80069cc <_strtod_l+0x33c>
 8006958:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800695a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800695e:	1a76      	subs	r6, r6, r1
 8006960:	2e08      	cmp	r6, #8
 8006962:	dc03      	bgt.n	800696c <_strtod_l+0x2dc>
 8006964:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006966:	4588      	cmp	r8, r1
 8006968:	bfa8      	it	ge
 800696a:	4688      	movge	r8, r1
 800696c:	f1bc 0f00 	cmp.w	ip, #0
 8006970:	d001      	beq.n	8006976 <_strtod_l+0x2e6>
 8006972:	f1c8 0800 	rsb	r8, r8, #0
 8006976:	2d00      	cmp	r5, #0
 8006978:	d14e      	bne.n	8006a18 <_strtod_l+0x388>
 800697a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800697c:	4308      	orrs	r0, r1
 800697e:	f47f aec0 	bne.w	8006702 <_strtod_l+0x72>
 8006982:	2b00      	cmp	r3, #0
 8006984:	f47f aed6 	bne.w	8006734 <_strtod_l+0xa4>
 8006988:	2a69      	cmp	r2, #105	@ 0x69
 800698a:	d028      	beq.n	80069de <_strtod_l+0x34e>
 800698c:	dc25      	bgt.n	80069da <_strtod_l+0x34a>
 800698e:	2a49      	cmp	r2, #73	@ 0x49
 8006990:	d025      	beq.n	80069de <_strtod_l+0x34e>
 8006992:	2a4e      	cmp	r2, #78	@ 0x4e
 8006994:	f47f aece 	bne.w	8006734 <_strtod_l+0xa4>
 8006998:	499a      	ldr	r1, [pc, #616]	@ (8006c04 <_strtod_l+0x574>)
 800699a:	a819      	add	r0, sp, #100	@ 0x64
 800699c:	f001 f9de 	bl	8007d5c <__match>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f43f aec7 	beq.w	8006734 <_strtod_l+0xa4>
 80069a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b28      	cmp	r3, #40	@ 0x28
 80069ac:	d12e      	bne.n	8006a0c <_strtod_l+0x37c>
 80069ae:	4996      	ldr	r1, [pc, #600]	@ (8006c08 <_strtod_l+0x578>)
 80069b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80069b2:	a819      	add	r0, sp, #100	@ 0x64
 80069b4:	f001 f9e6 	bl	8007d84 <__hexnan>
 80069b8:	2805      	cmp	r0, #5
 80069ba:	d127      	bne.n	8006a0c <_strtod_l+0x37c>
 80069bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80069be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80069c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80069c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80069ca:	e69a      	b.n	8006702 <_strtod_l+0x72>
 80069cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80069ce:	fb08 2101 	mla	r1, r8, r1, r2
 80069d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80069d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80069d8:	e7b5      	b.n	8006946 <_strtod_l+0x2b6>
 80069da:	2a6e      	cmp	r2, #110	@ 0x6e
 80069dc:	e7da      	b.n	8006994 <_strtod_l+0x304>
 80069de:	498b      	ldr	r1, [pc, #556]	@ (8006c0c <_strtod_l+0x57c>)
 80069e0:	a819      	add	r0, sp, #100	@ 0x64
 80069e2:	f001 f9bb 	bl	8007d5c <__match>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	f43f aea4 	beq.w	8006734 <_strtod_l+0xa4>
 80069ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ee:	4988      	ldr	r1, [pc, #544]	@ (8006c10 <_strtod_l+0x580>)
 80069f0:	3b01      	subs	r3, #1
 80069f2:	a819      	add	r0, sp, #100	@ 0x64
 80069f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80069f6:	f001 f9b1 	bl	8007d5c <__match>
 80069fa:	b910      	cbnz	r0, 8006a02 <_strtod_l+0x372>
 80069fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069fe:	3301      	adds	r3, #1
 8006a00:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a02:	f04f 0a00 	mov.w	sl, #0
 8006a06:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006c14 <_strtod_l+0x584>
 8006a0a:	e67a      	b.n	8006702 <_strtod_l+0x72>
 8006a0c:	4882      	ldr	r0, [pc, #520]	@ (8006c18 <_strtod_l+0x588>)
 8006a0e:	f000 fee3 	bl	80077d8 <nan>
 8006a12:	4682      	mov	sl, r0
 8006a14:	468b      	mov	fp, r1
 8006a16:	e674      	b.n	8006702 <_strtod_l+0x72>
 8006a18:	eba8 0309 	sub.w	r3, r8, r9
 8006a1c:	2f00      	cmp	r7, #0
 8006a1e:	bf08      	it	eq
 8006a20:	462f      	moveq	r7, r5
 8006a22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a24:	2d10      	cmp	r5, #16
 8006a26:	462c      	mov	r4, r5
 8006a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a2a:	bfa8      	it	ge
 8006a2c:	2410      	movge	r4, #16
 8006a2e:	f7f9 fcd9 	bl	80003e4 <__aeabi_ui2d>
 8006a32:	2d09      	cmp	r5, #9
 8006a34:	4682      	mov	sl, r0
 8006a36:	468b      	mov	fp, r1
 8006a38:	dc11      	bgt.n	8006a5e <_strtod_l+0x3ce>
 8006a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f43f ae60 	beq.w	8006702 <_strtod_l+0x72>
 8006a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a44:	dd76      	ble.n	8006b34 <_strtod_l+0x4a4>
 8006a46:	2b16      	cmp	r3, #22
 8006a48:	dc5d      	bgt.n	8006b06 <_strtod_l+0x476>
 8006a4a:	4974      	ldr	r1, [pc, #464]	@ (8006c1c <_strtod_l+0x58c>)
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a52:	465b      	mov	r3, fp
 8006a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a58:	f7f9 fd3e 	bl	80004d8 <__aeabi_dmul>
 8006a5c:	e7d9      	b.n	8006a12 <_strtod_l+0x382>
 8006a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8006c1c <_strtod_l+0x58c>)
 8006a60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a68:	f7f9 fd36 	bl	80004d8 <__aeabi_dmul>
 8006a6c:	4682      	mov	sl, r0
 8006a6e:	9808      	ldr	r0, [sp, #32]
 8006a70:	468b      	mov	fp, r1
 8006a72:	f7f9 fcb7 	bl	80003e4 <__aeabi_ui2d>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4650      	mov	r0, sl
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	f7f9 fb75 	bl	800016c <__adddf3>
 8006a82:	2d0f      	cmp	r5, #15
 8006a84:	4682      	mov	sl, r0
 8006a86:	468b      	mov	fp, r1
 8006a88:	ddd7      	ble.n	8006a3a <_strtod_l+0x3aa>
 8006a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8c:	1b2c      	subs	r4, r5, r4
 8006a8e:	441c      	add	r4, r3
 8006a90:	2c00      	cmp	r4, #0
 8006a92:	f340 8096 	ble.w	8006bc2 <_strtod_l+0x532>
 8006a96:	f014 030f 	ands.w	r3, r4, #15
 8006a9a:	d00a      	beq.n	8006ab2 <_strtod_l+0x422>
 8006a9c:	495f      	ldr	r1, [pc, #380]	@ (8006c1c <_strtod_l+0x58c>)
 8006a9e:	4652      	mov	r2, sl
 8006aa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa8:	465b      	mov	r3, fp
 8006aaa:	f7f9 fd15 	bl	80004d8 <__aeabi_dmul>
 8006aae:	4682      	mov	sl, r0
 8006ab0:	468b      	mov	fp, r1
 8006ab2:	f034 040f 	bics.w	r4, r4, #15
 8006ab6:	d073      	beq.n	8006ba0 <_strtod_l+0x510>
 8006ab8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006abc:	dd48      	ble.n	8006b50 <_strtod_l+0x4c0>
 8006abe:	2400      	movs	r4, #0
 8006ac0:	46a0      	mov	r8, r4
 8006ac2:	46a1      	mov	r9, r4
 8006ac4:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ac6:	2322      	movs	r3, #34	@ 0x22
 8006ac8:	f04f 0a00 	mov.w	sl, #0
 8006acc:	9a05      	ldr	r2, [sp, #20]
 8006ace:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006c14 <_strtod_l+0x584>
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f43f ae13 	beq.w	8006702 <_strtod_l+0x72>
 8006adc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ade:	9805      	ldr	r0, [sp, #20]
 8006ae0:	f7ff f94c 	bl	8005d7c <_Bfree>
 8006ae4:	4649      	mov	r1, r9
 8006ae6:	9805      	ldr	r0, [sp, #20]
 8006ae8:	f7ff f948 	bl	8005d7c <_Bfree>
 8006aec:	4641      	mov	r1, r8
 8006aee:	9805      	ldr	r0, [sp, #20]
 8006af0:	f7ff f944 	bl	8005d7c <_Bfree>
 8006af4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006af6:	9805      	ldr	r0, [sp, #20]
 8006af8:	f7ff f940 	bl	8005d7c <_Bfree>
 8006afc:	4621      	mov	r1, r4
 8006afe:	9805      	ldr	r0, [sp, #20]
 8006b00:	f7ff f93c 	bl	8005d7c <_Bfree>
 8006b04:	e5fd      	b.n	8006702 <_strtod_l+0x72>
 8006b06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	dbbc      	blt.n	8006a8a <_strtod_l+0x3fa>
 8006b10:	4c42      	ldr	r4, [pc, #264]	@ (8006c1c <_strtod_l+0x58c>)
 8006b12:	f1c5 050f 	rsb	r5, r5, #15
 8006b16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b20:	465b      	mov	r3, fp
 8006b22:	f7f9 fcd9 	bl	80004d8 <__aeabi_dmul>
 8006b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b28:	1b5d      	subs	r5, r3, r5
 8006b2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b32:	e791      	b.n	8006a58 <_strtod_l+0x3c8>
 8006b34:	3316      	adds	r3, #22
 8006b36:	dba8      	blt.n	8006a8a <_strtod_l+0x3fa>
 8006b38:	4b38      	ldr	r3, [pc, #224]	@ (8006c1c <_strtod_l+0x58c>)
 8006b3a:	eba9 0808 	sub.w	r8, r9, r8
 8006b3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b42:	4650      	mov	r0, sl
 8006b44:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006b48:	4659      	mov	r1, fp
 8006b4a:	f7f9 fdef 	bl	800072c <__aeabi_ddiv>
 8006b4e:	e760      	b.n	8006a12 <_strtod_l+0x382>
 8006b50:	4b33      	ldr	r3, [pc, #204]	@ (8006c20 <_strtod_l+0x590>)
 8006b52:	4650      	mov	r0, sl
 8006b54:	9308      	str	r3, [sp, #32]
 8006b56:	2300      	movs	r3, #0
 8006b58:	4659      	mov	r1, fp
 8006b5a:	461e      	mov	r6, r3
 8006b5c:	1124      	asrs	r4, r4, #4
 8006b5e:	2c01      	cmp	r4, #1
 8006b60:	dc21      	bgt.n	8006ba6 <_strtod_l+0x516>
 8006b62:	b10b      	cbz	r3, 8006b68 <_strtod_l+0x4d8>
 8006b64:	4682      	mov	sl, r0
 8006b66:	468b      	mov	fp, r1
 8006b68:	492d      	ldr	r1, [pc, #180]	@ (8006c20 <_strtod_l+0x590>)
 8006b6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006b72:	4652      	mov	r2, sl
 8006b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b78:	465b      	mov	r3, fp
 8006b7a:	f7f9 fcad 	bl	80004d8 <__aeabi_dmul>
 8006b7e:	4b25      	ldr	r3, [pc, #148]	@ (8006c14 <_strtod_l+0x584>)
 8006b80:	460a      	mov	r2, r1
 8006b82:	400b      	ands	r3, r1
 8006b84:	4927      	ldr	r1, [pc, #156]	@ (8006c24 <_strtod_l+0x594>)
 8006b86:	4682      	mov	sl, r0
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	d898      	bhi.n	8006abe <_strtod_l+0x42e>
 8006b8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf86      	itte	hi
 8006b94:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b98:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006c28 <_strtod_l+0x598>
 8006b9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9308      	str	r3, [sp, #32]
 8006ba4:	e07a      	b.n	8006c9c <_strtod_l+0x60c>
 8006ba6:	07e2      	lsls	r2, r4, #31
 8006ba8:	d505      	bpl.n	8006bb6 <_strtod_l+0x526>
 8006baa:	9b08      	ldr	r3, [sp, #32]
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	f7f9 fc92 	bl	80004d8 <__aeabi_dmul>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	9a08      	ldr	r2, [sp, #32]
 8006bb8:	3601      	adds	r6, #1
 8006bba:	3208      	adds	r2, #8
 8006bbc:	1064      	asrs	r4, r4, #1
 8006bbe:	9208      	str	r2, [sp, #32]
 8006bc0:	e7cd      	b.n	8006b5e <_strtod_l+0x4ce>
 8006bc2:	d0ed      	beq.n	8006ba0 <_strtod_l+0x510>
 8006bc4:	4264      	negs	r4, r4
 8006bc6:	f014 020f 	ands.w	r2, r4, #15
 8006bca:	d00a      	beq.n	8006be2 <_strtod_l+0x552>
 8006bcc:	4b13      	ldr	r3, [pc, #76]	@ (8006c1c <_strtod_l+0x58c>)
 8006bce:	4650      	mov	r0, sl
 8006bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd4:	4659      	mov	r1, fp
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f7f9 fda7 	bl	800072c <__aeabi_ddiv>
 8006bde:	4682      	mov	sl, r0
 8006be0:	468b      	mov	fp, r1
 8006be2:	1124      	asrs	r4, r4, #4
 8006be4:	d0dc      	beq.n	8006ba0 <_strtod_l+0x510>
 8006be6:	2c1f      	cmp	r4, #31
 8006be8:	dd20      	ble.n	8006c2c <_strtod_l+0x59c>
 8006bea:	2400      	movs	r4, #0
 8006bec:	46a0      	mov	r8, r4
 8006bee:	46a1      	mov	r9, r4
 8006bf0:	940a      	str	r4, [sp, #40]	@ 0x28
 8006bf2:	2322      	movs	r3, #34	@ 0x22
 8006bf4:	9a05      	ldr	r2, [sp, #20]
 8006bf6:	f04f 0a00 	mov.w	sl, #0
 8006bfa:	f04f 0b00 	mov.w	fp, #0
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e768      	b.n	8006ad4 <_strtod_l+0x444>
 8006c02:	bf00      	nop
 8006c04:	08008563 	.word	0x08008563
 8006c08:	0800877c 	.word	0x0800877c
 8006c0c:	0800855b 	.word	0x0800855b
 8006c10:	08008592 	.word	0x08008592
 8006c14:	7ff00000 	.word	0x7ff00000
 8006c18:	08008925 	.word	0x08008925
 8006c1c:	080086b0 	.word	0x080086b0
 8006c20:	08008688 	.word	0x08008688
 8006c24:	7ca00000 	.word	0x7ca00000
 8006c28:	7fefffff 	.word	0x7fefffff
 8006c2c:	f014 0310 	ands.w	r3, r4, #16
 8006c30:	bf18      	it	ne
 8006c32:	236a      	movne	r3, #106	@ 0x6a
 8006c34:	4650      	mov	r0, sl
 8006c36:	9308      	str	r3, [sp, #32]
 8006c38:	4659      	mov	r1, fp
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4ea9      	ldr	r6, [pc, #676]	@ (8006ee4 <_strtod_l+0x854>)
 8006c3e:	07e2      	lsls	r2, r4, #31
 8006c40:	d504      	bpl.n	8006c4c <_strtod_l+0x5bc>
 8006c42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c46:	f7f9 fc47 	bl	80004d8 <__aeabi_dmul>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	1064      	asrs	r4, r4, #1
 8006c4e:	f106 0608 	add.w	r6, r6, #8
 8006c52:	d1f4      	bne.n	8006c3e <_strtod_l+0x5ae>
 8006c54:	b10b      	cbz	r3, 8006c5a <_strtod_l+0x5ca>
 8006c56:	4682      	mov	sl, r0
 8006c58:	468b      	mov	fp, r1
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	b1b3      	cbz	r3, 8006c8c <_strtod_l+0x5fc>
 8006c5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	4659      	mov	r1, fp
 8006c6a:	dd0f      	ble.n	8006c8c <_strtod_l+0x5fc>
 8006c6c:	2b1f      	cmp	r3, #31
 8006c6e:	dd57      	ble.n	8006d20 <_strtod_l+0x690>
 8006c70:	2b34      	cmp	r3, #52	@ 0x34
 8006c72:	bfd8      	it	le
 8006c74:	f04f 33ff 	movle.w	r3, #4294967295
 8006c78:	f04f 0a00 	mov.w	sl, #0
 8006c7c:	bfcf      	iteee	gt
 8006c7e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006c82:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006c86:	4093      	lslle	r3, r2
 8006c88:	ea03 0b01 	andle.w	fp, r3, r1
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4650      	mov	r0, sl
 8006c92:	4659      	mov	r1, fp
 8006c94:	f7f9 fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1a6      	bne.n	8006bea <_strtod_l+0x55a>
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9e:	463a      	mov	r2, r7
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	9805      	ldr	r0, [sp, #20]
 8006ca8:	f7ff f8d0 	bl	8005e4c <__s2b>
 8006cac:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f af05 	beq.w	8006abe <_strtod_l+0x42e>
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cb8:	eba9 0308 	sub.w	r3, r9, r8
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	bfa8      	it	ge
 8006cc0:	2300      	movge	r3, #0
 8006cc2:	46a0      	mov	r8, r4
 8006cc4:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cca:	9316      	str	r3, [sp, #88]	@ 0x58
 8006ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cce:	9805      	ldr	r0, [sp, #20]
 8006cd0:	6859      	ldr	r1, [r3, #4]
 8006cd2:	f7ff f813 	bl	8005cfc <_Balloc>
 8006cd6:	4681      	mov	r9, r0
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	f43f aef4 	beq.w	8006ac6 <_strtod_l+0x436>
 8006cde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ce0:	300c      	adds	r0, #12
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	f103 010c 	add.w	r1, r3, #12
 8006ce8:	3202      	adds	r2, #2
 8006cea:	0092      	lsls	r2, r2, #2
 8006cec:	f000 fd66 	bl	80077bc <memcpy>
 8006cf0:	ab1c      	add	r3, sp, #112	@ 0x70
 8006cf2:	9301      	str	r3, [sp, #4]
 8006cf4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	465b      	mov	r3, fp
 8006cfc:	9805      	ldr	r0, [sp, #20]
 8006cfe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d02:	f7ff fbd5 	bl	80064b0 <__d2b>
 8006d06:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f43f aedc 	beq.w	8006ac6 <_strtod_l+0x436>
 8006d0e:	2101      	movs	r1, #1
 8006d10:	9805      	ldr	r0, [sp, #20]
 8006d12:	f7ff f931 	bl	8005f78 <__i2b>
 8006d16:	4680      	mov	r8, r0
 8006d18:	b948      	cbnz	r0, 8006d2e <_strtod_l+0x69e>
 8006d1a:	f04f 0800 	mov.w	r8, #0
 8006d1e:	e6d2      	b.n	8006ac6 <_strtod_l+0x436>
 8006d20:	f04f 32ff 	mov.w	r2, #4294967295
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	ea03 0a0a 	and.w	sl, r3, sl
 8006d2c:	e7ae      	b.n	8006c8c <_strtod_l+0x5fc>
 8006d2e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d30:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d32:	2d00      	cmp	r5, #0
 8006d34:	bfab      	itete	ge
 8006d36:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d38:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d3a:	18ef      	addge	r7, r5, r3
 8006d3c:	1b5e      	sublt	r6, r3, r5
 8006d3e:	9b08      	ldr	r3, [sp, #32]
 8006d40:	bfa8      	it	ge
 8006d42:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d44:	eba5 0503 	sub.w	r5, r5, r3
 8006d48:	4415      	add	r5, r2
 8006d4a:	4b67      	ldr	r3, [pc, #412]	@ (8006ee8 <_strtod_l+0x858>)
 8006d4c:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d50:	bfb8      	it	lt
 8006d52:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006d54:	429d      	cmp	r5, r3
 8006d56:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d5a:	da50      	bge.n	8006dfe <_strtod_l+0x76e>
 8006d5c:	1b5b      	subs	r3, r3, r5
 8006d5e:	2b1f      	cmp	r3, #31
 8006d60:	f04f 0101 	mov.w	r1, #1
 8006d64:	eba2 0203 	sub.w	r2, r2, r3
 8006d68:	dc3d      	bgt.n	8006de6 <_strtod_l+0x756>
 8006d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d70:	2300      	movs	r3, #0
 8006d72:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d74:	18bd      	adds	r5, r7, r2
 8006d76:	9b08      	ldr	r3, [sp, #32]
 8006d78:	42af      	cmp	r7, r5
 8006d7a:	4416      	add	r6, r2
 8006d7c:	441e      	add	r6, r3
 8006d7e:	463b      	mov	r3, r7
 8006d80:	bfa8      	it	ge
 8006d82:	462b      	movge	r3, r5
 8006d84:	42b3      	cmp	r3, r6
 8006d86:	bfa8      	it	ge
 8006d88:	4633      	movge	r3, r6
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bfc2      	ittt	gt
 8006d8e:	1aed      	subgt	r5, r5, r3
 8006d90:	1af6      	subgt	r6, r6, r3
 8006d92:	1aff      	subgt	r7, r7, r3
 8006d94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dd16      	ble.n	8006dc8 <_strtod_l+0x738>
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	9805      	ldr	r0, [sp, #20]
 8006da0:	f7ff f9a8 	bl	80060f4 <__pow5mult>
 8006da4:	4680      	mov	r8, r0
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d0b7      	beq.n	8006d1a <_strtod_l+0x68a>
 8006daa:	4601      	mov	r1, r0
 8006dac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dae:	9805      	ldr	r0, [sp, #20]
 8006db0:	f7ff f8f8 	bl	8005fa4 <__multiply>
 8006db4:	900e      	str	r0, [sp, #56]	@ 0x38
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f43f ae85 	beq.w	8006ac6 <_strtod_l+0x436>
 8006dbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dbe:	9805      	ldr	r0, [sp, #20]
 8006dc0:	f7fe ffdc 	bl	8005d7c <_Bfree>
 8006dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	dc1d      	bgt.n	8006e08 <_strtod_l+0x778>
 8006dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dd23      	ble.n	8006e1a <_strtod_l+0x78a>
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006dd6:	9805      	ldr	r0, [sp, #20]
 8006dd8:	f7ff f98c 	bl	80060f4 <__pow5mult>
 8006ddc:	4681      	mov	r9, r0
 8006dde:	b9e0      	cbnz	r0, 8006e1a <_strtod_l+0x78a>
 8006de0:	f04f 0900 	mov.w	r9, #0
 8006de4:	e66f      	b.n	8006ac6 <_strtod_l+0x436>
 8006de6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006dea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006dee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006df2:	35e2      	adds	r5, #226	@ 0xe2
 8006df4:	fa01 f305 	lsl.w	r3, r1, r5
 8006df8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006dfc:	e7ba      	b.n	8006d74 <_strtod_l+0x6e4>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e02:	2301      	movs	r3, #1
 8006e04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e06:	e7b5      	b.n	8006d74 <_strtod_l+0x6e4>
 8006e08:	462a      	mov	r2, r5
 8006e0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e0c:	9805      	ldr	r0, [sp, #20]
 8006e0e:	f7ff f9cb 	bl	80061a8 <__lshift>
 8006e12:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d1d9      	bne.n	8006dcc <_strtod_l+0x73c>
 8006e18:	e655      	b.n	8006ac6 <_strtod_l+0x436>
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	dd07      	ble.n	8006e2e <_strtod_l+0x79e>
 8006e1e:	4649      	mov	r1, r9
 8006e20:	4632      	mov	r2, r6
 8006e22:	9805      	ldr	r0, [sp, #20]
 8006e24:	f7ff f9c0 	bl	80061a8 <__lshift>
 8006e28:	4681      	mov	r9, r0
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d0d8      	beq.n	8006de0 <_strtod_l+0x750>
 8006e2e:	2f00      	cmp	r7, #0
 8006e30:	dd08      	ble.n	8006e44 <_strtod_l+0x7b4>
 8006e32:	4641      	mov	r1, r8
 8006e34:	463a      	mov	r2, r7
 8006e36:	9805      	ldr	r0, [sp, #20]
 8006e38:	f7ff f9b6 	bl	80061a8 <__lshift>
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f43f ae41 	beq.w	8006ac6 <_strtod_l+0x436>
 8006e44:	464a      	mov	r2, r9
 8006e46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e48:	9805      	ldr	r0, [sp, #20]
 8006e4a:	f7ff fa35 	bl	80062b8 <__mdiff>
 8006e4e:	4604      	mov	r4, r0
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f43f ae38 	beq.w	8006ac6 <_strtod_l+0x436>
 8006e56:	68c3      	ldr	r3, [r0, #12]
 8006e58:	4641      	mov	r1, r8
 8006e5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60c3      	str	r3, [r0, #12]
 8006e60:	f7ff fa0e 	bl	8006280 <__mcmp>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	da45      	bge.n	8006ef4 <_strtod_l+0x864>
 8006e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e6a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e6e:	d16b      	bne.n	8006f48 <_strtod_l+0x8b8>
 8006e70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d167      	bne.n	8006f48 <_strtod_l+0x8b8>
 8006e78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e7c:	0d1b      	lsrs	r3, r3, #20
 8006e7e:	051b      	lsls	r3, r3, #20
 8006e80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e84:	d960      	bls.n	8006f48 <_strtod_l+0x8b8>
 8006e86:	6963      	ldr	r3, [r4, #20]
 8006e88:	b913      	cbnz	r3, 8006e90 <_strtod_l+0x800>
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	dd5b      	ble.n	8006f48 <_strtod_l+0x8b8>
 8006e90:	4621      	mov	r1, r4
 8006e92:	2201      	movs	r2, #1
 8006e94:	9805      	ldr	r0, [sp, #20]
 8006e96:	f7ff f987 	bl	80061a8 <__lshift>
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	f7ff f9ef 	bl	8006280 <__mcmp>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	dd50      	ble.n	8006f48 <_strtod_l+0x8b8>
 8006ea6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006eaa:	9a08      	ldr	r2, [sp, #32]
 8006eac:	0d1b      	lsrs	r3, r3, #20
 8006eae:	051b      	lsls	r3, r3, #20
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	d06a      	beq.n	8006f8a <_strtod_l+0x8fa>
 8006eb4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006eb8:	d867      	bhi.n	8006f8a <_strtod_l+0x8fa>
 8006eba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ebe:	f67f ae98 	bls.w	8006bf2 <_strtod_l+0x562>
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	4b09      	ldr	r3, [pc, #36]	@ (8006eec <_strtod_l+0x85c>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f7f9 fb05 	bl	80004d8 <__aeabi_dmul>
 8006ece:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <_strtod_l+0x860>)
 8006ed0:	4682      	mov	sl, r0
 8006ed2:	400b      	ands	r3, r1
 8006ed4:	468b      	mov	fp, r1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f47f ae00 	bne.w	8006adc <_strtod_l+0x44c>
 8006edc:	2322      	movs	r3, #34	@ 0x22
 8006ede:	9a05      	ldr	r2, [sp, #20]
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e5fb      	b.n	8006adc <_strtod_l+0x44c>
 8006ee4:	080087a8 	.word	0x080087a8
 8006ee8:	fffffc02 	.word	0xfffffc02
 8006eec:	39500000 	.word	0x39500000
 8006ef0:	7ff00000 	.word	0x7ff00000
 8006ef4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006ef8:	d165      	bne.n	8006fc6 <_strtod_l+0x936>
 8006efa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006efc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f00:	b35a      	cbz	r2, 8006f5a <_strtod_l+0x8ca>
 8006f02:	4a99      	ldr	r2, [pc, #612]	@ (8007168 <_strtod_l+0xad8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d12b      	bne.n	8006f60 <_strtod_l+0x8d0>
 8006f08:	9b08      	ldr	r3, [sp, #32]
 8006f0a:	4651      	mov	r1, sl
 8006f0c:	b303      	cbz	r3, 8006f50 <_strtod_l+0x8c0>
 8006f0e:	465a      	mov	r2, fp
 8006f10:	4b96      	ldr	r3, [pc, #600]	@ (800716c <_strtod_l+0xadc>)
 8006f12:	4013      	ands	r3, r2
 8006f14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1c:	d81b      	bhi.n	8006f56 <_strtod_l+0x8c6>
 8006f1e:	0d1b      	lsrs	r3, r3, #20
 8006f20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d119      	bne.n	8006f60 <_strtod_l+0x8d0>
 8006f2c:	4b90      	ldr	r3, [pc, #576]	@ (8007170 <_strtod_l+0xae0>)
 8006f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d102      	bne.n	8006f3a <_strtod_l+0x8aa>
 8006f34:	3101      	adds	r1, #1
 8006f36:	f43f adc6 	beq.w	8006ac6 <_strtod_l+0x436>
 8006f3a:	f04f 0a00 	mov.w	sl, #0
 8006f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800716c <_strtod_l+0xadc>)
 8006f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f42:	401a      	ands	r2, r3
 8006f44:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f48:	9b08      	ldr	r3, [sp, #32]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1b9      	bne.n	8006ec2 <_strtod_l+0x832>
 8006f4e:	e5c5      	b.n	8006adc <_strtod_l+0x44c>
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	e7e8      	b.n	8006f28 <_strtod_l+0x898>
 8006f56:	4613      	mov	r3, r2
 8006f58:	e7e6      	b.n	8006f28 <_strtod_l+0x898>
 8006f5a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f5e:	d0a2      	beq.n	8006ea6 <_strtod_l+0x816>
 8006f60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f62:	b1db      	cbz	r3, 8006f9c <_strtod_l+0x90c>
 8006f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f66:	4213      	tst	r3, r2
 8006f68:	d0ee      	beq.n	8006f48 <_strtod_l+0x8b8>
 8006f6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	4659      	mov	r1, fp
 8006f70:	9a08      	ldr	r2, [sp, #32]
 8006f72:	b1bb      	cbz	r3, 8006fa4 <_strtod_l+0x914>
 8006f74:	f7ff fb68 	bl	8006648 <sulp>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f80:	f7f9 f8f4 	bl	800016c <__adddf3>
 8006f84:	4682      	mov	sl, r0
 8006f86:	468b      	mov	fp, r1
 8006f88:	e7de      	b.n	8006f48 <_strtod_l+0x8b8>
 8006f8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006f8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f92:	f04f 3aff 	mov.w	sl, #4294967295
 8006f96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f9a:	e7d5      	b.n	8006f48 <_strtod_l+0x8b8>
 8006f9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f9e:	ea13 0f0a 	tst.w	r3, sl
 8006fa2:	e7e1      	b.n	8006f68 <_strtod_l+0x8d8>
 8006fa4:	f7ff fb50 	bl	8006648 <sulp>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fb0:	f7f9 f8da 	bl	8000168 <__aeabi_dsub>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	4682      	mov	sl, r0
 8006fba:	468b      	mov	fp, r1
 8006fbc:	f7f9 fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d0c1      	beq.n	8006f48 <_strtod_l+0x8b8>
 8006fc4:	e615      	b.n	8006bf2 <_strtod_l+0x562>
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f7ff fac9 	bl	8006560 <__ratio>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	460f      	mov	r7, r1
 8006fd8:	f7f9 fcfa 	bl	80009d0 <__aeabi_dcmple>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d06d      	beq.n	80070bc <_strtod_l+0xa2c>
 8006fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d178      	bne.n	80070d8 <_strtod_l+0xa48>
 8006fe6:	f1ba 0f00 	cmp.w	sl, #0
 8006fea:	d156      	bne.n	800709a <_strtod_l+0xa0a>
 8006fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d158      	bne.n	80070a8 <_strtod_l+0xa18>
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	4b5d      	ldr	r3, [pc, #372]	@ (8007174 <_strtod_l+0xae4>)
 8006ffe:	f7f9 fcdd 	bl	80009bc <__aeabi_dcmplt>
 8007002:	2800      	cmp	r0, #0
 8007004:	d157      	bne.n	80070b6 <_strtod_l+0xa26>
 8007006:	4630      	mov	r0, r6
 8007008:	4639      	mov	r1, r7
 800700a:	2200      	movs	r2, #0
 800700c:	4b5a      	ldr	r3, [pc, #360]	@ (8007178 <_strtod_l+0xae8>)
 800700e:	f7f9 fa63 	bl	80004d8 <__aeabi_dmul>
 8007012:	4606      	mov	r6, r0
 8007014:	460f      	mov	r7, r1
 8007016:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800701a:	9606      	str	r6, [sp, #24]
 800701c:	9307      	str	r3, [sp, #28]
 800701e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007022:	4d52      	ldr	r5, [pc, #328]	@ (800716c <_strtod_l+0xadc>)
 8007024:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800702a:	401d      	ands	r5, r3
 800702c:	4b53      	ldr	r3, [pc, #332]	@ (800717c <_strtod_l+0xaec>)
 800702e:	429d      	cmp	r5, r3
 8007030:	f040 80aa 	bne.w	8007188 <_strtod_l+0xaf8>
 8007034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007036:	4650      	mov	r0, sl
 8007038:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800703c:	4659      	mov	r1, fp
 800703e:	f7ff f9cf 	bl	80063e0 <__ulp>
 8007042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007046:	f7f9 fa47 	bl	80004d8 <__aeabi_dmul>
 800704a:	4652      	mov	r2, sl
 800704c:	465b      	mov	r3, fp
 800704e:	f7f9 f88d 	bl	800016c <__adddf3>
 8007052:	460b      	mov	r3, r1
 8007054:	4945      	ldr	r1, [pc, #276]	@ (800716c <_strtod_l+0xadc>)
 8007056:	4a4a      	ldr	r2, [pc, #296]	@ (8007180 <_strtod_l+0xaf0>)
 8007058:	4019      	ands	r1, r3
 800705a:	4291      	cmp	r1, r2
 800705c:	4682      	mov	sl, r0
 800705e:	d942      	bls.n	80070e6 <_strtod_l+0xa56>
 8007060:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007062:	4b43      	ldr	r3, [pc, #268]	@ (8007170 <_strtod_l+0xae0>)
 8007064:	429a      	cmp	r2, r3
 8007066:	d103      	bne.n	8007070 <_strtod_l+0x9e0>
 8007068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800706a:	3301      	adds	r3, #1
 800706c:	f43f ad2b 	beq.w	8006ac6 <_strtod_l+0x436>
 8007070:	f04f 3aff 	mov.w	sl, #4294967295
 8007074:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007170 <_strtod_l+0xae0>
 8007078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800707a:	9805      	ldr	r0, [sp, #20]
 800707c:	f7fe fe7e 	bl	8005d7c <_Bfree>
 8007080:	4649      	mov	r1, r9
 8007082:	9805      	ldr	r0, [sp, #20]
 8007084:	f7fe fe7a 	bl	8005d7c <_Bfree>
 8007088:	4641      	mov	r1, r8
 800708a:	9805      	ldr	r0, [sp, #20]
 800708c:	f7fe fe76 	bl	8005d7c <_Bfree>
 8007090:	4621      	mov	r1, r4
 8007092:	9805      	ldr	r0, [sp, #20]
 8007094:	f7fe fe72 	bl	8005d7c <_Bfree>
 8007098:	e618      	b.n	8006ccc <_strtod_l+0x63c>
 800709a:	f1ba 0f01 	cmp.w	sl, #1
 800709e:	d103      	bne.n	80070a8 <_strtod_l+0xa18>
 80070a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f43f ada5 	beq.w	8006bf2 <_strtod_l+0x562>
 80070a8:	2200      	movs	r2, #0
 80070aa:	4b36      	ldr	r3, [pc, #216]	@ (8007184 <_strtod_l+0xaf4>)
 80070ac:	2600      	movs	r6, #0
 80070ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070b2:	4f30      	ldr	r7, [pc, #192]	@ (8007174 <_strtod_l+0xae4>)
 80070b4:	e7b3      	b.n	800701e <_strtod_l+0x98e>
 80070b6:	2600      	movs	r6, #0
 80070b8:	4f2f      	ldr	r7, [pc, #188]	@ (8007178 <_strtod_l+0xae8>)
 80070ba:	e7ac      	b.n	8007016 <_strtod_l+0x986>
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	4b2d      	ldr	r3, [pc, #180]	@ (8007178 <_strtod_l+0xae8>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	f7f9 fa08 	bl	80004d8 <__aeabi_dmul>
 80070c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ca:	4606      	mov	r6, r0
 80070cc:	460f      	mov	r7, r1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0a1      	beq.n	8007016 <_strtod_l+0x986>
 80070d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80070d6:	e7a2      	b.n	800701e <_strtod_l+0x98e>
 80070d8:	2200      	movs	r2, #0
 80070da:	4b26      	ldr	r3, [pc, #152]	@ (8007174 <_strtod_l+0xae4>)
 80070dc:	4616      	mov	r6, r2
 80070de:	461f      	mov	r7, r3
 80070e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070e4:	e79b      	b.n	800701e <_strtod_l+0x98e>
 80070e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80070ea:	9b08      	ldr	r3, [sp, #32]
 80070ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1c1      	bne.n	8007078 <_strtod_l+0x9e8>
 80070f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070f8:	0d1b      	lsrs	r3, r3, #20
 80070fa:	051b      	lsls	r3, r3, #20
 80070fc:	429d      	cmp	r5, r3
 80070fe:	d1bb      	bne.n	8007078 <_strtod_l+0x9e8>
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 ff8e 	bl	8001024 <__aeabi_d2lz>
 8007108:	f7f9 f9b8 	bl	800047c <__aeabi_l2d>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 f828 	bl	8000168 <__aeabi_dsub>
 8007118:	460b      	mov	r3, r1
 800711a:	4602      	mov	r2, r0
 800711c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007120:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007126:	ea46 060a 	orr.w	r6, r6, sl
 800712a:	431e      	orrs	r6, r3
 800712c:	d069      	beq.n	8007202 <_strtod_l+0xb72>
 800712e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007158 <_strtod_l+0xac8>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f7f9 fc42 	bl	80009bc <__aeabi_dcmplt>
 8007138:	2800      	cmp	r0, #0
 800713a:	f47f accf 	bne.w	8006adc <_strtod_l+0x44c>
 800713e:	a308      	add	r3, pc, #32	@ (adr r3, 8007160 <_strtod_l+0xad0>)
 8007140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007148:	f7f9 fc56 	bl	80009f8 <__aeabi_dcmpgt>
 800714c:	2800      	cmp	r0, #0
 800714e:	d093      	beq.n	8007078 <_strtod_l+0x9e8>
 8007150:	e4c4      	b.n	8006adc <_strtod_l+0x44c>
 8007152:	bf00      	nop
 8007154:	f3af 8000 	nop.w
 8007158:	94a03595 	.word	0x94a03595
 800715c:	3fdfffff 	.word	0x3fdfffff
 8007160:	35afe535 	.word	0x35afe535
 8007164:	3fe00000 	.word	0x3fe00000
 8007168:	000fffff 	.word	0x000fffff
 800716c:	7ff00000 	.word	0x7ff00000
 8007170:	7fefffff 	.word	0x7fefffff
 8007174:	3ff00000 	.word	0x3ff00000
 8007178:	3fe00000 	.word	0x3fe00000
 800717c:	7fe00000 	.word	0x7fe00000
 8007180:	7c9fffff 	.word	0x7c9fffff
 8007184:	bff00000 	.word	0xbff00000
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	b323      	cbz	r3, 80071d6 <_strtod_l+0xb46>
 800718c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007190:	d821      	bhi.n	80071d6 <_strtod_l+0xb46>
 8007192:	a327      	add	r3, pc, #156	@ (adr r3, 8007230 <_strtod_l+0xba0>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	4630      	mov	r0, r6
 800719a:	4639      	mov	r1, r7
 800719c:	f7f9 fc18 	bl	80009d0 <__aeabi_dcmple>
 80071a0:	b1a0      	cbz	r0, 80071cc <_strtod_l+0xb3c>
 80071a2:	4639      	mov	r1, r7
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7f9 fc6f 	bl	8000a88 <__aeabi_d2uiz>
 80071aa:	2801      	cmp	r0, #1
 80071ac:	bf38      	it	cc
 80071ae:	2001      	movcc	r0, #1
 80071b0:	f7f9 f918 	bl	80003e4 <__aeabi_ui2d>
 80071b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071b6:	4606      	mov	r6, r0
 80071b8:	460f      	mov	r7, r1
 80071ba:	b9fb      	cbnz	r3, 80071fc <_strtod_l+0xb6c>
 80071bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071c0:	9014      	str	r0, [sp, #80]	@ 0x50
 80071c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80071c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80071c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80071cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071ce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80071d2:	1b5b      	subs	r3, r3, r5
 80071d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80071d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80071de:	f7ff f8ff 	bl	80063e0 <__ulp>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	4650      	mov	r0, sl
 80071e8:	4659      	mov	r1, fp
 80071ea:	f7f9 f975 	bl	80004d8 <__aeabi_dmul>
 80071ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071f2:	f7f8 ffbb 	bl	800016c <__adddf3>
 80071f6:	4682      	mov	sl, r0
 80071f8:	468b      	mov	fp, r1
 80071fa:	e776      	b.n	80070ea <_strtod_l+0xa5a>
 80071fc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007200:	e7e0      	b.n	80071c4 <_strtod_l+0xb34>
 8007202:	a30d      	add	r3, pc, #52	@ (adr r3, 8007238 <_strtod_l+0xba8>)
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f7f9 fbd8 	bl	80009bc <__aeabi_dcmplt>
 800720c:	e79e      	b.n	800714c <_strtod_l+0xabc>
 800720e:	2300      	movs	r3, #0
 8007210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007214:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	f7ff ba77 	b.w	800670a <_strtod_l+0x7a>
 800721c:	2a65      	cmp	r2, #101	@ 0x65
 800721e:	f43f ab6e 	beq.w	80068fe <_strtod_l+0x26e>
 8007222:	2a45      	cmp	r2, #69	@ 0x45
 8007224:	f43f ab6b 	beq.w	80068fe <_strtod_l+0x26e>
 8007228:	2301      	movs	r3, #1
 800722a:	f7ff bba6 	b.w	800697a <_strtod_l+0x2ea>
 800722e:	bf00      	nop
 8007230:	ffc00000 	.word	0xffc00000
 8007234:	41dfffff 	.word	0x41dfffff
 8007238:	94a03595 	.word	0x94a03595
 800723c:	3fcfffff 	.word	0x3fcfffff

08007240 <_strtod_r>:
 8007240:	4b01      	ldr	r3, [pc, #4]	@ (8007248 <_strtod_r+0x8>)
 8007242:	f7ff ba25 	b.w	8006690 <_strtod_l>
 8007246:	bf00      	nop
 8007248:	20000068 	.word	0x20000068

0800724c <_strtol_l.constprop.0>:
 800724c:	2b24      	cmp	r3, #36	@ 0x24
 800724e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007252:	4686      	mov	lr, r0
 8007254:	4690      	mov	r8, r2
 8007256:	d801      	bhi.n	800725c <_strtol_l.constprop.0+0x10>
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <_strtol_l.constprop.0+0x1e>
 800725c:	f7fd fdc0 	bl	8004de0 <__errno>
 8007260:	2316      	movs	r3, #22
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	2000      	movs	r0, #0
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726a:	460d      	mov	r5, r1
 800726c:	4833      	ldr	r0, [pc, #204]	@ (800733c <_strtol_l.constprop.0+0xf0>)
 800726e:	462a      	mov	r2, r5
 8007270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007274:	5d06      	ldrb	r6, [r0, r4]
 8007276:	f016 0608 	ands.w	r6, r6, #8
 800727a:	d1f8      	bne.n	800726e <_strtol_l.constprop.0+0x22>
 800727c:	2c2d      	cmp	r4, #45	@ 0x2d
 800727e:	d12d      	bne.n	80072dc <_strtol_l.constprop.0+0x90>
 8007280:	2601      	movs	r6, #1
 8007282:	782c      	ldrb	r4, [r5, #0]
 8007284:	1c95      	adds	r5, r2, #2
 8007286:	f033 0210 	bics.w	r2, r3, #16
 800728a:	d109      	bne.n	80072a0 <_strtol_l.constprop.0+0x54>
 800728c:	2c30      	cmp	r4, #48	@ 0x30
 800728e:	d12a      	bne.n	80072e6 <_strtol_l.constprop.0+0x9a>
 8007290:	782a      	ldrb	r2, [r5, #0]
 8007292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007296:	2a58      	cmp	r2, #88	@ 0x58
 8007298:	d125      	bne.n	80072e6 <_strtol_l.constprop.0+0x9a>
 800729a:	2310      	movs	r3, #16
 800729c:	786c      	ldrb	r4, [r5, #1]
 800729e:	3502      	adds	r5, #2
 80072a0:	2200      	movs	r2, #0
 80072a2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072aa:	fbbc f9f3 	udiv	r9, ip, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	fb03 ca19 	mls	sl, r3, r9, ip
 80072b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072b8:	2f09      	cmp	r7, #9
 80072ba:	d81b      	bhi.n	80072f4 <_strtol_l.constprop.0+0xa8>
 80072bc:	463c      	mov	r4, r7
 80072be:	42a3      	cmp	r3, r4
 80072c0:	dd27      	ble.n	8007312 <_strtol_l.constprop.0+0xc6>
 80072c2:	1c57      	adds	r7, r2, #1
 80072c4:	d007      	beq.n	80072d6 <_strtol_l.constprop.0+0x8a>
 80072c6:	4581      	cmp	r9, r0
 80072c8:	d320      	bcc.n	800730c <_strtol_l.constprop.0+0xc0>
 80072ca:	d101      	bne.n	80072d0 <_strtol_l.constprop.0+0x84>
 80072cc:	45a2      	cmp	sl, r4
 80072ce:	db1d      	blt.n	800730c <_strtol_l.constprop.0+0xc0>
 80072d0:	2201      	movs	r2, #1
 80072d2:	fb00 4003 	mla	r0, r0, r3, r4
 80072d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072da:	e7eb      	b.n	80072b4 <_strtol_l.constprop.0+0x68>
 80072dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80072de:	bf04      	itt	eq
 80072e0:	782c      	ldrbeq	r4, [r5, #0]
 80072e2:	1c95      	addeq	r5, r2, #2
 80072e4:	e7cf      	b.n	8007286 <_strtol_l.constprop.0+0x3a>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1da      	bne.n	80072a0 <_strtol_l.constprop.0+0x54>
 80072ea:	2c30      	cmp	r4, #48	@ 0x30
 80072ec:	bf0c      	ite	eq
 80072ee:	2308      	moveq	r3, #8
 80072f0:	230a      	movne	r3, #10
 80072f2:	e7d5      	b.n	80072a0 <_strtol_l.constprop.0+0x54>
 80072f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80072f8:	2f19      	cmp	r7, #25
 80072fa:	d801      	bhi.n	8007300 <_strtol_l.constprop.0+0xb4>
 80072fc:	3c37      	subs	r4, #55	@ 0x37
 80072fe:	e7de      	b.n	80072be <_strtol_l.constprop.0+0x72>
 8007300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007304:	2f19      	cmp	r7, #25
 8007306:	d804      	bhi.n	8007312 <_strtol_l.constprop.0+0xc6>
 8007308:	3c57      	subs	r4, #87	@ 0x57
 800730a:	e7d8      	b.n	80072be <_strtol_l.constprop.0+0x72>
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	e7e1      	b.n	80072d6 <_strtol_l.constprop.0+0x8a>
 8007312:	1c53      	adds	r3, r2, #1
 8007314:	d108      	bne.n	8007328 <_strtol_l.constprop.0+0xdc>
 8007316:	2322      	movs	r3, #34	@ 0x22
 8007318:	4660      	mov	r0, ip
 800731a:	f8ce 3000 	str.w	r3, [lr]
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	d0a0      	beq.n	8007266 <_strtol_l.constprop.0+0x1a>
 8007324:	1e69      	subs	r1, r5, #1
 8007326:	e006      	b.n	8007336 <_strtol_l.constprop.0+0xea>
 8007328:	b106      	cbz	r6, 800732c <_strtol_l.constprop.0+0xe0>
 800732a:	4240      	negs	r0, r0
 800732c:	f1b8 0f00 	cmp.w	r8, #0
 8007330:	d099      	beq.n	8007266 <_strtol_l.constprop.0+0x1a>
 8007332:	2a00      	cmp	r2, #0
 8007334:	d1f6      	bne.n	8007324 <_strtol_l.constprop.0+0xd8>
 8007336:	f8c8 1000 	str.w	r1, [r8]
 800733a:	e794      	b.n	8007266 <_strtol_l.constprop.0+0x1a>
 800733c:	080087d1 	.word	0x080087d1

08007340 <_strtol_r>:
 8007340:	f7ff bf84 	b.w	800724c <_strtol_l.constprop.0>

08007344 <__ssputs_r>:
 8007344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	461f      	mov	r7, r3
 800734a:	688e      	ldr	r6, [r1, #8]
 800734c:	4682      	mov	sl, r0
 800734e:	42be      	cmp	r6, r7
 8007350:	460c      	mov	r4, r1
 8007352:	4690      	mov	r8, r2
 8007354:	680b      	ldr	r3, [r1, #0]
 8007356:	d82d      	bhi.n	80073b4 <__ssputs_r+0x70>
 8007358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800735c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007360:	d026      	beq.n	80073b0 <__ssputs_r+0x6c>
 8007362:	6965      	ldr	r5, [r4, #20]
 8007364:	6909      	ldr	r1, [r1, #16]
 8007366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800736a:	eba3 0901 	sub.w	r9, r3, r1
 800736e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007372:	1c7b      	adds	r3, r7, #1
 8007374:	444b      	add	r3, r9
 8007376:	106d      	asrs	r5, r5, #1
 8007378:	429d      	cmp	r5, r3
 800737a:	bf38      	it	cc
 800737c:	461d      	movcc	r5, r3
 800737e:	0553      	lsls	r3, r2, #21
 8007380:	d527      	bpl.n	80073d2 <__ssputs_r+0x8e>
 8007382:	4629      	mov	r1, r5
 8007384:	f7fe fc2e 	bl	8005be4 <_malloc_r>
 8007388:	4606      	mov	r6, r0
 800738a:	b360      	cbz	r0, 80073e6 <__ssputs_r+0xa2>
 800738c:	464a      	mov	r2, r9
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	f000 fa14 	bl	80077bc <memcpy>
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800739a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800739e:	81a3      	strh	r3, [r4, #12]
 80073a0:	6126      	str	r6, [r4, #16]
 80073a2:	444e      	add	r6, r9
 80073a4:	6026      	str	r6, [r4, #0]
 80073a6:	463e      	mov	r6, r7
 80073a8:	6165      	str	r5, [r4, #20]
 80073aa:	eba5 0509 	sub.w	r5, r5, r9
 80073ae:	60a5      	str	r5, [r4, #8]
 80073b0:	42be      	cmp	r6, r7
 80073b2:	d900      	bls.n	80073b6 <__ssputs_r+0x72>
 80073b4:	463e      	mov	r6, r7
 80073b6:	4632      	mov	r2, r6
 80073b8:	4641      	mov	r1, r8
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	f000 f9c2 	bl	8007744 <memmove>
 80073c0:	2000      	movs	r0, #0
 80073c2:	68a3      	ldr	r3, [r4, #8]
 80073c4:	1b9b      	subs	r3, r3, r6
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	4433      	add	r3, r6
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	462a      	mov	r2, r5
 80073d4:	f000 fd83 	bl	8007ede <_realloc_r>
 80073d8:	4606      	mov	r6, r0
 80073da:	2800      	cmp	r0, #0
 80073dc:	d1e0      	bne.n	80073a0 <__ssputs_r+0x5c>
 80073de:	4650      	mov	r0, sl
 80073e0:	6921      	ldr	r1, [r4, #16]
 80073e2:	f7fe fb8d 	bl	8005b00 <_free_r>
 80073e6:	230c      	movs	r3, #12
 80073e8:	f8ca 3000 	str.w	r3, [sl]
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295
 80073f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	e7e9      	b.n	80073ce <__ssputs_r+0x8a>
	...

080073fc <_svfiprintf_r>:
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	4698      	mov	r8, r3
 8007402:	898b      	ldrh	r3, [r1, #12]
 8007404:	4607      	mov	r7, r0
 8007406:	061b      	lsls	r3, r3, #24
 8007408:	460d      	mov	r5, r1
 800740a:	4614      	mov	r4, r2
 800740c:	b09d      	sub	sp, #116	@ 0x74
 800740e:	d510      	bpl.n	8007432 <_svfiprintf_r+0x36>
 8007410:	690b      	ldr	r3, [r1, #16]
 8007412:	b973      	cbnz	r3, 8007432 <_svfiprintf_r+0x36>
 8007414:	2140      	movs	r1, #64	@ 0x40
 8007416:	f7fe fbe5 	bl	8005be4 <_malloc_r>
 800741a:	6028      	str	r0, [r5, #0]
 800741c:	6128      	str	r0, [r5, #16]
 800741e:	b930      	cbnz	r0, 800742e <_svfiprintf_r+0x32>
 8007420:	230c      	movs	r3, #12
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	b01d      	add	sp, #116	@ 0x74
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	2340      	movs	r3, #64	@ 0x40
 8007430:	616b      	str	r3, [r5, #20]
 8007432:	2300      	movs	r3, #0
 8007434:	9309      	str	r3, [sp, #36]	@ 0x24
 8007436:	2320      	movs	r3, #32
 8007438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800743c:	2330      	movs	r3, #48	@ 0x30
 800743e:	f04f 0901 	mov.w	r9, #1
 8007442:	f8cd 800c 	str.w	r8, [sp, #12]
 8007446:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80075e0 <_svfiprintf_r+0x1e4>
 800744a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800744e:	4623      	mov	r3, r4
 8007450:	469a      	mov	sl, r3
 8007452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007456:	b10a      	cbz	r2, 800745c <_svfiprintf_r+0x60>
 8007458:	2a25      	cmp	r2, #37	@ 0x25
 800745a:	d1f9      	bne.n	8007450 <_svfiprintf_r+0x54>
 800745c:	ebba 0b04 	subs.w	fp, sl, r4
 8007460:	d00b      	beq.n	800747a <_svfiprintf_r+0x7e>
 8007462:	465b      	mov	r3, fp
 8007464:	4622      	mov	r2, r4
 8007466:	4629      	mov	r1, r5
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff ff6b 	bl	8007344 <__ssputs_r>
 800746e:	3001      	adds	r0, #1
 8007470:	f000 80a7 	beq.w	80075c2 <_svfiprintf_r+0x1c6>
 8007474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007476:	445a      	add	r2, fp
 8007478:	9209      	str	r2, [sp, #36]	@ 0x24
 800747a:	f89a 3000 	ldrb.w	r3, [sl]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 809f 	beq.w	80075c2 <_svfiprintf_r+0x1c6>
 8007484:	2300      	movs	r3, #0
 8007486:	f04f 32ff 	mov.w	r2, #4294967295
 800748a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800748e:	f10a 0a01 	add.w	sl, sl, #1
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800749a:	931a      	str	r3, [sp, #104]	@ 0x68
 800749c:	4654      	mov	r4, sl
 800749e:	2205      	movs	r2, #5
 80074a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a4:	484e      	ldr	r0, [pc, #312]	@ (80075e0 <_svfiprintf_r+0x1e4>)
 80074a6:	f7fd fcc8 	bl	8004e3a <memchr>
 80074aa:	9a04      	ldr	r2, [sp, #16]
 80074ac:	b9d8      	cbnz	r0, 80074e6 <_svfiprintf_r+0xea>
 80074ae:	06d0      	lsls	r0, r2, #27
 80074b0:	bf44      	itt	mi
 80074b2:	2320      	movmi	r3, #32
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b8:	0711      	lsls	r1, r2, #28
 80074ba:	bf44      	itt	mi
 80074bc:	232b      	movmi	r3, #43	@ 0x2b
 80074be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074c2:	f89a 3000 	ldrb.w	r3, [sl]
 80074c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c8:	d015      	beq.n	80074f6 <_svfiprintf_r+0xfa>
 80074ca:	4654      	mov	r4, sl
 80074cc:	2000      	movs	r0, #0
 80074ce:	f04f 0c0a 	mov.w	ip, #10
 80074d2:	9a07      	ldr	r2, [sp, #28]
 80074d4:	4621      	mov	r1, r4
 80074d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074da:	3b30      	subs	r3, #48	@ 0x30
 80074dc:	2b09      	cmp	r3, #9
 80074de:	d94b      	bls.n	8007578 <_svfiprintf_r+0x17c>
 80074e0:	b1b0      	cbz	r0, 8007510 <_svfiprintf_r+0x114>
 80074e2:	9207      	str	r2, [sp, #28]
 80074e4:	e014      	b.n	8007510 <_svfiprintf_r+0x114>
 80074e6:	eba0 0308 	sub.w	r3, r0, r8
 80074ea:	fa09 f303 	lsl.w	r3, r9, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	46a2      	mov	sl, r4
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	e7d2      	b.n	800749c <_svfiprintf_r+0xa0>
 80074f6:	9b03      	ldr	r3, [sp, #12]
 80074f8:	1d19      	adds	r1, r3, #4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	9103      	str	r1, [sp, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfbb      	ittet	lt
 8007502:	425b      	neglt	r3, r3
 8007504:	f042 0202 	orrlt.w	r2, r2, #2
 8007508:	9307      	strge	r3, [sp, #28]
 800750a:	9307      	strlt	r3, [sp, #28]
 800750c:	bfb8      	it	lt
 800750e:	9204      	strlt	r2, [sp, #16]
 8007510:	7823      	ldrb	r3, [r4, #0]
 8007512:	2b2e      	cmp	r3, #46	@ 0x2e
 8007514:	d10a      	bne.n	800752c <_svfiprintf_r+0x130>
 8007516:	7863      	ldrb	r3, [r4, #1]
 8007518:	2b2a      	cmp	r3, #42	@ 0x2a
 800751a:	d132      	bne.n	8007582 <_svfiprintf_r+0x186>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	3402      	adds	r4, #2
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	9203      	str	r2, [sp, #12]
 8007526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800752a:	9305      	str	r3, [sp, #20]
 800752c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80075e4 <_svfiprintf_r+0x1e8>
 8007530:	2203      	movs	r2, #3
 8007532:	4650      	mov	r0, sl
 8007534:	7821      	ldrb	r1, [r4, #0]
 8007536:	f7fd fc80 	bl	8004e3a <memchr>
 800753a:	b138      	cbz	r0, 800754c <_svfiprintf_r+0x150>
 800753c:	2240      	movs	r2, #64	@ 0x40
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	eba0 000a 	sub.w	r0, r0, sl
 8007544:	4082      	lsls	r2, r0
 8007546:	4313      	orrs	r3, r2
 8007548:	3401      	adds	r4, #1
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	2206      	movs	r2, #6
 8007552:	4825      	ldr	r0, [pc, #148]	@ (80075e8 <_svfiprintf_r+0x1ec>)
 8007554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007558:	f7fd fc6f 	bl	8004e3a <memchr>
 800755c:	2800      	cmp	r0, #0
 800755e:	d036      	beq.n	80075ce <_svfiprintf_r+0x1d2>
 8007560:	4b22      	ldr	r3, [pc, #136]	@ (80075ec <_svfiprintf_r+0x1f0>)
 8007562:	bb1b      	cbnz	r3, 80075ac <_svfiprintf_r+0x1b0>
 8007564:	9b03      	ldr	r3, [sp, #12]
 8007566:	3307      	adds	r3, #7
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	3308      	adds	r3, #8
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007572:	4433      	add	r3, r6
 8007574:	9309      	str	r3, [sp, #36]	@ 0x24
 8007576:	e76a      	b.n	800744e <_svfiprintf_r+0x52>
 8007578:	460c      	mov	r4, r1
 800757a:	2001      	movs	r0, #1
 800757c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007580:	e7a8      	b.n	80074d4 <_svfiprintf_r+0xd8>
 8007582:	2300      	movs	r3, #0
 8007584:	f04f 0c0a 	mov.w	ip, #10
 8007588:	4619      	mov	r1, r3
 800758a:	3401      	adds	r4, #1
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	4620      	mov	r0, r4
 8007590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007594:	3a30      	subs	r2, #48	@ 0x30
 8007596:	2a09      	cmp	r2, #9
 8007598:	d903      	bls.n	80075a2 <_svfiprintf_r+0x1a6>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0c6      	beq.n	800752c <_svfiprintf_r+0x130>
 800759e:	9105      	str	r1, [sp, #20]
 80075a0:	e7c4      	b.n	800752c <_svfiprintf_r+0x130>
 80075a2:	4604      	mov	r4, r0
 80075a4:	2301      	movs	r3, #1
 80075a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075aa:	e7f0      	b.n	800758e <_svfiprintf_r+0x192>
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	462a      	mov	r2, r5
 80075b2:	4638      	mov	r0, r7
 80075b4:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <_svfiprintf_r+0x1f4>)
 80075b6:	a904      	add	r1, sp, #16
 80075b8:	f7fc fc98 	bl	8003eec <_printf_float>
 80075bc:	1c42      	adds	r2, r0, #1
 80075be:	4606      	mov	r6, r0
 80075c0:	d1d6      	bne.n	8007570 <_svfiprintf_r+0x174>
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	065b      	lsls	r3, r3, #25
 80075c6:	f53f af2d 	bmi.w	8007424 <_svfiprintf_r+0x28>
 80075ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075cc:	e72c      	b.n	8007428 <_svfiprintf_r+0x2c>
 80075ce:	ab03      	add	r3, sp, #12
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	462a      	mov	r2, r5
 80075d4:	4638      	mov	r0, r7
 80075d6:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <_svfiprintf_r+0x1f4>)
 80075d8:	a904      	add	r1, sp, #16
 80075da:	f7fc ff25 	bl	8004428 <_printf_i>
 80075de:	e7ed      	b.n	80075bc <_svfiprintf_r+0x1c0>
 80075e0:	080088d1 	.word	0x080088d1
 80075e4:	080088d7 	.word	0x080088d7
 80075e8:	080088db 	.word	0x080088db
 80075ec:	08003eed 	.word	0x08003eed
 80075f0:	08007345 	.word	0x08007345

080075f4 <__sflush_r>:
 80075f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	0716      	lsls	r6, r2, #28
 80075fc:	4605      	mov	r5, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	d454      	bmi.n	80076ac <__sflush_r+0xb8>
 8007602:	684b      	ldr	r3, [r1, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dc02      	bgt.n	800760e <__sflush_r+0x1a>
 8007608:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	dd48      	ble.n	80076a0 <__sflush_r+0xac>
 800760e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007610:	2e00      	cmp	r6, #0
 8007612:	d045      	beq.n	80076a0 <__sflush_r+0xac>
 8007614:	2300      	movs	r3, #0
 8007616:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800761a:	682f      	ldr	r7, [r5, #0]
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	d030      	beq.n	8007684 <__sflush_r+0x90>
 8007622:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	0759      	lsls	r1, r3, #29
 8007628:	d505      	bpl.n	8007636 <__sflush_r+0x42>
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	1ad2      	subs	r2, r2, r3
 800762e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007630:	b10b      	cbz	r3, 8007636 <__sflush_r+0x42>
 8007632:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007634:	1ad2      	subs	r2, r2, r3
 8007636:	2300      	movs	r3, #0
 8007638:	4628      	mov	r0, r5
 800763a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	47b0      	blx	r6
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	d106      	bne.n	8007654 <__sflush_r+0x60>
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	291d      	cmp	r1, #29
 800764a:	d82b      	bhi.n	80076a4 <__sflush_r+0xb0>
 800764c:	4a28      	ldr	r2, [pc, #160]	@ (80076f0 <__sflush_r+0xfc>)
 800764e:	410a      	asrs	r2, r1
 8007650:	07d6      	lsls	r6, r2, #31
 8007652:	d427      	bmi.n	80076a4 <__sflush_r+0xb0>
 8007654:	2200      	movs	r2, #0
 8007656:	6062      	str	r2, [r4, #4]
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	04d9      	lsls	r1, r3, #19
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	d504      	bpl.n	800766a <__sflush_r+0x76>
 8007660:	1c42      	adds	r2, r0, #1
 8007662:	d101      	bne.n	8007668 <__sflush_r+0x74>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b903      	cbnz	r3, 800766a <__sflush_r+0x76>
 8007668:	6560      	str	r0, [r4, #84]	@ 0x54
 800766a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800766c:	602f      	str	r7, [r5, #0]
 800766e:	b1b9      	cbz	r1, 80076a0 <__sflush_r+0xac>
 8007670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007674:	4299      	cmp	r1, r3
 8007676:	d002      	beq.n	800767e <__sflush_r+0x8a>
 8007678:	4628      	mov	r0, r5
 800767a:	f7fe fa41 	bl	8005b00 <_free_r>
 800767e:	2300      	movs	r3, #0
 8007680:	6363      	str	r3, [r4, #52]	@ 0x34
 8007682:	e00d      	b.n	80076a0 <__sflush_r+0xac>
 8007684:	2301      	movs	r3, #1
 8007686:	4628      	mov	r0, r5
 8007688:	47b0      	blx	r6
 800768a:	4602      	mov	r2, r0
 800768c:	1c50      	adds	r0, r2, #1
 800768e:	d1c9      	bne.n	8007624 <__sflush_r+0x30>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c6      	beq.n	8007624 <__sflush_r+0x30>
 8007696:	2b1d      	cmp	r3, #29
 8007698:	d001      	beq.n	800769e <__sflush_r+0xaa>
 800769a:	2b16      	cmp	r3, #22
 800769c:	d11d      	bne.n	80076da <__sflush_r+0xe6>
 800769e:	602f      	str	r7, [r5, #0]
 80076a0:	2000      	movs	r0, #0
 80076a2:	e021      	b.n	80076e8 <__sflush_r+0xf4>
 80076a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a8:	b21b      	sxth	r3, r3
 80076aa:	e01a      	b.n	80076e2 <__sflush_r+0xee>
 80076ac:	690f      	ldr	r7, [r1, #16]
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d0f6      	beq.n	80076a0 <__sflush_r+0xac>
 80076b2:	0793      	lsls	r3, r2, #30
 80076b4:	bf18      	it	ne
 80076b6:	2300      	movne	r3, #0
 80076b8:	680e      	ldr	r6, [r1, #0]
 80076ba:	bf08      	it	eq
 80076bc:	694b      	ldreq	r3, [r1, #20]
 80076be:	1bf6      	subs	r6, r6, r7
 80076c0:	600f      	str	r7, [r1, #0]
 80076c2:	608b      	str	r3, [r1, #8]
 80076c4:	2e00      	cmp	r6, #0
 80076c6:	ddeb      	ble.n	80076a0 <__sflush_r+0xac>
 80076c8:	4633      	mov	r3, r6
 80076ca:	463a      	mov	r2, r7
 80076cc:	4628      	mov	r0, r5
 80076ce:	6a21      	ldr	r1, [r4, #32]
 80076d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80076d4:	47e0      	blx	ip
 80076d6:	2800      	cmp	r0, #0
 80076d8:	dc07      	bgt.n	80076ea <__sflush_r+0xf6>
 80076da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ea:	4407      	add	r7, r0
 80076ec:	1a36      	subs	r6, r6, r0
 80076ee:	e7e9      	b.n	80076c4 <__sflush_r+0xd0>
 80076f0:	dfbffffe 	.word	0xdfbffffe

080076f4 <_fflush_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	690b      	ldr	r3, [r1, #16]
 80076f8:	4605      	mov	r5, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	b913      	cbnz	r3, 8007704 <_fflush_r+0x10>
 80076fe:	2500      	movs	r5, #0
 8007700:	4628      	mov	r0, r5
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	b118      	cbz	r0, 800770e <_fflush_r+0x1a>
 8007706:	6a03      	ldr	r3, [r0, #32]
 8007708:	b90b      	cbnz	r3, 800770e <_fflush_r+0x1a>
 800770a:	f7fd fa49 	bl	8004ba0 <__sinit>
 800770e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f3      	beq.n	80076fe <_fflush_r+0xa>
 8007716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007718:	07d0      	lsls	r0, r2, #31
 800771a:	d404      	bmi.n	8007726 <_fflush_r+0x32>
 800771c:	0599      	lsls	r1, r3, #22
 800771e:	d402      	bmi.n	8007726 <_fflush_r+0x32>
 8007720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007722:	f7fd fb88 	bl	8004e36 <__retarget_lock_acquire_recursive>
 8007726:	4628      	mov	r0, r5
 8007728:	4621      	mov	r1, r4
 800772a:	f7ff ff63 	bl	80075f4 <__sflush_r>
 800772e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007730:	4605      	mov	r5, r0
 8007732:	07da      	lsls	r2, r3, #31
 8007734:	d4e4      	bmi.n	8007700 <_fflush_r+0xc>
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	059b      	lsls	r3, r3, #22
 800773a:	d4e1      	bmi.n	8007700 <_fflush_r+0xc>
 800773c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800773e:	f7fd fb7b 	bl	8004e38 <__retarget_lock_release_recursive>
 8007742:	e7dd      	b.n	8007700 <_fflush_r+0xc>

08007744 <memmove>:
 8007744:	4288      	cmp	r0, r1
 8007746:	b510      	push	{r4, lr}
 8007748:	eb01 0402 	add.w	r4, r1, r2
 800774c:	d902      	bls.n	8007754 <memmove+0x10>
 800774e:	4284      	cmp	r4, r0
 8007750:	4623      	mov	r3, r4
 8007752:	d807      	bhi.n	8007764 <memmove+0x20>
 8007754:	1e43      	subs	r3, r0, #1
 8007756:	42a1      	cmp	r1, r4
 8007758:	d008      	beq.n	800776c <memmove+0x28>
 800775a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800775e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007762:	e7f8      	b.n	8007756 <memmove+0x12>
 8007764:	4601      	mov	r1, r0
 8007766:	4402      	add	r2, r0
 8007768:	428a      	cmp	r2, r1
 800776a:	d100      	bne.n	800776e <memmove+0x2a>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007776:	e7f7      	b.n	8007768 <memmove+0x24>

08007778 <strncmp>:
 8007778:	b510      	push	{r4, lr}
 800777a:	b16a      	cbz	r2, 8007798 <strncmp+0x20>
 800777c:	3901      	subs	r1, #1
 800777e:	1884      	adds	r4, r0, r2
 8007780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007784:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007788:	429a      	cmp	r2, r3
 800778a:	d103      	bne.n	8007794 <strncmp+0x1c>
 800778c:	42a0      	cmp	r0, r4
 800778e:	d001      	beq.n	8007794 <strncmp+0x1c>
 8007790:	2a00      	cmp	r2, #0
 8007792:	d1f5      	bne.n	8007780 <strncmp+0x8>
 8007794:	1ad0      	subs	r0, r2, r3
 8007796:	bd10      	pop	{r4, pc}
 8007798:	4610      	mov	r0, r2
 800779a:	e7fc      	b.n	8007796 <strncmp+0x1e>

0800779c <_sbrk_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	2300      	movs	r3, #0
 80077a0:	4d05      	ldr	r5, [pc, #20]	@ (80077b8 <_sbrk_r+0x1c>)
 80077a2:	4604      	mov	r4, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	f7fa fa90 	bl	8001ccc <_sbrk>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_sbrk_r+0x1a>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_sbrk_r+0x1a>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	200003e0 	.word	0x200003e0

080077bc <memcpy>:
 80077bc:	440a      	add	r2, r1
 80077be:	4291      	cmp	r1, r2
 80077c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c4:	d100      	bne.n	80077c8 <memcpy+0xc>
 80077c6:	4770      	bx	lr
 80077c8:	b510      	push	{r4, lr}
 80077ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ce:	4291      	cmp	r1, r2
 80077d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d4:	d1f9      	bne.n	80077ca <memcpy+0xe>
 80077d6:	bd10      	pop	{r4, pc}

080077d8 <nan>:
 80077d8:	2000      	movs	r0, #0
 80077da:	4901      	ldr	r1, [pc, #4]	@ (80077e0 <nan+0x8>)
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	7ff80000 	.word	0x7ff80000

080077e4 <__assert_func>:
 80077e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077e6:	4614      	mov	r4, r2
 80077e8:	461a      	mov	r2, r3
 80077ea:	4b09      	ldr	r3, [pc, #36]	@ (8007810 <__assert_func+0x2c>)
 80077ec:	4605      	mov	r5, r0
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68d8      	ldr	r0, [r3, #12]
 80077f2:	b954      	cbnz	r4, 800780a <__assert_func+0x26>
 80077f4:	4b07      	ldr	r3, [pc, #28]	@ (8007814 <__assert_func+0x30>)
 80077f6:	461c      	mov	r4, r3
 80077f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077fc:	9100      	str	r1, [sp, #0]
 80077fe:	462b      	mov	r3, r5
 8007800:	4905      	ldr	r1, [pc, #20]	@ (8007818 <__assert_func+0x34>)
 8007802:	f000 fba7 	bl	8007f54 <fiprintf>
 8007806:	f000 fbb7 	bl	8007f78 <abort>
 800780a:	4b04      	ldr	r3, [pc, #16]	@ (800781c <__assert_func+0x38>)
 800780c:	e7f4      	b.n	80077f8 <__assert_func+0x14>
 800780e:	bf00      	nop
 8007810:	20000018 	.word	0x20000018
 8007814:	08008925 	.word	0x08008925
 8007818:	080088f7 	.word	0x080088f7
 800781c:	080088ea 	.word	0x080088ea

08007820 <_calloc_r>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	fba1 5402 	umull	r5, r4, r1, r2
 8007826:	b93c      	cbnz	r4, 8007838 <_calloc_r+0x18>
 8007828:	4629      	mov	r1, r5
 800782a:	f7fe f9db 	bl	8005be4 <_malloc_r>
 800782e:	4606      	mov	r6, r0
 8007830:	b928      	cbnz	r0, 800783e <_calloc_r+0x1e>
 8007832:	2600      	movs	r6, #0
 8007834:	4630      	mov	r0, r6
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	220c      	movs	r2, #12
 800783a:	6002      	str	r2, [r0, #0]
 800783c:	e7f9      	b.n	8007832 <_calloc_r+0x12>
 800783e:	462a      	mov	r2, r5
 8007840:	4621      	mov	r1, r4
 8007842:	f7fd fa7a 	bl	8004d3a <memset>
 8007846:	e7f5      	b.n	8007834 <_calloc_r+0x14>

08007848 <rshift>:
 8007848:	6903      	ldr	r3, [r0, #16]
 800784a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800784e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007852:	f100 0414 	add.w	r4, r0, #20
 8007856:	ea4f 1261 	mov.w	r2, r1, asr #5
 800785a:	dd46      	ble.n	80078ea <rshift+0xa2>
 800785c:	f011 011f 	ands.w	r1, r1, #31
 8007860:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007864:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007868:	d10c      	bne.n	8007884 <rshift+0x3c>
 800786a:	4629      	mov	r1, r5
 800786c:	f100 0710 	add.w	r7, r0, #16
 8007870:	42b1      	cmp	r1, r6
 8007872:	d335      	bcc.n	80078e0 <rshift+0x98>
 8007874:	1a9b      	subs	r3, r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	1eea      	subs	r2, r5, #3
 800787a:	4296      	cmp	r6, r2
 800787c:	bf38      	it	cc
 800787e:	2300      	movcc	r3, #0
 8007880:	4423      	add	r3, r4
 8007882:	e015      	b.n	80078b0 <rshift+0x68>
 8007884:	46a1      	mov	r9, r4
 8007886:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800788a:	f1c1 0820 	rsb	r8, r1, #32
 800788e:	40cf      	lsrs	r7, r1
 8007890:	f105 0e04 	add.w	lr, r5, #4
 8007894:	4576      	cmp	r6, lr
 8007896:	46f4      	mov	ip, lr
 8007898:	d816      	bhi.n	80078c8 <rshift+0x80>
 800789a:	1a9a      	subs	r2, r3, r2
 800789c:	0092      	lsls	r2, r2, #2
 800789e:	3a04      	subs	r2, #4
 80078a0:	3501      	adds	r5, #1
 80078a2:	42ae      	cmp	r6, r5
 80078a4:	bf38      	it	cc
 80078a6:	2200      	movcc	r2, #0
 80078a8:	18a3      	adds	r3, r4, r2
 80078aa:	50a7      	str	r7, [r4, r2]
 80078ac:	b107      	cbz	r7, 80078b0 <rshift+0x68>
 80078ae:	3304      	adds	r3, #4
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	eba3 0204 	sub.w	r2, r3, r4
 80078b6:	bf08      	it	eq
 80078b8:	2300      	moveq	r3, #0
 80078ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078be:	6102      	str	r2, [r0, #16]
 80078c0:	bf08      	it	eq
 80078c2:	6143      	streq	r3, [r0, #20]
 80078c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078c8:	f8dc c000 	ldr.w	ip, [ip]
 80078cc:	fa0c fc08 	lsl.w	ip, ip, r8
 80078d0:	ea4c 0707 	orr.w	r7, ip, r7
 80078d4:	f849 7b04 	str.w	r7, [r9], #4
 80078d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078dc:	40cf      	lsrs	r7, r1
 80078de:	e7d9      	b.n	8007894 <rshift+0x4c>
 80078e0:	f851 cb04 	ldr.w	ip, [r1], #4
 80078e4:	f847 cf04 	str.w	ip, [r7, #4]!
 80078e8:	e7c2      	b.n	8007870 <rshift+0x28>
 80078ea:	4623      	mov	r3, r4
 80078ec:	e7e0      	b.n	80078b0 <rshift+0x68>

080078ee <__hexdig_fun>:
 80078ee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	d802      	bhi.n	80078fc <__hexdig_fun+0xe>
 80078f6:	3820      	subs	r0, #32
 80078f8:	b2c0      	uxtb	r0, r0
 80078fa:	4770      	bx	lr
 80078fc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007900:	2b05      	cmp	r3, #5
 8007902:	d801      	bhi.n	8007908 <__hexdig_fun+0x1a>
 8007904:	3847      	subs	r0, #71	@ 0x47
 8007906:	e7f7      	b.n	80078f8 <__hexdig_fun+0xa>
 8007908:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800790c:	2b05      	cmp	r3, #5
 800790e:	d801      	bhi.n	8007914 <__hexdig_fun+0x26>
 8007910:	3827      	subs	r0, #39	@ 0x27
 8007912:	e7f1      	b.n	80078f8 <__hexdig_fun+0xa>
 8007914:	2000      	movs	r0, #0
 8007916:	4770      	bx	lr

08007918 <__gethex>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	468a      	mov	sl, r1
 800791e:	4690      	mov	r8, r2
 8007920:	b085      	sub	sp, #20
 8007922:	9302      	str	r3, [sp, #8]
 8007924:	680b      	ldr	r3, [r1, #0]
 8007926:	9001      	str	r0, [sp, #4]
 8007928:	1c9c      	adds	r4, r3, #2
 800792a:	46a1      	mov	r9, r4
 800792c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007930:	2830      	cmp	r0, #48	@ 0x30
 8007932:	d0fa      	beq.n	800792a <__gethex+0x12>
 8007934:	eba9 0303 	sub.w	r3, r9, r3
 8007938:	f1a3 0b02 	sub.w	fp, r3, #2
 800793c:	f7ff ffd7 	bl	80078ee <__hexdig_fun>
 8007940:	4605      	mov	r5, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	d168      	bne.n	8007a18 <__gethex+0x100>
 8007946:	2201      	movs	r2, #1
 8007948:	4648      	mov	r0, r9
 800794a:	499f      	ldr	r1, [pc, #636]	@ (8007bc8 <__gethex+0x2b0>)
 800794c:	f7ff ff14 	bl	8007778 <strncmp>
 8007950:	4607      	mov	r7, r0
 8007952:	2800      	cmp	r0, #0
 8007954:	d167      	bne.n	8007a26 <__gethex+0x10e>
 8007956:	f899 0001 	ldrb.w	r0, [r9, #1]
 800795a:	4626      	mov	r6, r4
 800795c:	f7ff ffc7 	bl	80078ee <__hexdig_fun>
 8007960:	2800      	cmp	r0, #0
 8007962:	d062      	beq.n	8007a2a <__gethex+0x112>
 8007964:	4623      	mov	r3, r4
 8007966:	7818      	ldrb	r0, [r3, #0]
 8007968:	4699      	mov	r9, r3
 800796a:	2830      	cmp	r0, #48	@ 0x30
 800796c:	f103 0301 	add.w	r3, r3, #1
 8007970:	d0f9      	beq.n	8007966 <__gethex+0x4e>
 8007972:	f7ff ffbc 	bl	80078ee <__hexdig_fun>
 8007976:	fab0 f580 	clz	r5, r0
 800797a:	f04f 0b01 	mov.w	fp, #1
 800797e:	096d      	lsrs	r5, r5, #5
 8007980:	464a      	mov	r2, r9
 8007982:	4616      	mov	r6, r2
 8007984:	7830      	ldrb	r0, [r6, #0]
 8007986:	3201      	adds	r2, #1
 8007988:	f7ff ffb1 	bl	80078ee <__hexdig_fun>
 800798c:	2800      	cmp	r0, #0
 800798e:	d1f8      	bne.n	8007982 <__gethex+0x6a>
 8007990:	2201      	movs	r2, #1
 8007992:	4630      	mov	r0, r6
 8007994:	498c      	ldr	r1, [pc, #560]	@ (8007bc8 <__gethex+0x2b0>)
 8007996:	f7ff feef 	bl	8007778 <strncmp>
 800799a:	2800      	cmp	r0, #0
 800799c:	d13f      	bne.n	8007a1e <__gethex+0x106>
 800799e:	b944      	cbnz	r4, 80079b2 <__gethex+0x9a>
 80079a0:	1c74      	adds	r4, r6, #1
 80079a2:	4622      	mov	r2, r4
 80079a4:	4616      	mov	r6, r2
 80079a6:	7830      	ldrb	r0, [r6, #0]
 80079a8:	3201      	adds	r2, #1
 80079aa:	f7ff ffa0 	bl	80078ee <__hexdig_fun>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d1f8      	bne.n	80079a4 <__gethex+0x8c>
 80079b2:	1ba4      	subs	r4, r4, r6
 80079b4:	00a7      	lsls	r7, r4, #2
 80079b6:	7833      	ldrb	r3, [r6, #0]
 80079b8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80079bc:	2b50      	cmp	r3, #80	@ 0x50
 80079be:	d13e      	bne.n	8007a3e <__gethex+0x126>
 80079c0:	7873      	ldrb	r3, [r6, #1]
 80079c2:	2b2b      	cmp	r3, #43	@ 0x2b
 80079c4:	d033      	beq.n	8007a2e <__gethex+0x116>
 80079c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80079c8:	d034      	beq.n	8007a34 <__gethex+0x11c>
 80079ca:	2400      	movs	r4, #0
 80079cc:	1c71      	adds	r1, r6, #1
 80079ce:	7808      	ldrb	r0, [r1, #0]
 80079d0:	f7ff ff8d 	bl	80078ee <__hexdig_fun>
 80079d4:	1e43      	subs	r3, r0, #1
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b18      	cmp	r3, #24
 80079da:	d830      	bhi.n	8007a3e <__gethex+0x126>
 80079dc:	f1a0 0210 	sub.w	r2, r0, #16
 80079e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80079e4:	f7ff ff83 	bl	80078ee <__hexdig_fun>
 80079e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80079ec:	fa5f fc8c 	uxtb.w	ip, ip
 80079f0:	f1bc 0f18 	cmp.w	ip, #24
 80079f4:	f04f 030a 	mov.w	r3, #10
 80079f8:	d91e      	bls.n	8007a38 <__gethex+0x120>
 80079fa:	b104      	cbz	r4, 80079fe <__gethex+0xe6>
 80079fc:	4252      	negs	r2, r2
 80079fe:	4417      	add	r7, r2
 8007a00:	f8ca 1000 	str.w	r1, [sl]
 8007a04:	b1ed      	cbz	r5, 8007a42 <__gethex+0x12a>
 8007a06:	f1bb 0f00 	cmp.w	fp, #0
 8007a0a:	bf0c      	ite	eq
 8007a0c:	2506      	moveq	r5, #6
 8007a0e:	2500      	movne	r5, #0
 8007a10:	4628      	mov	r0, r5
 8007a12:	b005      	add	sp, #20
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	2500      	movs	r5, #0
 8007a1a:	462c      	mov	r4, r5
 8007a1c:	e7b0      	b.n	8007980 <__gethex+0x68>
 8007a1e:	2c00      	cmp	r4, #0
 8007a20:	d1c7      	bne.n	80079b2 <__gethex+0x9a>
 8007a22:	4627      	mov	r7, r4
 8007a24:	e7c7      	b.n	80079b6 <__gethex+0x9e>
 8007a26:	464e      	mov	r6, r9
 8007a28:	462f      	mov	r7, r5
 8007a2a:	2501      	movs	r5, #1
 8007a2c:	e7c3      	b.n	80079b6 <__gethex+0x9e>
 8007a2e:	2400      	movs	r4, #0
 8007a30:	1cb1      	adds	r1, r6, #2
 8007a32:	e7cc      	b.n	80079ce <__gethex+0xb6>
 8007a34:	2401      	movs	r4, #1
 8007a36:	e7fb      	b.n	8007a30 <__gethex+0x118>
 8007a38:	fb03 0002 	mla	r0, r3, r2, r0
 8007a3c:	e7ce      	b.n	80079dc <__gethex+0xc4>
 8007a3e:	4631      	mov	r1, r6
 8007a40:	e7de      	b.n	8007a00 <__gethex+0xe8>
 8007a42:	4629      	mov	r1, r5
 8007a44:	eba6 0309 	sub.w	r3, r6, r9
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	2b07      	cmp	r3, #7
 8007a4c:	dc0a      	bgt.n	8007a64 <__gethex+0x14c>
 8007a4e:	9801      	ldr	r0, [sp, #4]
 8007a50:	f7fe f954 	bl	8005cfc <_Balloc>
 8007a54:	4604      	mov	r4, r0
 8007a56:	b940      	cbnz	r0, 8007a6a <__gethex+0x152>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	21e4      	movs	r1, #228	@ 0xe4
 8007a5c:	4b5b      	ldr	r3, [pc, #364]	@ (8007bcc <__gethex+0x2b4>)
 8007a5e:	485c      	ldr	r0, [pc, #368]	@ (8007bd0 <__gethex+0x2b8>)
 8007a60:	f7ff fec0 	bl	80077e4 <__assert_func>
 8007a64:	3101      	adds	r1, #1
 8007a66:	105b      	asrs	r3, r3, #1
 8007a68:	e7ef      	b.n	8007a4a <__gethex+0x132>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f100 0a14 	add.w	sl, r0, #20
 8007a70:	4655      	mov	r5, sl
 8007a72:	469b      	mov	fp, r3
 8007a74:	45b1      	cmp	r9, r6
 8007a76:	d337      	bcc.n	8007ae8 <__gethex+0x1d0>
 8007a78:	f845 bb04 	str.w	fp, [r5], #4
 8007a7c:	eba5 050a 	sub.w	r5, r5, sl
 8007a80:	10ad      	asrs	r5, r5, #2
 8007a82:	6125      	str	r5, [r4, #16]
 8007a84:	4658      	mov	r0, fp
 8007a86:	f7fe fa2b 	bl	8005ee0 <__hi0bits>
 8007a8a:	016d      	lsls	r5, r5, #5
 8007a8c:	f8d8 6000 	ldr.w	r6, [r8]
 8007a90:	1a2d      	subs	r5, r5, r0
 8007a92:	42b5      	cmp	r5, r6
 8007a94:	dd54      	ble.n	8007b40 <__gethex+0x228>
 8007a96:	1bad      	subs	r5, r5, r6
 8007a98:	4629      	mov	r1, r5
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7fe fdb3 	bl	8006606 <__any_on>
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	b178      	cbz	r0, 8007ac4 <__gethex+0x1ac>
 8007aa4:	f04f 0901 	mov.w	r9, #1
 8007aa8:	1e6b      	subs	r3, r5, #1
 8007aaa:	1159      	asrs	r1, r3, #5
 8007aac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007ab0:	f003 021f 	and.w	r2, r3, #31
 8007ab4:	fa09 f202 	lsl.w	r2, r9, r2
 8007ab8:	420a      	tst	r2, r1
 8007aba:	d003      	beq.n	8007ac4 <__gethex+0x1ac>
 8007abc:	454b      	cmp	r3, r9
 8007abe:	dc36      	bgt.n	8007b2e <__gethex+0x216>
 8007ac0:	f04f 0902 	mov.w	r9, #2
 8007ac4:	4629      	mov	r1, r5
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	f7ff febe 	bl	8007848 <rshift>
 8007acc:	442f      	add	r7, r5
 8007ace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ad2:	42bb      	cmp	r3, r7
 8007ad4:	da42      	bge.n	8007b5c <__gethex+0x244>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	9801      	ldr	r0, [sp, #4]
 8007ada:	f7fe f94f 	bl	8005d7c <_Bfree>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ae2:	25a3      	movs	r5, #163	@ 0xa3
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	e793      	b.n	8007a10 <__gethex+0xf8>
 8007ae8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007aec:	2a2e      	cmp	r2, #46	@ 0x2e
 8007aee:	d012      	beq.n	8007b16 <__gethex+0x1fe>
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d104      	bne.n	8007afe <__gethex+0x1e6>
 8007af4:	f845 bb04 	str.w	fp, [r5], #4
 8007af8:	f04f 0b00 	mov.w	fp, #0
 8007afc:	465b      	mov	r3, fp
 8007afe:	7830      	ldrb	r0, [r6, #0]
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	f7ff fef4 	bl	80078ee <__hexdig_fun>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	f000 000f 	and.w	r0, r0, #15
 8007b0c:	4098      	lsls	r0, r3
 8007b0e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b12:	3304      	adds	r3, #4
 8007b14:	e7ae      	b.n	8007a74 <__gethex+0x15c>
 8007b16:	45b1      	cmp	r9, r6
 8007b18:	d8ea      	bhi.n	8007af0 <__gethex+0x1d8>
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	492a      	ldr	r1, [pc, #168]	@ (8007bc8 <__gethex+0x2b0>)
 8007b20:	9303      	str	r3, [sp, #12]
 8007b22:	f7ff fe29 	bl	8007778 <strncmp>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d1e1      	bne.n	8007af0 <__gethex+0x1d8>
 8007b2c:	e7a2      	b.n	8007a74 <__gethex+0x15c>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	1ea9      	subs	r1, r5, #2
 8007b32:	f7fe fd68 	bl	8006606 <__any_on>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d0c2      	beq.n	8007ac0 <__gethex+0x1a8>
 8007b3a:	f04f 0903 	mov.w	r9, #3
 8007b3e:	e7c1      	b.n	8007ac4 <__gethex+0x1ac>
 8007b40:	da09      	bge.n	8007b56 <__gethex+0x23e>
 8007b42:	1b75      	subs	r5, r6, r5
 8007b44:	4621      	mov	r1, r4
 8007b46:	462a      	mov	r2, r5
 8007b48:	9801      	ldr	r0, [sp, #4]
 8007b4a:	f7fe fb2d 	bl	80061a8 <__lshift>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	1b7f      	subs	r7, r7, r5
 8007b52:	f100 0a14 	add.w	sl, r0, #20
 8007b56:	f04f 0900 	mov.w	r9, #0
 8007b5a:	e7b8      	b.n	8007ace <__gethex+0x1b6>
 8007b5c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b60:	42bd      	cmp	r5, r7
 8007b62:	dd6f      	ble.n	8007c44 <__gethex+0x32c>
 8007b64:	1bed      	subs	r5, r5, r7
 8007b66:	42ae      	cmp	r6, r5
 8007b68:	dc34      	bgt.n	8007bd4 <__gethex+0x2bc>
 8007b6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d022      	beq.n	8007bb8 <__gethex+0x2a0>
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d024      	beq.n	8007bc0 <__gethex+0x2a8>
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d115      	bne.n	8007ba6 <__gethex+0x28e>
 8007b7a:	42ae      	cmp	r6, r5
 8007b7c:	d113      	bne.n	8007ba6 <__gethex+0x28e>
 8007b7e:	2e01      	cmp	r6, #1
 8007b80:	d10b      	bne.n	8007b9a <__gethex+0x282>
 8007b82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b86:	9a02      	ldr	r2, [sp, #8]
 8007b88:	2562      	movs	r5, #98	@ 0x62
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	6123      	str	r3, [r4, #16]
 8007b90:	f8ca 3000 	str.w	r3, [sl]
 8007b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b96:	601c      	str	r4, [r3, #0]
 8007b98:	e73a      	b.n	8007a10 <__gethex+0xf8>
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	1e71      	subs	r1, r6, #1
 8007b9e:	f7fe fd32 	bl	8006606 <__any_on>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d1ed      	bne.n	8007b82 <__gethex+0x26a>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	9801      	ldr	r0, [sp, #4]
 8007baa:	f7fe f8e7 	bl	8005d7c <_Bfree>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bb2:	2550      	movs	r5, #80	@ 0x50
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	e72b      	b.n	8007a10 <__gethex+0xf8>
 8007bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1f3      	bne.n	8007ba6 <__gethex+0x28e>
 8007bbe:	e7e0      	b.n	8007b82 <__gethex+0x26a>
 8007bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1dd      	bne.n	8007b82 <__gethex+0x26a>
 8007bc6:	e7ee      	b.n	8007ba6 <__gethex+0x28e>
 8007bc8:	08008778 	.word	0x08008778
 8007bcc:	0800860b 	.word	0x0800860b
 8007bd0:	08008926 	.word	0x08008926
 8007bd4:	1e6f      	subs	r7, r5, #1
 8007bd6:	f1b9 0f00 	cmp.w	r9, #0
 8007bda:	d130      	bne.n	8007c3e <__gethex+0x326>
 8007bdc:	b127      	cbz	r7, 8007be8 <__gethex+0x2d0>
 8007bde:	4639      	mov	r1, r7
 8007be0:	4620      	mov	r0, r4
 8007be2:	f7fe fd10 	bl	8006606 <__any_on>
 8007be6:	4681      	mov	r9, r0
 8007be8:	2301      	movs	r3, #1
 8007bea:	4629      	mov	r1, r5
 8007bec:	1b76      	subs	r6, r6, r5
 8007bee:	2502      	movs	r5, #2
 8007bf0:	117a      	asrs	r2, r7, #5
 8007bf2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007bf6:	f007 071f 	and.w	r7, r7, #31
 8007bfa:	40bb      	lsls	r3, r7
 8007bfc:	4213      	tst	r3, r2
 8007bfe:	4620      	mov	r0, r4
 8007c00:	bf18      	it	ne
 8007c02:	f049 0902 	orrne.w	r9, r9, #2
 8007c06:	f7ff fe1f 	bl	8007848 <rshift>
 8007c0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c0e:	f1b9 0f00 	cmp.w	r9, #0
 8007c12:	d047      	beq.n	8007ca4 <__gethex+0x38c>
 8007c14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d015      	beq.n	8007c48 <__gethex+0x330>
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d017      	beq.n	8007c50 <__gethex+0x338>
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d109      	bne.n	8007c38 <__gethex+0x320>
 8007c24:	f019 0f02 	tst.w	r9, #2
 8007c28:	d006      	beq.n	8007c38 <__gethex+0x320>
 8007c2a:	f8da 3000 	ldr.w	r3, [sl]
 8007c2e:	ea49 0903 	orr.w	r9, r9, r3
 8007c32:	f019 0f01 	tst.w	r9, #1
 8007c36:	d10e      	bne.n	8007c56 <__gethex+0x33e>
 8007c38:	f045 0510 	orr.w	r5, r5, #16
 8007c3c:	e032      	b.n	8007ca4 <__gethex+0x38c>
 8007c3e:	f04f 0901 	mov.w	r9, #1
 8007c42:	e7d1      	b.n	8007be8 <__gethex+0x2d0>
 8007c44:	2501      	movs	r5, #1
 8007c46:	e7e2      	b.n	8007c0e <__gethex+0x2f6>
 8007c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c4a:	f1c3 0301 	rsb	r3, r3, #1
 8007c4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <__gethex+0x320>
 8007c56:	f04f 0c00 	mov.w	ip, #0
 8007c5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c5e:	f104 0314 	add.w	r3, r4, #20
 8007c62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c70:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c74:	d01b      	beq.n	8007cae <__gethex+0x396>
 8007c76:	3201      	adds	r2, #1
 8007c78:	6002      	str	r2, [r0, #0]
 8007c7a:	2d02      	cmp	r5, #2
 8007c7c:	f104 0314 	add.w	r3, r4, #20
 8007c80:	d13c      	bne.n	8007cfc <__gethex+0x3e4>
 8007c82:	f8d8 2000 	ldr.w	r2, [r8]
 8007c86:	3a01      	subs	r2, #1
 8007c88:	42b2      	cmp	r2, r6
 8007c8a:	d109      	bne.n	8007ca0 <__gethex+0x388>
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	1171      	asrs	r1, r6, #5
 8007c90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c94:	f006 061f 	and.w	r6, r6, #31
 8007c98:	fa02 f606 	lsl.w	r6, r2, r6
 8007c9c:	421e      	tst	r6, r3
 8007c9e:	d13a      	bne.n	8007d16 <__gethex+0x3fe>
 8007ca0:	f045 0520 	orr.w	r5, r5, #32
 8007ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ca6:	601c      	str	r4, [r3, #0]
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	601f      	str	r7, [r3, #0]
 8007cac:	e6b0      	b.n	8007a10 <__gethex+0xf8>
 8007cae:	4299      	cmp	r1, r3
 8007cb0:	f843 cc04 	str.w	ip, [r3, #-4]
 8007cb4:	d8d9      	bhi.n	8007c6a <__gethex+0x352>
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	459b      	cmp	fp, r3
 8007cba:	db17      	blt.n	8007cec <__gethex+0x3d4>
 8007cbc:	6861      	ldr	r1, [r4, #4]
 8007cbe:	9801      	ldr	r0, [sp, #4]
 8007cc0:	3101      	adds	r1, #1
 8007cc2:	f7fe f81b 	bl	8005cfc <_Balloc>
 8007cc6:	4681      	mov	r9, r0
 8007cc8:	b918      	cbnz	r0, 8007cd2 <__gethex+0x3ba>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	2184      	movs	r1, #132	@ 0x84
 8007cce:	4b19      	ldr	r3, [pc, #100]	@ (8007d34 <__gethex+0x41c>)
 8007cd0:	e6c5      	b.n	8007a5e <__gethex+0x146>
 8007cd2:	6922      	ldr	r2, [r4, #16]
 8007cd4:	f104 010c 	add.w	r1, r4, #12
 8007cd8:	3202      	adds	r2, #2
 8007cda:	0092      	lsls	r2, r2, #2
 8007cdc:	300c      	adds	r0, #12
 8007cde:	f7ff fd6d 	bl	80077bc <memcpy>
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	9801      	ldr	r0, [sp, #4]
 8007ce6:	f7fe f849 	bl	8005d7c <_Bfree>
 8007cea:	464c      	mov	r4, r9
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	6122      	str	r2, [r4, #16]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cf8:	615a      	str	r2, [r3, #20]
 8007cfa:	e7be      	b.n	8007c7a <__gethex+0x362>
 8007cfc:	6922      	ldr	r2, [r4, #16]
 8007cfe:	455a      	cmp	r2, fp
 8007d00:	dd0b      	ble.n	8007d1a <__gethex+0x402>
 8007d02:	2101      	movs	r1, #1
 8007d04:	4620      	mov	r0, r4
 8007d06:	f7ff fd9f 	bl	8007848 <rshift>
 8007d0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d0e:	3701      	adds	r7, #1
 8007d10:	42bb      	cmp	r3, r7
 8007d12:	f6ff aee0 	blt.w	8007ad6 <__gethex+0x1be>
 8007d16:	2501      	movs	r5, #1
 8007d18:	e7c2      	b.n	8007ca0 <__gethex+0x388>
 8007d1a:	f016 061f 	ands.w	r6, r6, #31
 8007d1e:	d0fa      	beq.n	8007d16 <__gethex+0x3fe>
 8007d20:	4453      	add	r3, sl
 8007d22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d26:	f7fe f8db 	bl	8005ee0 <__hi0bits>
 8007d2a:	f1c6 0620 	rsb	r6, r6, #32
 8007d2e:	42b0      	cmp	r0, r6
 8007d30:	dbe7      	blt.n	8007d02 <__gethex+0x3ea>
 8007d32:	e7f0      	b.n	8007d16 <__gethex+0x3fe>
 8007d34:	0800860b 	.word	0x0800860b

08007d38 <L_shift>:
 8007d38:	f1c2 0208 	rsb	r2, r2, #8
 8007d3c:	0092      	lsls	r2, r2, #2
 8007d3e:	b570      	push	{r4, r5, r6, lr}
 8007d40:	f1c2 0620 	rsb	r6, r2, #32
 8007d44:	6843      	ldr	r3, [r0, #4]
 8007d46:	6804      	ldr	r4, [r0, #0]
 8007d48:	fa03 f506 	lsl.w	r5, r3, r6
 8007d4c:	432c      	orrs	r4, r5
 8007d4e:	40d3      	lsrs	r3, r2
 8007d50:	6004      	str	r4, [r0, #0]
 8007d52:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d56:	4288      	cmp	r0, r1
 8007d58:	d3f4      	bcc.n	8007d44 <L_shift+0xc>
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}

08007d5c <__match>:
 8007d5c:	b530      	push	{r4, r5, lr}
 8007d5e:	6803      	ldr	r3, [r0, #0]
 8007d60:	3301      	adds	r3, #1
 8007d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d66:	b914      	cbnz	r4, 8007d6e <__match+0x12>
 8007d68:	6003      	str	r3, [r0, #0]
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	bd30      	pop	{r4, r5, pc}
 8007d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d72:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007d76:	2d19      	cmp	r5, #25
 8007d78:	bf98      	it	ls
 8007d7a:	3220      	addls	r2, #32
 8007d7c:	42a2      	cmp	r2, r4
 8007d7e:	d0f0      	beq.n	8007d62 <__match+0x6>
 8007d80:	2000      	movs	r0, #0
 8007d82:	e7f3      	b.n	8007d6c <__match+0x10>

08007d84 <__hexnan>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	2500      	movs	r5, #0
 8007d8a:	680b      	ldr	r3, [r1, #0]
 8007d8c:	4682      	mov	sl, r0
 8007d8e:	115e      	asrs	r6, r3, #5
 8007d90:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d94:	f013 031f 	ands.w	r3, r3, #31
 8007d98:	bf18      	it	ne
 8007d9a:	3604      	addne	r6, #4
 8007d9c:	1f37      	subs	r7, r6, #4
 8007d9e:	4690      	mov	r8, r2
 8007da0:	46b9      	mov	r9, r7
 8007da2:	463c      	mov	r4, r7
 8007da4:	46ab      	mov	fp, r5
 8007da6:	b087      	sub	sp, #28
 8007da8:	6801      	ldr	r1, [r0, #0]
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	f846 5c04 	str.w	r5, [r6, #-4]
 8007db0:	9502      	str	r5, [sp, #8]
 8007db2:	784a      	ldrb	r2, [r1, #1]
 8007db4:	1c4b      	adds	r3, r1, #1
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	b342      	cbz	r2, 8007e0c <__hexnan+0x88>
 8007dba:	4610      	mov	r0, r2
 8007dbc:	9105      	str	r1, [sp, #20]
 8007dbe:	9204      	str	r2, [sp, #16]
 8007dc0:	f7ff fd95 	bl	80078ee <__hexdig_fun>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d151      	bne.n	8007e6c <__hexnan+0xe8>
 8007dc8:	9a04      	ldr	r2, [sp, #16]
 8007dca:	9905      	ldr	r1, [sp, #20]
 8007dcc:	2a20      	cmp	r2, #32
 8007dce:	d818      	bhi.n	8007e02 <__hexnan+0x7e>
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	459b      	cmp	fp, r3
 8007dd4:	dd13      	ble.n	8007dfe <__hexnan+0x7a>
 8007dd6:	454c      	cmp	r4, r9
 8007dd8:	d206      	bcs.n	8007de8 <__hexnan+0x64>
 8007dda:	2d07      	cmp	r5, #7
 8007ddc:	dc04      	bgt.n	8007de8 <__hexnan+0x64>
 8007dde:	462a      	mov	r2, r5
 8007de0:	4649      	mov	r1, r9
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7ff ffa8 	bl	8007d38 <L_shift>
 8007de8:	4544      	cmp	r4, r8
 8007dea:	d952      	bls.n	8007e92 <__hexnan+0x10e>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f1a4 0904 	sub.w	r9, r4, #4
 8007df2:	f844 3c04 	str.w	r3, [r4, #-4]
 8007df6:	461d      	mov	r5, r3
 8007df8:	464c      	mov	r4, r9
 8007dfa:	f8cd b008 	str.w	fp, [sp, #8]
 8007dfe:	9903      	ldr	r1, [sp, #12]
 8007e00:	e7d7      	b.n	8007db2 <__hexnan+0x2e>
 8007e02:	2a29      	cmp	r2, #41	@ 0x29
 8007e04:	d157      	bne.n	8007eb6 <__hexnan+0x132>
 8007e06:	3102      	adds	r1, #2
 8007e08:	f8ca 1000 	str.w	r1, [sl]
 8007e0c:	f1bb 0f00 	cmp.w	fp, #0
 8007e10:	d051      	beq.n	8007eb6 <__hexnan+0x132>
 8007e12:	454c      	cmp	r4, r9
 8007e14:	d206      	bcs.n	8007e24 <__hexnan+0xa0>
 8007e16:	2d07      	cmp	r5, #7
 8007e18:	dc04      	bgt.n	8007e24 <__hexnan+0xa0>
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f7ff ff8a 	bl	8007d38 <L_shift>
 8007e24:	4544      	cmp	r4, r8
 8007e26:	d936      	bls.n	8007e96 <__hexnan+0x112>
 8007e28:	4623      	mov	r3, r4
 8007e2a:	f1a8 0204 	sub.w	r2, r8, #4
 8007e2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e32:	429f      	cmp	r7, r3
 8007e34:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e38:	d2f9      	bcs.n	8007e2e <__hexnan+0xaa>
 8007e3a:	1b3b      	subs	r3, r7, r4
 8007e3c:	f023 0303 	bic.w	r3, r3, #3
 8007e40:	3304      	adds	r3, #4
 8007e42:	3401      	adds	r4, #1
 8007e44:	3e03      	subs	r6, #3
 8007e46:	42b4      	cmp	r4, r6
 8007e48:	bf88      	it	hi
 8007e4a:	2304      	movhi	r3, #4
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	4443      	add	r3, r8
 8007e50:	f843 2b04 	str.w	r2, [r3], #4
 8007e54:	429f      	cmp	r7, r3
 8007e56:	d2fb      	bcs.n	8007e50 <__hexnan+0xcc>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	b91b      	cbnz	r3, 8007e64 <__hexnan+0xe0>
 8007e5c:	4547      	cmp	r7, r8
 8007e5e:	d128      	bne.n	8007eb2 <__hexnan+0x12e>
 8007e60:	2301      	movs	r3, #1
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	2005      	movs	r0, #5
 8007e66:	b007      	add	sp, #28
 8007e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	2d08      	cmp	r5, #8
 8007e70:	f10b 0b01 	add.w	fp, fp, #1
 8007e74:	dd06      	ble.n	8007e84 <__hexnan+0x100>
 8007e76:	4544      	cmp	r4, r8
 8007e78:	d9c1      	bls.n	8007dfe <__hexnan+0x7a>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2501      	movs	r5, #1
 8007e7e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e82:	3c04      	subs	r4, #4
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	f000 000f 	and.w	r0, r0, #15
 8007e8a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007e8e:	6020      	str	r0, [r4, #0]
 8007e90:	e7b5      	b.n	8007dfe <__hexnan+0x7a>
 8007e92:	2508      	movs	r5, #8
 8007e94:	e7b3      	b.n	8007dfe <__hexnan+0x7a>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0dd      	beq.n	8007e58 <__hexnan+0xd4>
 8007e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea0:	f1c3 0320 	rsb	r3, r3, #32
 8007ea4:	40da      	lsrs	r2, r3
 8007ea6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	f846 3c04 	str.w	r3, [r6, #-4]
 8007eb0:	e7d2      	b.n	8007e58 <__hexnan+0xd4>
 8007eb2:	3f04      	subs	r7, #4
 8007eb4:	e7d0      	b.n	8007e58 <__hexnan+0xd4>
 8007eb6:	2004      	movs	r0, #4
 8007eb8:	e7d5      	b.n	8007e66 <__hexnan+0xe2>

08007eba <__ascii_mbtowc>:
 8007eba:	b082      	sub	sp, #8
 8007ebc:	b901      	cbnz	r1, 8007ec0 <__ascii_mbtowc+0x6>
 8007ebe:	a901      	add	r1, sp, #4
 8007ec0:	b142      	cbz	r2, 8007ed4 <__ascii_mbtowc+0x1a>
 8007ec2:	b14b      	cbz	r3, 8007ed8 <__ascii_mbtowc+0x1e>
 8007ec4:	7813      	ldrb	r3, [r2, #0]
 8007ec6:	600b      	str	r3, [r1, #0]
 8007ec8:	7812      	ldrb	r2, [r2, #0]
 8007eca:	1e10      	subs	r0, r2, #0
 8007ecc:	bf18      	it	ne
 8007ece:	2001      	movne	r0, #1
 8007ed0:	b002      	add	sp, #8
 8007ed2:	4770      	bx	lr
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	e7fb      	b.n	8007ed0 <__ascii_mbtowc+0x16>
 8007ed8:	f06f 0001 	mvn.w	r0, #1
 8007edc:	e7f8      	b.n	8007ed0 <__ascii_mbtowc+0x16>

08007ede <_realloc_r>:
 8007ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	b921      	cbnz	r1, 8007ef4 <_realloc_r+0x16>
 8007eea:	4611      	mov	r1, r2
 8007eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	f7fd be78 	b.w	8005be4 <_malloc_r>
 8007ef4:	b92a      	cbnz	r2, 8007f02 <_realloc_r+0x24>
 8007ef6:	f7fd fe03 	bl	8005b00 <_free_r>
 8007efa:	2400      	movs	r4, #0
 8007efc:	4620      	mov	r0, r4
 8007efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f02:	f000 f840 	bl	8007f86 <_malloc_usable_size_r>
 8007f06:	4285      	cmp	r5, r0
 8007f08:	4606      	mov	r6, r0
 8007f0a:	d802      	bhi.n	8007f12 <_realloc_r+0x34>
 8007f0c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f10:	d8f4      	bhi.n	8007efc <_realloc_r+0x1e>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4640      	mov	r0, r8
 8007f16:	f7fd fe65 	bl	8005be4 <_malloc_r>
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d0ec      	beq.n	8007efa <_realloc_r+0x1c>
 8007f20:	42b5      	cmp	r5, r6
 8007f22:	462a      	mov	r2, r5
 8007f24:	4621      	mov	r1, r4
 8007f26:	bf28      	it	cs
 8007f28:	4632      	movcs	r2, r6
 8007f2a:	f7ff fc47 	bl	80077bc <memcpy>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4640      	mov	r0, r8
 8007f32:	f7fd fde5 	bl	8005b00 <_free_r>
 8007f36:	463c      	mov	r4, r7
 8007f38:	e7e0      	b.n	8007efc <_realloc_r+0x1e>

08007f3a <__ascii_wctomb>:
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4608      	mov	r0, r1
 8007f3e:	b141      	cbz	r1, 8007f52 <__ascii_wctomb+0x18>
 8007f40:	2aff      	cmp	r2, #255	@ 0xff
 8007f42:	d904      	bls.n	8007f4e <__ascii_wctomb+0x14>
 8007f44:	228a      	movs	r2, #138	@ 0x8a
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	4770      	bx	lr
 8007f4e:	2001      	movs	r0, #1
 8007f50:	700a      	strb	r2, [r1, #0]
 8007f52:	4770      	bx	lr

08007f54 <fiprintf>:
 8007f54:	b40e      	push	{r1, r2, r3}
 8007f56:	b503      	push	{r0, r1, lr}
 8007f58:	4601      	mov	r1, r0
 8007f5a:	ab03      	add	r3, sp, #12
 8007f5c:	4805      	ldr	r0, [pc, #20]	@ (8007f74 <fiprintf+0x20>)
 8007f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f62:	6800      	ldr	r0, [r0, #0]
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	f000 f83d 	bl	8007fe4 <_vfiprintf_r>
 8007f6a:	b002      	add	sp, #8
 8007f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f70:	b003      	add	sp, #12
 8007f72:	4770      	bx	lr
 8007f74:	20000018 	.word	0x20000018

08007f78 <abort>:
 8007f78:	2006      	movs	r0, #6
 8007f7a:	b508      	push	{r3, lr}
 8007f7c:	f000 fa06 	bl	800838c <raise>
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7f9 fe2e 	bl	8001be2 <_exit>

08007f86 <_malloc_usable_size_r>:
 8007f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f8a:	1f18      	subs	r0, r3, #4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfbc      	itt	lt
 8007f90:	580b      	ldrlt	r3, [r1, r0]
 8007f92:	18c0      	addlt	r0, r0, r3
 8007f94:	4770      	bx	lr

08007f96 <__sfputc_r>:
 8007f96:	6893      	ldr	r3, [r2, #8]
 8007f98:	b410      	push	{r4}
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	6093      	str	r3, [r2, #8]
 8007fa0:	da07      	bge.n	8007fb2 <__sfputc_r+0x1c>
 8007fa2:	6994      	ldr	r4, [r2, #24]
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	db01      	blt.n	8007fac <__sfputc_r+0x16>
 8007fa8:	290a      	cmp	r1, #10
 8007faa:	d102      	bne.n	8007fb2 <__sfputc_r+0x1c>
 8007fac:	bc10      	pop	{r4}
 8007fae:	f000 b931 	b.w	8008214 <__swbuf_r>
 8007fb2:	6813      	ldr	r3, [r2, #0]
 8007fb4:	1c58      	adds	r0, r3, #1
 8007fb6:	6010      	str	r0, [r2, #0]
 8007fb8:	7019      	strb	r1, [r3, #0]
 8007fba:	4608      	mov	r0, r1
 8007fbc:	bc10      	pop	{r4}
 8007fbe:	4770      	bx	lr

08007fc0 <__sfputs_r>:
 8007fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	18d5      	adds	r5, r2, r3
 8007fca:	42ac      	cmp	r4, r5
 8007fcc:	d101      	bne.n	8007fd2 <__sfputs_r+0x12>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e007      	b.n	8007fe2 <__sfputs_r+0x22>
 8007fd2:	463a      	mov	r2, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	f7ff ffdc 	bl	8007f96 <__sfputc_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	d1f3      	bne.n	8007fca <__sfputs_r+0xa>
 8007fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fe4 <_vfiprintf_r>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	460d      	mov	r5, r1
 8007fea:	4614      	mov	r4, r2
 8007fec:	4698      	mov	r8, r3
 8007fee:	4606      	mov	r6, r0
 8007ff0:	b09d      	sub	sp, #116	@ 0x74
 8007ff2:	b118      	cbz	r0, 8007ffc <_vfiprintf_r+0x18>
 8007ff4:	6a03      	ldr	r3, [r0, #32]
 8007ff6:	b90b      	cbnz	r3, 8007ffc <_vfiprintf_r+0x18>
 8007ff8:	f7fc fdd2 	bl	8004ba0 <__sinit>
 8007ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ffe:	07d9      	lsls	r1, r3, #31
 8008000:	d405      	bmi.n	800800e <_vfiprintf_r+0x2a>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	059a      	lsls	r2, r3, #22
 8008006:	d402      	bmi.n	800800e <_vfiprintf_r+0x2a>
 8008008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800a:	f7fc ff14 	bl	8004e36 <__retarget_lock_acquire_recursive>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	071b      	lsls	r3, r3, #28
 8008012:	d501      	bpl.n	8008018 <_vfiprintf_r+0x34>
 8008014:	692b      	ldr	r3, [r5, #16]
 8008016:	b99b      	cbnz	r3, 8008040 <_vfiprintf_r+0x5c>
 8008018:	4629      	mov	r1, r5
 800801a:	4630      	mov	r0, r6
 800801c:	f000 f938 	bl	8008290 <__swsetup_r>
 8008020:	b170      	cbz	r0, 8008040 <_vfiprintf_r+0x5c>
 8008022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008024:	07dc      	lsls	r4, r3, #31
 8008026:	d504      	bpl.n	8008032 <_vfiprintf_r+0x4e>
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	b01d      	add	sp, #116	@ 0x74
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	0598      	lsls	r0, r3, #22
 8008036:	d4f7      	bmi.n	8008028 <_vfiprintf_r+0x44>
 8008038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803a:	f7fc fefd 	bl	8004e38 <__retarget_lock_release_recursive>
 800803e:	e7f3      	b.n	8008028 <_vfiprintf_r+0x44>
 8008040:	2300      	movs	r3, #0
 8008042:	9309      	str	r3, [sp, #36]	@ 0x24
 8008044:	2320      	movs	r3, #32
 8008046:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800804a:	2330      	movs	r3, #48	@ 0x30
 800804c:	f04f 0901 	mov.w	r9, #1
 8008050:	f8cd 800c 	str.w	r8, [sp, #12]
 8008054:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008200 <_vfiprintf_r+0x21c>
 8008058:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800805c:	4623      	mov	r3, r4
 800805e:	469a      	mov	sl, r3
 8008060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008064:	b10a      	cbz	r2, 800806a <_vfiprintf_r+0x86>
 8008066:	2a25      	cmp	r2, #37	@ 0x25
 8008068:	d1f9      	bne.n	800805e <_vfiprintf_r+0x7a>
 800806a:	ebba 0b04 	subs.w	fp, sl, r4
 800806e:	d00b      	beq.n	8008088 <_vfiprintf_r+0xa4>
 8008070:	465b      	mov	r3, fp
 8008072:	4622      	mov	r2, r4
 8008074:	4629      	mov	r1, r5
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ffa2 	bl	8007fc0 <__sfputs_r>
 800807c:	3001      	adds	r0, #1
 800807e:	f000 80a7 	beq.w	80081d0 <_vfiprintf_r+0x1ec>
 8008082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008084:	445a      	add	r2, fp
 8008086:	9209      	str	r2, [sp, #36]	@ 0x24
 8008088:	f89a 3000 	ldrb.w	r3, [sl]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 809f 	beq.w	80081d0 <_vfiprintf_r+0x1ec>
 8008092:	2300      	movs	r3, #0
 8008094:	f04f 32ff 	mov.w	r2, #4294967295
 8008098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800809c:	f10a 0a01 	add.w	sl, sl, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	9307      	str	r3, [sp, #28]
 80080a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80080aa:	4654      	mov	r4, sl
 80080ac:	2205      	movs	r2, #5
 80080ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b2:	4853      	ldr	r0, [pc, #332]	@ (8008200 <_vfiprintf_r+0x21c>)
 80080b4:	f7fc fec1 	bl	8004e3a <memchr>
 80080b8:	9a04      	ldr	r2, [sp, #16]
 80080ba:	b9d8      	cbnz	r0, 80080f4 <_vfiprintf_r+0x110>
 80080bc:	06d1      	lsls	r1, r2, #27
 80080be:	bf44      	itt	mi
 80080c0:	2320      	movmi	r3, #32
 80080c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080c6:	0713      	lsls	r3, r2, #28
 80080c8:	bf44      	itt	mi
 80080ca:	232b      	movmi	r3, #43	@ 0x2b
 80080cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080d0:	f89a 3000 	ldrb.w	r3, [sl]
 80080d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d6:	d015      	beq.n	8008104 <_vfiprintf_r+0x120>
 80080d8:	4654      	mov	r4, sl
 80080da:	2000      	movs	r0, #0
 80080dc:	f04f 0c0a 	mov.w	ip, #10
 80080e0:	9a07      	ldr	r2, [sp, #28]
 80080e2:	4621      	mov	r1, r4
 80080e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e8:	3b30      	subs	r3, #48	@ 0x30
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d94b      	bls.n	8008186 <_vfiprintf_r+0x1a2>
 80080ee:	b1b0      	cbz	r0, 800811e <_vfiprintf_r+0x13a>
 80080f0:	9207      	str	r2, [sp, #28]
 80080f2:	e014      	b.n	800811e <_vfiprintf_r+0x13a>
 80080f4:	eba0 0308 	sub.w	r3, r0, r8
 80080f8:	fa09 f303 	lsl.w	r3, r9, r3
 80080fc:	4313      	orrs	r3, r2
 80080fe:	46a2      	mov	sl, r4
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	e7d2      	b.n	80080aa <_vfiprintf_r+0xc6>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	1d19      	adds	r1, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	9103      	str	r1, [sp, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	bfbb      	ittet	lt
 8008110:	425b      	neglt	r3, r3
 8008112:	f042 0202 	orrlt.w	r2, r2, #2
 8008116:	9307      	strge	r3, [sp, #28]
 8008118:	9307      	strlt	r3, [sp, #28]
 800811a:	bfb8      	it	lt
 800811c:	9204      	strlt	r2, [sp, #16]
 800811e:	7823      	ldrb	r3, [r4, #0]
 8008120:	2b2e      	cmp	r3, #46	@ 0x2e
 8008122:	d10a      	bne.n	800813a <_vfiprintf_r+0x156>
 8008124:	7863      	ldrb	r3, [r4, #1]
 8008126:	2b2a      	cmp	r3, #42	@ 0x2a
 8008128:	d132      	bne.n	8008190 <_vfiprintf_r+0x1ac>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	3402      	adds	r4, #2
 800812e:	1d1a      	adds	r2, r3, #4
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	9203      	str	r2, [sp, #12]
 8008134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008138:	9305      	str	r3, [sp, #20]
 800813a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008204 <_vfiprintf_r+0x220>
 800813e:	2203      	movs	r2, #3
 8008140:	4650      	mov	r0, sl
 8008142:	7821      	ldrb	r1, [r4, #0]
 8008144:	f7fc fe79 	bl	8004e3a <memchr>
 8008148:	b138      	cbz	r0, 800815a <_vfiprintf_r+0x176>
 800814a:	2240      	movs	r2, #64	@ 0x40
 800814c:	9b04      	ldr	r3, [sp, #16]
 800814e:	eba0 000a 	sub.w	r0, r0, sl
 8008152:	4082      	lsls	r2, r0
 8008154:	4313      	orrs	r3, r2
 8008156:	3401      	adds	r4, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815e:	2206      	movs	r2, #6
 8008160:	4829      	ldr	r0, [pc, #164]	@ (8008208 <_vfiprintf_r+0x224>)
 8008162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008166:	f7fc fe68 	bl	8004e3a <memchr>
 800816a:	2800      	cmp	r0, #0
 800816c:	d03f      	beq.n	80081ee <_vfiprintf_r+0x20a>
 800816e:	4b27      	ldr	r3, [pc, #156]	@ (800820c <_vfiprintf_r+0x228>)
 8008170:	bb1b      	cbnz	r3, 80081ba <_vfiprintf_r+0x1d6>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	3307      	adds	r3, #7
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	3308      	adds	r3, #8
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008180:	443b      	add	r3, r7
 8008182:	9309      	str	r3, [sp, #36]	@ 0x24
 8008184:	e76a      	b.n	800805c <_vfiprintf_r+0x78>
 8008186:	460c      	mov	r4, r1
 8008188:	2001      	movs	r0, #1
 800818a:	fb0c 3202 	mla	r2, ip, r2, r3
 800818e:	e7a8      	b.n	80080e2 <_vfiprintf_r+0xfe>
 8008190:	2300      	movs	r3, #0
 8008192:	f04f 0c0a 	mov.w	ip, #10
 8008196:	4619      	mov	r1, r3
 8008198:	3401      	adds	r4, #1
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	4620      	mov	r0, r4
 800819e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a2:	3a30      	subs	r2, #48	@ 0x30
 80081a4:	2a09      	cmp	r2, #9
 80081a6:	d903      	bls.n	80081b0 <_vfiprintf_r+0x1cc>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0c6      	beq.n	800813a <_vfiprintf_r+0x156>
 80081ac:	9105      	str	r1, [sp, #20]
 80081ae:	e7c4      	b.n	800813a <_vfiprintf_r+0x156>
 80081b0:	4604      	mov	r4, r0
 80081b2:	2301      	movs	r3, #1
 80081b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b8:	e7f0      	b.n	800819c <_vfiprintf_r+0x1b8>
 80081ba:	ab03      	add	r3, sp, #12
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	462a      	mov	r2, r5
 80081c0:	4630      	mov	r0, r6
 80081c2:	4b13      	ldr	r3, [pc, #76]	@ (8008210 <_vfiprintf_r+0x22c>)
 80081c4:	a904      	add	r1, sp, #16
 80081c6:	f7fb fe91 	bl	8003eec <_printf_float>
 80081ca:	4607      	mov	r7, r0
 80081cc:	1c78      	adds	r0, r7, #1
 80081ce:	d1d6      	bne.n	800817e <_vfiprintf_r+0x19a>
 80081d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d2:	07d9      	lsls	r1, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_vfiprintf_r+0x1fe>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	059a      	lsls	r2, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_vfiprintf_r+0x1fe>
 80081dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081de:	f7fc fe2b 	bl	8004e38 <__retarget_lock_release_recursive>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	065b      	lsls	r3, r3, #25
 80081e6:	f53f af1f 	bmi.w	8008028 <_vfiprintf_r+0x44>
 80081ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081ec:	e71e      	b.n	800802c <_vfiprintf_r+0x48>
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4630      	mov	r0, r6
 80081f6:	4b06      	ldr	r3, [pc, #24]	@ (8008210 <_vfiprintf_r+0x22c>)
 80081f8:	a904      	add	r1, sp, #16
 80081fa:	f7fc f915 	bl	8004428 <_printf_i>
 80081fe:	e7e4      	b.n	80081ca <_vfiprintf_r+0x1e6>
 8008200:	080088d1 	.word	0x080088d1
 8008204:	080088d7 	.word	0x080088d7
 8008208:	080088db 	.word	0x080088db
 800820c:	08003eed 	.word	0x08003eed
 8008210:	08007fc1 	.word	0x08007fc1

08008214 <__swbuf_r>:
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	460e      	mov	r6, r1
 8008218:	4614      	mov	r4, r2
 800821a:	4605      	mov	r5, r0
 800821c:	b118      	cbz	r0, 8008226 <__swbuf_r+0x12>
 800821e:	6a03      	ldr	r3, [r0, #32]
 8008220:	b90b      	cbnz	r3, 8008226 <__swbuf_r+0x12>
 8008222:	f7fc fcbd 	bl	8004ba0 <__sinit>
 8008226:	69a3      	ldr	r3, [r4, #24]
 8008228:	60a3      	str	r3, [r4, #8]
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	071a      	lsls	r2, r3, #28
 800822e:	d501      	bpl.n	8008234 <__swbuf_r+0x20>
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	b943      	cbnz	r3, 8008246 <__swbuf_r+0x32>
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f82a 	bl	8008290 <__swsetup_r>
 800823c:	b118      	cbz	r0, 8008246 <__swbuf_r+0x32>
 800823e:	f04f 37ff 	mov.w	r7, #4294967295
 8008242:	4638      	mov	r0, r7
 8008244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	6922      	ldr	r2, [r4, #16]
 800824a:	b2f6      	uxtb	r6, r6
 800824c:	1a98      	subs	r0, r3, r2
 800824e:	6963      	ldr	r3, [r4, #20]
 8008250:	4637      	mov	r7, r6
 8008252:	4283      	cmp	r3, r0
 8008254:	dc05      	bgt.n	8008262 <__swbuf_r+0x4e>
 8008256:	4621      	mov	r1, r4
 8008258:	4628      	mov	r0, r5
 800825a:	f7ff fa4b 	bl	80076f4 <_fflush_r>
 800825e:	2800      	cmp	r0, #0
 8008260:	d1ed      	bne.n	800823e <__swbuf_r+0x2a>
 8008262:	68a3      	ldr	r3, [r4, #8]
 8008264:	3b01      	subs	r3, #1
 8008266:	60a3      	str	r3, [r4, #8]
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	6022      	str	r2, [r4, #0]
 800826e:	701e      	strb	r6, [r3, #0]
 8008270:	6962      	ldr	r2, [r4, #20]
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	429a      	cmp	r2, r3
 8008276:	d004      	beq.n	8008282 <__swbuf_r+0x6e>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	07db      	lsls	r3, r3, #31
 800827c:	d5e1      	bpl.n	8008242 <__swbuf_r+0x2e>
 800827e:	2e0a      	cmp	r6, #10
 8008280:	d1df      	bne.n	8008242 <__swbuf_r+0x2e>
 8008282:	4621      	mov	r1, r4
 8008284:	4628      	mov	r0, r5
 8008286:	f7ff fa35 	bl	80076f4 <_fflush_r>
 800828a:	2800      	cmp	r0, #0
 800828c:	d0d9      	beq.n	8008242 <__swbuf_r+0x2e>
 800828e:	e7d6      	b.n	800823e <__swbuf_r+0x2a>

08008290 <__swsetup_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4b29      	ldr	r3, [pc, #164]	@ (8008338 <__swsetup_r+0xa8>)
 8008294:	4605      	mov	r5, r0
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	460c      	mov	r4, r1
 800829a:	b118      	cbz	r0, 80082a4 <__swsetup_r+0x14>
 800829c:	6a03      	ldr	r3, [r0, #32]
 800829e:	b90b      	cbnz	r3, 80082a4 <__swsetup_r+0x14>
 80082a0:	f7fc fc7e 	bl	8004ba0 <__sinit>
 80082a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a8:	0719      	lsls	r1, r3, #28
 80082aa:	d422      	bmi.n	80082f2 <__swsetup_r+0x62>
 80082ac:	06da      	lsls	r2, r3, #27
 80082ae:	d407      	bmi.n	80082c0 <__swsetup_r+0x30>
 80082b0:	2209      	movs	r2, #9
 80082b2:	602a      	str	r2, [r5, #0]
 80082b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	e033      	b.n	8008328 <__swsetup_r+0x98>
 80082c0:	0758      	lsls	r0, r3, #29
 80082c2:	d512      	bpl.n	80082ea <__swsetup_r+0x5a>
 80082c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082c6:	b141      	cbz	r1, 80082da <__swsetup_r+0x4a>
 80082c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082cc:	4299      	cmp	r1, r3
 80082ce:	d002      	beq.n	80082d6 <__swsetup_r+0x46>
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7fd fc15 	bl	8005b00 <_free_r>
 80082d6:	2300      	movs	r3, #0
 80082d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	2300      	movs	r3, #0
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	89a3      	ldrh	r3, [r4, #12]
 80082ec:	f043 0308 	orr.w	r3, r3, #8
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	b94b      	cbnz	r3, 800830a <__swsetup_r+0x7a>
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008300:	d003      	beq.n	800830a <__swsetup_r+0x7a>
 8008302:	4621      	mov	r1, r4
 8008304:	4628      	mov	r0, r5
 8008306:	f000 f882 	bl	800840e <__smakebuf_r>
 800830a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830e:	f013 0201 	ands.w	r2, r3, #1
 8008312:	d00a      	beq.n	800832a <__swsetup_r+0x9a>
 8008314:	2200      	movs	r2, #0
 8008316:	60a2      	str	r2, [r4, #8]
 8008318:	6962      	ldr	r2, [r4, #20]
 800831a:	4252      	negs	r2, r2
 800831c:	61a2      	str	r2, [r4, #24]
 800831e:	6922      	ldr	r2, [r4, #16]
 8008320:	b942      	cbnz	r2, 8008334 <__swsetup_r+0xa4>
 8008322:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008326:	d1c5      	bne.n	80082b4 <__swsetup_r+0x24>
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	0799      	lsls	r1, r3, #30
 800832c:	bf58      	it	pl
 800832e:	6962      	ldrpl	r2, [r4, #20]
 8008330:	60a2      	str	r2, [r4, #8]
 8008332:	e7f4      	b.n	800831e <__swsetup_r+0x8e>
 8008334:	2000      	movs	r0, #0
 8008336:	e7f7      	b.n	8008328 <__swsetup_r+0x98>
 8008338:	20000018 	.word	0x20000018

0800833c <_raise_r>:
 800833c:	291f      	cmp	r1, #31
 800833e:	b538      	push	{r3, r4, r5, lr}
 8008340:	4605      	mov	r5, r0
 8008342:	460c      	mov	r4, r1
 8008344:	d904      	bls.n	8008350 <_raise_r+0x14>
 8008346:	2316      	movs	r3, #22
 8008348:	6003      	str	r3, [r0, #0]
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008352:	b112      	cbz	r2, 800835a <_raise_r+0x1e>
 8008354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008358:	b94b      	cbnz	r3, 800836e <_raise_r+0x32>
 800835a:	4628      	mov	r0, r5
 800835c:	f000 f830 	bl	80083c0 <_getpid_r>
 8008360:	4622      	mov	r2, r4
 8008362:	4601      	mov	r1, r0
 8008364:	4628      	mov	r0, r5
 8008366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800836a:	f000 b817 	b.w	800839c <_kill_r>
 800836e:	2b01      	cmp	r3, #1
 8008370:	d00a      	beq.n	8008388 <_raise_r+0x4c>
 8008372:	1c59      	adds	r1, r3, #1
 8008374:	d103      	bne.n	800837e <_raise_r+0x42>
 8008376:	2316      	movs	r3, #22
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	2001      	movs	r0, #1
 800837c:	e7e7      	b.n	800834e <_raise_r+0x12>
 800837e:	2100      	movs	r1, #0
 8008380:	4620      	mov	r0, r4
 8008382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008386:	4798      	blx	r3
 8008388:	2000      	movs	r0, #0
 800838a:	e7e0      	b.n	800834e <_raise_r+0x12>

0800838c <raise>:
 800838c:	4b02      	ldr	r3, [pc, #8]	@ (8008398 <raise+0xc>)
 800838e:	4601      	mov	r1, r0
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	f7ff bfd3 	b.w	800833c <_raise_r>
 8008396:	bf00      	nop
 8008398:	20000018 	.word	0x20000018

0800839c <_kill_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	2300      	movs	r3, #0
 80083a0:	4d06      	ldr	r5, [pc, #24]	@ (80083bc <_kill_r+0x20>)
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	f7f9 fc0a 	bl	8001bc2 <_kill>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d102      	bne.n	80083b8 <_kill_r+0x1c>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	b103      	cbz	r3, 80083b8 <_kill_r+0x1c>
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	bd38      	pop	{r3, r4, r5, pc}
 80083ba:	bf00      	nop
 80083bc:	200003e0 	.word	0x200003e0

080083c0 <_getpid_r>:
 80083c0:	f7f9 bbf8 	b.w	8001bb4 <_getpid>

080083c4 <__swhatbuf_r>:
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	460c      	mov	r4, r1
 80083c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083cc:	4615      	mov	r5, r2
 80083ce:	2900      	cmp	r1, #0
 80083d0:	461e      	mov	r6, r3
 80083d2:	b096      	sub	sp, #88	@ 0x58
 80083d4:	da0c      	bge.n	80083f0 <__swhatbuf_r+0x2c>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	2100      	movs	r1, #0
 80083da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083de:	bf14      	ite	ne
 80083e0:	2340      	movne	r3, #64	@ 0x40
 80083e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083e6:	2000      	movs	r0, #0
 80083e8:	6031      	str	r1, [r6, #0]
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	b016      	add	sp, #88	@ 0x58
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	466a      	mov	r2, sp
 80083f2:	f000 f849 	bl	8008488 <_fstat_r>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	dbed      	blt.n	80083d6 <__swhatbuf_r+0x12>
 80083fa:	9901      	ldr	r1, [sp, #4]
 80083fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008400:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008404:	4259      	negs	r1, r3
 8008406:	4159      	adcs	r1, r3
 8008408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800840c:	e7eb      	b.n	80083e6 <__swhatbuf_r+0x22>

0800840e <__smakebuf_r>:
 800840e:	898b      	ldrh	r3, [r1, #12]
 8008410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008412:	079d      	lsls	r5, r3, #30
 8008414:	4606      	mov	r6, r0
 8008416:	460c      	mov	r4, r1
 8008418:	d507      	bpl.n	800842a <__smakebuf_r+0x1c>
 800841a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	2301      	movs	r3, #1
 8008424:	6163      	str	r3, [r4, #20]
 8008426:	b003      	add	sp, #12
 8008428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800842a:	466a      	mov	r2, sp
 800842c:	ab01      	add	r3, sp, #4
 800842e:	f7ff ffc9 	bl	80083c4 <__swhatbuf_r>
 8008432:	9f00      	ldr	r7, [sp, #0]
 8008434:	4605      	mov	r5, r0
 8008436:	4639      	mov	r1, r7
 8008438:	4630      	mov	r0, r6
 800843a:	f7fd fbd3 	bl	8005be4 <_malloc_r>
 800843e:	b948      	cbnz	r0, 8008454 <__smakebuf_r+0x46>
 8008440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008444:	059a      	lsls	r2, r3, #22
 8008446:	d4ee      	bmi.n	8008426 <__smakebuf_r+0x18>
 8008448:	f023 0303 	bic.w	r3, r3, #3
 800844c:	f043 0302 	orr.w	r3, r3, #2
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	e7e2      	b.n	800841a <__smakebuf_r+0xc>
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800845a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	9b01      	ldr	r3, [sp, #4]
 8008462:	6020      	str	r0, [r4, #0]
 8008464:	b15b      	cbz	r3, 800847e <__smakebuf_r+0x70>
 8008466:	4630      	mov	r0, r6
 8008468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800846c:	f000 f81e 	bl	80084ac <_isatty_r>
 8008470:	b128      	cbz	r0, 800847e <__smakebuf_r+0x70>
 8008472:	89a3      	ldrh	r3, [r4, #12]
 8008474:	f023 0303 	bic.w	r3, r3, #3
 8008478:	f043 0301 	orr.w	r3, r3, #1
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	431d      	orrs	r5, r3
 8008482:	81a5      	strh	r5, [r4, #12]
 8008484:	e7cf      	b.n	8008426 <__smakebuf_r+0x18>
	...

08008488 <_fstat_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	2300      	movs	r3, #0
 800848c:	4d06      	ldr	r5, [pc, #24]	@ (80084a8 <_fstat_r+0x20>)
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	f7f9 fbf3 	bl	8001c80 <_fstat>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d102      	bne.n	80084a4 <_fstat_r+0x1c>
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	b103      	cbz	r3, 80084a4 <_fstat_r+0x1c>
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	bd38      	pop	{r3, r4, r5, pc}
 80084a6:	bf00      	nop
 80084a8:	200003e0 	.word	0x200003e0

080084ac <_isatty_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	2300      	movs	r3, #0
 80084b0:	4d05      	ldr	r5, [pc, #20]	@ (80084c8 <_isatty_r+0x1c>)
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	602b      	str	r3, [r5, #0]
 80084b8:	f7f9 fbf1 	bl	8001c9e <_isatty>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d102      	bne.n	80084c6 <_isatty_r+0x1a>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b103      	cbz	r3, 80084c6 <_isatty_r+0x1a>
 80084c4:	6023      	str	r3, [r4, #0]
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	200003e0 	.word	0x200003e0

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr
