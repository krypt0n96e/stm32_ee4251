
Model1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08008510  08008510  00009510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089b0  080089b0  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080089b0  080089b0  000099b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089b8  080089b8  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089b8  080089b8  000099b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089bc  080089bc  000099bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080089c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001d8  08008b98  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08008b98  0000a3ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf72  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b7  00000000  00000000  00017173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00019230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aca  00000000  00000000  0001a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b71  00000000  00000000  0001aaf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010004  00000000  00000000  00033663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca19  00000000  00000000  00043667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  000d00c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d50e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080084f4 	.word	0x080084f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080084f4 	.word	0x080084f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <I2C_LCD_ExpanderWrite+0x60>)
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	785a      	ldrb	r2, [r3, #1]
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	490f      	ldr	r1, [pc, #60]	@ (80010f4 <I2C_LCD_ExpanderWrite+0x64>)
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3304      	adds	r3, #4
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	490b      	ldr	r1, [pc, #44]	@ (80010f4 <I2C_LCD_ExpanderWrite+0x64>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3308      	adds	r3, #8
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b299      	uxth	r1, r3
 80010da:	f107 020f 	add.w	r2, r7, #15
 80010de:	2364      	movs	r3, #100	@ 0x64
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	f001 fb0a 	bl	80026fc <HAL_I2C_Master_Transmit>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001f4 	.word	0x200001f4
 80010f4:	08008548 	.word	0x08008548

080010f8 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	b2da      	uxtb	r2, r3
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffbb 	bl	8001090 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 800111a:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9b      	lsrs	r3, r3, #18
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	491e      	ldr	r1, [pc, #120]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 8001134:	fba1 1303 	umull	r1, r3, r1, r3
 8001138:	0c9b      	lsrs	r3, r3, #18
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	429a      	cmp	r2, r3
 800114c:	d8f8      	bhi.n	8001140 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	b2da      	uxtb	r2, r3
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff98 	bl	8001090 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8001160:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9b      	lsrs	r3, r3, #18
 8001172:	2232      	movs	r2, #50	@ 0x32
 8001174:	fb03 f202 	mul.w	r2, r3, r2
 8001178:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <I2C_LCD_EnPulse+0xb0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	490b      	ldr	r1, [pc, #44]	@ (80011ac <I2C_LCD_EnPulse+0xb4>)
 800117e:	fba1 1303 	umull	r1, r3, r1, r3
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	085b      	lsrs	r3, r3, #1
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <I2C_LCD_EnPulse+0xac>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f8      	bhi.n	800118a <I2C_LCD_EnPulse+0x92>
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010
 80011a8:	20000004 	.word	0x20000004
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	460a      	mov	r2, r1
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff62 	bl	8001090 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 80011cc:	79ba      	ldrb	r2, [r7, #6]
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff90 	bl	80010f8 <I2C_LCD_EnPulse>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	460b      	mov	r3, r1
 80011ec:	71bb      	strb	r3, [r7, #6]
 80011ee:	4613      	mov	r3, r2
 80011f0:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	797b      	ldrb	r3, [r7, #5]
 8001204:	4313      	orrs	r3, r2
 8001206:	b2da      	uxtb	r2, r3
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ffcf 	bl	80011b0 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8001212:	7bba      	ldrb	r2, [r7, #14]
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	4313      	orrs	r3, r2
 8001218:	b2da      	uxtb	r2, r3
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ffc6 	bl	80011b0 <I2C_LCD_Write4Bits>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	460a      	mov	r2, r1
 8001236:	71fb      	strb	r3, [r7, #7]
 8001238:	4613      	mov	r3, r2
 800123a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 800123c:	79b9      	ldrb	r1, [r7, #6]
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2200      	movs	r2, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ffcc 	bl	80011e0 <I2C_LCD_Send>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8001260:	79b9      	ldrb	r1, [r7, #6]
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2201      	movs	r2, #1
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffba 	bl	80011e0 <I2C_LCD_Send>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800127e:	bf00      	nop
 8001280:	f000 fdf0 	bl	8001e64 <HAL_GetTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b31      	cmp	r3, #49	@ 0x31
 8001288:	d9fa      	bls.n	8001280 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2130      	movs	r1, #48	@ 0x30
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffcc 	bl	800122c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
 8001298:	e01f      	b.n	80012da <I2C_LCD_Init+0x66>
 800129a:	4b4b      	ldr	r3, [pc, #300]	@ (80013c8 <I2C_LCD_Init+0x154>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4b4a      	ldr	r3, [pc, #296]	@ (80013cc <I2C_LCD_Init+0x158>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a4a      	ldr	r2, [pc, #296]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0c9b      	lsrs	r3, r3, #18
 80012ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012b0:	fb03 f202 	mul.w	r2, r3, r2
 80012b4:	4b45      	ldr	r3, [pc, #276]	@ (80013cc <I2C_LCD_Init+0x158>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4945      	ldr	r1, [pc, #276]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 80012ba:	fba1 1303 	umull	r1, r3, r1, r3
 80012be:	0c9b      	lsrs	r3, r3, #18
 80012c0:	085b      	lsrs	r3, r3, #1
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b40      	ldr	r3, [pc, #256]	@ (80013c8 <I2C_LCD_Init+0x154>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f8      	bhi.n	80012c6 <I2C_LCD_Init+0x52>
 80012d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d6:	3301      	adds	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d9dc      	bls.n	800129a <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2130      	movs	r1, #48	@ 0x30
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffa1 	bl	800122c <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	e01f      	b.n	8001330 <I2C_LCD_Init+0xbc>
 80012f0:	4b35      	ldr	r3, [pc, #212]	@ (80013c8 <I2C_LCD_Init+0x154>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <I2C_LCD_Init+0x158>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a35      	ldr	r2, [pc, #212]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001306:	fb03 f202 	mul.w	r2, r3, r2
 800130a:	4b30      	ldr	r3, [pc, #192]	@ (80013cc <I2C_LCD_Init+0x158>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4930      	ldr	r1, [pc, #192]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 8001310:	fba1 1303 	umull	r1, r3, r1, r3
 8001314:	0c9b      	lsrs	r3, r3, #18
 8001316:	085b      	lsrs	r3, r3, #1
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <I2C_LCD_Init+0x154>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	429a      	cmp	r2, r3
 8001328:	d8f8      	bhi.n	800131c <I2C_LCD_Init+0xa8>
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	3301      	adds	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	2b04      	cmp	r3, #4
 8001334:	d9dc      	bls.n	80012f0 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2130      	movs	r1, #48	@ 0x30
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff76 	bl	800122c <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8001340:	4b21      	ldr	r3, [pc, #132]	@ (80013c8 <I2C_LCD_Init+0x154>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <I2C_LCD_Init+0x158>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 800134c:	fba2 2303 	umull	r2, r3, r2, r3
 8001350:	0c9b      	lsrs	r3, r3, #18
 8001352:	2296      	movs	r2, #150	@ 0x96
 8001354:	fb03 f202 	mul.w	r2, r3, r2
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <I2C_LCD_Init+0x158>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	491c      	ldr	r1, [pc, #112]	@ (80013d0 <I2C_LCD_Init+0x15c>)
 800135e:	fba1 1303 	umull	r1, r3, r1, r3
 8001362:	0c9b      	lsrs	r3, r3, #18
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <I2C_LCD_Init+0x154>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f8      	bhi.n	800136a <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff55 	bl	800122c <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2128      	movs	r1, #40	@ 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff50 	bl	800122c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	210c      	movs	r1, #12
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff4b 	bl	800122c <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2106      	movs	r1, #6
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff46 	bl	800122c <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <I2C_LCD_Init+0x160>)
 80013a4:	2104      	movs	r1, #4
 80013a6:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <I2C_LCD_Init+0x160>)
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	2208      	movs	r2, #8
 80013b4:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f80d 	bl	80013d8 <I2C_LCD_Clear>
}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010
 80013cc:	20000004 	.word	0x20000004
 80013d0:	431bde83 	.word	0x431bde83
 80013d4:	200001f4 	.word	0x200001f4

080013d8 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2101      	movs	r1, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff20 	bl	800122c <I2C_LCD_Cmd>
    DELAY_MS(2);
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e01f      	b.n	8001432 <I2C_LCD_Clear+0x5a>
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <I2C_LCD_Clear+0x6c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	4b13      	ldr	r3, [pc, #76]	@ (8001448 <I2C_LCD_Clear+0x70>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a13      	ldr	r2, [pc, #76]	@ (800144c <I2C_LCD_Clear+0x74>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001408:	fb03 f202 	mul.w	r2, r3, r2
 800140c:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <I2C_LCD_Clear+0x70>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	490e      	ldr	r1, [pc, #56]	@ (800144c <I2C_LCD_Clear+0x74>)
 8001412:	fba1 1303 	umull	r1, r3, r1, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <I2C_LCD_Clear+0x6c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f8      	bhi.n	800141e <I2C_LCD_Clear+0x46>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d9dc      	bls.n	80013f2 <I2C_LCD_Clear+0x1a>
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010
 8001448:	20000004 	.word	0x20000004
 800144c:	431bde83 	.word	0x431bde83

08001450 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
 800145a:	460b      	mov	r3, r1
 800145c:	71bb      	strb	r3, [r7, #6]
 800145e:	4613      	mov	r3, r2
 8001460:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <I2C_LCD_SetCursor+0x7c>)
 8001464:	f107 0408 	add.w	r4, r7, #8
 8001468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	4917      	ldr	r1, [pc, #92]	@ (80014d0 <I2C_LCD_SetCursor+0x80>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	440b      	add	r3, r1
 800147c:	330a      	adds	r3, #10
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	797a      	ldrb	r2, [r7, #5]
 8001482:	429a      	cmp	r2, r3
 8001484:	d90a      	bls.n	800149c <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	4911      	ldr	r1, [pc, #68]	@ (80014d0 <I2C_LCD_SetCursor+0x80>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	330a      	adds	r3, #10
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	3318      	adds	r3, #24
 80014a2:	443b      	add	r3, r7
 80014a4:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff feb4 	bl	800122c <I2C_LCD_Cmd>
}
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	08008510 	.word	0x08008510
 80014d0:	08008548 	.word	0x08008548

080014d4 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 80014e0:	e008      	b.n	80014f4 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	603a      	str	r2, [r7, #0]
 80014e8:	781a      	ldrb	r2, [r3, #0]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff feae 	bl	8001250 <I2C_LCD_Data>
    while (*Str)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f2      	bne.n	80014e2 <I2C_LCD_WriteString+0xe>
    }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HCSR04_Init>:

// Hàm tạo xung tín hiệu
static void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

// Khởi tạo cảm biến HCSR04
void HCSR04_Init(TIM_HandleTypeDef *timer) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    htim = timer;  // Gán con trỏ timer
 8001510:	4a03      	ldr	r2, [pc, #12]	@ (8001520 <HCSR04_Init+0x18>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	200001f8 	.word	0x200001f8

08001524 <Delay_us>:

// Hàm delay micro giây
void Delay_us(uint16_t us) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
    htim->Instance->CNT = 0;
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <Delay_us+0x40>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(htim);
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <Delay_us+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 f881 	bl	8003644 <HAL_TIM_Base_Start>
    while (htim->Instance->CNT < us);
 8001542:	bf00      	nop
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <Delay_us+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	429a      	cmp	r2, r3
 8001550:	d3f8      	bcc.n	8001544 <Delay_us+0x20>
    HAL_TIM_Base_Stop(htim);
 8001552:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <Delay_us+0x40>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f002 f8be 	bl	80036d8 <HAL_TIM_Base_Stop>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200001f8 	.word	0x200001f8

08001568 <pulseGPIO>:

// Hàm tạo xung tín hiệu cho chân Trigger
static void pulseGPIO(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	2201      	movs	r2, #1
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 ff49 	bl	8002412 <HAL_GPIO_WritePin>
    Delay_us(10);  // Tạo xung 10 micro giây
 8001580:	200a      	movs	r0, #10
 8001582:	f7ff ffcf 	bl	8001524 <Delay_us>
    HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 ff40 	bl	8002412 <HAL_GPIO_WritePin>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HCSR04_Start>:

// Bắt đầu đo khoảng cách
void HCSR04_Start(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
    if (hc04_state == HCSR04_IDLE_STATE) {
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <HCSR04_Start+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d107      	bne.n	80015b8 <HCSR04_Start+0x1c>
        pulseGPIO(GPIOA, GPIO_PIN_8);  // Trigger trên chân PA8
 80015a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ac:	4804      	ldr	r0, [pc, #16]	@ (80015c0 <HCSR04_Start+0x24>)
 80015ae:	f7ff ffdb 	bl	8001568 <pulseGPIO>
        hc04_state = HCSR04_WAIT_RISING_STATE;
 80015b2:	4b02      	ldr	r3, [pc, #8]	@ (80015bc <HCSR04_Start+0x20>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]
    }
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200001f6 	.word	0x200001f6
 80015c0:	40010800 	.word	0x40010800

080015c4 <HCSR04_Handle>:

// Xử lý trạng thái hoàn thành đo
void HCSR04_Handle(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    if (hc04_state == HCSR04_COMPLETE_STATE) {
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HCSR04_Handle+0x40>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d117      	bne.n	8001600 <HCSR04_Handle+0x3c>
        hcsr04_distance = 0.017f * htim->Instance->CNT;  // Tính khoảng cách
 80015d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HCSR04_Handle+0x44>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fb7b 	bl	8000cd4 <__aeabi_ui2f>
 80015de:	4603      	mov	r3, r0
 80015e0:	490a      	ldr	r1, [pc, #40]	@ (800160c <HCSR04_Handle+0x48>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fbce 	bl	8000d84 <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HCSR04_Handle+0x4c>)
 80015ee:	601a      	str	r2, [r3, #0]
        HCSR04_Complete_Callback(hcsr04_distance);
 80015f0:	4b07      	ldr	r3, [pc, #28]	@ (8001610 <HCSR04_Handle+0x4c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f853 	bl	80016a0 <HCSR04_Complete_Callback>
        hc04_state = HCSR04_IDLE_STATE;
 80015fa:	4b02      	ldr	r3, [pc, #8]	@ (8001604 <HCSR04_Handle+0x40>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
    }
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200001f6 	.word	0x200001f6
 8001608:	200001f8 	.word	0x200001f8
 800160c:	3c8b4396 	.word	0x3c8b4396
 8001610:	20000000 	.word	0x20000000

08001614 <HAL_GPIO_EXTI_Callback>:

// Callback EXTI khi xảy ra ngắt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]
    switch (hc04_state) {
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x80>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d002      	beq.n	800162c <HAL_GPIO_EXTI_Callback+0x18>
 8001626:	2b02      	cmp	r3, #2
 8001628:	d01a      	beq.n	8001660 <HAL_GPIO_EXTI_Callback+0x4c>
                hc04_state = HCSR04_IDLE_STATE;
            }
            break;

        default:
            break;
 800162a:	e02e      	b.n	800168a <HAL_GPIO_EXTI_Callback+0x76>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 800162c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001630:	4819      	ldr	r0, [pc, #100]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x84>)
 8001632:	f000 fed7 	bl	80023e4 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10d      	bne.n	8001658 <HAL_GPIO_EXTI_Callback+0x44>
                htim->Instance->CNT = 0;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <HAL_GPIO_EXTI_Callback+0x88>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
                hc04_state = HCSRO4_WAIT_FALLING_STATE;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x80>)
 8001648:	2202      	movs	r2, #2
 800164a:	701a      	strb	r2, [r3, #0]
                HAL_TIM_Base_Start(htim);
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <HAL_GPIO_EXTI_Callback+0x88>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f001 fff7 	bl	8003644 <HAL_TIM_Base_Start>
            break;
 8001656:	e018      	b.n	800168a <HAL_GPIO_EXTI_Callback+0x76>
                hc04_state = HCSR04_IDLE_STATE;
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x80>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
            break;
 800165e:	e014      	b.n	800168a <HAL_GPIO_EXTI_Callback+0x76>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 8001660:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x84>)
 8001666:	f000 febd 	bl	80023e4 <HAL_GPIO_ReadPin>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d108      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x6e>
                HAL_TIM_Base_Stop(htim);
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_GPIO_EXTI_Callback+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f002 f82f 	bl	80036d8 <HAL_TIM_Base_Stop>
                hc04_state = HCSR04_COMPLETE_STATE;
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x80>)
 800167c:	2203      	movs	r2, #3
 800167e:	701a      	strb	r2, [r3, #0]
            break;
 8001680:	e002      	b.n	8001688 <HAL_GPIO_EXTI_Callback+0x74>
                hc04_state = HCSR04_IDLE_STATE;
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x80>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
            break;
 8001688:	bf00      	nop
    }
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200001f6 	.word	0x200001f6
 8001698:	40010c00 	.word	0x40010c00
 800169c:	200001f8 	.word	0x200001f8

080016a0 <HCSR04_Complete_Callback>:

// Callback khi đo xong khoảng cách
__weak void HCSR04_Complete_Callback(float measured_hcsr04_distance) {
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
    // Hàm này được định nghĩa lại trong user file
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b098      	sub	sp, #96	@ 0x60
 80016b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ba:	f000 fb7b 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016be:	f000 f88d 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c2:	f000 f94b 	bl	800195c <MX_GPIO_Init>
  MX_TIM1_Init();
 80016c6:	f000 f8f9 	bl	80018bc <MX_TIM1_Init>
  MX_I2C1_Init();
 80016ca:	f000 f8c9 	bl	8001860 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HCSR04_Init(&htim1);
 80016ce:	483a      	ldr	r0, [pc, #232]	@ (80017b8 <main+0x104>)
 80016d0:	f7ff ff1a 	bl	8001508 <HCSR04_Init>

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016d4:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <main+0x108>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a38      	ldr	r2, [pc, #224]	@ (80017bc <main+0x108>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016e0:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <main+0x10c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a36      	ldr	r2, [pc, #216]	@ (80017c0 <main+0x10c>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]

//  uint32_t t_get_hcsr04_hcsr04_distance=0;

  char buf[64];
  I2C_LCD_Init(MyI2C_LCD);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fdc1 	bl	8001274 <I2C_LCD_Init>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2000      	movs	r0, #0
 80016f8:	f7ff feaa 	bl	8001450 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "Start...");
 80016fc:	4931      	ldr	r1, [pc, #196]	@ (80017c4 <main+0x110>)
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fee8 	bl	80014d4 <I2C_LCD_WriteString>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Đo thời gian thực thi lệnh HCSR04_Start()
//	  uint32_t start = DWT->CYCCNT; // Lấy giá trị bắt đầu
	  if (hc04_state == HCSR04_IDLE_STATE) {
 8001704:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <main+0x114>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <main+0x5c>
	      HCSR04_Start();
 800170c:	f7ff ff46 	bl	800159c <HCSR04_Start>
	  }
	  HCSR04_Handle();
 8001710:	f7ff ff58 	bl	80015c4 <HCSR04_Handle>
//	  uint32_t elapsed_cycles = end - start;
//	  float time_us = (float)elapsed_cycles / (64000000  / 1000000); // thời gian tính bằng µs
//	  float time_ms = time_us / 1000;                            // thời gian tính bằng ms

	  // Hiển thị khoảng cách kèm đơn vị
	  uint32_t start = DWT->CYCCNT; // Lấy giá trị bắt đầu
 8001714:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <main+0x10c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	657b      	str	r3, [r7, #84]	@ 0x54
	  I2C_LCD_Clear(MyI2C_LCD);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fe5c 	bl	80013d8 <I2C_LCD_Clear>
	  snprintf(buf, 64, "Dis: %.2f cm", hcsr04_distance); // Thêm "cm"
 8001720:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <main+0x118>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fe7f 	bl	8000428 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	1d38      	adds	r0, r7, #4
 8001730:	e9cd 2300 	strd	r2, r3, [sp]
 8001734:	4a26      	ldr	r2, [pc, #152]	@ (80017d0 <main+0x11c>)
 8001736:	2140      	movs	r1, #64	@ 0x40
 8001738:	f003 fa7a 	bl	8004c30 <sniprintf>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fe85 	bl	8001450 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, buf);
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	4619      	mov	r1, r3
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fec2 	bl	80014d4 <I2C_LCD_WriteString>
	  uint32_t end = DWT->CYCCNT;   // Lấy giá trị kết thúc
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <main+0x10c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	653b      	str	r3, [r7, #80]	@ 0x50
	  uint32_t elapsed_cycles = end - start;
 8001756:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  float time_us = (float)elapsed_cycles / (64000000  / 1000000); // thời gian tính bằng µs
 800175e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001760:	f7ff fab8 	bl	8000cd4 <__aeabi_ui2f>
 8001764:	4603      	mov	r3, r0
 8001766:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fbbe 	bl	8000eec <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	64bb      	str	r3, [r7, #72]	@ 0x48
	  float time_ms = time_us / 1000;                            // thời gian tính bằng ms
 8001774:	4917      	ldr	r1, [pc, #92]	@ (80017d4 <main+0x120>)
 8001776:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001778:	f7ff fbb8 	bl	8000eec <__aeabi_fdiv>
 800177c:	4603      	mov	r3, r0
 800177e:	647b      	str	r3, [r7, #68]	@ 0x44


	  // Hiển thị thời gian thực thi lệnh
	  snprintf(buf, 64, "t: %.2f us", time_us); // Hiển thị µs
 8001780:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001782:	f7fe fe51 	bl	8000428 <__aeabi_f2d>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	1d38      	adds	r0, r7, #4
 800178c:	e9cd 2300 	strd	r2, r3, [sp]
 8001790:	4a11      	ldr	r2, [pc, #68]	@ (80017d8 <main+0x124>)
 8001792:	2140      	movs	r1, #64	@ 0x40
 8001794:	f003 fa4c 	bl	8004c30 <sniprintf>
	  // snprintf(buf, 64, "t: %.2f ms", time_ms); // Hiển thị ms nếu cần
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	2100      	movs	r1, #0
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fe57 	bl	8001450 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, buf);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fe94 	bl	80014d4 <I2C_LCD_WriteString>

	  HAL_Delay(300);
 80017ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80017b0:	f000 fb62 	bl	8001e78 <HAL_Delay>
  {
 80017b4:	e7a6      	b.n	8001704 <main+0x50>
 80017b6:	bf00      	nop
 80017b8:	20000250 	.word	0x20000250
 80017bc:	e000edf0 	.word	0xe000edf0
 80017c0:	e0001000 	.word	0xe0001000
 80017c4:	08008520 	.word	0x08008520
 80017c8:	200001f6 	.word	0x200001f6
 80017cc:	20000000 	.word	0x20000000
 80017d0:	0800852c 	.word	0x0800852c
 80017d4:	447a0000 	.word	0x447a0000
 80017d8:	0800853c 	.word	0x0800853c

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	@ 0x40
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	2228      	movs	r2, #40	@ 0x28
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fab7 	bl	8004d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001802:	2301      	movs	r3, #1
 8001804:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001806:	2310      	movs	r3, #16
 8001808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180a:	2302      	movs	r3, #2
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800180e:	2300      	movs	r3, #0
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001812:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4618      	mov	r0, r3
 800181e:	f001 fac5 	bl	8002dac <HAL_RCC_OscConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001828:	f000 f8fc 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182c:	230f      	movs	r3, #15
 800182e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001830:	2302      	movs	r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800183e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001842:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2102      	movs	r1, #2
 8001848:	4618      	mov	r0, r3
 800184a:	f001 fd31 	bl	80032b0 <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001854:	f000 f8e6 	bl	8001a24 <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3740      	adds	r7, #64	@ 0x40
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <MX_I2C1_Init+0x54>)
 8001868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800186c:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <MX_I2C1_Init+0x58>)
 800186e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800187e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001882:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_I2C1_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <MX_I2C1_Init+0x50>)
 800189e:	f000 fde9 	bl	8002474 <HAL_I2C_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018a8:	f000 f8bc 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200001fc 	.word	0x200001fc
 80018b4:	40005400 	.word	0x40005400
 80018b8:	000186a0 	.word	0x000186a0

080018bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <MX_TIM1_Init+0x98>)
 80018da:	4a1f      	ldr	r2, [pc, #124]	@ (8001958 <MX_TIM1_Init+0x9c>)
 80018dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80018de:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <MX_TIM1_Init+0x98>)
 80018e0:	223f      	movs	r2, #63	@ 0x3f
 80018e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001954 <MX_TIM1_Init+0x98>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <MX_TIM1_Init+0x98>)
 80018ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <MX_TIM1_Init+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <MX_TIM1_Init+0x98>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <MX_TIM1_Init+0x98>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001904:	4813      	ldr	r0, [pc, #76]	@ (8001954 <MX_TIM1_Init+0x98>)
 8001906:	f001 fe4d 	bl	80035a4 <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001910:	f000 f888 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <MX_TIM1_Init+0x98>)
 8001922:	f001 ffef 	bl	8003904 <HAL_TIM_ConfigClockSource>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800192c:	f000 f87a 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_TIM1_Init+0x98>)
 800193e:	f002 f9d9 	bl	8003cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001948:	f000 f86c 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000250 	.word	0x20000250
 8001958:	40012c00 	.word	0x40012c00

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a27      	ldr	r2, [pc, #156]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 8001976:	f043 0320 	orr.w	r3, r3, #32
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0320 	and.w	r3, r3, #32
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <MX_GPIO_Init+0xb8>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019be:	4816      	ldr	r0, [pc, #88]	@ (8001a18 <MX_GPIO_Init+0xbc>)
 80019c0:	f000 fd27 	bl	8002412 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019ca:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_GPIO_Init+0xc0>)
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4619      	mov	r1, r3
 80019d8:	4811      	ldr	r0, [pc, #68]	@ (8001a20 <MX_GPIO_Init+0xc4>)
 80019da:	f000 fb7f 	bl	80020dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	4808      	ldr	r0, [pc, #32]	@ (8001a18 <MX_GPIO_Init+0xbc>)
 80019f8:	f000 fb70 	bl	80020dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	2028      	movs	r0, #40	@ 0x28
 8001a02:	f000 fb34 	bl	800206e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a06:	2028      	movs	r0, #40	@ 0x28
 8001a08:	f000 fb4d 	bl	80020a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010800 	.word	0x40010800
 8001a1c:	10310000 	.word	0x10310000
 8001a20:	40010c00 	.word	0x40010c00

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <Error_Handler+0x8>

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a36:	4b15      	ldr	r3, [pc, #84]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4a14      	ldr	r2, [pc, #80]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6193      	str	r3, [r2, #24]
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_MspInit+0x5c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <HAL_MspInit+0x60>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <HAL_MspInit+0x60>)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000

08001a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a15      	ldr	r2, [pc, #84]	@ (8001b04 <HAL_I2C_MspInit+0x70>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d123      	bne.n	8001afc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <HAL_I2C_MspInit+0x74>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <HAL_I2C_MspInit+0x74>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_I2C_MspInit+0x74>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001acc:	23c0      	movs	r3, #192	@ 0xc0
 8001ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	@ (8001b0c <HAL_I2C_MspInit+0x78>)
 8001ae0:	f000 fafc 	bl	80020dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <HAL_I2C_MspInit+0x74>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	@ (8001b08 <HAL_I2C_MspInit+0x74>)
 8001aea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aee:	61d3      	str	r3, [r2, #28]
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <HAL_I2C_MspInit+0x74>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40005400 	.word	0x40005400
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010c00 	.word	0x40010c00

08001b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_TIM_Base_MspInit+0x44>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d113      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_TIM_Base_MspInit+0x48>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <HAL_TIM_Base_MspInit+0x48>)
 8001b28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_TIM_Base_MspInit+0x48>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	2019      	movs	r0, #25
 8001b40:	f000 fa95 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b44:	2019      	movs	r0, #25
 8001b46:	f000 faae 	bl	80020a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40021000 	.word	0x40021000

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <NMI_Handler+0x4>

08001b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <MemManage_Handler+0x4>

08001b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f948 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <TIM1_UP_IRQHandler+0x10>)
 8001bba:	f001 fdb3 	bl	8003724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000250 	.word	0x20000250

08001bc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001bcc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bd0:	f000 fc38 	bl	8002444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <_kill>:

int _kill(int pid, int sig)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf0:	f003 f908 	bl	8004e04 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2216      	movs	r2, #22
 8001bf8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_exit>:

void _exit (int status)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffe7 	bl	8001be6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <_exit+0x12>

08001c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e00a      	b.n	8001c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2e:	f3af 8000 	nop.w
 8001c32:	4601      	mov	r1, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf0      	blt.n	8001c2e <_read+0x12>
  }

  return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e009      	b.n	8001c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbf1      	blt.n	8001c68 <_write+0x12>
  }
  return len;
 8001c84:	687b      	ldr	r3, [r7, #4]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_close>:

int _close(int file)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <_isatty>:

int _isatty(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
	...

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f003 f870 	bl	8004e04 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20005000 	.word	0x20005000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20000298 	.word	0x20000298
 8001d58:	200003f0 	.word	0x200003f0

08001d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d68:	f7ff fff8 	bl	8001d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480b      	ldr	r0, [pc, #44]	@ (8001d9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d6e:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d70:	4a0c      	ldr	r2, [pc, #48]	@ (8001da4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d84:	4c09      	ldr	r4, [pc, #36]	@ (8001dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d92:	f003 f83d 	bl	8004e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d96:	f7ff fc8d 	bl	80016b4 <main>
  bx lr
 8001d9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001da4:	080089c0 	.word	0x080089c0
  ldr r2, =_sbss
 8001da8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001dac:	200003ec 	.word	0x200003ec

08001db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC1_2_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <HAL_Init+0x28>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_Init+0x28>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 f947 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dca:	200f      	movs	r0, #15
 8001dcc:	f000 f808 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd0:	f7ff fe2e 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40022000 	.word	0x40022000

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_InitTick+0x54>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_InitTick+0x58>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f95f 	bl	80020c2 <HAL_SYSTICK_Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00e      	b.n	8001e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b0f      	cmp	r3, #15
 8001e12:	d80a      	bhi.n	8001e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e14:	2200      	movs	r2, #0
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f000 f927 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e20:	4a06      	ldr	r2, [pc, #24]	@ (8001e3c <HAL_InitTick+0x5c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000004 	.word	0x20000004
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	20000008 	.word	0x20000008

08001e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_IncTick+0x1c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_IncTick+0x20>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a03      	ldr	r2, [pc, #12]	@ (8001e60 <HAL_IncTick+0x20>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	2000000c 	.word	0x2000000c
 8001e60:	2000029c 	.word	0x2000029c

08001e64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b02      	ldr	r3, [pc, #8]	@ (8001e74 <HAL_GetTick+0x10>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	2000029c 	.word	0x2000029c

08001e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fff0 	bl	8001e64 <HAL_GetTick>
 8001e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d005      	beq.n	8001e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_Delay+0x44>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9e:	bf00      	nop
 8001ea0:	f7ff ffe0 	bl	8001e64 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d8f7      	bhi.n	8001ea0 <HAL_Delay+0x28>
  {
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000000c 	.word	0x2000000c

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4906      	ldr	r1, [pc, #24]	@ (8001f58 <__NVIC_EnableIRQ+0x34>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	@ (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	@ (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	@ 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff90 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff2d 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff42 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff90 	bl	8001fb0 <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5f 	bl	8001f5c <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff35 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa2 	bl	8002014 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020dc:	b480      	push	{r7}
 80020de:	b08b      	sub	sp, #44	@ 0x2c
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ee:	e169      	b.n	80023c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020f0:	2201      	movs	r2, #1
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 8158 	bne.w	80023be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a9a      	ldr	r2, [pc, #616]	@ (800237c <HAL_GPIO_Init+0x2a0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d05e      	beq.n	80021d6 <HAL_GPIO_Init+0xfa>
 8002118:	4a98      	ldr	r2, [pc, #608]	@ (800237c <HAL_GPIO_Init+0x2a0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d875      	bhi.n	800220a <HAL_GPIO_Init+0x12e>
 800211e:	4a98      	ldr	r2, [pc, #608]	@ (8002380 <HAL_GPIO_Init+0x2a4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d058      	beq.n	80021d6 <HAL_GPIO_Init+0xfa>
 8002124:	4a96      	ldr	r2, [pc, #600]	@ (8002380 <HAL_GPIO_Init+0x2a4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d86f      	bhi.n	800220a <HAL_GPIO_Init+0x12e>
 800212a:	4a96      	ldr	r2, [pc, #600]	@ (8002384 <HAL_GPIO_Init+0x2a8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d052      	beq.n	80021d6 <HAL_GPIO_Init+0xfa>
 8002130:	4a94      	ldr	r2, [pc, #592]	@ (8002384 <HAL_GPIO_Init+0x2a8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d869      	bhi.n	800220a <HAL_GPIO_Init+0x12e>
 8002136:	4a94      	ldr	r2, [pc, #592]	@ (8002388 <HAL_GPIO_Init+0x2ac>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d04c      	beq.n	80021d6 <HAL_GPIO_Init+0xfa>
 800213c:	4a92      	ldr	r2, [pc, #584]	@ (8002388 <HAL_GPIO_Init+0x2ac>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d863      	bhi.n	800220a <HAL_GPIO_Init+0x12e>
 8002142:	4a92      	ldr	r2, [pc, #584]	@ (800238c <HAL_GPIO_Init+0x2b0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d046      	beq.n	80021d6 <HAL_GPIO_Init+0xfa>
 8002148:	4a90      	ldr	r2, [pc, #576]	@ (800238c <HAL_GPIO_Init+0x2b0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d85d      	bhi.n	800220a <HAL_GPIO_Init+0x12e>
 800214e:	2b12      	cmp	r3, #18
 8002150:	d82a      	bhi.n	80021a8 <HAL_GPIO_Init+0xcc>
 8002152:	2b12      	cmp	r3, #18
 8002154:	d859      	bhi.n	800220a <HAL_GPIO_Init+0x12e>
 8002156:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <HAL_GPIO_Init+0x80>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	080021d7 	.word	0x080021d7
 8002160:	080021b1 	.word	0x080021b1
 8002164:	080021c3 	.word	0x080021c3
 8002168:	08002205 	.word	0x08002205
 800216c:	0800220b 	.word	0x0800220b
 8002170:	0800220b 	.word	0x0800220b
 8002174:	0800220b 	.word	0x0800220b
 8002178:	0800220b 	.word	0x0800220b
 800217c:	0800220b 	.word	0x0800220b
 8002180:	0800220b 	.word	0x0800220b
 8002184:	0800220b 	.word	0x0800220b
 8002188:	0800220b 	.word	0x0800220b
 800218c:	0800220b 	.word	0x0800220b
 8002190:	0800220b 	.word	0x0800220b
 8002194:	0800220b 	.word	0x0800220b
 8002198:	0800220b 	.word	0x0800220b
 800219c:	0800220b 	.word	0x0800220b
 80021a0:	080021b9 	.word	0x080021b9
 80021a4:	080021cd 	.word	0x080021cd
 80021a8:	4a79      	ldr	r2, [pc, #484]	@ (8002390 <HAL_GPIO_Init+0x2b4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ae:	e02c      	b.n	800220a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	623b      	str	r3, [r7, #32]
          break;
 80021b6:	e029      	b.n	800220c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	3304      	adds	r3, #4
 80021be:	623b      	str	r3, [r7, #32]
          break;
 80021c0:	e024      	b.n	800220c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	3308      	adds	r3, #8
 80021c8:	623b      	str	r3, [r7, #32]
          break;
 80021ca:	e01f      	b.n	800220c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	330c      	adds	r3, #12
 80021d2:	623b      	str	r3, [r7, #32]
          break;
 80021d4:	e01a      	b.n	800220c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021de:	2304      	movs	r3, #4
 80021e0:	623b      	str	r3, [r7, #32]
          break;
 80021e2:	e013      	b.n	800220c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ec:	2308      	movs	r3, #8
 80021ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	611a      	str	r2, [r3, #16]
          break;
 80021f6:	e009      	b.n	800220c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f8:	2308      	movs	r3, #8
 80021fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	615a      	str	r2, [r3, #20]
          break;
 8002202:	e003      	b.n	800220c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
          break;
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x130>
          break;
 800220a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2bff      	cmp	r3, #255	@ 0xff
 8002210:	d801      	bhi.n	8002216 <HAL_GPIO_Init+0x13a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	e001      	b.n	800221a <HAL_GPIO_Init+0x13e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3304      	adds	r3, #4
 800221a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2bff      	cmp	r3, #255	@ 0xff
 8002220:	d802      	bhi.n	8002228 <HAL_GPIO_Init+0x14c>
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	e002      	b.n	800222e <HAL_GPIO_Init+0x152>
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	3b08      	subs	r3, #8
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	210f      	movs	r1, #15
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	401a      	ands	r2, r3
 8002240:	6a39      	ldr	r1, [r7, #32]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	431a      	orrs	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80b1 	beq.w	80023be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800225c:	4b4d      	ldr	r3, [pc, #308]	@ (8002394 <HAL_GPIO_Init+0x2b8>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a4c      	ldr	r2, [pc, #304]	@ (8002394 <HAL_GPIO_Init+0x2b8>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b4a      	ldr	r3, [pc, #296]	@ (8002394 <HAL_GPIO_Init+0x2b8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002274:	4a48      	ldr	r2, [pc, #288]	@ (8002398 <HAL_GPIO_Init+0x2bc>)
 8002276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002280:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a40      	ldr	r2, [pc, #256]	@ (800239c <HAL_GPIO_Init+0x2c0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d013      	beq.n	80022c8 <HAL_GPIO_Init+0x1ec>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3f      	ldr	r2, [pc, #252]	@ (80023a0 <HAL_GPIO_Init+0x2c4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00d      	beq.n	80022c4 <HAL_GPIO_Init+0x1e8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a3e      	ldr	r2, [pc, #248]	@ (80023a4 <HAL_GPIO_Init+0x2c8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <HAL_GPIO_Init+0x1e4>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3d      	ldr	r2, [pc, #244]	@ (80023a8 <HAL_GPIO_Init+0x2cc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_GPIO_Init+0x1e0>
 80022b8:	2303      	movs	r3, #3
 80022ba:	e006      	b.n	80022ca <HAL_GPIO_Init+0x1ee>
 80022bc:	2304      	movs	r3, #4
 80022be:	e004      	b.n	80022ca <HAL_GPIO_Init+0x1ee>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e002      	b.n	80022ca <HAL_GPIO_Init+0x1ee>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_GPIO_Init+0x1ee>
 80022c8:	2300      	movs	r3, #0
 80022ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022da:	492f      	ldr	r1, [pc, #188]	@ (8002398 <HAL_GPIO_Init+0x2bc>)
 80022dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f4:	4b2d      	ldr	r3, [pc, #180]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	492c      	ldr	r1, [pc, #176]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002302:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	43db      	mvns	r3, r3
 800230a:	4928      	ldr	r1, [pc, #160]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 800230c:	4013      	ands	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800231c:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4922      	ldr	r1, [pc, #136]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
 8002328:	e006      	b.n	8002338 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	43db      	mvns	r3, r3
 8002332:	491e      	ldr	r1, [pc, #120]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 8002334:	4013      	ands	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4918      	ldr	r1, [pc, #96]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	43db      	mvns	r3, r3
 800235a:	4914      	ldr	r1, [pc, #80]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 800235c:	4013      	ands	r3, r2
 800235e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d021      	beq.n	80023b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800236c:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	490e      	ldr	r1, [pc, #56]	@ (80023ac <HAL_GPIO_Init+0x2d0>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	600b      	str	r3, [r1, #0]
 8002378:	e021      	b.n	80023be <HAL_GPIO_Init+0x2e2>
 800237a:	bf00      	nop
 800237c:	10320000 	.word	0x10320000
 8002380:	10310000 	.word	0x10310000
 8002384:	10220000 	.word	0x10220000
 8002388:	10210000 	.word	0x10210000
 800238c:	10120000 	.word	0x10120000
 8002390:	10110000 	.word	0x10110000
 8002394:	40021000 	.word	0x40021000
 8002398:	40010000 	.word	0x40010000
 800239c:	40010800 	.word	0x40010800
 80023a0:	40010c00 	.word	0x40010c00
 80023a4:	40011000 	.word	0x40011000
 80023a8:	40011400 	.word	0x40011400
 80023ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_GPIO_Init+0x304>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	4909      	ldr	r1, [pc, #36]	@ (80023e0 <HAL_GPIO_Init+0x304>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f47f ae8e 	bne.w	80020f0 <HAL_GPIO_Init+0x14>
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	372c      	adds	r7, #44	@ 0x2c
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40010400 	.word	0x40010400

080023e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
 8002400:	e001      	b.n	8002406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]
 800241e:	4613      	mov	r3, r2
 8002420:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002422:	787b      	ldrb	r3, [r7, #1]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002428:	887a      	ldrh	r2, [r7, #2]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800242e:	e003      	b.n	8002438 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	041a      	lsls	r2, r3, #16
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	611a      	str	r2, [r3, #16]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
	...

08002444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800244e:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f8d6 	bl	8001614 <HAL_GPIO_EXTI_Callback>
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_I2C_Init>:
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Init+0x12>
 8002482:	2301      	movs	r3, #1
 8002484:	e12b      	b.n	80026de <HAL_I2C_Init+0x26a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2C_Init+0x2c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fafa 	bl	8001a94 <HAL_I2C_MspInit>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	@ 0x24
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f001 f832 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a81      	ldr	r2, [pc, #516]	@ (80026e8 <HAL_I2C_Init+0x274>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d807      	bhi.n	80024f8 <HAL_I2C_Init+0x84>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a80      	ldr	r2, [pc, #512]	@ (80026ec <HAL_I2C_Init+0x278>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e006      	b.n	8002506 <HAL_I2C_Init+0x92>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a7d      	ldr	r2, [pc, #500]	@ (80026f0 <HAL_I2C_Init+0x27c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x9a>
 800250a:	2301      	movs	r3, #1
 800250c:	e0e7      	b.n	80026de <HAL_I2C_Init+0x26a>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a78      	ldr	r2, [pc, #480]	@ (80026f4 <HAL_I2C_Init+0x280>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a6a      	ldr	r2, [pc, #424]	@ (80026e8 <HAL_I2C_Init+0x274>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d802      	bhi.n	8002548 <HAL_I2C_Init+0xd4>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3301      	adds	r3, #1
 8002546:	e009      	b.n	800255c <HAL_I2C_Init+0xe8>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a69      	ldr	r2, [pc, #420]	@ (80026f8 <HAL_I2C_Init+0x284>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6213      	str	r3, [r2, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800256e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	495c      	ldr	r1, [pc, #368]	@ (80026e8 <HAL_I2C_Init+0x274>)
 8002578:	428b      	cmp	r3, r1
 800257a:	d819      	bhi.n	80025b0 <HAL_I2C_Init+0x13c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fbb1 f3f3 	udiv	r3, r1, r3
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002590:	400b      	ands	r3, r1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_I2C_Init+0x138>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e59      	subs	r1, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	e051      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e04f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <HAL_I2C_Init+0x168>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e012      	b.n	8002602 <HAL_I2C_Init+0x18e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	0099      	lsls	r1, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x196>
 8002606:	2301      	movs	r3, #1
 8002608:	e022      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10e      	bne.n	8002630 <HAL_I2C_Init+0x1bc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e58      	subs	r0, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	440b      	add	r3, r1
 8002620:	fbb0 f3f3 	udiv	r3, r0, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800262e:	e00f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	0099      	lsls	r1, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	6809      	ldr	r1, [r1, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	61cb      	str	r3, [r1, #28]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800267e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6911      	ldr	r1, [r2, #16]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6093      	str	r3, [r2, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026dc:	2300      	movs	r3, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	000186a0 	.word	0x000186a0
 80026ec:	001e847f 	.word	0x001e847f
 80026f0:	003d08ff 	.word	0x003d08ff
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_I2C_Master_Transmit>:
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	461a      	mov	r2, r3
 8002708:	460b      	mov	r3, r1
 800270a:	817b      	strh	r3, [r7, #10]
 800270c:	4613      	mov	r3, r2
 800270e:	813b      	strh	r3, [r7, #8]
 8002710:	f7ff fba8 	bl	8001e64 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b20      	cmp	r3, #32
 8002720:	f040 80e0 	bne.w	80028e4 <HAL_I2C_Master_Transmit+0x1e8>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2319      	movs	r3, #25
 800272a:	2201      	movs	r2, #1
 800272c:	4970      	ldr	r1, [pc, #448]	@ (80028f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f964 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_I2C_Master_Transmit+0x42>
 800273a:	2302      	movs	r3, #2
 800273c:	e0d3      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_I2C_Master_Transmit+0x50>
 8002748:	2302      	movs	r3, #2
 800274a:	e0cc      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d007      	beq.n	8002772 <HAL_I2C_Master_Transmit+0x76>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2221      	movs	r2, #33	@ 0x21
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2210      	movs	r2, #16
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	@ 0x40
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	893a      	ldrh	r2, [r7, #8]
 80027a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a50      	ldr	r2, [pc, #320]	@ (80028f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80027b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027b4:	8979      	ldrh	r1, [r7, #10]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f89c 	bl	80028f8 <I2C_MasterRequestWrite>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Transmit+0xce>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e08d      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	e066      	b.n	80028b0 <HAL_I2C_Master_Transmit+0x1b4>
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6a39      	ldr	r1, [r7, #32]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa22 	bl	8002c30 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <HAL_I2C_Master_Transmit+0x112>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d107      	bne.n	800280a <HAL_I2C_Master_Transmit+0x10e>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	e06b      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	781a      	ldrb	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_I2C_Master_Transmit+0x188>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d017      	beq.n	8002884 <HAL_I2C_Master_Transmit+0x188>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	6a39      	ldr	r1, [r7, #32]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fa19 	bl	8002cc0 <I2C_WaitOnBTFFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <HAL_I2C_Master_Transmit+0x1b4>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002898:	2b04      	cmp	r3, #4
 800289a:	d107      	bne.n	80028ac <HAL_I2C_Master_Transmit+0x1b0>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	2301      	movs	r3, #1
 80028ae:	e01a      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d194      	bne.n	80027e2 <HAL_I2C_Master_Transmit+0xe6>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <HAL_I2C_Master_Transmit+0x1ea>
 80028e4:	2302      	movs	r3, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	00100002 	.word	0x00100002
 80028f4:	ffff0000 	.word	0xffff0000

080028f8 <I2C_MasterRequestWrite>:
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	817b      	strh	r3, [r7, #10]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d006      	beq.n	8002922 <I2C_MasterRequestWrite+0x2a>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d003      	beq.n	8002922 <I2C_MasterRequestWrite+0x2a>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002920:	d108      	bne.n	8002934 <I2C_MasterRequestWrite+0x3c>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	e00b      	b.n	800294c <I2C_MasterRequestWrite+0x54>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	2b12      	cmp	r3, #18
 800293a:	d107      	bne.n	800294c <I2C_MasterRequestWrite+0x54>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f84f 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <I2C_MasterRequestWrite+0x88>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002972:	d103      	bne.n	800297c <I2C_MasterRequestWrite+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40
 800297c:	2303      	movs	r3, #3
 800297e:	e035      	b.n	80029ec <I2C_MasterRequestWrite+0xf4>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002988:	d108      	bne.n	800299c <I2C_MasterRequestWrite+0xa4>
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002998:	611a      	str	r2, [r3, #16]
 800299a:	e01b      	b.n	80029d4 <I2C_MasterRequestWrite+0xdc>
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	11db      	asrs	r3, r3, #7
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0306 	and.w	r3, r3, #6
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f063 030f 	orn	r3, r3, #15
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	611a      	str	r2, [r3, #16]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	490e      	ldr	r1, [pc, #56]	@ (80029f4 <I2C_MasterRequestWrite+0xfc>)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f898 	bl	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <I2C_MasterRequestWrite+0xd2>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e010      	b.n	80029ec <I2C_MasterRequestWrite+0xf4>
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4907      	ldr	r1, [pc, #28]	@ (80029f8 <I2C_MasterRequestWrite+0x100>)
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f888 	bl	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_MasterRequestWrite+0xf2>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <I2C_MasterRequestWrite+0xf4>
 80029ea:	2300      	movs	r3, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	00010008 	.word	0x00010008
 80029f8:	00010002 	.word	0x00010002

080029fc <I2C_WaitOnFlagUntilTimeout>:
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	71fb      	strb	r3, [r7, #7]
 8002a0c:	e048      	b.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d044      	beq.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002a16:	f7ff fa25 	bl	8001e64 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d139      	bne.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10d      	bne.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4013      	ands	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	e00c      	b.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d116      	bne.n	8002aa0 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e023      	b.n	8002ae8 <I2C_WaitOnFlagUntilTimeout+0xec>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d10d      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	43da      	mvns	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	e00c      	b.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	43da      	mvns	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d093      	beq.n	8002a0e <I2C_WaitOnFlagUntilTimeout+0x12>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	e071      	b.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0e:	d123      	bne.n	8002b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b28:	615a      	str	r2, [r3, #20]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	f043 0204 	orr.w	r2, r3, #4
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002b54:	2301      	movs	r3, #1
 8002b56:	e067      	b.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5e:	d041      	beq.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002b60:	f7ff f980 	bl	8001e64 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d302      	bcc.n	8002b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d136      	bne.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10c      	bne.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e00b      	b.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf14      	ite	ne
 8002bac:	2301      	movne	r3, #1
 8002bae:	2300      	moveq	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002be0:	2301      	movs	r3, #1
 8002be2:	e021      	b.n	8002c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0c1b      	lsrs	r3, r3, #16
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10c      	bne.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e00b      	b.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf14      	ite	ne
 8002c1a:	2301      	movne	r3, #1
 8002c1c:	2300      	moveq	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f47f af6d 	bne.w	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8002c26:	2300      	movs	r3, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2C_WaitOnTXEFlagUntilTimeout>:
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	e034      	b.n	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f886 	bl	8002d50 <I2C_IsAcknowledgeFailed>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e034      	b.n	8002cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d028      	beq.n	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002c56:	f7ff f905 	bl	8001e64 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11d      	bne.n	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b80      	cmp	r3, #128	@ 0x80
 8002c78:	d016      	beq.n	8002ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e007      	b.n	8002cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b80      	cmp	r3, #128	@ 0x80
 8002cb4:	d1c3      	bne.n	8002c3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_WaitOnBTFFlagUntilTimeout>:
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	e034      	b.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f83e 	bl	8002d50 <I2C_IsAcknowledgeFailed>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e034      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d028      	beq.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002ce6:	f7ff f8bd 	bl	8001e64 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d11d      	bne.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d016      	beq.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d1c3      	bne.n	8002cce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8002d46:	2300      	movs	r3, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_IsAcknowledgeFailed>:
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d66:	d11b      	bne.n	8002da0 <I2C_IsAcknowledgeFailed+0x50>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d70:	615a      	str	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <I2C_IsAcknowledgeFailed+0x52>
 8002da0:	2300      	movs	r3, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e272      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8087 	beq.w	8002eda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dcc:	4b92      	ldr	r3, [pc, #584]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d00c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dd8:	4b8f      	ldr	r3, [pc, #572]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d112      	bne.n	8002e0a <HAL_RCC_OscConfig+0x5e>
 8002de4:	4b8c      	ldr	r3, [pc, #560]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df0:	d10b      	bne.n	8002e0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df2:	4b89      	ldr	r3, [pc, #548]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d06c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x12c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d168      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e24c      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x76>
 8002e14:	4b80      	ldr	r3, [pc, #512]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a7f      	ldr	r2, [pc, #508]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e02e      	b.n	8002e80 <HAL_RCC_OscConfig+0xd4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x98>
 8002e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7a      	ldr	r2, [pc, #488]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b78      	ldr	r3, [pc, #480]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a77      	ldr	r2, [pc, #476]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e01d      	b.n	8002e80 <HAL_RCC_OscConfig+0xd4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0xbc>
 8002e4e:	4b72      	ldr	r3, [pc, #456]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a71      	ldr	r2, [pc, #452]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6e      	ldr	r2, [pc, #440]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0xd4>
 8002e68:	4b6b      	ldr	r3, [pc, #428]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a6a      	ldr	r2, [pc, #424]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b68      	ldr	r3, [pc, #416]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a67      	ldr	r2, [pc, #412]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe ffec 	bl	8001e64 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe ffe8 	bl	8001e64 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e200      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0xe4>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe ffd8 	bl	8001e64 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe ffd4 	bl	8001e64 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1ec      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	4b53      	ldr	r3, [pc, #332]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x10c>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d063      	beq.n	8002fae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ef2:	4b49      	ldr	r3, [pc, #292]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d11c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x18c>
 8002efe:	4b46      	ldr	r3, [pc, #280]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_RCC_OscConfig+0x176>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e1c0      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b3d      	ldr	r3, [pc, #244]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4939      	ldr	r1, [pc, #228]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	e03a      	b.n	8002fae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	4b36      	ldr	r3, [pc, #216]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe ff8d 	bl	8001e64 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe ff89 	bl	8001e64 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1a1      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4927      	ldr	r1, [pc, #156]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b26      	ldr	r3, [pc, #152]	@ (800301c <HAL_RCC_OscConfig+0x270>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe ff6c 	bl	8001e64 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f90:	f7fe ff68 	bl	8001e64 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e180      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d03a      	beq.n	8003030 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d019      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc2:	4b17      	ldr	r3, [pc, #92]	@ (8003020 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc8:	f7fe ff4c 	bl	8001e64 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe ff48 	bl	8001e64 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e160      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f000 faba 	bl	8003568 <RCC_Delay>
 8002ff4:	e01c      	b.n	8003030 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe ff32 	bl	8001e64 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003002:	e00f      	b.n	8003024 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003004:	f7fe ff2e 	bl	8001e64 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d908      	bls.n	8003024 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e146      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	42420000 	.word	0x42420000
 8003020:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	4b92      	ldr	r3, [pc, #584]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e9      	bne.n	8003004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80a6 	beq.w	800318a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003042:	4b8b      	ldr	r3, [pc, #556]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10d      	bne.n	800306a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b88      	ldr	r3, [pc, #544]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a87      	ldr	r2, [pc, #540]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003058:	61d3      	str	r3, [r2, #28]
 800305a:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003066:	2301      	movs	r3, #1
 8003068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306a:	4b82      	ldr	r3, [pc, #520]	@ (8003274 <HAL_RCC_OscConfig+0x4c8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d118      	bne.n	80030a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003076:	4b7f      	ldr	r3, [pc, #508]	@ (8003274 <HAL_RCC_OscConfig+0x4c8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a7e      	ldr	r2, [pc, #504]	@ (8003274 <HAL_RCC_OscConfig+0x4c8>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003082:	f7fe feef 	bl	8001e64 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308a:	f7fe feeb 	bl	8001e64 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b64      	cmp	r3, #100	@ 0x64
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e103      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309c:	4b75      	ldr	r3, [pc, #468]	@ (8003274 <HAL_RCC_OscConfig+0x4c8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x312>
 80030b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	e02d      	b.n	800311a <HAL_RCC_OscConfig+0x36e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x334>
 80030c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4a69      	ldr	r2, [pc, #420]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6213      	str	r3, [r2, #32]
 80030d2:	4b67      	ldr	r3, [pc, #412]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a66      	ldr	r2, [pc, #408]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	6213      	str	r3, [r2, #32]
 80030de:	e01c      	b.n	800311a <HAL_RCC_OscConfig+0x36e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b05      	cmp	r3, #5
 80030e6:	d10c      	bne.n	8003102 <HAL_RCC_OscConfig+0x356>
 80030e8:	4b61      	ldr	r3, [pc, #388]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a60      	ldr	r2, [pc, #384]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	f043 0304 	orr.w	r3, r3, #4
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a5d      	ldr	r2, [pc, #372]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	e00b      	b.n	800311a <HAL_RCC_OscConfig+0x36e>
 8003102:	4b5b      	ldr	r3, [pc, #364]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a5a      	ldr	r2, [pc, #360]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	4b58      	ldr	r3, [pc, #352]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a57      	ldr	r2, [pc, #348]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d015      	beq.n	800314e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7fe fe9f 	bl	8001e64 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe fe9b 	bl	8001e64 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003138:	4293      	cmp	r3, r2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0b1      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	4b4b      	ldr	r3, [pc, #300]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ee      	beq.n	800312a <HAL_RCC_OscConfig+0x37e>
 800314c:	e014      	b.n	8003178 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7fe fe89 	bl	8001e64 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fe fe85 	bl	8001e64 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e09b      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	4b40      	ldr	r3, [pc, #256]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1ee      	bne.n	8003156 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4b3c      	ldr	r3, [pc, #240]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4a3b      	ldr	r2, [pc, #236]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003188:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8087 	beq.w	80032a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d061      	beq.n	8003264 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d146      	bne.n	8003236 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	4b33      	ldr	r3, [pc, #204]	@ (8003278 <HAL_RCC_OscConfig+0x4cc>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe fe59 	bl	8001e64 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fe55 	bl	8001e64 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e06d      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	4b29      	ldr	r3, [pc, #164]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031de:	4b24      	ldr	r3, [pc, #144]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4921      	ldr	r1, [pc, #132]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a19      	ldr	r1, [r3, #32]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	430b      	orrs	r3, r1
 8003202:	491b      	ldr	r1, [pc, #108]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003208:	4b1b      	ldr	r3, [pc, #108]	@ (8003278 <HAL_RCC_OscConfig+0x4cc>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe fe29 	bl	8001e64 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fe25 	bl	8001e64 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e03d      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003228:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x46a>
 8003234:	e035      	b.n	80032a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <HAL_RCC_OscConfig+0x4cc>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323c:	f7fe fe12 	bl	8001e64 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe fe0e 	bl	8001e64 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e026      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x498>
 8003262:	e01e      	b.n	80032a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e019      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
 8003270:	40021000 	.word	0x40021000
 8003274:	40007000 	.word	0x40007000
 8003278:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_OscConfig+0x500>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	429a      	cmp	r2, r3
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0d0      	b.n	8003466 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d910      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b67      	ldr	r3, [pc, #412]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4965      	ldr	r1, [pc, #404]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b63      	ldr	r3, [pc, #396]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e0b8      	b.n	8003466 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d020      	beq.n	8003342 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800330c:	4b59      	ldr	r3, [pc, #356]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a58      	ldr	r2, [pc, #352]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003316:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003324:	4b53      	ldr	r3, [pc, #332]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a52      	ldr	r2, [pc, #328]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800332e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	4b50      	ldr	r3, [pc, #320]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	494d      	ldr	r1, [pc, #308]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d040      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b47      	ldr	r3, [pc, #284]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d115      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07f      	b.n	8003466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d107      	bne.n	800337e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336e:	4b41      	ldr	r3, [pc, #260]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e073      	b.n	8003466 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337e:	4b3d      	ldr	r3, [pc, #244]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06b      	b.n	8003466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f023 0203 	bic.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	4936      	ldr	r1, [pc, #216]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a0:	f7fe fd60 	bl	8001e64 <HAL_GetTick>
 80033a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	e00a      	b.n	80033be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7fe fd5c 	bl	8001e64 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e053      	b.n	8003466 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	4b2d      	ldr	r3, [pc, #180]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 020c 	and.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d1eb      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d0:	4b27      	ldr	r3, [pc, #156]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d210      	bcs.n	8003400 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b24      	ldr	r3, [pc, #144]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 0207 	bic.w	r2, r3, #7
 80033e6:	4922      	ldr	r1, [pc, #136]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ee:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e032      	b.n	8003466 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340c:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4916      	ldr	r1, [pc, #88]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800342a:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	490e      	ldr	r1, [pc, #56]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343e:	f000 f821 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003442:	4602      	mov	r2, r0
 8003444:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	490a      	ldr	r1, [pc, #40]	@ (8003478 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	5ccb      	ldrb	r3, [r1, r3]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	4a09      	ldr	r2, [pc, #36]	@ (800347c <HAL_RCC_ClockConfig+0x1cc>)
 8003458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800345a:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <HAL_RCC_ClockConfig+0x1d0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fcbe 	bl	8001de0 <HAL_InitTick>

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40022000 	.word	0x40022000
 8003474:	40021000 	.word	0x40021000
 8003478:	08008554 	.word	0x08008554
 800347c:	20000004 	.word	0x20000004
 8003480:	20000008 	.word	0x20000008

08003484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800349e:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x94>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x30>
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x36>
 80034b2:	e027      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034b4:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCC_GetSysClockFreq+0x98>)
 80034b6:	613b      	str	r3, [r7, #16]
      break;
 80034b8:	e027      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	0c9b      	lsrs	r3, r3, #18
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034c4:	5cd3      	ldrb	r3, [r2, r3]
 80034c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034d2:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x94>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0c5b      	lsrs	r3, r3, #17
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	4a11      	ldr	r2, [pc, #68]	@ (8003524 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a0d      	ldr	r2, [pc, #52]	@ (800351c <HAL_RCC_GetSysClockFreq+0x98>)
 80034e6:	fb03 f202 	mul.w	r2, r3, r2
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	e004      	b.n	80034fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	613b      	str	r3, [r7, #16]
      break;
 8003502:	e002      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <HAL_RCC_GetSysClockFreq+0x98>)
 8003506:	613b      	str	r3, [r7, #16]
      break;
 8003508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350a:	693b      	ldr	r3, [r7, #16]
}
 800350c:	4618      	mov	r0, r3
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	007a1200 	.word	0x007a1200
 8003520:	0800856c 	.word	0x0800856c
 8003524:	0800857c 	.word	0x0800857c
 8003528:	003d0900 	.word	0x003d0900

0800352c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003530:	4b02      	ldr	r3, [pc, #8]	@ (800353c <HAL_RCC_GetHCLKFreq+0x10>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	20000004 	.word	0x20000004

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003544:	f7ff fff2 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	@ (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	08008564 	.word	0x08008564

08003568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003570:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <RCC_Delay+0x34>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0a      	ldr	r2, [pc, #40]	@ (80035a0 <RCC_Delay+0x38>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0a5b      	lsrs	r3, r3, #9
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	fb02 f303 	mul.w	r3, r2, r3
 8003582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003584:	bf00      	nop
  }
  while (Delay --);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	60fa      	str	r2, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f9      	bne.n	8003584 <RCC_Delay+0x1c>
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	20000004 	.word	0x20000004
 80035a0:	10624dd3 	.word	0x10624dd3

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e041      	b.n	800363a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe faa0 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 fa82 	bl	8003aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e032      	b.n	80036c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a18      	ldr	r2, [pc, #96]	@ (80036cc <HAL_TIM_Base_Start+0x88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_TIM_Base_Start+0x48>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d009      	beq.n	800368c <HAL_TIM_Base_Start+0x48>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a14      	ldr	r2, [pc, #80]	@ (80036d0 <HAL_TIM_Base_Start+0x8c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_TIM_Base_Start+0x48>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a13      	ldr	r2, [pc, #76]	@ (80036d4 <HAL_TIM_Base_Start+0x90>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d111      	bne.n	80036b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b06      	cmp	r3, #6
 800369c:	d010      	beq.n	80036c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ae:	e007      	b.n	80036c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800

080036d8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a1a      	ldr	r2, [r3, #32]
 80036e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10f      	bne.n	8003710 <HAL_TIM_Base_Stop+0x38>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_TIM_Base_Stop+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	60fb      	str	r3, [r7, #12]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	60bb      	str	r3, [r7, #8]
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d020      	beq.n	8003788 <HAL_TIM_IRQHandler+0x64>
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01b      	beq.n	8003788 <HAL_TIM_IRQHandler+0x64>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0202 	mvn.w	r2, #2
 8003758:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	771a      	strb	r2, [r3, #28]
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x52>
#else
          HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        /* Output compare event */
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9a1 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0x5e>
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f994 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9a3 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
    }
  }
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d020      	beq.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01b      	beq.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0204 	mvn.w	r2, #4
 80037a4:	611a      	str	r2, [r3, #16]
      {
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	771a      	strb	r2, [r3, #28]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x9e>
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      /* Output compare event */
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f97b 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xaa>
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f96e 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f97d 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
    }
  }
  /* Capture compare 3 event */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d020      	beq.n	8003820 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <HAL_TIM_IRQHandler+0xfc>
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0208 	mvn.w	r2, #8
 80037f0:	611a      	str	r2, [r3, #16]
      {
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	771a      	strb	r2, [r3, #28]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0xea>
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      /* Output compare event */
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f955 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xf6>
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f948 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f957 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
    }
  }
  /* Capture compare 4 event */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <HAL_TIM_IRQHandler+0x148>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <HAL_TIM_IRQHandler+0x148>
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0210 	mvn.w	r2, #16
 800383c:	611a      	str	r2, [r3, #16]
      {
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2208      	movs	r2, #8
 8003842:	771a      	strb	r2, [r3, #28]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x136>
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      /* Output compare event */
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f92f 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x142>
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f922 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f931 	bl	8003ac8 <HAL_TIM_PWM_PulseFinishedCallback>
    }
  }
  /* TIM Update event */
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
    {
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x16c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x16c>
      htim->PeriodElapsedCallback(htim);
#else
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0201 	mvn.w	r2, #1
 8003888:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f901 	bl	8003a92 <HAL_TIM_PeriodElapsedCallback>
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
    {
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x190>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x190>
      htim->BreakCallback(htim);
#else
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa87 	bl	8003dc2 <HAL_TIMEx_BreakCallback>
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
    {
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1b4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1b4>
      htim->TriggerCallback(htim);
#else
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f901 	bl	8003ada <HAL_TIM_TriggerCallback>
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
    {
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <HAL_TIM_IRQHandler+0x1d8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_TIM_IRQHandler+0x1d8>
      htim->CommutationCallback(htim);
#else
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0220 	mvn.w	r2, #32
 80038f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa5a 	bl	8003db0 <HAL_TIMEx_CommutCallback>
}

/**
  * @}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]

  htim->State = HAL_TIM_STATE_BUSY;

  /* Check the parameters */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIM_ConfigClockSource+0x1c>
 800391c:	2302      	movs	r3, #2
 800391e:	e0b4      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x186>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60bb      	str	r3, [r7, #8]
  switch (sClockSourceConfig->ClockSource)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800393e:	60bb      	str	r3, [r7, #8]
  {
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003946:	60bb      	str	r3, [r7, #8]
    case TIM_CLOCKSOURCE_INTERNAL:
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003958:	d03e      	beq.n	80039d8 <HAL_TIM_ConfigClockSource+0xd4>
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800395e:	f200 8087 	bhi.w	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003966:	f000 8086 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x172>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800396e:	d87f      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b70      	cmp	r3, #112	@ 0x70
 8003972:	d01a      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0xa6>
 8003974:	2b70      	cmp	r3, #112	@ 0x70
 8003976:	d87b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b60      	cmp	r3, #96	@ 0x60
 800397a:	d050      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x11a>
 800397c:	2b60      	cmp	r3, #96	@ 0x60
 800397e:	d877      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b50      	cmp	r3, #80	@ 0x50
 8003982:	d03c      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xfa>
 8003984:	2b50      	cmp	r3, #80	@ 0x50
 8003986:	d873      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003988:	2b40      	cmp	r3, #64	@ 0x40
 800398a:	d058      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x13a>
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	d86f      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003990:	2b30      	cmp	r3, #48	@ 0x30
 8003992:	d064      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 8003994:	2b30      	cmp	r3, #48	@ 0x30
 8003996:	d86b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d060      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d867      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05c      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d05a      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15a>
 80039a8:	e062      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x16c>
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
      /* Select the External clock mode1 and the ETRF trigger */
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6899      	ldr	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]

 80039ba:	f000 f97c 	bl	8003cb6 <TIM_ETR_SetConfig>
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
      break;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	60bb      	str	r3, [r7, #8]
    }
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039cc:	60bb      	str	r3, [r7, #8]

    case TIM_CLOCKSOURCE_ETRMODE2:
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	609a      	str	r2, [r3, #8]
    {
 80039d6:	e04f      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
      break;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
    }
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
      /* Enable the External clock mode2 */
 80039e8:	f000 f965 	bl	8003cb6 <TIM_ETR_SetConfig>

    case TIM_CLOCKSOURCE_TI1:
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039fa:	609a      	str	r2, [r3, #8]
    {
 80039fc:	e03c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>

      TIM_TI1_ConfigInputStage(htim->Instance,
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
      break;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
    }
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]

 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
      break;
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 f8dc 	bl	8003bc8 <TIM_TI1_ConfigInputStage>
    case TIM_CLOCKSOURCE_TI2:
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2150      	movs	r1, #80	@ 0x50
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f933 	bl	8003c82 <TIM_ITRx_SetConfig>
    {
 8003a1c:	e02c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>

      TIM_TI2_ConfigInputStage(htim->Instance,
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
      break;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
    }
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]

 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
      break;
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 f8fa 	bl	8003c24 <TIM_TI2_ConfigInputStage>
    case TIM_CLOCKSOURCE_TI1ED:
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2160      	movs	r1, #96	@ 0x60
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f923 	bl	8003c82 <TIM_ITRx_SetConfig>
    {
 8003a3c:	e01c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>

      TIM_TI1_ConfigInputStage(htim->Instance,
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
      break;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
    }
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]

 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      break;
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 f8bc 	bl	8003bc8 <TIM_TI1_ConfigInputStage>
    case TIM_CLOCKSOURCE_ITR0:
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2140      	movs	r1, #64	@ 0x40
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f913 	bl	8003c82 <TIM_ITRx_SetConfig>
    case TIM_CLOCKSOURCE_ITR1:
 8003a5c:	e00c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f000 f90a 	bl	8003c82 <TIM_ITRx_SetConfig>
      status = HAL_ERROR;
 8003a6e:	e003      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
  }
  htim->State = HAL_TIM_STATE_READY;

 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
  __HAL_UNLOCK(htim);
 8003a74:	e000      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x174>
    {
 8003a76:	bf00      	nop

  return status;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}

 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
/**
  * @brief  Selects the signal connected to the TI1 input: direct from CH1_input
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
  *         or a XOR combination between CH1_input, CH2_input & CH3_input
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
   */
}

/**
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
   */
}

/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
   */
}

/**
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
   */
}

/**
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
   */
}

/**
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <TIM_Base_SetConfig>:
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a2f      	ldr	r2, [pc, #188]	@ (8003bbc <TIM_Base_SetConfig+0xd0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <TIM_Base_SetConfig+0x30>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b0a:	d007      	beq.n	8003b1c <TIM_Base_SetConfig+0x30>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc0 <TIM_Base_SetConfig+0xd4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_Base_SetConfig+0x30>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a2b      	ldr	r2, [pc, #172]	@ (8003bc4 <TIM_Base_SetConfig+0xd8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d108      	bne.n	8003b2e <TIM_Base_SetConfig+0x42>
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  {
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a22      	ldr	r2, [pc, #136]	@ (8003bbc <TIM_Base_SetConfig+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00b      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3c:	d007      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc0 <TIM_Base_SetConfig+0xd4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_Base_SetConfig+0x62>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a1e      	ldr	r2, [pc, #120]	@ (8003bc4 <TIM_Base_SetConfig+0xd8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <TIM_Base_SetConfig+0x74>
  }

  /* Set the auto-reload preload */
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  TIMx->ARR = (uint32_t)Structure->Period ;

 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]
  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0d      	ldr	r2, [pc, #52]	@ (8003bbc <TIM_Base_SetConfig+0xd0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d103      	bne.n	8003b94 <TIM_Base_SetConfig+0xa8>

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
}

/**
  * @brief  Timer Output Compare 1 configuration
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	615a      	str	r2, [r3, #20]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <TIM_Base_SetConfig+0xc6>
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	611a      	str	r2, [r3, #16]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
 8003bb2:	bf00      	nop
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800

08003bc8 <TIM_TI1_ConfigInputStage>:
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	617b      	str	r3, [r7, #20]

 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f023 0201 	bic.w	r2, r3, #1
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
  /* Write to TIMx CCMR1 and CCER registers */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	613b      	str	r3, [r7, #16]
  TIMx->CCMR1 = tmpccmr1;
  TIMx->CCER = tmpccer;
}
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bf2:	613b      	str	r3, [r7, #16]

 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
/**
  * @brief  Configure the TI2 as Input.
  * @param  TIMx to select the TIM peripheral
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f023 030a 	bic.w	r3, r3, #10
 8003c04:	617b      	str	r3, [r7, #20]
  * @param  TIM_ICPolarity The Input Polarity.
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  *          This parameter can be one of the following values:
  *            @arg TIM_ICPOLARITY_RISING
  *            @arg TIM_ICPOLARITY_FALLING
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	619a      	str	r2, [r3, #24]
  *            @arg TIM_ICPOLARITY_BOTHEDGE
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	621a      	str	r2, [r3, #32]
  * @param  TIM_ICSelection specifies the input to be used.
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <TIM_TI2_ConfigInputStage>:
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	617b      	str	r3, [r7, #20]

 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0210 	bic.w	r2, r3, #16
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	621a      	str	r2, [r3, #32]
  /* Write to TIMx CCMR1 and CCER registers */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	613b      	str	r3, [r7, #16]
  TIMx->CCMR1 = tmpccmr1 ;
  TIMx->CCER = tmpccer;
}
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c4e:	613b      	str	r3, [r7, #16]

 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	031b      	lsls	r3, r3, #12
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
/**
  * @brief  Configure the TI3 as Input.
  * @param  TIMx to select the TIM peripheral
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c60:	617b      	str	r3, [r7, #20]
  * @param  TIM_ICPolarity The Input Polarity.
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  *          This parameter can be one of the following values:
  *            @arg TIM_ICPOLARITY_RISING
  *            @arg TIM_ICPOLARITY_FALLING
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	619a      	str	r2, [r3, #24]
  * @param  TIM_ICSelection specifies the input to be used.
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	621a      	str	r2, [r3, #32]
  *          This parameter can be one of the following values:
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <TIM_ITRx_SetConfig>:
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
}
/**
  * @brief  Configures the TIMx External Trigger (ETR).
  * @param  TIMx to select the TIM peripheral
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	60fb      	str	r3, [r7, #12]
  * @param  TIM_ExtTRGPrescaler The external Trigger Prescaler.
  *          This parameter can be one of the following values:
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c98:	60fb      	str	r3, [r7, #12]
  *            @arg TIM_ETRPRESCALER_DIV1: ETRP Prescaler OFF.
  *            @arg TIM_ETRPRESCALER_DIV2: ETRP frequency divided by 2.
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f043 0307 	orr.w	r3, r3, #7
 8003ca4:	60fb      	str	r3, [r7, #12]
  *            @arg TIM_ETRPRESCALER_DIV4: ETRP frequency divided by 4.
  *            @arg TIM_ETRPRESCALER_DIV8: ETRP frequency divided by 8.
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	609a      	str	r2, [r3, #8]
  * @param  TIM_ExtTRGPolarity The external Trigger Polarity.
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <TIM_ETR_SetConfig>:
  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));

 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	603b      	str	r3, [r7, #0]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
}
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	617b      	str	r3, [r7, #20]

/**
  * @brief  Enables or disables the TIM Capture Compare Channel x.
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cd0:	617b      	str	r3, [r7, #20]
  * @param  TIMx to select the TIM peripheral
  * @param  Channel specifies the TIM Channel
  *          This parameter can be one of the following values:
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	021a      	lsls	r2, r3, #8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  *            @arg TIM_CHANNEL_1: TIM Channel 1
  *            @arg TIM_CHANNEL_2: TIM Channel 2
  *            @arg TIM_CHANNEL_3: TIM Channel 3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	609a      	str	r2, [r3, #8]
  *            @arg TIM_CHANNEL_4: TIM Channel 4
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIMEx_MasterConfigSynchronization>:

  __HAL_UNLOCK(htim);

  return HAL_OK;
}

 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e046      	b.n	8003d9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]
  /* Check input state */
  __HAL_LOCK(htim);

 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a16      	ldr	r2, [pc, #88]	@ (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00e      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d58:	d009      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a12      	ldr	r2, [pc, #72]	@ (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d004      	beq.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a10      	ldr	r2, [pc, #64]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10c      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d74:	60bb      	str	r3, [r7, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	609a      	str	r2, [r3, #8]
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
  {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d98:	2300      	movs	r3, #0

 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40000400 	.word	0x40000400
 8003dac:	40000800 	.word	0x40000800

08003db0 <HAL_TIMEx_CommutCallback>:
  ==============================================================================
  [..]
    This section provides Extended TIM callback functions:
    (+) Timer Commutation callback
    (+) Timer Break callback

 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  * @{
  */

/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_TIMEx_BreakCallback>:
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   */
}

/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <__cvt>:
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dda:	461d      	mov	r5, r3
 8003ddc:	bfbb      	ittet	lt
 8003dde:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003de2:	461d      	movlt	r5, r3
 8003de4:	2300      	movge	r3, #0
 8003de6:	232d      	movlt	r3, #45	@ 0x2d
 8003de8:	b088      	sub	sp, #32
 8003dea:	4614      	mov	r4, r2
 8003dec:	bfb8      	it	lt
 8003dee:	4614      	movlt	r4, r2
 8003df0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003df2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003df4:	7013      	strb	r3, [r2, #0]
 8003df6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003df8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003dfc:	f023 0820 	bic.w	r8, r3, #32
 8003e00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e04:	d005      	beq.n	8003e12 <__cvt+0x3e>
 8003e06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e0a:	d100      	bne.n	8003e0e <__cvt+0x3a>
 8003e0c:	3601      	adds	r6, #1
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e000      	b.n	8003e14 <__cvt+0x40>
 8003e12:	2303      	movs	r3, #3
 8003e14:	aa07      	add	r2, sp, #28
 8003e16:	9204      	str	r2, [sp, #16]
 8003e18:	aa06      	add	r2, sp, #24
 8003e1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e1e:	e9cd 3600 	strd	r3, r6, [sp]
 8003e22:	4622      	mov	r2, r4
 8003e24:	462b      	mov	r3, r5
 8003e26:	f001 f8b7 	bl	8004f98 <_dtoa_r>
 8003e2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e2e:	4607      	mov	r7, r0
 8003e30:	d119      	bne.n	8003e66 <__cvt+0x92>
 8003e32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003e34:	07db      	lsls	r3, r3, #31
 8003e36:	d50e      	bpl.n	8003e56 <__cvt+0x82>
 8003e38:	eb00 0906 	add.w	r9, r0, r6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2300      	movs	r3, #0
 8003e40:	4620      	mov	r0, r4
 8003e42:	4629      	mov	r1, r5
 8003e44:	f7fc fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8003e48:	b108      	cbz	r0, 8003e4e <__cvt+0x7a>
 8003e4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e4e:	2230      	movs	r2, #48	@ 0x30
 8003e50:	9b07      	ldr	r3, [sp, #28]
 8003e52:	454b      	cmp	r3, r9
 8003e54:	d31e      	bcc.n	8003e94 <__cvt+0xc0>
 8003e56:	4638      	mov	r0, r7
 8003e58:	9b07      	ldr	r3, [sp, #28]
 8003e5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003e5c:	1bdb      	subs	r3, r3, r7
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	b008      	add	sp, #32
 8003e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e6a:	eb00 0906 	add.w	r9, r0, r6
 8003e6e:	d1e5      	bne.n	8003e3c <__cvt+0x68>
 8003e70:	7803      	ldrb	r3, [r0, #0]
 8003e72:	2b30      	cmp	r3, #48	@ 0x30
 8003e74:	d10a      	bne.n	8003e8c <__cvt+0xb8>
 8003e76:	2200      	movs	r2, #0
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	f7fc fd93 	bl	80009a8 <__aeabi_dcmpeq>
 8003e82:	b918      	cbnz	r0, 8003e8c <__cvt+0xb8>
 8003e84:	f1c6 0601 	rsb	r6, r6, #1
 8003e88:	f8ca 6000 	str.w	r6, [sl]
 8003e8c:	f8da 3000 	ldr.w	r3, [sl]
 8003e90:	4499      	add	r9, r3
 8003e92:	e7d3      	b.n	8003e3c <__cvt+0x68>
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	9107      	str	r1, [sp, #28]
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e7d9      	b.n	8003e50 <__cvt+0x7c>

08003e9c <__exponent>:
 8003e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	bfb6      	itet	lt
 8003ea2:	232d      	movlt	r3, #45	@ 0x2d
 8003ea4:	232b      	movge	r3, #43	@ 0x2b
 8003ea6:	4249      	neglt	r1, r1
 8003ea8:	2909      	cmp	r1, #9
 8003eaa:	7002      	strb	r2, [r0, #0]
 8003eac:	7043      	strb	r3, [r0, #1]
 8003eae:	dd29      	ble.n	8003f04 <__exponent+0x68>
 8003eb0:	f10d 0307 	add.w	r3, sp, #7
 8003eb4:	461d      	mov	r5, r3
 8003eb6:	270a      	movs	r7, #10
 8003eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	fb07 1416 	mls	r4, r7, r6, r1
 8003ec2:	3430      	adds	r4, #48	@ 0x30
 8003ec4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ec8:	460c      	mov	r4, r1
 8003eca:	2c63      	cmp	r4, #99	@ 0x63
 8003ecc:	4631      	mov	r1, r6
 8003ece:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ed2:	dcf1      	bgt.n	8003eb8 <__exponent+0x1c>
 8003ed4:	3130      	adds	r1, #48	@ 0x30
 8003ed6:	1e94      	subs	r4, r2, #2
 8003ed8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003edc:	4623      	mov	r3, r4
 8003ede:	1c41      	adds	r1, r0, #1
 8003ee0:	42ab      	cmp	r3, r5
 8003ee2:	d30a      	bcc.n	8003efa <__exponent+0x5e>
 8003ee4:	f10d 0309 	add.w	r3, sp, #9
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	42ac      	cmp	r4, r5
 8003eec:	bf88      	it	hi
 8003eee:	2300      	movhi	r3, #0
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	4403      	add	r3, r0
 8003ef4:	1a18      	subs	r0, r3, r0
 8003ef6:	b003      	add	sp, #12
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003efe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f02:	e7ed      	b.n	8003ee0 <__exponent+0x44>
 8003f04:	2330      	movs	r3, #48	@ 0x30
 8003f06:	3130      	adds	r1, #48	@ 0x30
 8003f08:	7083      	strb	r3, [r0, #2]
 8003f0a:	70c1      	strb	r1, [r0, #3]
 8003f0c:	1d03      	adds	r3, r0, #4
 8003f0e:	e7f1      	b.n	8003ef4 <__exponent+0x58>

08003f10 <_printf_float>:
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	b091      	sub	sp, #68	@ 0x44
 8003f16:	460c      	mov	r4, r1
 8003f18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003f1c:	4616      	mov	r6, r2
 8003f1e:	461f      	mov	r7, r3
 8003f20:	4605      	mov	r5, r0
 8003f22:	f000 ff25 	bl	8004d70 <_localeconv_r>
 8003f26:	6803      	ldr	r3, [r0, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	9308      	str	r3, [sp, #32]
 8003f2c:	f7fc f910 	bl	8000150 <strlen>
 8003f30:	2300      	movs	r3, #0
 8003f32:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f34:	f8d8 3000 	ldr.w	r3, [r8]
 8003f38:	9009      	str	r0, [sp, #36]	@ 0x24
 8003f3a:	3307      	adds	r3, #7
 8003f3c:	f023 0307 	bic.w	r3, r3, #7
 8003f40:	f103 0208 	add.w	r2, r3, #8
 8003f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f48:	f8d4 b000 	ldr.w	fp, [r4]
 8003f4c:	f8c8 2000 	str.w	r2, [r8]
 8003f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f5a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80041dc <_printf_float+0x2cc>)
 8003f6c:	f7fc fd4e 	bl	8000a0c <__aeabi_dcmpun>
 8003f70:	bb70      	cbnz	r0, 8003fd0 <_printf_float+0xc0>
 8003f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f76:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7a:	4b98      	ldr	r3, [pc, #608]	@ (80041dc <_printf_float+0x2cc>)
 8003f7c:	f7fc fd28 	bl	80009d0 <__aeabi_dcmple>
 8003f80:	bb30      	cbnz	r0, 8003fd0 <_printf_float+0xc0>
 8003f82:	2200      	movs	r2, #0
 8003f84:	2300      	movs	r3, #0
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f7fc fd17 	bl	80009bc <__aeabi_dcmplt>
 8003f8e:	b110      	cbz	r0, 8003f96 <_printf_float+0x86>
 8003f90:	232d      	movs	r3, #45	@ 0x2d
 8003f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f96:	4a92      	ldr	r2, [pc, #584]	@ (80041e0 <_printf_float+0x2d0>)
 8003f98:	4b92      	ldr	r3, [pc, #584]	@ (80041e4 <_printf_float+0x2d4>)
 8003f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f9e:	bf94      	ite	ls
 8003fa0:	4690      	movls	r8, r2
 8003fa2:	4698      	movhi	r8, r3
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	f04f 0900 	mov.w	r9, #0
 8003faa:	6123      	str	r3, [r4, #16]
 8003fac:	f02b 0304 	bic.w	r3, fp, #4
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	4633      	mov	r3, r6
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	9700      	str	r7, [sp, #0]
 8003fba:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003fbc:	f000 f9d4 	bl	8004368 <_printf_common>
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	f040 8090 	bne.w	80040e6 <_printf_float+0x1d6>
 8003fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fca:	b011      	add	sp, #68	@ 0x44
 8003fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	f7fc fd18 	bl	8000a0c <__aeabi_dcmpun>
 8003fdc:	b148      	cbz	r0, 8003ff2 <_printf_float+0xe2>
 8003fde:	464b      	mov	r3, r9
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bfb8      	it	lt
 8003fe4:	232d      	movlt	r3, #45	@ 0x2d
 8003fe6:	4a80      	ldr	r2, [pc, #512]	@ (80041e8 <_printf_float+0x2d8>)
 8003fe8:	bfb8      	it	lt
 8003fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fee:	4b7f      	ldr	r3, [pc, #508]	@ (80041ec <_printf_float+0x2dc>)
 8003ff0:	e7d3      	b.n	8003f9a <_printf_float+0x8a>
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	d13f      	bne.n	800407c <_printf_float+0x16c>
 8003ffc:	2306      	movs	r3, #6
 8003ffe:	6063      	str	r3, [r4, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	9206      	str	r2, [sp, #24]
 800400a:	aa0e      	add	r2, sp, #56	@ 0x38
 800400c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004010:	aa0d      	add	r2, sp, #52	@ 0x34
 8004012:	9203      	str	r2, [sp, #12]
 8004014:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004018:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800401c:	6863      	ldr	r3, [r4, #4]
 800401e:	4642      	mov	r2, r8
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	4628      	mov	r0, r5
 8004024:	464b      	mov	r3, r9
 8004026:	910a      	str	r1, [sp, #40]	@ 0x28
 8004028:	f7ff fed4 	bl	8003dd4 <__cvt>
 800402c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800402e:	4680      	mov	r8, r0
 8004030:	2947      	cmp	r1, #71	@ 0x47
 8004032:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004034:	d128      	bne.n	8004088 <_printf_float+0x178>
 8004036:	1cc8      	adds	r0, r1, #3
 8004038:	db02      	blt.n	8004040 <_printf_float+0x130>
 800403a:	6863      	ldr	r3, [r4, #4]
 800403c:	4299      	cmp	r1, r3
 800403e:	dd40      	ble.n	80040c2 <_printf_float+0x1b2>
 8004040:	f1aa 0a02 	sub.w	sl, sl, #2
 8004044:	fa5f fa8a 	uxtb.w	sl, sl
 8004048:	4652      	mov	r2, sl
 800404a:	3901      	subs	r1, #1
 800404c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004050:	910d      	str	r1, [sp, #52]	@ 0x34
 8004052:	f7ff ff23 	bl	8003e9c <__exponent>
 8004056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004058:	4681      	mov	r9, r0
 800405a:	1813      	adds	r3, r2, r0
 800405c:	2a01      	cmp	r2, #1
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	dc02      	bgt.n	8004068 <_printf_float+0x158>
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	07d2      	lsls	r2, r2, #31
 8004066:	d501      	bpl.n	800406c <_printf_float+0x15c>
 8004068:	3301      	adds	r3, #1
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004070:	2b00      	cmp	r3, #0
 8004072:	d09e      	beq.n	8003fb2 <_printf_float+0xa2>
 8004074:	232d      	movs	r3, #45	@ 0x2d
 8004076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800407a:	e79a      	b.n	8003fb2 <_printf_float+0xa2>
 800407c:	2947      	cmp	r1, #71	@ 0x47
 800407e:	d1bf      	bne.n	8004000 <_printf_float+0xf0>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1bd      	bne.n	8004000 <_printf_float+0xf0>
 8004084:	2301      	movs	r3, #1
 8004086:	e7ba      	b.n	8003ffe <_printf_float+0xee>
 8004088:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800408c:	d9dc      	bls.n	8004048 <_printf_float+0x138>
 800408e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004092:	d118      	bne.n	80040c6 <_printf_float+0x1b6>
 8004094:	2900      	cmp	r1, #0
 8004096:	6863      	ldr	r3, [r4, #4]
 8004098:	dd0b      	ble.n	80040b2 <_printf_float+0x1a2>
 800409a:	6121      	str	r1, [r4, #16]
 800409c:	b913      	cbnz	r3, 80040a4 <_printf_float+0x194>
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	07d0      	lsls	r0, r2, #31
 80040a2:	d502      	bpl.n	80040aa <_printf_float+0x19a>
 80040a4:	3301      	adds	r3, #1
 80040a6:	440b      	add	r3, r1
 80040a8:	6123      	str	r3, [r4, #16]
 80040aa:	f04f 0900 	mov.w	r9, #0
 80040ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80040b0:	e7dc      	b.n	800406c <_printf_float+0x15c>
 80040b2:	b913      	cbnz	r3, 80040ba <_printf_float+0x1aa>
 80040b4:	6822      	ldr	r2, [r4, #0]
 80040b6:	07d2      	lsls	r2, r2, #31
 80040b8:	d501      	bpl.n	80040be <_printf_float+0x1ae>
 80040ba:	3302      	adds	r3, #2
 80040bc:	e7f4      	b.n	80040a8 <_printf_float+0x198>
 80040be:	2301      	movs	r3, #1
 80040c0:	e7f2      	b.n	80040a8 <_printf_float+0x198>
 80040c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040c8:	4299      	cmp	r1, r3
 80040ca:	db05      	blt.n	80040d8 <_printf_float+0x1c8>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	6121      	str	r1, [r4, #16]
 80040d0:	07d8      	lsls	r0, r3, #31
 80040d2:	d5ea      	bpl.n	80040aa <_printf_float+0x19a>
 80040d4:	1c4b      	adds	r3, r1, #1
 80040d6:	e7e7      	b.n	80040a8 <_printf_float+0x198>
 80040d8:	2900      	cmp	r1, #0
 80040da:	bfcc      	ite	gt
 80040dc:	2201      	movgt	r2, #1
 80040de:	f1c1 0202 	rsble	r2, r1, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	e7e0      	b.n	80040a8 <_printf_float+0x198>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	055a      	lsls	r2, r3, #21
 80040ea:	d407      	bmi.n	80040fc <_printf_float+0x1ec>
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	4642      	mov	r2, r8
 80040f0:	4631      	mov	r1, r6
 80040f2:	4628      	mov	r0, r5
 80040f4:	47b8      	blx	r7
 80040f6:	3001      	adds	r0, #1
 80040f8:	d12b      	bne.n	8004152 <_printf_float+0x242>
 80040fa:	e764      	b.n	8003fc6 <_printf_float+0xb6>
 80040fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004100:	f240 80dc 	bls.w	80042bc <_printf_float+0x3ac>
 8004104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004108:	2200      	movs	r2, #0
 800410a:	2300      	movs	r3, #0
 800410c:	f7fc fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8004110:	2800      	cmp	r0, #0
 8004112:	d033      	beq.n	800417c <_printf_float+0x26c>
 8004114:	2301      	movs	r3, #1
 8004116:	4631      	mov	r1, r6
 8004118:	4628      	mov	r0, r5
 800411a:	4a35      	ldr	r2, [pc, #212]	@ (80041f0 <_printf_float+0x2e0>)
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	f43f af51 	beq.w	8003fc6 <_printf_float+0xb6>
 8004124:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004128:	4543      	cmp	r3, r8
 800412a:	db02      	blt.n	8004132 <_printf_float+0x222>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	07d8      	lsls	r0, r3, #31
 8004130:	d50f      	bpl.n	8004152 <_printf_float+0x242>
 8004132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004136:	4631      	mov	r1, r6
 8004138:	4628      	mov	r0, r5
 800413a:	47b8      	blx	r7
 800413c:	3001      	adds	r0, #1
 800413e:	f43f af42 	beq.w	8003fc6 <_printf_float+0xb6>
 8004142:	f04f 0900 	mov.w	r9, #0
 8004146:	f108 38ff 	add.w	r8, r8, #4294967295
 800414a:	f104 0a1a 	add.w	sl, r4, #26
 800414e:	45c8      	cmp	r8, r9
 8004150:	dc09      	bgt.n	8004166 <_printf_float+0x256>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	079b      	lsls	r3, r3, #30
 8004156:	f100 8102 	bmi.w	800435e <_printf_float+0x44e>
 800415a:	68e0      	ldr	r0, [r4, #12]
 800415c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800415e:	4298      	cmp	r0, r3
 8004160:	bfb8      	it	lt
 8004162:	4618      	movlt	r0, r3
 8004164:	e731      	b.n	8003fca <_printf_float+0xba>
 8004166:	2301      	movs	r3, #1
 8004168:	4652      	mov	r2, sl
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	47b8      	blx	r7
 8004170:	3001      	adds	r0, #1
 8004172:	f43f af28 	beq.w	8003fc6 <_printf_float+0xb6>
 8004176:	f109 0901 	add.w	r9, r9, #1
 800417a:	e7e8      	b.n	800414e <_printf_float+0x23e>
 800417c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800417e:	2b00      	cmp	r3, #0
 8004180:	dc38      	bgt.n	80041f4 <_printf_float+0x2e4>
 8004182:	2301      	movs	r3, #1
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <_printf_float+0x2e0>)
 800418a:	47b8      	blx	r7
 800418c:	3001      	adds	r0, #1
 800418e:	f43f af1a 	beq.w	8003fc6 <_printf_float+0xb6>
 8004192:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004196:	ea59 0303 	orrs.w	r3, r9, r3
 800419a:	d102      	bne.n	80041a2 <_printf_float+0x292>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	07d9      	lsls	r1, r3, #31
 80041a0:	d5d7      	bpl.n	8004152 <_printf_float+0x242>
 80041a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	47b8      	blx	r7
 80041ac:	3001      	adds	r0, #1
 80041ae:	f43f af0a 	beq.w	8003fc6 <_printf_float+0xb6>
 80041b2:	f04f 0a00 	mov.w	sl, #0
 80041b6:	f104 0b1a 	add.w	fp, r4, #26
 80041ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041bc:	425b      	negs	r3, r3
 80041be:	4553      	cmp	r3, sl
 80041c0:	dc01      	bgt.n	80041c6 <_printf_float+0x2b6>
 80041c2:	464b      	mov	r3, r9
 80041c4:	e793      	b.n	80040ee <_printf_float+0x1de>
 80041c6:	2301      	movs	r3, #1
 80041c8:	465a      	mov	r2, fp
 80041ca:	4631      	mov	r1, r6
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b8      	blx	r7
 80041d0:	3001      	adds	r0, #1
 80041d2:	f43f aef8 	beq.w	8003fc6 <_printf_float+0xb6>
 80041d6:	f10a 0a01 	add.w	sl, sl, #1
 80041da:	e7ee      	b.n	80041ba <_printf_float+0x2aa>
 80041dc:	7fefffff 	.word	0x7fefffff
 80041e0:	0800857e 	.word	0x0800857e
 80041e4:	08008582 	.word	0x08008582
 80041e8:	08008586 	.word	0x08008586
 80041ec:	0800858a 	.word	0x0800858a
 80041f0:	0800858e 	.word	0x0800858e
 80041f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80041fa:	4553      	cmp	r3, sl
 80041fc:	bfa8      	it	ge
 80041fe:	4653      	movge	r3, sl
 8004200:	2b00      	cmp	r3, #0
 8004202:	4699      	mov	r9, r3
 8004204:	dc36      	bgt.n	8004274 <_printf_float+0x364>
 8004206:	f04f 0b00 	mov.w	fp, #0
 800420a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800420e:	f104 021a 	add.w	r2, r4, #26
 8004212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004214:	930a      	str	r3, [sp, #40]	@ 0x28
 8004216:	eba3 0309 	sub.w	r3, r3, r9
 800421a:	455b      	cmp	r3, fp
 800421c:	dc31      	bgt.n	8004282 <_printf_float+0x372>
 800421e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004220:	459a      	cmp	sl, r3
 8004222:	dc3a      	bgt.n	800429a <_printf_float+0x38a>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	07da      	lsls	r2, r3, #31
 8004228:	d437      	bmi.n	800429a <_printf_float+0x38a>
 800422a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800422c:	ebaa 0903 	sub.w	r9, sl, r3
 8004230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004232:	ebaa 0303 	sub.w	r3, sl, r3
 8004236:	4599      	cmp	r9, r3
 8004238:	bfa8      	it	ge
 800423a:	4699      	movge	r9, r3
 800423c:	f1b9 0f00 	cmp.w	r9, #0
 8004240:	dc33      	bgt.n	80042aa <_printf_float+0x39a>
 8004242:	f04f 0800 	mov.w	r8, #0
 8004246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800424a:	f104 0b1a 	add.w	fp, r4, #26
 800424e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004250:	ebaa 0303 	sub.w	r3, sl, r3
 8004254:	eba3 0309 	sub.w	r3, r3, r9
 8004258:	4543      	cmp	r3, r8
 800425a:	f77f af7a 	ble.w	8004152 <_printf_float+0x242>
 800425e:	2301      	movs	r3, #1
 8004260:	465a      	mov	r2, fp
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f aeac 	beq.w	8003fc6 <_printf_float+0xb6>
 800426e:	f108 0801 	add.w	r8, r8, #1
 8004272:	e7ec      	b.n	800424e <_printf_float+0x33e>
 8004274:	4642      	mov	r2, r8
 8004276:	4631      	mov	r1, r6
 8004278:	4628      	mov	r0, r5
 800427a:	47b8      	blx	r7
 800427c:	3001      	adds	r0, #1
 800427e:	d1c2      	bne.n	8004206 <_printf_float+0x2f6>
 8004280:	e6a1      	b.n	8003fc6 <_printf_float+0xb6>
 8004282:	2301      	movs	r3, #1
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	920a      	str	r2, [sp, #40]	@ 0x28
 800428a:	47b8      	blx	r7
 800428c:	3001      	adds	r0, #1
 800428e:	f43f ae9a 	beq.w	8003fc6 <_printf_float+0xb6>
 8004292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004294:	f10b 0b01 	add.w	fp, fp, #1
 8004298:	e7bb      	b.n	8004212 <_printf_float+0x302>
 800429a:	4631      	mov	r1, r6
 800429c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b8      	blx	r7
 80042a4:	3001      	adds	r0, #1
 80042a6:	d1c0      	bne.n	800422a <_printf_float+0x31a>
 80042a8:	e68d      	b.n	8003fc6 <_printf_float+0xb6>
 80042aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042ac:	464b      	mov	r3, r9
 80042ae:	4631      	mov	r1, r6
 80042b0:	4628      	mov	r0, r5
 80042b2:	4442      	add	r2, r8
 80042b4:	47b8      	blx	r7
 80042b6:	3001      	adds	r0, #1
 80042b8:	d1c3      	bne.n	8004242 <_printf_float+0x332>
 80042ba:	e684      	b.n	8003fc6 <_printf_float+0xb6>
 80042bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80042c0:	f1ba 0f01 	cmp.w	sl, #1
 80042c4:	dc01      	bgt.n	80042ca <_printf_float+0x3ba>
 80042c6:	07db      	lsls	r3, r3, #31
 80042c8:	d536      	bpl.n	8004338 <_printf_float+0x428>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4642      	mov	r2, r8
 80042ce:	4631      	mov	r1, r6
 80042d0:	4628      	mov	r0, r5
 80042d2:	47b8      	blx	r7
 80042d4:	3001      	adds	r0, #1
 80042d6:	f43f ae76 	beq.w	8003fc6 <_printf_float+0xb6>
 80042da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	f43f ae6e 	beq.w	8003fc6 <_printf_float+0xb6>
 80042ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042ee:	2200      	movs	r2, #0
 80042f0:	2300      	movs	r3, #0
 80042f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042f6:	f7fc fb57 	bl	80009a8 <__aeabi_dcmpeq>
 80042fa:	b9c0      	cbnz	r0, 800432e <_printf_float+0x41e>
 80042fc:	4653      	mov	r3, sl
 80042fe:	f108 0201 	add.w	r2, r8, #1
 8004302:	4631      	mov	r1, r6
 8004304:	4628      	mov	r0, r5
 8004306:	47b8      	blx	r7
 8004308:	3001      	adds	r0, #1
 800430a:	d10c      	bne.n	8004326 <_printf_float+0x416>
 800430c:	e65b      	b.n	8003fc6 <_printf_float+0xb6>
 800430e:	2301      	movs	r3, #1
 8004310:	465a      	mov	r2, fp
 8004312:	4631      	mov	r1, r6
 8004314:	4628      	mov	r0, r5
 8004316:	47b8      	blx	r7
 8004318:	3001      	adds	r0, #1
 800431a:	f43f ae54 	beq.w	8003fc6 <_printf_float+0xb6>
 800431e:	f108 0801 	add.w	r8, r8, #1
 8004322:	45d0      	cmp	r8, sl
 8004324:	dbf3      	blt.n	800430e <_printf_float+0x3fe>
 8004326:	464b      	mov	r3, r9
 8004328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800432c:	e6e0      	b.n	80040f0 <_printf_float+0x1e0>
 800432e:	f04f 0800 	mov.w	r8, #0
 8004332:	f104 0b1a 	add.w	fp, r4, #26
 8004336:	e7f4      	b.n	8004322 <_printf_float+0x412>
 8004338:	2301      	movs	r3, #1
 800433a:	4642      	mov	r2, r8
 800433c:	e7e1      	b.n	8004302 <_printf_float+0x3f2>
 800433e:	2301      	movs	r3, #1
 8004340:	464a      	mov	r2, r9
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	47b8      	blx	r7
 8004348:	3001      	adds	r0, #1
 800434a:	f43f ae3c 	beq.w	8003fc6 <_printf_float+0xb6>
 800434e:	f108 0801 	add.w	r8, r8, #1
 8004352:	68e3      	ldr	r3, [r4, #12]
 8004354:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004356:	1a5b      	subs	r3, r3, r1
 8004358:	4543      	cmp	r3, r8
 800435a:	dcf0      	bgt.n	800433e <_printf_float+0x42e>
 800435c:	e6fd      	b.n	800415a <_printf_float+0x24a>
 800435e:	f04f 0800 	mov.w	r8, #0
 8004362:	f104 0919 	add.w	r9, r4, #25
 8004366:	e7f4      	b.n	8004352 <_printf_float+0x442>

08004368 <_printf_common>:
 8004368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	4616      	mov	r6, r2
 800436e:	4698      	mov	r8, r3
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	4607      	mov	r7, r0
 8004376:	4293      	cmp	r3, r2
 8004378:	bfb8      	it	lt
 800437a:	4613      	movlt	r3, r2
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004382:	460c      	mov	r4, r1
 8004384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004388:	b10a      	cbz	r2, 800438e <_printf_common+0x26>
 800438a:	3301      	adds	r3, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	0699      	lsls	r1, r3, #26
 8004392:	bf42      	ittt	mi
 8004394:	6833      	ldrmi	r3, [r6, #0]
 8004396:	3302      	addmi	r3, #2
 8004398:	6033      	strmi	r3, [r6, #0]
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	f015 0506 	ands.w	r5, r5, #6
 80043a0:	d106      	bne.n	80043b0 <_printf_common+0x48>
 80043a2:	f104 0a19 	add.w	sl, r4, #25
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	dc2b      	bgt.n	8004408 <_printf_common+0xa0>
 80043b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	3b00      	subs	r3, #0
 80043b8:	bf18      	it	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	0692      	lsls	r2, r2, #26
 80043be:	d430      	bmi.n	8004422 <_printf_common+0xba>
 80043c0:	4641      	mov	r1, r8
 80043c2:	4638      	mov	r0, r7
 80043c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043c8:	47c8      	blx	r9
 80043ca:	3001      	adds	r0, #1
 80043cc:	d023      	beq.n	8004416 <_printf_common+0xae>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	6922      	ldr	r2, [r4, #16]
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf14      	ite	ne
 80043da:	2500      	movne	r5, #0
 80043dc:	6833      	ldreq	r3, [r6, #0]
 80043de:	f04f 0600 	mov.w	r6, #0
 80043e2:	bf08      	it	eq
 80043e4:	68e5      	ldreq	r5, [r4, #12]
 80043e6:	f104 041a 	add.w	r4, r4, #26
 80043ea:	bf08      	it	eq
 80043ec:	1aed      	subeq	r5, r5, r3
 80043ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043f2:	bf08      	it	eq
 80043f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bfc4      	itt	gt
 80043fc:	1a9b      	subgt	r3, r3, r2
 80043fe:	18ed      	addgt	r5, r5, r3
 8004400:	42b5      	cmp	r5, r6
 8004402:	d11a      	bne.n	800443a <_printf_common+0xd2>
 8004404:	2000      	movs	r0, #0
 8004406:	e008      	b.n	800441a <_printf_common+0xb2>
 8004408:	2301      	movs	r3, #1
 800440a:	4652      	mov	r2, sl
 800440c:	4641      	mov	r1, r8
 800440e:	4638      	mov	r0, r7
 8004410:	47c8      	blx	r9
 8004412:	3001      	adds	r0, #1
 8004414:	d103      	bne.n	800441e <_printf_common+0xb6>
 8004416:	f04f 30ff 	mov.w	r0, #4294967295
 800441a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800441e:	3501      	adds	r5, #1
 8004420:	e7c1      	b.n	80043a6 <_printf_common+0x3e>
 8004422:	2030      	movs	r0, #48	@ 0x30
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004430:	4422      	add	r2, r4
 8004432:	3302      	adds	r3, #2
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004438:	e7c2      	b.n	80043c0 <_printf_common+0x58>
 800443a:	2301      	movs	r3, #1
 800443c:	4622      	mov	r2, r4
 800443e:	4641      	mov	r1, r8
 8004440:	4638      	mov	r0, r7
 8004442:	47c8      	blx	r9
 8004444:	3001      	adds	r0, #1
 8004446:	d0e6      	beq.n	8004416 <_printf_common+0xae>
 8004448:	3601      	adds	r6, #1
 800444a:	e7d9      	b.n	8004400 <_printf_common+0x98>

0800444c <_printf_i>:
 800444c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004450:	7e0f      	ldrb	r7, [r1, #24]
 8004452:	4691      	mov	r9, r2
 8004454:	2f78      	cmp	r7, #120	@ 0x78
 8004456:	4680      	mov	r8, r0
 8004458:	460c      	mov	r4, r1
 800445a:	469a      	mov	sl, r3
 800445c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800445e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004462:	d807      	bhi.n	8004474 <_printf_i+0x28>
 8004464:	2f62      	cmp	r7, #98	@ 0x62
 8004466:	d80a      	bhi.n	800447e <_printf_i+0x32>
 8004468:	2f00      	cmp	r7, #0
 800446a:	f000 80d3 	beq.w	8004614 <_printf_i+0x1c8>
 800446e:	2f58      	cmp	r7, #88	@ 0x58
 8004470:	f000 80ba 	beq.w	80045e8 <_printf_i+0x19c>
 8004474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800447c:	e03a      	b.n	80044f4 <_printf_i+0xa8>
 800447e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004482:	2b15      	cmp	r3, #21
 8004484:	d8f6      	bhi.n	8004474 <_printf_i+0x28>
 8004486:	a101      	add	r1, pc, #4	@ (adr r1, 800448c <_printf_i+0x40>)
 8004488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800448c:	080044e5 	.word	0x080044e5
 8004490:	080044f9 	.word	0x080044f9
 8004494:	08004475 	.word	0x08004475
 8004498:	08004475 	.word	0x08004475
 800449c:	08004475 	.word	0x08004475
 80044a0:	08004475 	.word	0x08004475
 80044a4:	080044f9 	.word	0x080044f9
 80044a8:	08004475 	.word	0x08004475
 80044ac:	08004475 	.word	0x08004475
 80044b0:	08004475 	.word	0x08004475
 80044b4:	08004475 	.word	0x08004475
 80044b8:	080045fb 	.word	0x080045fb
 80044bc:	08004523 	.word	0x08004523
 80044c0:	080045b5 	.word	0x080045b5
 80044c4:	08004475 	.word	0x08004475
 80044c8:	08004475 	.word	0x08004475
 80044cc:	0800461d 	.word	0x0800461d
 80044d0:	08004475 	.word	0x08004475
 80044d4:	08004523 	.word	0x08004523
 80044d8:	08004475 	.word	0x08004475
 80044dc:	08004475 	.word	0x08004475
 80044e0:	080045bd 	.word	0x080045bd
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6032      	str	r2, [r6, #0]
 80044ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044f4:	2301      	movs	r3, #1
 80044f6:	e09e      	b.n	8004636 <_printf_i+0x1ea>
 80044f8:	6833      	ldr	r3, [r6, #0]
 80044fa:	6820      	ldr	r0, [r4, #0]
 80044fc:	1d19      	adds	r1, r3, #4
 80044fe:	6031      	str	r1, [r6, #0]
 8004500:	0606      	lsls	r6, r0, #24
 8004502:	d501      	bpl.n	8004508 <_printf_i+0xbc>
 8004504:	681d      	ldr	r5, [r3, #0]
 8004506:	e003      	b.n	8004510 <_printf_i+0xc4>
 8004508:	0645      	lsls	r5, r0, #25
 800450a:	d5fb      	bpl.n	8004504 <_printf_i+0xb8>
 800450c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004510:	2d00      	cmp	r5, #0
 8004512:	da03      	bge.n	800451c <_printf_i+0xd0>
 8004514:	232d      	movs	r3, #45	@ 0x2d
 8004516:	426d      	negs	r5, r5
 8004518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800451c:	230a      	movs	r3, #10
 800451e:	4859      	ldr	r0, [pc, #356]	@ (8004684 <_printf_i+0x238>)
 8004520:	e011      	b.n	8004546 <_printf_i+0xfa>
 8004522:	6821      	ldr	r1, [r4, #0]
 8004524:	6833      	ldr	r3, [r6, #0]
 8004526:	0608      	lsls	r0, r1, #24
 8004528:	f853 5b04 	ldr.w	r5, [r3], #4
 800452c:	d402      	bmi.n	8004534 <_printf_i+0xe8>
 800452e:	0649      	lsls	r1, r1, #25
 8004530:	bf48      	it	mi
 8004532:	b2ad      	uxthmi	r5, r5
 8004534:	2f6f      	cmp	r7, #111	@ 0x6f
 8004536:	6033      	str	r3, [r6, #0]
 8004538:	bf14      	ite	ne
 800453a:	230a      	movne	r3, #10
 800453c:	2308      	moveq	r3, #8
 800453e:	4851      	ldr	r0, [pc, #324]	@ (8004684 <_printf_i+0x238>)
 8004540:	2100      	movs	r1, #0
 8004542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004546:	6866      	ldr	r6, [r4, #4]
 8004548:	2e00      	cmp	r6, #0
 800454a:	bfa8      	it	ge
 800454c:	6821      	ldrge	r1, [r4, #0]
 800454e:	60a6      	str	r6, [r4, #8]
 8004550:	bfa4      	itt	ge
 8004552:	f021 0104 	bicge.w	r1, r1, #4
 8004556:	6021      	strge	r1, [r4, #0]
 8004558:	b90d      	cbnz	r5, 800455e <_printf_i+0x112>
 800455a:	2e00      	cmp	r6, #0
 800455c:	d04b      	beq.n	80045f6 <_printf_i+0x1aa>
 800455e:	4616      	mov	r6, r2
 8004560:	fbb5 f1f3 	udiv	r1, r5, r3
 8004564:	fb03 5711 	mls	r7, r3, r1, r5
 8004568:	5dc7      	ldrb	r7, [r0, r7]
 800456a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800456e:	462f      	mov	r7, r5
 8004570:	42bb      	cmp	r3, r7
 8004572:	460d      	mov	r5, r1
 8004574:	d9f4      	bls.n	8004560 <_printf_i+0x114>
 8004576:	2b08      	cmp	r3, #8
 8004578:	d10b      	bne.n	8004592 <_printf_i+0x146>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	07df      	lsls	r7, r3, #31
 800457e:	d508      	bpl.n	8004592 <_printf_i+0x146>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	6861      	ldr	r1, [r4, #4]
 8004584:	4299      	cmp	r1, r3
 8004586:	bfde      	ittt	le
 8004588:	2330      	movle	r3, #48	@ 0x30
 800458a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800458e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004592:	1b92      	subs	r2, r2, r6
 8004594:	6122      	str	r2, [r4, #16]
 8004596:	464b      	mov	r3, r9
 8004598:	4621      	mov	r1, r4
 800459a:	4640      	mov	r0, r8
 800459c:	f8cd a000 	str.w	sl, [sp]
 80045a0:	aa03      	add	r2, sp, #12
 80045a2:	f7ff fee1 	bl	8004368 <_printf_common>
 80045a6:	3001      	adds	r0, #1
 80045a8:	d14a      	bne.n	8004640 <_printf_i+0x1f4>
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	b004      	add	sp, #16
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f043 0320 	orr.w	r3, r3, #32
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	2778      	movs	r7, #120	@ 0x78
 80045be:	4832      	ldr	r0, [pc, #200]	@ (8004688 <_printf_i+0x23c>)
 80045c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	6831      	ldr	r1, [r6, #0]
 80045c8:	061f      	lsls	r7, r3, #24
 80045ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80045ce:	d402      	bmi.n	80045d6 <_printf_i+0x18a>
 80045d0:	065f      	lsls	r7, r3, #25
 80045d2:	bf48      	it	mi
 80045d4:	b2ad      	uxthmi	r5, r5
 80045d6:	6031      	str	r1, [r6, #0]
 80045d8:	07d9      	lsls	r1, r3, #31
 80045da:	bf44      	itt	mi
 80045dc:	f043 0320 	orrmi.w	r3, r3, #32
 80045e0:	6023      	strmi	r3, [r4, #0]
 80045e2:	b11d      	cbz	r5, 80045ec <_printf_i+0x1a0>
 80045e4:	2310      	movs	r3, #16
 80045e6:	e7ab      	b.n	8004540 <_printf_i+0xf4>
 80045e8:	4826      	ldr	r0, [pc, #152]	@ (8004684 <_printf_i+0x238>)
 80045ea:	e7e9      	b.n	80045c0 <_printf_i+0x174>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	f023 0320 	bic.w	r3, r3, #32
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	e7f6      	b.n	80045e4 <_printf_i+0x198>
 80045f6:	4616      	mov	r6, r2
 80045f8:	e7bd      	b.n	8004576 <_printf_i+0x12a>
 80045fa:	6833      	ldr	r3, [r6, #0]
 80045fc:	6825      	ldr	r5, [r4, #0]
 80045fe:	1d18      	adds	r0, r3, #4
 8004600:	6961      	ldr	r1, [r4, #20]
 8004602:	6030      	str	r0, [r6, #0]
 8004604:	062e      	lsls	r6, r5, #24
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	d501      	bpl.n	800460e <_printf_i+0x1c2>
 800460a:	6019      	str	r1, [r3, #0]
 800460c:	e002      	b.n	8004614 <_printf_i+0x1c8>
 800460e:	0668      	lsls	r0, r5, #25
 8004610:	d5fb      	bpl.n	800460a <_printf_i+0x1be>
 8004612:	8019      	strh	r1, [r3, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	4616      	mov	r6, r2
 8004618:	6123      	str	r3, [r4, #16]
 800461a:	e7bc      	b.n	8004596 <_printf_i+0x14a>
 800461c:	6833      	ldr	r3, [r6, #0]
 800461e:	2100      	movs	r1, #0
 8004620:	1d1a      	adds	r2, r3, #4
 8004622:	6032      	str	r2, [r6, #0]
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	4630      	mov	r0, r6
 800462a:	f000 fc18 	bl	8004e5e <memchr>
 800462e:	b108      	cbz	r0, 8004634 <_printf_i+0x1e8>
 8004630:	1b80      	subs	r0, r0, r6
 8004632:	6060      	str	r0, [r4, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	6123      	str	r3, [r4, #16]
 8004638:	2300      	movs	r3, #0
 800463a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800463e:	e7aa      	b.n	8004596 <_printf_i+0x14a>
 8004640:	4632      	mov	r2, r6
 8004642:	4649      	mov	r1, r9
 8004644:	4640      	mov	r0, r8
 8004646:	6923      	ldr	r3, [r4, #16]
 8004648:	47d0      	blx	sl
 800464a:	3001      	adds	r0, #1
 800464c:	d0ad      	beq.n	80045aa <_printf_i+0x15e>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	079b      	lsls	r3, r3, #30
 8004652:	d413      	bmi.n	800467c <_printf_i+0x230>
 8004654:	68e0      	ldr	r0, [r4, #12]
 8004656:	9b03      	ldr	r3, [sp, #12]
 8004658:	4298      	cmp	r0, r3
 800465a:	bfb8      	it	lt
 800465c:	4618      	movlt	r0, r3
 800465e:	e7a6      	b.n	80045ae <_printf_i+0x162>
 8004660:	2301      	movs	r3, #1
 8004662:	4632      	mov	r2, r6
 8004664:	4649      	mov	r1, r9
 8004666:	4640      	mov	r0, r8
 8004668:	47d0      	blx	sl
 800466a:	3001      	adds	r0, #1
 800466c:	d09d      	beq.n	80045aa <_printf_i+0x15e>
 800466e:	3501      	adds	r5, #1
 8004670:	68e3      	ldr	r3, [r4, #12]
 8004672:	9903      	ldr	r1, [sp, #12]
 8004674:	1a5b      	subs	r3, r3, r1
 8004676:	42ab      	cmp	r3, r5
 8004678:	dcf2      	bgt.n	8004660 <_printf_i+0x214>
 800467a:	e7eb      	b.n	8004654 <_printf_i+0x208>
 800467c:	2500      	movs	r5, #0
 800467e:	f104 0619 	add.w	r6, r4, #25
 8004682:	e7f5      	b.n	8004670 <_printf_i+0x224>
 8004684:	08008590 	.word	0x08008590
 8004688:	080085a1 	.word	0x080085a1

0800468c <_scanf_float>:
 800468c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004690:	b087      	sub	sp, #28
 8004692:	9303      	str	r3, [sp, #12]
 8004694:	688b      	ldr	r3, [r1, #8]
 8004696:	4617      	mov	r7, r2
 8004698:	1e5a      	subs	r2, r3, #1
 800469a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800469e:	bf82      	ittt	hi
 80046a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80046a4:	eb03 0b05 	addhi.w	fp, r3, r5
 80046a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80046ac:	460a      	mov	r2, r1
 80046ae:	f04f 0500 	mov.w	r5, #0
 80046b2:	bf88      	it	hi
 80046b4:	608b      	strhi	r3, [r1, #8]
 80046b6:	680b      	ldr	r3, [r1, #0]
 80046b8:	4680      	mov	r8, r0
 80046ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80046be:	f842 3b1c 	str.w	r3, [r2], #28
 80046c2:	460c      	mov	r4, r1
 80046c4:	bf98      	it	ls
 80046c6:	f04f 0b00 	movls.w	fp, #0
 80046ca:	4616      	mov	r6, r2
 80046cc:	46aa      	mov	sl, r5
 80046ce:	46a9      	mov	r9, r5
 80046d0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046d4:	9201      	str	r2, [sp, #4]
 80046d6:	9502      	str	r5, [sp, #8]
 80046d8:	68a2      	ldr	r2, [r4, #8]
 80046da:	b152      	cbz	r2, 80046f2 <_scanf_float+0x66>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80046e2:	d865      	bhi.n	80047b0 <_scanf_float+0x124>
 80046e4:	2b40      	cmp	r3, #64	@ 0x40
 80046e6:	d83d      	bhi.n	8004764 <_scanf_float+0xd8>
 80046e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80046ec:	b2c8      	uxtb	r0, r1
 80046ee:	280e      	cmp	r0, #14
 80046f0:	d93b      	bls.n	800476a <_scanf_float+0xde>
 80046f2:	f1b9 0f00 	cmp.w	r9, #0
 80046f6:	d003      	beq.n	8004700 <_scanf_float+0x74>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004704:	f1ba 0f01 	cmp.w	sl, #1
 8004708:	f200 8118 	bhi.w	800493c <_scanf_float+0x2b0>
 800470c:	9b01      	ldr	r3, [sp, #4]
 800470e:	429e      	cmp	r6, r3
 8004710:	f200 8109 	bhi.w	8004926 <_scanf_float+0x29a>
 8004714:	2001      	movs	r0, #1
 8004716:	b007      	add	sp, #28
 8004718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004720:	2a0d      	cmp	r2, #13
 8004722:	d8e6      	bhi.n	80046f2 <_scanf_float+0x66>
 8004724:	a101      	add	r1, pc, #4	@ (adr r1, 800472c <_scanf_float+0xa0>)
 8004726:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004873 	.word	0x08004873
 8004730:	080046f3 	.word	0x080046f3
 8004734:	080046f3 	.word	0x080046f3
 8004738:	080046f3 	.word	0x080046f3
 800473c:	080048d3 	.word	0x080048d3
 8004740:	080048ab 	.word	0x080048ab
 8004744:	080046f3 	.word	0x080046f3
 8004748:	080046f3 	.word	0x080046f3
 800474c:	08004881 	.word	0x08004881
 8004750:	080046f3 	.word	0x080046f3
 8004754:	080046f3 	.word	0x080046f3
 8004758:	080046f3 	.word	0x080046f3
 800475c:	080046f3 	.word	0x080046f3
 8004760:	08004839 	.word	0x08004839
 8004764:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004768:	e7da      	b.n	8004720 <_scanf_float+0x94>
 800476a:	290e      	cmp	r1, #14
 800476c:	d8c1      	bhi.n	80046f2 <_scanf_float+0x66>
 800476e:	a001      	add	r0, pc, #4	@ (adr r0, 8004774 <_scanf_float+0xe8>)
 8004770:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004774:	08004829 	.word	0x08004829
 8004778:	080046f3 	.word	0x080046f3
 800477c:	08004829 	.word	0x08004829
 8004780:	080048bf 	.word	0x080048bf
 8004784:	080046f3 	.word	0x080046f3
 8004788:	080047d1 	.word	0x080047d1
 800478c:	0800480f 	.word	0x0800480f
 8004790:	0800480f 	.word	0x0800480f
 8004794:	0800480f 	.word	0x0800480f
 8004798:	0800480f 	.word	0x0800480f
 800479c:	0800480f 	.word	0x0800480f
 80047a0:	0800480f 	.word	0x0800480f
 80047a4:	0800480f 	.word	0x0800480f
 80047a8:	0800480f 	.word	0x0800480f
 80047ac:	0800480f 	.word	0x0800480f
 80047b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80047b2:	d809      	bhi.n	80047c8 <_scanf_float+0x13c>
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d8b1      	bhi.n	800471c <_scanf_float+0x90>
 80047b8:	2b54      	cmp	r3, #84	@ 0x54
 80047ba:	d07b      	beq.n	80048b4 <_scanf_float+0x228>
 80047bc:	2b59      	cmp	r3, #89	@ 0x59
 80047be:	d198      	bne.n	80046f2 <_scanf_float+0x66>
 80047c0:	2d07      	cmp	r5, #7
 80047c2:	d196      	bne.n	80046f2 <_scanf_float+0x66>
 80047c4:	2508      	movs	r5, #8
 80047c6:	e02c      	b.n	8004822 <_scanf_float+0x196>
 80047c8:	2b74      	cmp	r3, #116	@ 0x74
 80047ca:	d073      	beq.n	80048b4 <_scanf_float+0x228>
 80047cc:	2b79      	cmp	r3, #121	@ 0x79
 80047ce:	e7f6      	b.n	80047be <_scanf_float+0x132>
 80047d0:	6821      	ldr	r1, [r4, #0]
 80047d2:	05c8      	lsls	r0, r1, #23
 80047d4:	d51b      	bpl.n	800480e <_scanf_float+0x182>
 80047d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80047da:	6021      	str	r1, [r4, #0]
 80047dc:	f109 0901 	add.w	r9, r9, #1
 80047e0:	f1bb 0f00 	cmp.w	fp, #0
 80047e4:	d003      	beq.n	80047ee <_scanf_float+0x162>
 80047e6:	3201      	adds	r2, #1
 80047e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047ec:	60a2      	str	r2, [r4, #8]
 80047ee:	68a3      	ldr	r3, [r4, #8]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	3301      	adds	r3, #1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	f340 8087 	ble.w	8004914 <_scanf_float+0x288>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	3301      	adds	r3, #1
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	e764      	b.n	80046d8 <_scanf_float+0x4c>
 800480e:	eb1a 0105 	adds.w	r1, sl, r5
 8004812:	f47f af6e 	bne.w	80046f2 <_scanf_float+0x66>
 8004816:	460d      	mov	r5, r1
 8004818:	468a      	mov	sl, r1
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004820:	6022      	str	r2, [r4, #0]
 8004822:	f806 3b01 	strb.w	r3, [r6], #1
 8004826:	e7e2      	b.n	80047ee <_scanf_float+0x162>
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	0610      	lsls	r0, r2, #24
 800482c:	f57f af61 	bpl.w	80046f2 <_scanf_float+0x66>
 8004830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	e7f4      	b.n	8004822 <_scanf_float+0x196>
 8004838:	f1ba 0f00 	cmp.w	sl, #0
 800483c:	d10e      	bne.n	800485c <_scanf_float+0x1d0>
 800483e:	f1b9 0f00 	cmp.w	r9, #0
 8004842:	d10e      	bne.n	8004862 <_scanf_float+0x1d6>
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800484a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800484e:	d108      	bne.n	8004862 <_scanf_float+0x1d6>
 8004850:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004854:	f04f 0a01 	mov.w	sl, #1
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	e7e2      	b.n	8004822 <_scanf_float+0x196>
 800485c:	f1ba 0f02 	cmp.w	sl, #2
 8004860:	d055      	beq.n	800490e <_scanf_float+0x282>
 8004862:	2d01      	cmp	r5, #1
 8004864:	d002      	beq.n	800486c <_scanf_float+0x1e0>
 8004866:	2d04      	cmp	r5, #4
 8004868:	f47f af43 	bne.w	80046f2 <_scanf_float+0x66>
 800486c:	3501      	adds	r5, #1
 800486e:	b2ed      	uxtb	r5, r5
 8004870:	e7d7      	b.n	8004822 <_scanf_float+0x196>
 8004872:	f1ba 0f01 	cmp.w	sl, #1
 8004876:	f47f af3c 	bne.w	80046f2 <_scanf_float+0x66>
 800487a:	f04f 0a02 	mov.w	sl, #2
 800487e:	e7d0      	b.n	8004822 <_scanf_float+0x196>
 8004880:	b97d      	cbnz	r5, 80048a2 <_scanf_float+0x216>
 8004882:	f1b9 0f00 	cmp.w	r9, #0
 8004886:	f47f af37 	bne.w	80046f8 <_scanf_float+0x6c>
 800488a:	6822      	ldr	r2, [r4, #0]
 800488c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004890:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004894:	f040 8103 	bne.w	8004a9e <_scanf_float+0x412>
 8004898:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800489c:	2501      	movs	r5, #1
 800489e:	6022      	str	r2, [r4, #0]
 80048a0:	e7bf      	b.n	8004822 <_scanf_float+0x196>
 80048a2:	2d03      	cmp	r5, #3
 80048a4:	d0e2      	beq.n	800486c <_scanf_float+0x1e0>
 80048a6:	2d05      	cmp	r5, #5
 80048a8:	e7de      	b.n	8004868 <_scanf_float+0x1dc>
 80048aa:	2d02      	cmp	r5, #2
 80048ac:	f47f af21 	bne.w	80046f2 <_scanf_float+0x66>
 80048b0:	2503      	movs	r5, #3
 80048b2:	e7b6      	b.n	8004822 <_scanf_float+0x196>
 80048b4:	2d06      	cmp	r5, #6
 80048b6:	f47f af1c 	bne.w	80046f2 <_scanf_float+0x66>
 80048ba:	2507      	movs	r5, #7
 80048bc:	e7b1      	b.n	8004822 <_scanf_float+0x196>
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	0591      	lsls	r1, r2, #22
 80048c2:	f57f af16 	bpl.w	80046f2 <_scanf_float+0x66>
 80048c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80048ca:	6022      	str	r2, [r4, #0]
 80048cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80048d0:	e7a7      	b.n	8004822 <_scanf_float+0x196>
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80048d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80048dc:	d006      	beq.n	80048ec <_scanf_float+0x260>
 80048de:	0550      	lsls	r0, r2, #21
 80048e0:	f57f af07 	bpl.w	80046f2 <_scanf_float+0x66>
 80048e4:	f1b9 0f00 	cmp.w	r9, #0
 80048e8:	f000 80d9 	beq.w	8004a9e <_scanf_float+0x412>
 80048ec:	0591      	lsls	r1, r2, #22
 80048ee:	bf58      	it	pl
 80048f0:	9902      	ldrpl	r1, [sp, #8]
 80048f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048f6:	bf58      	it	pl
 80048f8:	eba9 0101 	subpl.w	r1, r9, r1
 80048fc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004900:	f04f 0900 	mov.w	r9, #0
 8004904:	bf58      	it	pl
 8004906:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800490a:	6022      	str	r2, [r4, #0]
 800490c:	e789      	b.n	8004822 <_scanf_float+0x196>
 800490e:	f04f 0a03 	mov.w	sl, #3
 8004912:	e786      	b.n	8004822 <_scanf_float+0x196>
 8004914:	4639      	mov	r1, r7
 8004916:	4640      	mov	r0, r8
 8004918:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800491c:	4798      	blx	r3
 800491e:	2800      	cmp	r0, #0
 8004920:	f43f aeda 	beq.w	80046d8 <_scanf_float+0x4c>
 8004924:	e6e5      	b.n	80046f2 <_scanf_float+0x66>
 8004926:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800492a:	463a      	mov	r2, r7
 800492c:	4640      	mov	r0, r8
 800492e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004932:	4798      	blx	r3
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	3b01      	subs	r3, #1
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	e6e7      	b.n	800470c <_scanf_float+0x80>
 800493c:	1e6b      	subs	r3, r5, #1
 800493e:	2b06      	cmp	r3, #6
 8004940:	d824      	bhi.n	800498c <_scanf_float+0x300>
 8004942:	2d02      	cmp	r5, #2
 8004944:	d836      	bhi.n	80049b4 <_scanf_float+0x328>
 8004946:	9b01      	ldr	r3, [sp, #4]
 8004948:	429e      	cmp	r6, r3
 800494a:	f67f aee3 	bls.w	8004714 <_scanf_float+0x88>
 800494e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004952:	463a      	mov	r2, r7
 8004954:	4640      	mov	r0, r8
 8004956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800495a:	4798      	blx	r3
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	3b01      	subs	r3, #1
 8004960:	6123      	str	r3, [r4, #16]
 8004962:	e7f0      	b.n	8004946 <_scanf_float+0x2ba>
 8004964:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004968:	463a      	mov	r2, r7
 800496a:	4640      	mov	r0, r8
 800496c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004970:	4798      	blx	r3
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	3b01      	subs	r3, #1
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	f10a 3aff 	add.w	sl, sl, #4294967295
 800497c:	fa5f fa8a 	uxtb.w	sl, sl
 8004980:	f1ba 0f02 	cmp.w	sl, #2
 8004984:	d1ee      	bne.n	8004964 <_scanf_float+0x2d8>
 8004986:	3d03      	subs	r5, #3
 8004988:	b2ed      	uxtb	r5, r5
 800498a:	1b76      	subs	r6, r6, r5
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	05da      	lsls	r2, r3, #23
 8004990:	d530      	bpl.n	80049f4 <_scanf_float+0x368>
 8004992:	055b      	lsls	r3, r3, #21
 8004994:	d511      	bpl.n	80049ba <_scanf_float+0x32e>
 8004996:	9b01      	ldr	r3, [sp, #4]
 8004998:	429e      	cmp	r6, r3
 800499a:	f67f aebb 	bls.w	8004714 <_scanf_float+0x88>
 800499e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049a2:	463a      	mov	r2, r7
 80049a4:	4640      	mov	r0, r8
 80049a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049aa:	4798      	blx	r3
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	6123      	str	r3, [r4, #16]
 80049b2:	e7f0      	b.n	8004996 <_scanf_float+0x30a>
 80049b4:	46aa      	mov	sl, r5
 80049b6:	46b3      	mov	fp, r6
 80049b8:	e7de      	b.n	8004978 <_scanf_float+0x2ec>
 80049ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	2965      	cmp	r1, #101	@ 0x65
 80049c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80049c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80049ca:	6123      	str	r3, [r4, #16]
 80049cc:	d00c      	beq.n	80049e8 <_scanf_float+0x35c>
 80049ce:	2945      	cmp	r1, #69	@ 0x45
 80049d0:	d00a      	beq.n	80049e8 <_scanf_float+0x35c>
 80049d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049d6:	463a      	mov	r2, r7
 80049d8:	4640      	mov	r0, r8
 80049da:	4798      	blx	r3
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	1eb5      	subs	r5, r6, #2
 80049e6:	6123      	str	r3, [r4, #16]
 80049e8:	463a      	mov	r2, r7
 80049ea:	4640      	mov	r0, r8
 80049ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049f0:	4798      	blx	r3
 80049f2:	462e      	mov	r6, r5
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	f012 0210 	ands.w	r2, r2, #16
 80049fa:	d001      	beq.n	8004a00 <_scanf_float+0x374>
 80049fc:	2000      	movs	r0, #0
 80049fe:	e68a      	b.n	8004716 <_scanf_float+0x8a>
 8004a00:	7032      	strb	r2, [r6, #0]
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0c:	d11c      	bne.n	8004a48 <_scanf_float+0x3bc>
 8004a0e:	9b02      	ldr	r3, [sp, #8]
 8004a10:	454b      	cmp	r3, r9
 8004a12:	eba3 0209 	sub.w	r2, r3, r9
 8004a16:	d123      	bne.n	8004a60 <_scanf_float+0x3d4>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	9901      	ldr	r1, [sp, #4]
 8004a1e:	f002 fc23 	bl	8007268 <_strtod_r>
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	6825      	ldr	r5, [r4, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f015 0f02 	tst.w	r5, #2
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	460f      	mov	r7, r1
 8004a30:	f103 0204 	add.w	r2, r3, #4
 8004a34:	d01f      	beq.n	8004a76 <_scanf_float+0x3ea>
 8004a36:	9903      	ldr	r1, [sp, #12]
 8004a38:	600a      	str	r2, [r1, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	e9c3 6700 	strd	r6, r7, [r3]
 8004a40:	68e3      	ldr	r3, [r4, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60e3      	str	r3, [r4, #12]
 8004a46:	e7d9      	b.n	80049fc <_scanf_float+0x370>
 8004a48:	9b04      	ldr	r3, [sp, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0e4      	beq.n	8004a18 <_scanf_float+0x38c>
 8004a4e:	9905      	ldr	r1, [sp, #20]
 8004a50:	230a      	movs	r3, #10
 8004a52:	4640      	mov	r0, r8
 8004a54:	3101      	adds	r1, #1
 8004a56:	f002 fc87 	bl	8007368 <_strtol_r>
 8004a5a:	9b04      	ldr	r3, [sp, #16]
 8004a5c:	9e05      	ldr	r6, [sp, #20]
 8004a5e:	1ac2      	subs	r2, r0, r3
 8004a60:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004a64:	429e      	cmp	r6, r3
 8004a66:	bf28      	it	cs
 8004a68:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	490d      	ldr	r1, [pc, #52]	@ (8004aa4 <_scanf_float+0x418>)
 8004a70:	f000 f912 	bl	8004c98 <siprintf>
 8004a74:	e7d0      	b.n	8004a18 <_scanf_float+0x38c>
 8004a76:	076d      	lsls	r5, r5, #29
 8004a78:	d4dd      	bmi.n	8004a36 <_scanf_float+0x3aa>
 8004a7a:	9d03      	ldr	r5, [sp, #12]
 8004a7c:	602a      	str	r2, [r5, #0]
 8004a7e:	681d      	ldr	r5, [r3, #0]
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	f7fb ffc2 	bl	8000a0c <__aeabi_dcmpun>
 8004a88:	b120      	cbz	r0, 8004a94 <_scanf_float+0x408>
 8004a8a:	4807      	ldr	r0, [pc, #28]	@ (8004aa8 <_scanf_float+0x41c>)
 8004a8c:	f000 f9f6 	bl	8004e7c <nanf>
 8004a90:	6028      	str	r0, [r5, #0]
 8004a92:	e7d5      	b.n	8004a40 <_scanf_float+0x3b4>
 8004a94:	4630      	mov	r0, r6
 8004a96:	4639      	mov	r1, r7
 8004a98:	f7fc f816 	bl	8000ac8 <__aeabi_d2f>
 8004a9c:	e7f8      	b.n	8004a90 <_scanf_float+0x404>
 8004a9e:	f04f 0900 	mov.w	r9, #0
 8004aa2:	e62d      	b.n	8004700 <_scanf_float+0x74>
 8004aa4:	080085b2 	.word	0x080085b2
 8004aa8:	0800894d 	.word	0x0800894d

08004aac <std>:
 8004aac:	2300      	movs	r3, #0
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aba:	6083      	str	r3, [r0, #8]
 8004abc:	8181      	strh	r1, [r0, #12]
 8004abe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ac0:	81c2      	strh	r2, [r0, #14]
 8004ac2:	6183      	str	r3, [r0, #24]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	2208      	movs	r2, #8
 8004ac8:	305c      	adds	r0, #92	@ 0x5c
 8004aca:	f000 f948 	bl	8004d5e <memset>
 8004ace:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <std+0x58>)
 8004ad0:	6224      	str	r4, [r4, #32]
 8004ad2:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <std+0x5c>)
 8004ad6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <std+0x60>)
 8004ada:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004adc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <std+0x64>)
 8004ade:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b14 <std+0x68>)
 8004ae2:	429c      	cmp	r4, r3
 8004ae4:	d006      	beq.n	8004af4 <std+0x48>
 8004ae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004aea:	4294      	cmp	r4, r2
 8004aec:	d002      	beq.n	8004af4 <std+0x48>
 8004aee:	33d0      	adds	r3, #208	@ 0xd0
 8004af0:	429c      	cmp	r4, r3
 8004af2:	d105      	bne.n	8004b00 <std+0x54>
 8004af4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004afc:	f000 b9ac 	b.w	8004e58 <__retarget_lock_init_recursive>
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	bf00      	nop
 8004b04:	08004cd9 	.word	0x08004cd9
 8004b08:	08004cfb 	.word	0x08004cfb
 8004b0c:	08004d33 	.word	0x08004d33
 8004b10:	08004d57 	.word	0x08004d57
 8004b14:	200002a0 	.word	0x200002a0

08004b18 <stdio_exit_handler>:
 8004b18:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <stdio_exit_handler+0xc>)
 8004b1a:	4903      	ldr	r1, [pc, #12]	@ (8004b28 <stdio_exit_handler+0x10>)
 8004b1c:	4803      	ldr	r0, [pc, #12]	@ (8004b2c <stdio_exit_handler+0x14>)
 8004b1e:	f000 b869 	b.w	8004bf4 <_fwalk_sglue>
 8004b22:	bf00      	nop
 8004b24:	20000010 	.word	0x20000010
 8004b28:	0800771d 	.word	0x0800771d
 8004b2c:	20000020 	.word	0x20000020

08004b30 <cleanup_stdio>:
 8004b30:	6841      	ldr	r1, [r0, #4]
 8004b32:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <cleanup_stdio+0x34>)
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4299      	cmp	r1, r3
 8004b38:	4604      	mov	r4, r0
 8004b3a:	d001      	beq.n	8004b40 <cleanup_stdio+0x10>
 8004b3c:	f002 fdee 	bl	800771c <_fflush_r>
 8004b40:	68a1      	ldr	r1, [r4, #8]
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <cleanup_stdio+0x38>)
 8004b44:	4299      	cmp	r1, r3
 8004b46:	d002      	beq.n	8004b4e <cleanup_stdio+0x1e>
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f002 fde7 	bl	800771c <_fflush_r>
 8004b4e:	68e1      	ldr	r1, [r4, #12]
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <cleanup_stdio+0x3c>)
 8004b52:	4299      	cmp	r1, r3
 8004b54:	d004      	beq.n	8004b60 <cleanup_stdio+0x30>
 8004b56:	4620      	mov	r0, r4
 8004b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b5c:	f002 bdde 	b.w	800771c <_fflush_r>
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	bf00      	nop
 8004b64:	200002a0 	.word	0x200002a0
 8004b68:	20000308 	.word	0x20000308
 8004b6c:	20000370 	.word	0x20000370

08004b70 <global_stdio_init.part.0>:
 8004b70:	b510      	push	{r4, lr}
 8004b72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <global_stdio_init.part.0+0x30>)
 8004b74:	4c0b      	ldr	r4, [pc, #44]	@ (8004ba4 <global_stdio_init.part.0+0x34>)
 8004b76:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba8 <global_stdio_init.part.0+0x38>)
 8004b78:	4620      	mov	r0, r4
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f7ff ff94 	bl	8004aac <std>
 8004b84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2109      	movs	r1, #9
 8004b8c:	f7ff ff8e 	bl	8004aac <std>
 8004b90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b94:	2202      	movs	r2, #2
 8004b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b9a:	2112      	movs	r1, #18
 8004b9c:	f7ff bf86 	b.w	8004aac <std>
 8004ba0:	200003d8 	.word	0x200003d8
 8004ba4:	200002a0 	.word	0x200002a0
 8004ba8:	08004b19 	.word	0x08004b19

08004bac <__sfp_lock_acquire>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__sfp_lock_acquire+0x8>)
 8004bae:	f000 b954 	b.w	8004e5a <__retarget_lock_acquire_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	200003e1 	.word	0x200003e1

08004bb8 <__sfp_lock_release>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	@ (8004bc0 <__sfp_lock_release+0x8>)
 8004bba:	f000 b94f 	b.w	8004e5c <__retarget_lock_release_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	200003e1 	.word	0x200003e1

08004bc4 <__sinit>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	f7ff fff0 	bl	8004bac <__sfp_lock_acquire>
 8004bcc:	6a23      	ldr	r3, [r4, #32]
 8004bce:	b11b      	cbz	r3, 8004bd8 <__sinit+0x14>
 8004bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd4:	f7ff bff0 	b.w	8004bb8 <__sfp_lock_release>
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__sinit+0x28>)
 8004bda:	6223      	str	r3, [r4, #32]
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <__sinit+0x2c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f5      	bne.n	8004bd0 <__sinit+0xc>
 8004be4:	f7ff ffc4 	bl	8004b70 <global_stdio_init.part.0>
 8004be8:	e7f2      	b.n	8004bd0 <__sinit+0xc>
 8004bea:	bf00      	nop
 8004bec:	08004b31 	.word	0x08004b31
 8004bf0:	200003d8 	.word	0x200003d8

08004bf4 <_fwalk_sglue>:
 8004bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	4688      	mov	r8, r1
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	2600      	movs	r6, #0
 8004c00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c04:	f1b9 0901 	subs.w	r9, r9, #1
 8004c08:	d505      	bpl.n	8004c16 <_fwalk_sglue+0x22>
 8004c0a:	6824      	ldr	r4, [r4, #0]
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	d1f7      	bne.n	8004c00 <_fwalk_sglue+0xc>
 8004c10:	4630      	mov	r0, r6
 8004c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c16:	89ab      	ldrh	r3, [r5, #12]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d907      	bls.n	8004c2c <_fwalk_sglue+0x38>
 8004c1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c20:	3301      	adds	r3, #1
 8004c22:	d003      	beq.n	8004c2c <_fwalk_sglue+0x38>
 8004c24:	4629      	mov	r1, r5
 8004c26:	4638      	mov	r0, r7
 8004c28:	47c0      	blx	r8
 8004c2a:	4306      	orrs	r6, r0
 8004c2c:	3568      	adds	r5, #104	@ 0x68
 8004c2e:	e7e9      	b.n	8004c04 <_fwalk_sglue+0x10>

08004c30 <sniprintf>:
 8004c30:	b40c      	push	{r2, r3}
 8004c32:	b530      	push	{r4, r5, lr}
 8004c34:	4b17      	ldr	r3, [pc, #92]	@ (8004c94 <sniprintf+0x64>)
 8004c36:	1e0c      	subs	r4, r1, #0
 8004c38:	681d      	ldr	r5, [r3, #0]
 8004c3a:	b09d      	sub	sp, #116	@ 0x74
 8004c3c:	da08      	bge.n	8004c50 <sniprintf+0x20>
 8004c3e:	238b      	movs	r3, #139	@ 0x8b
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	b01d      	add	sp, #116	@ 0x74
 8004c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4c:	b002      	add	sp, #8
 8004c4e:	4770      	bx	lr
 8004c50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c58:	bf0c      	ite	eq
 8004c5a:	4623      	moveq	r3, r4
 8004c5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c60:	9304      	str	r3, [sp, #16]
 8004c62:	9307      	str	r3, [sp, #28]
 8004c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c68:	9002      	str	r0, [sp, #8]
 8004c6a:	9006      	str	r0, [sp, #24]
 8004c6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c70:	4628      	mov	r0, r5
 8004c72:	ab21      	add	r3, sp, #132	@ 0x84
 8004c74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c76:	a902      	add	r1, sp, #8
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	f002 fbd3 	bl	8007424 <_svfiprintf_r>
 8004c7e:	1c43      	adds	r3, r0, #1
 8004c80:	bfbc      	itt	lt
 8004c82:	238b      	movlt	r3, #139	@ 0x8b
 8004c84:	602b      	strlt	r3, [r5, #0]
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	d0dd      	beq.n	8004c46 <sniprintf+0x16>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	9b02      	ldr	r3, [sp, #8]
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	e7d9      	b.n	8004c46 <sniprintf+0x16>
 8004c92:	bf00      	nop
 8004c94:	2000001c 	.word	0x2000001c

08004c98 <siprintf>:
 8004c98:	b40e      	push	{r1, r2, r3}
 8004c9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c9e:	b500      	push	{lr}
 8004ca0:	b09c      	sub	sp, #112	@ 0x70
 8004ca2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ca4:	9002      	str	r0, [sp, #8]
 8004ca6:	9006      	str	r0, [sp, #24]
 8004ca8:	9107      	str	r1, [sp, #28]
 8004caa:	9104      	str	r1, [sp, #16]
 8004cac:	4808      	ldr	r0, [pc, #32]	@ (8004cd0 <siprintf+0x38>)
 8004cae:	4909      	ldr	r1, [pc, #36]	@ (8004cd4 <siprintf+0x3c>)
 8004cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb4:	9105      	str	r1, [sp, #20]
 8004cb6:	6800      	ldr	r0, [r0, #0]
 8004cb8:	a902      	add	r1, sp, #8
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	f002 fbb2 	bl	8007424 <_svfiprintf_r>
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	9b02      	ldr	r3, [sp, #8]
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	b01c      	add	sp, #112	@ 0x70
 8004cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ccc:	b003      	add	sp, #12
 8004cce:	4770      	bx	lr
 8004cd0:	2000001c 	.word	0x2000001c
 8004cd4:	ffff0208 	.word	0xffff0208

08004cd8 <__sread>:
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	460c      	mov	r4, r1
 8004cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce0:	f000 f86c 	bl	8004dbc <_read_r>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	bfab      	itete	ge
 8004ce8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cea:	89a3      	ldrhlt	r3, [r4, #12]
 8004cec:	181b      	addge	r3, r3, r0
 8004cee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cf2:	bfac      	ite	ge
 8004cf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cf6:	81a3      	strhlt	r3, [r4, #12]
 8004cf8:	bd10      	pop	{r4, pc}

08004cfa <__swrite>:
 8004cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfe:	461f      	mov	r7, r3
 8004d00:	898b      	ldrh	r3, [r1, #12]
 8004d02:	4605      	mov	r5, r0
 8004d04:	05db      	lsls	r3, r3, #23
 8004d06:	460c      	mov	r4, r1
 8004d08:	4616      	mov	r6, r2
 8004d0a:	d505      	bpl.n	8004d18 <__swrite+0x1e>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d14:	f000 f840 	bl	8004d98 <_lseek_r>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	4632      	mov	r2, r6
 8004d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	4628      	mov	r0, r5
 8004d24:	463b      	mov	r3, r7
 8004d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2e:	f000 b857 	b.w	8004de0 <_write_r>

08004d32 <__sseek>:
 8004d32:	b510      	push	{r4, lr}
 8004d34:	460c      	mov	r4, r1
 8004d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3a:	f000 f82d 	bl	8004d98 <_lseek_r>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	89a3      	ldrh	r3, [r4, #12]
 8004d42:	bf15      	itete	ne
 8004d44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d4e:	81a3      	strheq	r3, [r4, #12]
 8004d50:	bf18      	it	ne
 8004d52:	81a3      	strhne	r3, [r4, #12]
 8004d54:	bd10      	pop	{r4, pc}

08004d56 <__sclose>:
 8004d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d5a:	f000 b80d 	b.w	8004d78 <_close_r>

08004d5e <memset>:
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4402      	add	r2, r0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d100      	bne.n	8004d68 <memset+0xa>
 8004d66:	4770      	bx	lr
 8004d68:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6c:	e7f9      	b.n	8004d62 <memset+0x4>
	...

08004d70 <_localeconv_r>:
 8004d70:	4800      	ldr	r0, [pc, #0]	@ (8004d74 <_localeconv_r+0x4>)
 8004d72:	4770      	bx	lr
 8004d74:	2000015c 	.word	0x2000015c

08004d78 <_close_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	4d05      	ldr	r5, [pc, #20]	@ (8004d94 <_close_r+0x1c>)
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	f7fc ff83 	bl	8001c8e <_close>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_close_r+0x1a>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_close_r+0x1a>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	200003dc 	.word	0x200003dc

08004d98 <_lseek_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	2200      	movs	r2, #0
 8004da2:	4d05      	ldr	r5, [pc, #20]	@ (8004db8 <_lseek_r+0x20>)
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f7fc ff95 	bl	8001cd6 <_lseek>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_lseek_r+0x1e>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_lseek_r+0x1e>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	200003dc 	.word	0x200003dc

08004dbc <_read_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	4608      	mov	r0, r1
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4d05      	ldr	r5, [pc, #20]	@ (8004ddc <_read_r+0x20>)
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7fc ff26 	bl	8001c1c <_read>
 8004dd0:	1c43      	adds	r3, r0, #1
 8004dd2:	d102      	bne.n	8004dda <_read_r+0x1e>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b103      	cbz	r3, 8004dda <_read_r+0x1e>
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	bd38      	pop	{r3, r4, r5, pc}
 8004ddc:	200003dc 	.word	0x200003dc

08004de0 <_write_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	4604      	mov	r4, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	2200      	movs	r2, #0
 8004dea:	4d05      	ldr	r5, [pc, #20]	@ (8004e00 <_write_r+0x20>)
 8004dec:	602a      	str	r2, [r5, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	f7fc ff31 	bl	8001c56 <_write>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_write_r+0x1e>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_write_r+0x1e>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	200003dc 	.word	0x200003dc

08004e04 <__errno>:
 8004e04:	4b01      	ldr	r3, [pc, #4]	@ (8004e0c <__errno+0x8>)
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	2000001c 	.word	0x2000001c

08004e10 <__libc_init_array>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	2600      	movs	r6, #0
 8004e14:	4d0c      	ldr	r5, [pc, #48]	@ (8004e48 <__libc_init_array+0x38>)
 8004e16:	4c0d      	ldr	r4, [pc, #52]	@ (8004e4c <__libc_init_array+0x3c>)
 8004e18:	1b64      	subs	r4, r4, r5
 8004e1a:	10a4      	asrs	r4, r4, #2
 8004e1c:	42a6      	cmp	r6, r4
 8004e1e:	d109      	bne.n	8004e34 <__libc_init_array+0x24>
 8004e20:	f003 fb68 	bl	80084f4 <_init>
 8004e24:	2600      	movs	r6, #0
 8004e26:	4d0a      	ldr	r5, [pc, #40]	@ (8004e50 <__libc_init_array+0x40>)
 8004e28:	4c0a      	ldr	r4, [pc, #40]	@ (8004e54 <__libc_init_array+0x44>)
 8004e2a:	1b64      	subs	r4, r4, r5
 8004e2c:	10a4      	asrs	r4, r4, #2
 8004e2e:	42a6      	cmp	r6, r4
 8004e30:	d105      	bne.n	8004e3e <__libc_init_array+0x2e>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e38:	4798      	blx	r3
 8004e3a:	3601      	adds	r6, #1
 8004e3c:	e7ee      	b.n	8004e1c <__libc_init_array+0xc>
 8004e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e42:	4798      	blx	r3
 8004e44:	3601      	adds	r6, #1
 8004e46:	e7f2      	b.n	8004e2e <__libc_init_array+0x1e>
 8004e48:	080089b8 	.word	0x080089b8
 8004e4c:	080089b8 	.word	0x080089b8
 8004e50:	080089b8 	.word	0x080089b8
 8004e54:	080089bc 	.word	0x080089bc

08004e58 <__retarget_lock_init_recursive>:
 8004e58:	4770      	bx	lr

08004e5a <__retarget_lock_acquire_recursive>:
 8004e5a:	4770      	bx	lr

08004e5c <__retarget_lock_release_recursive>:
 8004e5c:	4770      	bx	lr

08004e5e <memchr>:
 8004e5e:	4603      	mov	r3, r0
 8004e60:	b510      	push	{r4, lr}
 8004e62:	b2c9      	uxtb	r1, r1
 8004e64:	4402      	add	r2, r0
 8004e66:	4293      	cmp	r3, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	d101      	bne.n	8004e70 <memchr+0x12>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e003      	b.n	8004e78 <memchr+0x1a>
 8004e70:	7804      	ldrb	r4, [r0, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	428c      	cmp	r4, r1
 8004e76:	d1f6      	bne.n	8004e66 <memchr+0x8>
 8004e78:	bd10      	pop	{r4, pc}
	...

08004e7c <nanf>:
 8004e7c:	4800      	ldr	r0, [pc, #0]	@ (8004e80 <nanf+0x4>)
 8004e7e:	4770      	bx	lr
 8004e80:	7fc00000 	.word	0x7fc00000

08004e84 <quorem>:
 8004e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	6903      	ldr	r3, [r0, #16]
 8004e8a:	690c      	ldr	r4, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	db7e      	blt.n	8004f90 <quorem+0x10c>
 8004e92:	3c01      	subs	r4, #1
 8004e94:	00a3      	lsls	r3, r4, #2
 8004e96:	f100 0514 	add.w	r5, r0, #20
 8004e9a:	f101 0814 	add.w	r8, r1, #20
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eba:	d32e      	bcc.n	8004f1a <quorem+0x96>
 8004ebc:	f04f 0a00 	mov.w	sl, #0
 8004ec0:	46c4      	mov	ip, r8
 8004ec2:	46ae      	mov	lr, r5
 8004ec4:	46d3      	mov	fp, sl
 8004ec6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004eca:	b298      	uxth	r0, r3
 8004ecc:	fb06 a000 	mla	r0, r6, r0, sl
 8004ed0:	0c1b      	lsrs	r3, r3, #16
 8004ed2:	0c02      	lsrs	r2, r0, #16
 8004ed4:	fb06 2303 	mla	r3, r6, r3, r2
 8004ed8:	f8de 2000 	ldr.w	r2, [lr]
 8004edc:	b280      	uxth	r0, r0
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	1a12      	subs	r2, r2, r0
 8004ee2:	445a      	add	r2, fp
 8004ee4:	f8de 0000 	ldr.w	r0, [lr]
 8004ee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ef2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004efc:	45e1      	cmp	r9, ip
 8004efe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f02:	f84e 2b04 	str.w	r2, [lr], #4
 8004f06:	d2de      	bcs.n	8004ec6 <quorem+0x42>
 8004f08:	9b00      	ldr	r3, [sp, #0]
 8004f0a:	58eb      	ldr	r3, [r5, r3]
 8004f0c:	b92b      	cbnz	r3, 8004f1a <quorem+0x96>
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	429d      	cmp	r5, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	d32f      	bcc.n	8004f78 <quorem+0xf4>
 8004f18:	613c      	str	r4, [r7, #16]
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f001 f9c4 	bl	80062a8 <__mcmp>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	db25      	blt.n	8004f70 <quorem+0xec>
 8004f24:	4629      	mov	r1, r5
 8004f26:	2000      	movs	r0, #0
 8004f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f2c:	f8d1 c000 	ldr.w	ip, [r1]
 8004f30:	fa1f fe82 	uxth.w	lr, r2
 8004f34:	fa1f f38c 	uxth.w	r3, ip
 8004f38:	eba3 030e 	sub.w	r3, r3, lr
 8004f3c:	4403      	add	r3, r0
 8004f3e:	0c12      	lsrs	r2, r2, #16
 8004f40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f4e:	45c1      	cmp	r9, r8
 8004f50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f54:	f841 3b04 	str.w	r3, [r1], #4
 8004f58:	d2e6      	bcs.n	8004f28 <quorem+0xa4>
 8004f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f62:	b922      	cbnz	r2, 8004f6e <quorem+0xea>
 8004f64:	3b04      	subs	r3, #4
 8004f66:	429d      	cmp	r5, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	d30b      	bcc.n	8004f84 <quorem+0x100>
 8004f6c:	613c      	str	r4, [r7, #16]
 8004f6e:	3601      	adds	r6, #1
 8004f70:	4630      	mov	r0, r6
 8004f72:	b003      	add	sp, #12
 8004f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	3b04      	subs	r3, #4
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	d1cb      	bne.n	8004f18 <quorem+0x94>
 8004f80:	3c01      	subs	r4, #1
 8004f82:	e7c6      	b.n	8004f12 <quorem+0x8e>
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	3b04      	subs	r3, #4
 8004f88:	2a00      	cmp	r2, #0
 8004f8a:	d1ef      	bne.n	8004f6c <quorem+0xe8>
 8004f8c:	3c01      	subs	r4, #1
 8004f8e:	e7ea      	b.n	8004f66 <quorem+0xe2>
 8004f90:	2000      	movs	r0, #0
 8004f92:	e7ee      	b.n	8004f72 <quorem+0xee>
 8004f94:	0000      	movs	r0, r0
	...

08004f98 <_dtoa_r>:
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	4614      	mov	r4, r2
 8004f9e:	461d      	mov	r5, r3
 8004fa0:	69c7      	ldr	r7, [r0, #28]
 8004fa2:	b097      	sub	sp, #92	@ 0x5c
 8004fa4:	4683      	mov	fp, r0
 8004fa6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004faa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004fac:	b97f      	cbnz	r7, 8004fce <_dtoa_r+0x36>
 8004fae:	2010      	movs	r0, #16
 8004fb0:	f000 fe02 	bl	8005bb8 <malloc>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	f8cb 001c 	str.w	r0, [fp, #28]
 8004fba:	b920      	cbnz	r0, 8004fc6 <_dtoa_r+0x2e>
 8004fbc:	21ef      	movs	r1, #239	@ 0xef
 8004fbe:	4ba8      	ldr	r3, [pc, #672]	@ (8005260 <_dtoa_r+0x2c8>)
 8004fc0:	48a8      	ldr	r0, [pc, #672]	@ (8005264 <_dtoa_r+0x2cc>)
 8004fc2:	f002 fc23 	bl	800780c <__assert_func>
 8004fc6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004fca:	6007      	str	r7, [r0, #0]
 8004fcc:	60c7      	str	r7, [r0, #12]
 8004fce:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	b159      	cbz	r1, 8004fee <_dtoa_r+0x56>
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4093      	lsls	r3, r2
 8004fdc:	604a      	str	r2, [r1, #4]
 8004fde:	608b      	str	r3, [r1, #8]
 8004fe0:	4658      	mov	r0, fp
 8004fe2:	f000 fedf 	bl	8005da4 <_Bfree>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	1e2b      	subs	r3, r5, #0
 8004ff0:	bfaf      	iteee	ge
 8004ff2:	2300      	movge	r3, #0
 8004ff4:	2201      	movlt	r2, #1
 8004ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ffa:	9303      	strlt	r3, [sp, #12]
 8004ffc:	bfa8      	it	ge
 8004ffe:	6033      	strge	r3, [r6, #0]
 8005000:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005004:	4b98      	ldr	r3, [pc, #608]	@ (8005268 <_dtoa_r+0x2d0>)
 8005006:	bfb8      	it	lt
 8005008:	6032      	strlt	r2, [r6, #0]
 800500a:	ea33 0308 	bics.w	r3, r3, r8
 800500e:	d112      	bne.n	8005036 <_dtoa_r+0x9e>
 8005010:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005014:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800501c:	4323      	orrs	r3, r4
 800501e:	f000 8550 	beq.w	8005ac2 <_dtoa_r+0xb2a>
 8005022:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005024:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800526c <_dtoa_r+0x2d4>
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8552 	beq.w	8005ad2 <_dtoa_r+0xb3a>
 800502e:	f10a 0303 	add.w	r3, sl, #3
 8005032:	f000 bd4c 	b.w	8005ace <_dtoa_r+0xb36>
 8005036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800503a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800503e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	2300      	movs	r3, #0
 8005046:	f7fb fcaf 	bl	80009a8 <__aeabi_dcmpeq>
 800504a:	4607      	mov	r7, r0
 800504c:	b158      	cbz	r0, 8005066 <_dtoa_r+0xce>
 800504e:	2301      	movs	r3, #1
 8005050:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005056:	b113      	cbz	r3, 800505e <_dtoa_r+0xc6>
 8005058:	4b85      	ldr	r3, [pc, #532]	@ (8005270 <_dtoa_r+0x2d8>)
 800505a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005274 <_dtoa_r+0x2dc>
 8005062:	f000 bd36 	b.w	8005ad2 <_dtoa_r+0xb3a>
 8005066:	ab14      	add	r3, sp, #80	@ 0x50
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	ab15      	add	r3, sp, #84	@ 0x54
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	4658      	mov	r0, fp
 8005070:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005074:	f001 fa30 	bl	80064d8 <__d2b>
 8005078:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800507c:	4681      	mov	r9, r0
 800507e:	2e00      	cmp	r6, #0
 8005080:	d077      	beq.n	8005172 <_dtoa_r+0x1da>
 8005082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005088:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800508c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005090:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005094:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005098:	9712      	str	r7, [sp, #72]	@ 0x48
 800509a:	4619      	mov	r1, r3
 800509c:	2200      	movs	r2, #0
 800509e:	4b76      	ldr	r3, [pc, #472]	@ (8005278 <_dtoa_r+0x2e0>)
 80050a0:	f7fb f862 	bl	8000168 <__aeabi_dsub>
 80050a4:	a368      	add	r3, pc, #416	@ (adr r3, 8005248 <_dtoa_r+0x2b0>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb fa15 	bl	80004d8 <__aeabi_dmul>
 80050ae:	a368      	add	r3, pc, #416	@ (adr r3, 8005250 <_dtoa_r+0x2b8>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	f7fb f85a 	bl	800016c <__adddf3>
 80050b8:	4604      	mov	r4, r0
 80050ba:	4630      	mov	r0, r6
 80050bc:	460d      	mov	r5, r1
 80050be:	f7fb f9a1 	bl	8000404 <__aeabi_i2d>
 80050c2:	a365      	add	r3, pc, #404	@ (adr r3, 8005258 <_dtoa_r+0x2c0>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb fa06 	bl	80004d8 <__aeabi_dmul>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4620      	mov	r0, r4
 80050d2:	4629      	mov	r1, r5
 80050d4:	f7fb f84a 	bl	800016c <__adddf3>
 80050d8:	4604      	mov	r4, r0
 80050da:	460d      	mov	r5, r1
 80050dc:	f7fb fcac 	bl	8000a38 <__aeabi_d2iz>
 80050e0:	2200      	movs	r2, #0
 80050e2:	4607      	mov	r7, r0
 80050e4:	2300      	movs	r3, #0
 80050e6:	4620      	mov	r0, r4
 80050e8:	4629      	mov	r1, r5
 80050ea:	f7fb fc67 	bl	80009bc <__aeabi_dcmplt>
 80050ee:	b140      	cbz	r0, 8005102 <_dtoa_r+0x16a>
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7fb f987 	bl	8000404 <__aeabi_i2d>
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	f7fb fc55 	bl	80009a8 <__aeabi_dcmpeq>
 80050fe:	b900      	cbnz	r0, 8005102 <_dtoa_r+0x16a>
 8005100:	3f01      	subs	r7, #1
 8005102:	2f16      	cmp	r7, #22
 8005104:	d853      	bhi.n	80051ae <_dtoa_r+0x216>
 8005106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800510a:	4b5c      	ldr	r3, [pc, #368]	@ (800527c <_dtoa_r+0x2e4>)
 800510c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	f7fb fc52 	bl	80009bc <__aeabi_dcmplt>
 8005118:	2800      	cmp	r0, #0
 800511a:	d04a      	beq.n	80051b2 <_dtoa_r+0x21a>
 800511c:	2300      	movs	r3, #0
 800511e:	3f01      	subs	r7, #1
 8005120:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005122:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005124:	1b9b      	subs	r3, r3, r6
 8005126:	1e5a      	subs	r2, r3, #1
 8005128:	bf46      	itte	mi
 800512a:	f1c3 0801 	rsbmi	r8, r3, #1
 800512e:	2300      	movmi	r3, #0
 8005130:	f04f 0800 	movpl.w	r8, #0
 8005134:	9209      	str	r2, [sp, #36]	@ 0x24
 8005136:	bf48      	it	mi
 8005138:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800513a:	2f00      	cmp	r7, #0
 800513c:	db3b      	blt.n	80051b6 <_dtoa_r+0x21e>
 800513e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005140:	970e      	str	r7, [sp, #56]	@ 0x38
 8005142:	443b      	add	r3, r7
 8005144:	9309      	str	r3, [sp, #36]	@ 0x24
 8005146:	2300      	movs	r3, #0
 8005148:	930a      	str	r3, [sp, #40]	@ 0x28
 800514a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800514c:	2b09      	cmp	r3, #9
 800514e:	d866      	bhi.n	800521e <_dtoa_r+0x286>
 8005150:	2b05      	cmp	r3, #5
 8005152:	bfc4      	itt	gt
 8005154:	3b04      	subgt	r3, #4
 8005156:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005158:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800515a:	bfc8      	it	gt
 800515c:	2400      	movgt	r4, #0
 800515e:	f1a3 0302 	sub.w	r3, r3, #2
 8005162:	bfd8      	it	le
 8005164:	2401      	movle	r4, #1
 8005166:	2b03      	cmp	r3, #3
 8005168:	d864      	bhi.n	8005234 <_dtoa_r+0x29c>
 800516a:	e8df f003 	tbb	[pc, r3]
 800516e:	382b      	.short	0x382b
 8005170:	5636      	.short	0x5636
 8005172:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005176:	441e      	add	r6, r3
 8005178:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800517c:	2b20      	cmp	r3, #32
 800517e:	bfc1      	itttt	gt
 8005180:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005184:	fa08 f803 	lslgt.w	r8, r8, r3
 8005188:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800518c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005190:	bfd6      	itet	le
 8005192:	f1c3 0320 	rsble	r3, r3, #32
 8005196:	ea48 0003 	orrgt.w	r0, r8, r3
 800519a:	fa04 f003 	lslle.w	r0, r4, r3
 800519e:	f7fb f921 	bl	80003e4 <__aeabi_ui2d>
 80051a2:	2201      	movs	r2, #1
 80051a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051a8:	3e01      	subs	r6, #1
 80051aa:	9212      	str	r2, [sp, #72]	@ 0x48
 80051ac:	e775      	b.n	800509a <_dtoa_r+0x102>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e7b6      	b.n	8005120 <_dtoa_r+0x188>
 80051b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80051b4:	e7b5      	b.n	8005122 <_dtoa_r+0x18a>
 80051b6:	427b      	negs	r3, r7
 80051b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ba:	2300      	movs	r3, #0
 80051bc:	eba8 0807 	sub.w	r8, r8, r7
 80051c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80051c2:	e7c2      	b.n	800514a <_dtoa_r+0x1b2>
 80051c4:	2300      	movs	r3, #0
 80051c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dc35      	bgt.n	800523a <_dtoa_r+0x2a2>
 80051ce:	2301      	movs	r3, #1
 80051d0:	461a      	mov	r2, r3
 80051d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80051d6:	9221      	str	r2, [sp, #132]	@ 0x84
 80051d8:	e00b      	b.n	80051f2 <_dtoa_r+0x25a>
 80051da:	2301      	movs	r3, #1
 80051dc:	e7f3      	b.n	80051c6 <_dtoa_r+0x22e>
 80051de:	2300      	movs	r3, #0
 80051e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	9308      	str	r3, [sp, #32]
 80051e8:	3301      	adds	r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	9307      	str	r3, [sp, #28]
 80051ee:	bfb8      	it	lt
 80051f0:	2301      	movlt	r3, #1
 80051f2:	2100      	movs	r1, #0
 80051f4:	2204      	movs	r2, #4
 80051f6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80051fa:	f102 0514 	add.w	r5, r2, #20
 80051fe:	429d      	cmp	r5, r3
 8005200:	d91f      	bls.n	8005242 <_dtoa_r+0x2aa>
 8005202:	6041      	str	r1, [r0, #4]
 8005204:	4658      	mov	r0, fp
 8005206:	f000 fd8d 	bl	8005d24 <_Balloc>
 800520a:	4682      	mov	sl, r0
 800520c:	2800      	cmp	r0, #0
 800520e:	d139      	bne.n	8005284 <_dtoa_r+0x2ec>
 8005210:	4602      	mov	r2, r0
 8005212:	f240 11af 	movw	r1, #431	@ 0x1af
 8005216:	4b1a      	ldr	r3, [pc, #104]	@ (8005280 <_dtoa_r+0x2e8>)
 8005218:	e6d2      	b.n	8004fc0 <_dtoa_r+0x28>
 800521a:	2301      	movs	r3, #1
 800521c:	e7e0      	b.n	80051e0 <_dtoa_r+0x248>
 800521e:	2401      	movs	r4, #1
 8005220:	2300      	movs	r3, #0
 8005222:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005224:	9320      	str	r3, [sp, #128]	@ 0x80
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	2200      	movs	r2, #0
 800522c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005230:	2312      	movs	r3, #18
 8005232:	e7d0      	b.n	80051d6 <_dtoa_r+0x23e>
 8005234:	2301      	movs	r3, #1
 8005236:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005238:	e7f5      	b.n	8005226 <_dtoa_r+0x28e>
 800523a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800523c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005240:	e7d7      	b.n	80051f2 <_dtoa_r+0x25a>
 8005242:	3101      	adds	r1, #1
 8005244:	0052      	lsls	r2, r2, #1
 8005246:	e7d8      	b.n	80051fa <_dtoa_r+0x262>
 8005248:	636f4361 	.word	0x636f4361
 800524c:	3fd287a7 	.word	0x3fd287a7
 8005250:	8b60c8b3 	.word	0x8b60c8b3
 8005254:	3fc68a28 	.word	0x3fc68a28
 8005258:	509f79fb 	.word	0x509f79fb
 800525c:	3fd34413 	.word	0x3fd34413
 8005260:	080085c4 	.word	0x080085c4
 8005264:	080085db 	.word	0x080085db
 8005268:	7ff00000 	.word	0x7ff00000
 800526c:	080085c0 	.word	0x080085c0
 8005270:	0800858f 	.word	0x0800858f
 8005274:	0800858e 	.word	0x0800858e
 8005278:	3ff80000 	.word	0x3ff80000
 800527c:	080086d8 	.word	0x080086d8
 8005280:	08008633 	.word	0x08008633
 8005284:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005288:	6018      	str	r0, [r3, #0]
 800528a:	9b07      	ldr	r3, [sp, #28]
 800528c:	2b0e      	cmp	r3, #14
 800528e:	f200 80a4 	bhi.w	80053da <_dtoa_r+0x442>
 8005292:	2c00      	cmp	r4, #0
 8005294:	f000 80a1 	beq.w	80053da <_dtoa_r+0x442>
 8005298:	2f00      	cmp	r7, #0
 800529a:	dd33      	ble.n	8005304 <_dtoa_r+0x36c>
 800529c:	4b86      	ldr	r3, [pc, #536]	@ (80054b8 <_dtoa_r+0x520>)
 800529e:	f007 020f 	and.w	r2, r7, #15
 80052a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052a6:	05f8      	lsls	r0, r7, #23
 80052a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052b4:	d516      	bpl.n	80052e4 <_dtoa_r+0x34c>
 80052b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052ba:	4b80      	ldr	r3, [pc, #512]	@ (80054bc <_dtoa_r+0x524>)
 80052bc:	2603      	movs	r6, #3
 80052be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052c2:	f7fb fa33 	bl	800072c <__aeabi_ddiv>
 80052c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ca:	f004 040f 	and.w	r4, r4, #15
 80052ce:	4d7b      	ldr	r5, [pc, #492]	@ (80054bc <_dtoa_r+0x524>)
 80052d0:	b954      	cbnz	r4, 80052e8 <_dtoa_r+0x350>
 80052d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052da:	f7fb fa27 	bl	800072c <__aeabi_ddiv>
 80052de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052e2:	e028      	b.n	8005336 <_dtoa_r+0x39e>
 80052e4:	2602      	movs	r6, #2
 80052e6:	e7f2      	b.n	80052ce <_dtoa_r+0x336>
 80052e8:	07e1      	lsls	r1, r4, #31
 80052ea:	d508      	bpl.n	80052fe <_dtoa_r+0x366>
 80052ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052f4:	f7fb f8f0 	bl	80004d8 <__aeabi_dmul>
 80052f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052fc:	3601      	adds	r6, #1
 80052fe:	1064      	asrs	r4, r4, #1
 8005300:	3508      	adds	r5, #8
 8005302:	e7e5      	b.n	80052d0 <_dtoa_r+0x338>
 8005304:	f000 80d2 	beq.w	80054ac <_dtoa_r+0x514>
 8005308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800530c:	427c      	negs	r4, r7
 800530e:	4b6a      	ldr	r3, [pc, #424]	@ (80054b8 <_dtoa_r+0x520>)
 8005310:	f004 020f 	and.w	r2, r4, #15
 8005314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f7fb f8dc 	bl	80004d8 <__aeabi_dmul>
 8005320:	2602      	movs	r6, #2
 8005322:	2300      	movs	r3, #0
 8005324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005328:	4d64      	ldr	r5, [pc, #400]	@ (80054bc <_dtoa_r+0x524>)
 800532a:	1124      	asrs	r4, r4, #4
 800532c:	2c00      	cmp	r4, #0
 800532e:	f040 80b2 	bne.w	8005496 <_dtoa_r+0x4fe>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1d3      	bne.n	80052de <_dtoa_r+0x346>
 8005336:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800533a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80b7 	beq.w	80054b0 <_dtoa_r+0x518>
 8005342:	2200      	movs	r2, #0
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	4b5d      	ldr	r3, [pc, #372]	@ (80054c0 <_dtoa_r+0x528>)
 800534a:	f7fb fb37 	bl	80009bc <__aeabi_dcmplt>
 800534e:	2800      	cmp	r0, #0
 8005350:	f000 80ae 	beq.w	80054b0 <_dtoa_r+0x518>
 8005354:	9b07      	ldr	r3, [sp, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 80aa 	beq.w	80054b0 <_dtoa_r+0x518>
 800535c:	9b08      	ldr	r3, [sp, #32]
 800535e:	2b00      	cmp	r3, #0
 8005360:	dd37      	ble.n	80053d2 <_dtoa_r+0x43a>
 8005362:	1e7b      	subs	r3, r7, #1
 8005364:	4620      	mov	r0, r4
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	2200      	movs	r2, #0
 800536a:	4629      	mov	r1, r5
 800536c:	4b55      	ldr	r3, [pc, #340]	@ (80054c4 <_dtoa_r+0x52c>)
 800536e:	f7fb f8b3 	bl	80004d8 <__aeabi_dmul>
 8005372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005376:	9c08      	ldr	r4, [sp, #32]
 8005378:	3601      	adds	r6, #1
 800537a:	4630      	mov	r0, r6
 800537c:	f7fb f842 	bl	8000404 <__aeabi_i2d>
 8005380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005384:	f7fb f8a8 	bl	80004d8 <__aeabi_dmul>
 8005388:	2200      	movs	r2, #0
 800538a:	4b4f      	ldr	r3, [pc, #316]	@ (80054c8 <_dtoa_r+0x530>)
 800538c:	f7fa feee 	bl	800016c <__adddf3>
 8005390:	4605      	mov	r5, r0
 8005392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005396:	2c00      	cmp	r4, #0
 8005398:	f040 809a 	bne.w	80054d0 <_dtoa_r+0x538>
 800539c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	4b4a      	ldr	r3, [pc, #296]	@ (80054cc <_dtoa_r+0x534>)
 80053a4:	f7fa fee0 	bl	8000168 <__aeabi_dsub>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053b0:	462a      	mov	r2, r5
 80053b2:	4633      	mov	r3, r6
 80053b4:	f7fb fb20 	bl	80009f8 <__aeabi_dcmpgt>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	f040 828e 	bne.w	80058da <_dtoa_r+0x942>
 80053be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053c2:	462a      	mov	r2, r5
 80053c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053c8:	f7fb faf8 	bl	80009bc <__aeabi_dcmplt>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f040 8127 	bne.w	8005620 <_dtoa_r+0x688>
 80053d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80053d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f2c0 8163 	blt.w	80056a8 <_dtoa_r+0x710>
 80053e2:	2f0e      	cmp	r7, #14
 80053e4:	f300 8160 	bgt.w	80056a8 <_dtoa_r+0x710>
 80053e8:	4b33      	ldr	r3, [pc, #204]	@ (80054b8 <_dtoa_r+0x520>)
 80053ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da03      	bge.n	8005404 <_dtoa_r+0x46c>
 80053fc:	9b07      	ldr	r3, [sp, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f340 8100 	ble.w	8005604 <_dtoa_r+0x66c>
 8005404:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005408:	4656      	mov	r6, sl
 800540a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	f7fb f98b 	bl	800072c <__aeabi_ddiv>
 8005416:	f7fb fb0f 	bl	8000a38 <__aeabi_d2iz>
 800541a:	4680      	mov	r8, r0
 800541c:	f7fa fff2 	bl	8000404 <__aeabi_i2d>
 8005420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005424:	f7fb f858 	bl	80004d8 <__aeabi_dmul>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fa fe9a 	bl	8000168 <__aeabi_dsub>
 8005434:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005438:	9d07      	ldr	r5, [sp, #28]
 800543a:	f806 4b01 	strb.w	r4, [r6], #1
 800543e:	eba6 040a 	sub.w	r4, r6, sl
 8005442:	42a5      	cmp	r5, r4
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	f040 8116 	bne.w	8005678 <_dtoa_r+0x6e0>
 800544c:	f7fa fe8e 	bl	800016c <__adddf3>
 8005450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005454:	4604      	mov	r4, r0
 8005456:	460d      	mov	r5, r1
 8005458:	f7fb face 	bl	80009f8 <__aeabi_dcmpgt>
 800545c:	2800      	cmp	r0, #0
 800545e:	f040 80f8 	bne.w	8005652 <_dtoa_r+0x6ba>
 8005462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005466:	4620      	mov	r0, r4
 8005468:	4629      	mov	r1, r5
 800546a:	f7fb fa9d 	bl	80009a8 <__aeabi_dcmpeq>
 800546e:	b118      	cbz	r0, 8005478 <_dtoa_r+0x4e0>
 8005470:	f018 0f01 	tst.w	r8, #1
 8005474:	f040 80ed 	bne.w	8005652 <_dtoa_r+0x6ba>
 8005478:	4649      	mov	r1, r9
 800547a:	4658      	mov	r0, fp
 800547c:	f000 fc92 	bl	8005da4 <_Bfree>
 8005480:	2300      	movs	r3, #0
 8005482:	7033      	strb	r3, [r6, #0]
 8005484:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005486:	3701      	adds	r7, #1
 8005488:	601f      	str	r7, [r3, #0]
 800548a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8320 	beq.w	8005ad2 <_dtoa_r+0xb3a>
 8005492:	601e      	str	r6, [r3, #0]
 8005494:	e31d      	b.n	8005ad2 <_dtoa_r+0xb3a>
 8005496:	07e2      	lsls	r2, r4, #31
 8005498:	d505      	bpl.n	80054a6 <_dtoa_r+0x50e>
 800549a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800549e:	f7fb f81b 	bl	80004d8 <__aeabi_dmul>
 80054a2:	2301      	movs	r3, #1
 80054a4:	3601      	adds	r6, #1
 80054a6:	1064      	asrs	r4, r4, #1
 80054a8:	3508      	adds	r5, #8
 80054aa:	e73f      	b.n	800532c <_dtoa_r+0x394>
 80054ac:	2602      	movs	r6, #2
 80054ae:	e742      	b.n	8005336 <_dtoa_r+0x39e>
 80054b0:	9c07      	ldr	r4, [sp, #28]
 80054b2:	9704      	str	r7, [sp, #16]
 80054b4:	e761      	b.n	800537a <_dtoa_r+0x3e2>
 80054b6:	bf00      	nop
 80054b8:	080086d8 	.word	0x080086d8
 80054bc:	080086b0 	.word	0x080086b0
 80054c0:	3ff00000 	.word	0x3ff00000
 80054c4:	40240000 	.word	0x40240000
 80054c8:	401c0000 	.word	0x401c0000
 80054cc:	40140000 	.word	0x40140000
 80054d0:	4b70      	ldr	r3, [pc, #448]	@ (8005694 <_dtoa_r+0x6fc>)
 80054d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054dc:	4454      	add	r4, sl
 80054de:	2900      	cmp	r1, #0
 80054e0:	d045      	beq.n	800556e <_dtoa_r+0x5d6>
 80054e2:	2000      	movs	r0, #0
 80054e4:	496c      	ldr	r1, [pc, #432]	@ (8005698 <_dtoa_r+0x700>)
 80054e6:	f7fb f921 	bl	800072c <__aeabi_ddiv>
 80054ea:	4633      	mov	r3, r6
 80054ec:	462a      	mov	r2, r5
 80054ee:	f7fa fe3b 	bl	8000168 <__aeabi_dsub>
 80054f2:	4656      	mov	r6, sl
 80054f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054fc:	f7fb fa9c 	bl	8000a38 <__aeabi_d2iz>
 8005500:	4605      	mov	r5, r0
 8005502:	f7fa ff7f 	bl	8000404 <__aeabi_i2d>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800550e:	f7fa fe2b 	bl	8000168 <__aeabi_dsub>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	3530      	adds	r5, #48	@ 0x30
 8005518:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800551c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005520:	f806 5b01 	strb.w	r5, [r6], #1
 8005524:	f7fb fa4a 	bl	80009bc <__aeabi_dcmplt>
 8005528:	2800      	cmp	r0, #0
 800552a:	d163      	bne.n	80055f4 <_dtoa_r+0x65c>
 800552c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005530:	2000      	movs	r0, #0
 8005532:	495a      	ldr	r1, [pc, #360]	@ (800569c <_dtoa_r+0x704>)
 8005534:	f7fa fe18 	bl	8000168 <__aeabi_dsub>
 8005538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800553c:	f7fb fa3e 	bl	80009bc <__aeabi_dcmplt>
 8005540:	2800      	cmp	r0, #0
 8005542:	f040 8087 	bne.w	8005654 <_dtoa_r+0x6bc>
 8005546:	42a6      	cmp	r6, r4
 8005548:	f43f af43 	beq.w	80053d2 <_dtoa_r+0x43a>
 800554c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005550:	2200      	movs	r2, #0
 8005552:	4b53      	ldr	r3, [pc, #332]	@ (80056a0 <_dtoa_r+0x708>)
 8005554:	f7fa ffc0 	bl	80004d8 <__aeabi_dmul>
 8005558:	2200      	movs	r2, #0
 800555a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800555e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005562:	4b4f      	ldr	r3, [pc, #316]	@ (80056a0 <_dtoa_r+0x708>)
 8005564:	f7fa ffb8 	bl	80004d8 <__aeabi_dmul>
 8005568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800556c:	e7c4      	b.n	80054f8 <_dtoa_r+0x560>
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	f7fa ffb1 	bl	80004d8 <__aeabi_dmul>
 8005576:	4656      	mov	r6, sl
 8005578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800557c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800557e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005582:	f7fb fa59 	bl	8000a38 <__aeabi_d2iz>
 8005586:	4605      	mov	r5, r0
 8005588:	f7fa ff3c 	bl	8000404 <__aeabi_i2d>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005594:	f7fa fde8 	bl	8000168 <__aeabi_dsub>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	3530      	adds	r5, #48	@ 0x30
 800559e:	f806 5b01 	strb.w	r5, [r6], #1
 80055a2:	42a6      	cmp	r6, r4
 80055a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	d124      	bne.n	80055f8 <_dtoa_r+0x660>
 80055ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055b2:	4b39      	ldr	r3, [pc, #228]	@ (8005698 <_dtoa_r+0x700>)
 80055b4:	f7fa fdda 	bl	800016c <__adddf3>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c0:	f7fb fa1a 	bl	80009f8 <__aeabi_dcmpgt>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d145      	bne.n	8005654 <_dtoa_r+0x6bc>
 80055c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055cc:	2000      	movs	r0, #0
 80055ce:	4932      	ldr	r1, [pc, #200]	@ (8005698 <_dtoa_r+0x700>)
 80055d0:	f7fa fdca 	bl	8000168 <__aeabi_dsub>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055dc:	f7fb f9ee 	bl	80009bc <__aeabi_dcmplt>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f43f aef6 	beq.w	80053d2 <_dtoa_r+0x43a>
 80055e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80055e8:	1e73      	subs	r3, r6, #1
 80055ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80055ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055f0:	2b30      	cmp	r3, #48	@ 0x30
 80055f2:	d0f8      	beq.n	80055e6 <_dtoa_r+0x64e>
 80055f4:	9f04      	ldr	r7, [sp, #16]
 80055f6:	e73f      	b.n	8005478 <_dtoa_r+0x4e0>
 80055f8:	4b29      	ldr	r3, [pc, #164]	@ (80056a0 <_dtoa_r+0x708>)
 80055fa:	f7fa ff6d 	bl	80004d8 <__aeabi_dmul>
 80055fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005602:	e7bc      	b.n	800557e <_dtoa_r+0x5e6>
 8005604:	d10c      	bne.n	8005620 <_dtoa_r+0x688>
 8005606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800560a:	2200      	movs	r2, #0
 800560c:	4b25      	ldr	r3, [pc, #148]	@ (80056a4 <_dtoa_r+0x70c>)
 800560e:	f7fa ff63 	bl	80004d8 <__aeabi_dmul>
 8005612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005616:	f7fb f9e5 	bl	80009e4 <__aeabi_dcmpge>
 800561a:	2800      	cmp	r0, #0
 800561c:	f000 815b 	beq.w	80058d6 <_dtoa_r+0x93e>
 8005620:	2400      	movs	r4, #0
 8005622:	4625      	mov	r5, r4
 8005624:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005626:	4656      	mov	r6, sl
 8005628:	43db      	mvns	r3, r3
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	2700      	movs	r7, #0
 800562e:	4621      	mov	r1, r4
 8005630:	4658      	mov	r0, fp
 8005632:	f000 fbb7 	bl	8005da4 <_Bfree>
 8005636:	2d00      	cmp	r5, #0
 8005638:	d0dc      	beq.n	80055f4 <_dtoa_r+0x65c>
 800563a:	b12f      	cbz	r7, 8005648 <_dtoa_r+0x6b0>
 800563c:	42af      	cmp	r7, r5
 800563e:	d003      	beq.n	8005648 <_dtoa_r+0x6b0>
 8005640:	4639      	mov	r1, r7
 8005642:	4658      	mov	r0, fp
 8005644:	f000 fbae 	bl	8005da4 <_Bfree>
 8005648:	4629      	mov	r1, r5
 800564a:	4658      	mov	r0, fp
 800564c:	f000 fbaa 	bl	8005da4 <_Bfree>
 8005650:	e7d0      	b.n	80055f4 <_dtoa_r+0x65c>
 8005652:	9704      	str	r7, [sp, #16]
 8005654:	4633      	mov	r3, r6
 8005656:	461e      	mov	r6, r3
 8005658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800565c:	2a39      	cmp	r2, #57	@ 0x39
 800565e:	d107      	bne.n	8005670 <_dtoa_r+0x6d8>
 8005660:	459a      	cmp	sl, r3
 8005662:	d1f8      	bne.n	8005656 <_dtoa_r+0x6be>
 8005664:	9a04      	ldr	r2, [sp, #16]
 8005666:	3201      	adds	r2, #1
 8005668:	9204      	str	r2, [sp, #16]
 800566a:	2230      	movs	r2, #48	@ 0x30
 800566c:	f88a 2000 	strb.w	r2, [sl]
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	3201      	adds	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e7bd      	b.n	80055f4 <_dtoa_r+0x65c>
 8005678:	2200      	movs	r2, #0
 800567a:	4b09      	ldr	r3, [pc, #36]	@ (80056a0 <_dtoa_r+0x708>)
 800567c:	f7fa ff2c 	bl	80004d8 <__aeabi_dmul>
 8005680:	2200      	movs	r2, #0
 8005682:	2300      	movs	r3, #0
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	f7fb f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800568c:	2800      	cmp	r0, #0
 800568e:	f43f aebc 	beq.w	800540a <_dtoa_r+0x472>
 8005692:	e6f1      	b.n	8005478 <_dtoa_r+0x4e0>
 8005694:	080086d8 	.word	0x080086d8
 8005698:	3fe00000 	.word	0x3fe00000
 800569c:	3ff00000 	.word	0x3ff00000
 80056a0:	40240000 	.word	0x40240000
 80056a4:	40140000 	.word	0x40140000
 80056a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	f000 80db 	beq.w	8005866 <_dtoa_r+0x8ce>
 80056b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80056b2:	2a01      	cmp	r2, #1
 80056b4:	f300 80bf 	bgt.w	8005836 <_dtoa_r+0x89e>
 80056b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	f000 80b7 	beq.w	800582e <_dtoa_r+0x896>
 80056c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80056c4:	4646      	mov	r6, r8
 80056c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80056c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ca:	2101      	movs	r1, #1
 80056cc:	441a      	add	r2, r3
 80056ce:	4658      	mov	r0, fp
 80056d0:	4498      	add	r8, r3
 80056d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80056d4:	f000 fc64 	bl	8005fa0 <__i2b>
 80056d8:	4605      	mov	r5, r0
 80056da:	b15e      	cbz	r6, 80056f4 <_dtoa_r+0x75c>
 80056dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	dd08      	ble.n	80056f4 <_dtoa_r+0x75c>
 80056e2:	42b3      	cmp	r3, r6
 80056e4:	bfa8      	it	ge
 80056e6:	4633      	movge	r3, r6
 80056e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ea:	eba8 0803 	sub.w	r8, r8, r3
 80056ee:	1af6      	subs	r6, r6, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80056f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056f6:	b1f3      	cbz	r3, 8005736 <_dtoa_r+0x79e>
 80056f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80b7 	beq.w	800586e <_dtoa_r+0x8d6>
 8005700:	b18c      	cbz	r4, 8005726 <_dtoa_r+0x78e>
 8005702:	4629      	mov	r1, r5
 8005704:	4622      	mov	r2, r4
 8005706:	4658      	mov	r0, fp
 8005708:	f000 fd08 	bl	800611c <__pow5mult>
 800570c:	464a      	mov	r2, r9
 800570e:	4601      	mov	r1, r0
 8005710:	4605      	mov	r5, r0
 8005712:	4658      	mov	r0, fp
 8005714:	f000 fc5a 	bl	8005fcc <__multiply>
 8005718:	4649      	mov	r1, r9
 800571a:	9004      	str	r0, [sp, #16]
 800571c:	4658      	mov	r0, fp
 800571e:	f000 fb41 	bl	8005da4 <_Bfree>
 8005722:	9b04      	ldr	r3, [sp, #16]
 8005724:	4699      	mov	r9, r3
 8005726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005728:	1b1a      	subs	r2, r3, r4
 800572a:	d004      	beq.n	8005736 <_dtoa_r+0x79e>
 800572c:	4649      	mov	r1, r9
 800572e:	4658      	mov	r0, fp
 8005730:	f000 fcf4 	bl	800611c <__pow5mult>
 8005734:	4681      	mov	r9, r0
 8005736:	2101      	movs	r1, #1
 8005738:	4658      	mov	r0, fp
 800573a:	f000 fc31 	bl	8005fa0 <__i2b>
 800573e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005740:	4604      	mov	r4, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 81c9 	beq.w	8005ada <_dtoa_r+0xb42>
 8005748:	461a      	mov	r2, r3
 800574a:	4601      	mov	r1, r0
 800574c:	4658      	mov	r0, fp
 800574e:	f000 fce5 	bl	800611c <__pow5mult>
 8005752:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005754:	4604      	mov	r4, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	f300 808f 	bgt.w	800587a <_dtoa_r+0x8e2>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8087 	bne.w	8005872 <_dtoa_r+0x8da>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 8083 	bne.w	8005876 <_dtoa_r+0x8de>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005776:	0d1b      	lsrs	r3, r3, #20
 8005778:	051b      	lsls	r3, r3, #20
 800577a:	b12b      	cbz	r3, 8005788 <_dtoa_r+0x7f0>
 800577c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577e:	f108 0801 	add.w	r8, r8, #1
 8005782:	3301      	adds	r3, #1
 8005784:	9309      	str	r3, [sp, #36]	@ 0x24
 8005786:	2301      	movs	r3, #1
 8005788:	930a      	str	r3, [sp, #40]	@ 0x28
 800578a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 81aa 	beq.w	8005ae6 <_dtoa_r+0xb4e>
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005798:	6918      	ldr	r0, [r3, #16]
 800579a:	f000 fbb5 	bl	8005f08 <__hi0bits>
 800579e:	f1c0 0020 	rsb	r0, r0, #32
 80057a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a4:	4418      	add	r0, r3
 80057a6:	f010 001f 	ands.w	r0, r0, #31
 80057aa:	d071      	beq.n	8005890 <_dtoa_r+0x8f8>
 80057ac:	f1c0 0320 	rsb	r3, r0, #32
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	dd65      	ble.n	8005880 <_dtoa_r+0x8e8>
 80057b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b6:	f1c0 001c 	rsb	r0, r0, #28
 80057ba:	4403      	add	r3, r0
 80057bc:	4480      	add	r8, r0
 80057be:	4406      	add	r6, r0
 80057c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057c2:	f1b8 0f00 	cmp.w	r8, #0
 80057c6:	dd05      	ble.n	80057d4 <_dtoa_r+0x83c>
 80057c8:	4649      	mov	r1, r9
 80057ca:	4642      	mov	r2, r8
 80057cc:	4658      	mov	r0, fp
 80057ce:	f000 fcff 	bl	80061d0 <__lshift>
 80057d2:	4681      	mov	r9, r0
 80057d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dd05      	ble.n	80057e6 <_dtoa_r+0x84e>
 80057da:	4621      	mov	r1, r4
 80057dc:	461a      	mov	r2, r3
 80057de:	4658      	mov	r0, fp
 80057e0:	f000 fcf6 	bl	80061d0 <__lshift>
 80057e4:	4604      	mov	r4, r0
 80057e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d053      	beq.n	8005894 <_dtoa_r+0x8fc>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4648      	mov	r0, r9
 80057f0:	f000 fd5a 	bl	80062a8 <__mcmp>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	da4d      	bge.n	8005894 <_dtoa_r+0x8fc>
 80057f8:	1e7b      	subs	r3, r7, #1
 80057fa:	4649      	mov	r1, r9
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	220a      	movs	r2, #10
 8005800:	2300      	movs	r3, #0
 8005802:	4658      	mov	r0, fp
 8005804:	f000 faf0 	bl	8005de8 <__multadd>
 8005808:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800580a:	4681      	mov	r9, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 816c 	beq.w	8005aea <_dtoa_r+0xb52>
 8005812:	2300      	movs	r3, #0
 8005814:	4629      	mov	r1, r5
 8005816:	220a      	movs	r2, #10
 8005818:	4658      	mov	r0, fp
 800581a:	f000 fae5 	bl	8005de8 <__multadd>
 800581e:	9b08      	ldr	r3, [sp, #32]
 8005820:	4605      	mov	r5, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	dc61      	bgt.n	80058ea <_dtoa_r+0x952>
 8005826:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005828:	2b02      	cmp	r3, #2
 800582a:	dc3b      	bgt.n	80058a4 <_dtoa_r+0x90c>
 800582c:	e05d      	b.n	80058ea <_dtoa_r+0x952>
 800582e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005830:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005834:	e746      	b.n	80056c4 <_dtoa_r+0x72c>
 8005836:	9b07      	ldr	r3, [sp, #28]
 8005838:	1e5c      	subs	r4, r3, #1
 800583a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800583c:	42a3      	cmp	r3, r4
 800583e:	bfbf      	itttt	lt
 8005840:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005842:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005844:	1ae3      	sublt	r3, r4, r3
 8005846:	18d2      	addlt	r2, r2, r3
 8005848:	bfa8      	it	ge
 800584a:	1b1c      	subge	r4, r3, r4
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	bfbe      	ittt	lt
 8005850:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005852:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005854:	2400      	movlt	r4, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfb5      	itete	lt
 800585a:	eba8 0603 	sublt.w	r6, r8, r3
 800585e:	4646      	movge	r6, r8
 8005860:	2300      	movlt	r3, #0
 8005862:	9b07      	ldrge	r3, [sp, #28]
 8005864:	e730      	b.n	80056c8 <_dtoa_r+0x730>
 8005866:	4646      	mov	r6, r8
 8005868:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800586a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800586c:	e735      	b.n	80056da <_dtoa_r+0x742>
 800586e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005870:	e75c      	b.n	800572c <_dtoa_r+0x794>
 8005872:	2300      	movs	r3, #0
 8005874:	e788      	b.n	8005788 <_dtoa_r+0x7f0>
 8005876:	9b02      	ldr	r3, [sp, #8]
 8005878:	e786      	b.n	8005788 <_dtoa_r+0x7f0>
 800587a:	2300      	movs	r3, #0
 800587c:	930a      	str	r3, [sp, #40]	@ 0x28
 800587e:	e788      	b.n	8005792 <_dtoa_r+0x7fa>
 8005880:	d09f      	beq.n	80057c2 <_dtoa_r+0x82a>
 8005882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005884:	331c      	adds	r3, #28
 8005886:	441a      	add	r2, r3
 8005888:	4498      	add	r8, r3
 800588a:	441e      	add	r6, r3
 800588c:	9209      	str	r2, [sp, #36]	@ 0x24
 800588e:	e798      	b.n	80057c2 <_dtoa_r+0x82a>
 8005890:	4603      	mov	r3, r0
 8005892:	e7f6      	b.n	8005882 <_dtoa_r+0x8ea>
 8005894:	9b07      	ldr	r3, [sp, #28]
 8005896:	9704      	str	r7, [sp, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	dc20      	bgt.n	80058de <_dtoa_r+0x946>
 800589c:	9308      	str	r3, [sp, #32]
 800589e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	dd1e      	ble.n	80058e2 <_dtoa_r+0x94a>
 80058a4:	9b08      	ldr	r3, [sp, #32]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f47f aebc 	bne.w	8005624 <_dtoa_r+0x68c>
 80058ac:	4621      	mov	r1, r4
 80058ae:	2205      	movs	r2, #5
 80058b0:	4658      	mov	r0, fp
 80058b2:	f000 fa99 	bl	8005de8 <__multadd>
 80058b6:	4601      	mov	r1, r0
 80058b8:	4604      	mov	r4, r0
 80058ba:	4648      	mov	r0, r9
 80058bc:	f000 fcf4 	bl	80062a8 <__mcmp>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	f77f aeaf 	ble.w	8005624 <_dtoa_r+0x68c>
 80058c6:	2331      	movs	r3, #49	@ 0x31
 80058c8:	4656      	mov	r6, sl
 80058ca:	f806 3b01 	strb.w	r3, [r6], #1
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	3301      	adds	r3, #1
 80058d2:	9304      	str	r3, [sp, #16]
 80058d4:	e6aa      	b.n	800562c <_dtoa_r+0x694>
 80058d6:	9c07      	ldr	r4, [sp, #28]
 80058d8:	9704      	str	r7, [sp, #16]
 80058da:	4625      	mov	r5, r4
 80058dc:	e7f3      	b.n	80058c6 <_dtoa_r+0x92e>
 80058de:	9b07      	ldr	r3, [sp, #28]
 80058e0:	9308      	str	r3, [sp, #32]
 80058e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8104 	beq.w	8005af2 <_dtoa_r+0xb5a>
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	dd05      	ble.n	80058fa <_dtoa_r+0x962>
 80058ee:	4629      	mov	r1, r5
 80058f0:	4632      	mov	r2, r6
 80058f2:	4658      	mov	r0, fp
 80058f4:	f000 fc6c 	bl	80061d0 <__lshift>
 80058f8:	4605      	mov	r5, r0
 80058fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05a      	beq.n	80059b6 <_dtoa_r+0xa1e>
 8005900:	4658      	mov	r0, fp
 8005902:	6869      	ldr	r1, [r5, #4]
 8005904:	f000 fa0e 	bl	8005d24 <_Balloc>
 8005908:	4606      	mov	r6, r0
 800590a:	b928      	cbnz	r0, 8005918 <_dtoa_r+0x980>
 800590c:	4602      	mov	r2, r0
 800590e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005912:	4b83      	ldr	r3, [pc, #524]	@ (8005b20 <_dtoa_r+0xb88>)
 8005914:	f7ff bb54 	b.w	8004fc0 <_dtoa_r+0x28>
 8005918:	692a      	ldr	r2, [r5, #16]
 800591a:	f105 010c 	add.w	r1, r5, #12
 800591e:	3202      	adds	r2, #2
 8005920:	0092      	lsls	r2, r2, #2
 8005922:	300c      	adds	r0, #12
 8005924:	f001 ff5e 	bl	80077e4 <memcpy>
 8005928:	2201      	movs	r2, #1
 800592a:	4631      	mov	r1, r6
 800592c:	4658      	mov	r0, fp
 800592e:	f000 fc4f 	bl	80061d0 <__lshift>
 8005932:	462f      	mov	r7, r5
 8005934:	4605      	mov	r5, r0
 8005936:	f10a 0301 	add.w	r3, sl, #1
 800593a:	9307      	str	r3, [sp, #28]
 800593c:	9b08      	ldr	r3, [sp, #32]
 800593e:	4453      	add	r3, sl
 8005940:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005942:	9b02      	ldr	r3, [sp, #8]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	930a      	str	r3, [sp, #40]	@ 0x28
 800594a:	9b07      	ldr	r3, [sp, #28]
 800594c:	4621      	mov	r1, r4
 800594e:	3b01      	subs	r3, #1
 8005950:	4648      	mov	r0, r9
 8005952:	9302      	str	r3, [sp, #8]
 8005954:	f7ff fa96 	bl	8004e84 <quorem>
 8005958:	4639      	mov	r1, r7
 800595a:	9008      	str	r0, [sp, #32]
 800595c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005960:	4648      	mov	r0, r9
 8005962:	f000 fca1 	bl	80062a8 <__mcmp>
 8005966:	462a      	mov	r2, r5
 8005968:	9009      	str	r0, [sp, #36]	@ 0x24
 800596a:	4621      	mov	r1, r4
 800596c:	4658      	mov	r0, fp
 800596e:	f000 fcb7 	bl	80062e0 <__mdiff>
 8005972:	68c2      	ldr	r2, [r0, #12]
 8005974:	4606      	mov	r6, r0
 8005976:	bb02      	cbnz	r2, 80059ba <_dtoa_r+0xa22>
 8005978:	4601      	mov	r1, r0
 800597a:	4648      	mov	r0, r9
 800597c:	f000 fc94 	bl	80062a8 <__mcmp>
 8005980:	4602      	mov	r2, r0
 8005982:	4631      	mov	r1, r6
 8005984:	4658      	mov	r0, fp
 8005986:	920c      	str	r2, [sp, #48]	@ 0x30
 8005988:	f000 fa0c 	bl	8005da4 <_Bfree>
 800598c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800598e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005990:	9e07      	ldr	r6, [sp, #28]
 8005992:	ea43 0102 	orr.w	r1, r3, r2
 8005996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005998:	4319      	orrs	r1, r3
 800599a:	d110      	bne.n	80059be <_dtoa_r+0xa26>
 800599c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059a0:	d029      	beq.n	80059f6 <_dtoa_r+0xa5e>
 80059a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dd02      	ble.n	80059ae <_dtoa_r+0xa16>
 80059a8:	9b08      	ldr	r3, [sp, #32]
 80059aa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80059ae:	9b02      	ldr	r3, [sp, #8]
 80059b0:	f883 8000 	strb.w	r8, [r3]
 80059b4:	e63b      	b.n	800562e <_dtoa_r+0x696>
 80059b6:	4628      	mov	r0, r5
 80059b8:	e7bb      	b.n	8005932 <_dtoa_r+0x99a>
 80059ba:	2201      	movs	r2, #1
 80059bc:	e7e1      	b.n	8005982 <_dtoa_r+0x9ea>
 80059be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	db04      	blt.n	80059ce <_dtoa_r+0xa36>
 80059c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80059c6:	430b      	orrs	r3, r1
 80059c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059ca:	430b      	orrs	r3, r1
 80059cc:	d120      	bne.n	8005a10 <_dtoa_r+0xa78>
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	dded      	ble.n	80059ae <_dtoa_r+0xa16>
 80059d2:	4649      	mov	r1, r9
 80059d4:	2201      	movs	r2, #1
 80059d6:	4658      	mov	r0, fp
 80059d8:	f000 fbfa 	bl	80061d0 <__lshift>
 80059dc:	4621      	mov	r1, r4
 80059de:	4681      	mov	r9, r0
 80059e0:	f000 fc62 	bl	80062a8 <__mcmp>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	dc03      	bgt.n	80059f0 <_dtoa_r+0xa58>
 80059e8:	d1e1      	bne.n	80059ae <_dtoa_r+0xa16>
 80059ea:	f018 0f01 	tst.w	r8, #1
 80059ee:	d0de      	beq.n	80059ae <_dtoa_r+0xa16>
 80059f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059f4:	d1d8      	bne.n	80059a8 <_dtoa_r+0xa10>
 80059f6:	2339      	movs	r3, #57	@ 0x39
 80059f8:	9a02      	ldr	r2, [sp, #8]
 80059fa:	7013      	strb	r3, [r2, #0]
 80059fc:	4633      	mov	r3, r6
 80059fe:	461e      	mov	r6, r3
 8005a00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	2a39      	cmp	r2, #57	@ 0x39
 8005a08:	d052      	beq.n	8005ab0 <_dtoa_r+0xb18>
 8005a0a:	3201      	adds	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	e60e      	b.n	800562e <_dtoa_r+0x696>
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	dd07      	ble.n	8005a24 <_dtoa_r+0xa8c>
 8005a14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a18:	d0ed      	beq.n	80059f6 <_dtoa_r+0xa5e>
 8005a1a:	9a02      	ldr	r2, [sp, #8]
 8005a1c:	f108 0301 	add.w	r3, r8, #1
 8005a20:	7013      	strb	r3, [r2, #0]
 8005a22:	e604      	b.n	800562e <_dtoa_r+0x696>
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	9a07      	ldr	r2, [sp, #28]
 8005a28:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d028      	beq.n	8005a84 <_dtoa_r+0xaec>
 8005a32:	4649      	mov	r1, r9
 8005a34:	2300      	movs	r3, #0
 8005a36:	220a      	movs	r2, #10
 8005a38:	4658      	mov	r0, fp
 8005a3a:	f000 f9d5 	bl	8005de8 <__multadd>
 8005a3e:	42af      	cmp	r7, r5
 8005a40:	4681      	mov	r9, r0
 8005a42:	f04f 0300 	mov.w	r3, #0
 8005a46:	f04f 020a 	mov.w	r2, #10
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	4658      	mov	r0, fp
 8005a4e:	d107      	bne.n	8005a60 <_dtoa_r+0xac8>
 8005a50:	f000 f9ca 	bl	8005de8 <__multadd>
 8005a54:	4607      	mov	r7, r0
 8005a56:	4605      	mov	r5, r0
 8005a58:	9b07      	ldr	r3, [sp, #28]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	9307      	str	r3, [sp, #28]
 8005a5e:	e774      	b.n	800594a <_dtoa_r+0x9b2>
 8005a60:	f000 f9c2 	bl	8005de8 <__multadd>
 8005a64:	4629      	mov	r1, r5
 8005a66:	4607      	mov	r7, r0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	220a      	movs	r2, #10
 8005a6c:	4658      	mov	r0, fp
 8005a6e:	f000 f9bb 	bl	8005de8 <__multadd>
 8005a72:	4605      	mov	r5, r0
 8005a74:	e7f0      	b.n	8005a58 <_dtoa_r+0xac0>
 8005a76:	9b08      	ldr	r3, [sp, #32]
 8005a78:	2700      	movs	r7, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bfcc      	ite	gt
 8005a7e:	461e      	movgt	r6, r3
 8005a80:	2601      	movle	r6, #1
 8005a82:	4456      	add	r6, sl
 8005a84:	4649      	mov	r1, r9
 8005a86:	2201      	movs	r2, #1
 8005a88:	4658      	mov	r0, fp
 8005a8a:	f000 fba1 	bl	80061d0 <__lshift>
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4681      	mov	r9, r0
 8005a92:	f000 fc09 	bl	80062a8 <__mcmp>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	dcb0      	bgt.n	80059fc <_dtoa_r+0xa64>
 8005a9a:	d102      	bne.n	8005aa2 <_dtoa_r+0xb0a>
 8005a9c:	f018 0f01 	tst.w	r8, #1
 8005aa0:	d1ac      	bne.n	80059fc <_dtoa_r+0xa64>
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	461e      	mov	r6, r3
 8005aa6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005aaa:	2a30      	cmp	r2, #48	@ 0x30
 8005aac:	d0fa      	beq.n	8005aa4 <_dtoa_r+0xb0c>
 8005aae:	e5be      	b.n	800562e <_dtoa_r+0x696>
 8005ab0:	459a      	cmp	sl, r3
 8005ab2:	d1a4      	bne.n	80059fe <_dtoa_r+0xa66>
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	2331      	movs	r3, #49	@ 0x31
 8005abc:	f88a 3000 	strb.w	r3, [sl]
 8005ac0:	e5b5      	b.n	800562e <_dtoa_r+0x696>
 8005ac2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ac4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b24 <_dtoa_r+0xb8c>
 8005ac8:	b11b      	cbz	r3, 8005ad2 <_dtoa_r+0xb3a>
 8005aca:	f10a 0308 	add.w	r3, sl, #8
 8005ace:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	4650      	mov	r0, sl
 8005ad4:	b017      	add	sp, #92	@ 0x5c
 8005ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ada:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f77f ae3d 	ble.w	800575c <_dtoa_r+0x7c4>
 8005ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	e65b      	b.n	80057a2 <_dtoa_r+0x80a>
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f77f aed6 	ble.w	800589e <_dtoa_r+0x906>
 8005af2:	4656      	mov	r6, sl
 8005af4:	4621      	mov	r1, r4
 8005af6:	4648      	mov	r0, r9
 8005af8:	f7ff f9c4 	bl	8004e84 <quorem>
 8005afc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b00:	9b08      	ldr	r3, [sp, #32]
 8005b02:	f806 8b01 	strb.w	r8, [r6], #1
 8005b06:	eba6 020a 	sub.w	r2, r6, sl
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	ddb3      	ble.n	8005a76 <_dtoa_r+0xade>
 8005b0e:	4649      	mov	r1, r9
 8005b10:	2300      	movs	r3, #0
 8005b12:	220a      	movs	r2, #10
 8005b14:	4658      	mov	r0, fp
 8005b16:	f000 f967 	bl	8005de8 <__multadd>
 8005b1a:	4681      	mov	r9, r0
 8005b1c:	e7ea      	b.n	8005af4 <_dtoa_r+0xb5c>
 8005b1e:	bf00      	nop
 8005b20:	08008633 	.word	0x08008633
 8005b24:	080085b7 	.word	0x080085b7

08005b28 <_free_r>:
 8005b28:	b538      	push	{r3, r4, r5, lr}
 8005b2a:	4605      	mov	r5, r0
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	d040      	beq.n	8005bb2 <_free_r+0x8a>
 8005b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b34:	1f0c      	subs	r4, r1, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bfb8      	it	lt
 8005b3a:	18e4      	addlt	r4, r4, r3
 8005b3c:	f000 f8e6 	bl	8005d0c <__malloc_lock>
 8005b40:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb4 <_free_r+0x8c>)
 8005b42:	6813      	ldr	r3, [r2, #0]
 8005b44:	b933      	cbnz	r3, 8005b54 <_free_r+0x2c>
 8005b46:	6063      	str	r3, [r4, #4]
 8005b48:	6014      	str	r4, [r2, #0]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b50:	f000 b8e2 	b.w	8005d18 <__malloc_unlock>
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d908      	bls.n	8005b6a <_free_r+0x42>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	1821      	adds	r1, r4, r0
 8005b5c:	428b      	cmp	r3, r1
 8005b5e:	bf01      	itttt	eq
 8005b60:	6819      	ldreq	r1, [r3, #0]
 8005b62:	685b      	ldreq	r3, [r3, #4]
 8005b64:	1809      	addeq	r1, r1, r0
 8005b66:	6021      	streq	r1, [r4, #0]
 8005b68:	e7ed      	b.n	8005b46 <_free_r+0x1e>
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	b10b      	cbz	r3, 8005b74 <_free_r+0x4c>
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d9fa      	bls.n	8005b6a <_free_r+0x42>
 8005b74:	6811      	ldr	r1, [r2, #0]
 8005b76:	1850      	adds	r0, r2, r1
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d10b      	bne.n	8005b94 <_free_r+0x6c>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	4401      	add	r1, r0
 8005b80:	1850      	adds	r0, r2, r1
 8005b82:	4283      	cmp	r3, r0
 8005b84:	6011      	str	r1, [r2, #0]
 8005b86:	d1e0      	bne.n	8005b4a <_free_r+0x22>
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	4408      	add	r0, r1
 8005b8e:	6010      	str	r0, [r2, #0]
 8005b90:	6053      	str	r3, [r2, #4]
 8005b92:	e7da      	b.n	8005b4a <_free_r+0x22>
 8005b94:	d902      	bls.n	8005b9c <_free_r+0x74>
 8005b96:	230c      	movs	r3, #12
 8005b98:	602b      	str	r3, [r5, #0]
 8005b9a:	e7d6      	b.n	8005b4a <_free_r+0x22>
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	1821      	adds	r1, r4, r0
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	bf01      	itttt	eq
 8005ba4:	6819      	ldreq	r1, [r3, #0]
 8005ba6:	685b      	ldreq	r3, [r3, #4]
 8005ba8:	1809      	addeq	r1, r1, r0
 8005baa:	6021      	streq	r1, [r4, #0]
 8005bac:	6063      	str	r3, [r4, #4]
 8005bae:	6054      	str	r4, [r2, #4]
 8005bb0:	e7cb      	b.n	8005b4a <_free_r+0x22>
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	200003e8 	.word	0x200003e8

08005bb8 <malloc>:
 8005bb8:	4b02      	ldr	r3, [pc, #8]	@ (8005bc4 <malloc+0xc>)
 8005bba:	4601      	mov	r1, r0
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	f000 b825 	b.w	8005c0c <_malloc_r>
 8005bc2:	bf00      	nop
 8005bc4:	2000001c 	.word	0x2000001c

08005bc8 <sbrk_aligned>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4e0f      	ldr	r6, [pc, #60]	@ (8005c08 <sbrk_aligned+0x40>)
 8005bcc:	460c      	mov	r4, r1
 8005bce:	6831      	ldr	r1, [r6, #0]
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	b911      	cbnz	r1, 8005bda <sbrk_aligned+0x12>
 8005bd4:	f001 fdf6 	bl	80077c4 <_sbrk_r>
 8005bd8:	6030      	str	r0, [r6, #0]
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f001 fdf1 	bl	80077c4 <_sbrk_r>
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d103      	bne.n	8005bee <sbrk_aligned+0x26>
 8005be6:	f04f 34ff 	mov.w	r4, #4294967295
 8005bea:	4620      	mov	r0, r4
 8005bec:	bd70      	pop	{r4, r5, r6, pc}
 8005bee:	1cc4      	adds	r4, r0, #3
 8005bf0:	f024 0403 	bic.w	r4, r4, #3
 8005bf4:	42a0      	cmp	r0, r4
 8005bf6:	d0f8      	beq.n	8005bea <sbrk_aligned+0x22>
 8005bf8:	1a21      	subs	r1, r4, r0
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f001 fde2 	bl	80077c4 <_sbrk_r>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d1f2      	bne.n	8005bea <sbrk_aligned+0x22>
 8005c04:	e7ef      	b.n	8005be6 <sbrk_aligned+0x1e>
 8005c06:	bf00      	nop
 8005c08:	200003e4 	.word	0x200003e4

08005c0c <_malloc_r>:
 8005c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c10:	1ccd      	adds	r5, r1, #3
 8005c12:	f025 0503 	bic.w	r5, r5, #3
 8005c16:	3508      	adds	r5, #8
 8005c18:	2d0c      	cmp	r5, #12
 8005c1a:	bf38      	it	cc
 8005c1c:	250c      	movcc	r5, #12
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	4606      	mov	r6, r0
 8005c22:	db01      	blt.n	8005c28 <_malloc_r+0x1c>
 8005c24:	42a9      	cmp	r1, r5
 8005c26:	d904      	bls.n	8005c32 <_malloc_r+0x26>
 8005c28:	230c      	movs	r3, #12
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d08 <_malloc_r+0xfc>
 8005c36:	f000 f869 	bl	8005d0c <__malloc_lock>
 8005c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c3e:	461c      	mov	r4, r3
 8005c40:	bb44      	cbnz	r4, 8005c94 <_malloc_r+0x88>
 8005c42:	4629      	mov	r1, r5
 8005c44:	4630      	mov	r0, r6
 8005c46:	f7ff ffbf 	bl	8005bc8 <sbrk_aligned>
 8005c4a:	1c43      	adds	r3, r0, #1
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	d158      	bne.n	8005d02 <_malloc_r+0xf6>
 8005c50:	f8d8 4000 	ldr.w	r4, [r8]
 8005c54:	4627      	mov	r7, r4
 8005c56:	2f00      	cmp	r7, #0
 8005c58:	d143      	bne.n	8005ce2 <_malloc_r+0xd6>
 8005c5a:	2c00      	cmp	r4, #0
 8005c5c:	d04b      	beq.n	8005cf6 <_malloc_r+0xea>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	4639      	mov	r1, r7
 8005c62:	4630      	mov	r0, r6
 8005c64:	eb04 0903 	add.w	r9, r4, r3
 8005c68:	f001 fdac 	bl	80077c4 <_sbrk_r>
 8005c6c:	4581      	cmp	r9, r0
 8005c6e:	d142      	bne.n	8005cf6 <_malloc_r+0xea>
 8005c70:	6821      	ldr	r1, [r4, #0]
 8005c72:	4630      	mov	r0, r6
 8005c74:	1a6d      	subs	r5, r5, r1
 8005c76:	4629      	mov	r1, r5
 8005c78:	f7ff ffa6 	bl	8005bc8 <sbrk_aligned>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d03a      	beq.n	8005cf6 <_malloc_r+0xea>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	442b      	add	r3, r5
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	bb62      	cbnz	r2, 8005ce8 <_malloc_r+0xdc>
 8005c8e:	f8c8 7000 	str.w	r7, [r8]
 8005c92:	e00f      	b.n	8005cb4 <_malloc_r+0xa8>
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	1b52      	subs	r2, r2, r5
 8005c98:	d420      	bmi.n	8005cdc <_malloc_r+0xd0>
 8005c9a:	2a0b      	cmp	r2, #11
 8005c9c:	d917      	bls.n	8005cce <_malloc_r+0xc2>
 8005c9e:	1961      	adds	r1, r4, r5
 8005ca0:	42a3      	cmp	r3, r4
 8005ca2:	6025      	str	r5, [r4, #0]
 8005ca4:	bf18      	it	ne
 8005ca6:	6059      	strne	r1, [r3, #4]
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	bf08      	it	eq
 8005cac:	f8c8 1000 	streq.w	r1, [r8]
 8005cb0:	5162      	str	r2, [r4, r5]
 8005cb2:	604b      	str	r3, [r1, #4]
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f000 f82f 	bl	8005d18 <__malloc_unlock>
 8005cba:	f104 000b 	add.w	r0, r4, #11
 8005cbe:	1d23      	adds	r3, r4, #4
 8005cc0:	f020 0007 	bic.w	r0, r0, #7
 8005cc4:	1ac2      	subs	r2, r0, r3
 8005cc6:	bf1c      	itt	ne
 8005cc8:	1a1b      	subne	r3, r3, r0
 8005cca:	50a3      	strne	r3, [r4, r2]
 8005ccc:	e7af      	b.n	8005c2e <_malloc_r+0x22>
 8005cce:	6862      	ldr	r2, [r4, #4]
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	bf0c      	ite	eq
 8005cd4:	f8c8 2000 	streq.w	r2, [r8]
 8005cd8:	605a      	strne	r2, [r3, #4]
 8005cda:	e7eb      	b.n	8005cb4 <_malloc_r+0xa8>
 8005cdc:	4623      	mov	r3, r4
 8005cde:	6864      	ldr	r4, [r4, #4]
 8005ce0:	e7ae      	b.n	8005c40 <_malloc_r+0x34>
 8005ce2:	463c      	mov	r4, r7
 8005ce4:	687f      	ldr	r7, [r7, #4]
 8005ce6:	e7b6      	b.n	8005c56 <_malloc_r+0x4a>
 8005ce8:	461a      	mov	r2, r3
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	d1fb      	bne.n	8005ce8 <_malloc_r+0xdc>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6053      	str	r3, [r2, #4]
 8005cf4:	e7de      	b.n	8005cb4 <_malloc_r+0xa8>
 8005cf6:	230c      	movs	r3, #12
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	6033      	str	r3, [r6, #0]
 8005cfc:	f000 f80c 	bl	8005d18 <__malloc_unlock>
 8005d00:	e794      	b.n	8005c2c <_malloc_r+0x20>
 8005d02:	6005      	str	r5, [r0, #0]
 8005d04:	e7d6      	b.n	8005cb4 <_malloc_r+0xa8>
 8005d06:	bf00      	nop
 8005d08:	200003e8 	.word	0x200003e8

08005d0c <__malloc_lock>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	@ (8005d14 <__malloc_lock+0x8>)
 8005d0e:	f7ff b8a4 	b.w	8004e5a <__retarget_lock_acquire_recursive>
 8005d12:	bf00      	nop
 8005d14:	200003e0 	.word	0x200003e0

08005d18 <__malloc_unlock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	@ (8005d20 <__malloc_unlock+0x8>)
 8005d1a:	f7ff b89f 	b.w	8004e5c <__retarget_lock_release_recursive>
 8005d1e:	bf00      	nop
 8005d20:	200003e0 	.word	0x200003e0

08005d24 <_Balloc>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	69c6      	ldr	r6, [r0, #28]
 8005d28:	4604      	mov	r4, r0
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	b976      	cbnz	r6, 8005d4c <_Balloc+0x28>
 8005d2e:	2010      	movs	r0, #16
 8005d30:	f7ff ff42 	bl	8005bb8 <malloc>
 8005d34:	4602      	mov	r2, r0
 8005d36:	61e0      	str	r0, [r4, #28]
 8005d38:	b920      	cbnz	r0, 8005d44 <_Balloc+0x20>
 8005d3a:	216b      	movs	r1, #107	@ 0x6b
 8005d3c:	4b17      	ldr	r3, [pc, #92]	@ (8005d9c <_Balloc+0x78>)
 8005d3e:	4818      	ldr	r0, [pc, #96]	@ (8005da0 <_Balloc+0x7c>)
 8005d40:	f001 fd64 	bl	800780c <__assert_func>
 8005d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d48:	6006      	str	r6, [r0, #0]
 8005d4a:	60c6      	str	r6, [r0, #12]
 8005d4c:	69e6      	ldr	r6, [r4, #28]
 8005d4e:	68f3      	ldr	r3, [r6, #12]
 8005d50:	b183      	cbz	r3, 8005d74 <_Balloc+0x50>
 8005d52:	69e3      	ldr	r3, [r4, #28]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d5a:	b9b8      	cbnz	r0, 8005d8c <_Balloc+0x68>
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d62:	1d72      	adds	r2, r6, #5
 8005d64:	4620      	mov	r0, r4
 8005d66:	0092      	lsls	r2, r2, #2
 8005d68:	f001 fd6e 	bl	8007848 <_calloc_r>
 8005d6c:	b160      	cbz	r0, 8005d88 <_Balloc+0x64>
 8005d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d72:	e00e      	b.n	8005d92 <_Balloc+0x6e>
 8005d74:	2221      	movs	r2, #33	@ 0x21
 8005d76:	2104      	movs	r1, #4
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f001 fd65 	bl	8007848 <_calloc_r>
 8005d7e:	69e3      	ldr	r3, [r4, #28]
 8005d80:	60f0      	str	r0, [r6, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e4      	bne.n	8005d52 <_Balloc+0x2e>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	6802      	ldr	r2, [r0, #0]
 8005d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d92:	2300      	movs	r3, #0
 8005d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d98:	e7f7      	b.n	8005d8a <_Balloc+0x66>
 8005d9a:	bf00      	nop
 8005d9c:	080085c4 	.word	0x080085c4
 8005da0:	08008644 	.word	0x08008644

08005da4 <_Bfree>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	69c6      	ldr	r6, [r0, #28]
 8005da8:	4605      	mov	r5, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	b976      	cbnz	r6, 8005dcc <_Bfree+0x28>
 8005dae:	2010      	movs	r0, #16
 8005db0:	f7ff ff02 	bl	8005bb8 <malloc>
 8005db4:	4602      	mov	r2, r0
 8005db6:	61e8      	str	r0, [r5, #28]
 8005db8:	b920      	cbnz	r0, 8005dc4 <_Bfree+0x20>
 8005dba:	218f      	movs	r1, #143	@ 0x8f
 8005dbc:	4b08      	ldr	r3, [pc, #32]	@ (8005de0 <_Bfree+0x3c>)
 8005dbe:	4809      	ldr	r0, [pc, #36]	@ (8005de4 <_Bfree+0x40>)
 8005dc0:	f001 fd24 	bl	800780c <__assert_func>
 8005dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dc8:	6006      	str	r6, [r0, #0]
 8005dca:	60c6      	str	r6, [r0, #12]
 8005dcc:	b13c      	cbz	r4, 8005dde <_Bfree+0x3a>
 8005dce:	69eb      	ldr	r3, [r5, #28]
 8005dd0:	6862      	ldr	r2, [r4, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dd8:	6021      	str	r1, [r4, #0]
 8005dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	080085c4 	.word	0x080085c4
 8005de4:	08008644 	.word	0x08008644

08005de8 <__multadd>:
 8005de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dec:	4607      	mov	r7, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	461e      	mov	r6, r3
 8005df2:	2000      	movs	r0, #0
 8005df4:	690d      	ldr	r5, [r1, #16]
 8005df6:	f101 0c14 	add.w	ip, r1, #20
 8005dfa:	f8dc 3000 	ldr.w	r3, [ip]
 8005dfe:	3001      	adds	r0, #1
 8005e00:	b299      	uxth	r1, r3
 8005e02:	fb02 6101 	mla	r1, r2, r1, r6
 8005e06:	0c1e      	lsrs	r6, r3, #16
 8005e08:	0c0b      	lsrs	r3, r1, #16
 8005e0a:	fb02 3306 	mla	r3, r2, r6, r3
 8005e0e:	b289      	uxth	r1, r1
 8005e10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e14:	4285      	cmp	r5, r0
 8005e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e1a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e1e:	dcec      	bgt.n	8005dfa <__multadd+0x12>
 8005e20:	b30e      	cbz	r6, 8005e66 <__multadd+0x7e>
 8005e22:	68a3      	ldr	r3, [r4, #8]
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc19      	bgt.n	8005e5c <__multadd+0x74>
 8005e28:	6861      	ldr	r1, [r4, #4]
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	3101      	adds	r1, #1
 8005e2e:	f7ff ff79 	bl	8005d24 <_Balloc>
 8005e32:	4680      	mov	r8, r0
 8005e34:	b928      	cbnz	r0, 8005e42 <__multadd+0x5a>
 8005e36:	4602      	mov	r2, r0
 8005e38:	21ba      	movs	r1, #186	@ 0xba
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <__multadd+0x84>)
 8005e3c:	480c      	ldr	r0, [pc, #48]	@ (8005e70 <__multadd+0x88>)
 8005e3e:	f001 fce5 	bl	800780c <__assert_func>
 8005e42:	6922      	ldr	r2, [r4, #16]
 8005e44:	f104 010c 	add.w	r1, r4, #12
 8005e48:	3202      	adds	r2, #2
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	300c      	adds	r0, #12
 8005e4e:	f001 fcc9 	bl	80077e4 <memcpy>
 8005e52:	4621      	mov	r1, r4
 8005e54:	4638      	mov	r0, r7
 8005e56:	f7ff ffa5 	bl	8005da4 <_Bfree>
 8005e5a:	4644      	mov	r4, r8
 8005e5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e60:	3501      	adds	r5, #1
 8005e62:	615e      	str	r6, [r3, #20]
 8005e64:	6125      	str	r5, [r4, #16]
 8005e66:	4620      	mov	r0, r4
 8005e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e6c:	08008633 	.word	0x08008633
 8005e70:	08008644 	.word	0x08008644

08005e74 <__s2b>:
 8005e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e78:	4615      	mov	r5, r2
 8005e7a:	2209      	movs	r2, #9
 8005e7c:	461f      	mov	r7, r3
 8005e7e:	3308      	adds	r3, #8
 8005e80:	460c      	mov	r4, r1
 8005e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e86:	4606      	mov	r6, r0
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	db09      	blt.n	8005ea4 <__s2b+0x30>
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff ff47 	bl	8005d24 <_Balloc>
 8005e96:	b940      	cbnz	r0, 8005eaa <__s2b+0x36>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	21d3      	movs	r1, #211	@ 0xd3
 8005e9c:	4b18      	ldr	r3, [pc, #96]	@ (8005f00 <__s2b+0x8c>)
 8005e9e:	4819      	ldr	r0, [pc, #100]	@ (8005f04 <__s2b+0x90>)
 8005ea0:	f001 fcb4 	bl	800780c <__assert_func>
 8005ea4:	0052      	lsls	r2, r2, #1
 8005ea6:	3101      	adds	r1, #1
 8005ea8:	e7f0      	b.n	8005e8c <__s2b+0x18>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	2d09      	cmp	r5, #9
 8005eae:	6143      	str	r3, [r0, #20]
 8005eb0:	f04f 0301 	mov.w	r3, #1
 8005eb4:	6103      	str	r3, [r0, #16]
 8005eb6:	dd16      	ble.n	8005ee6 <__s2b+0x72>
 8005eb8:	f104 0909 	add.w	r9, r4, #9
 8005ebc:	46c8      	mov	r8, r9
 8005ebe:	442c      	add	r4, r5
 8005ec0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	220a      	movs	r2, #10
 8005ec8:	4630      	mov	r0, r6
 8005eca:	3b30      	subs	r3, #48	@ 0x30
 8005ecc:	f7ff ff8c 	bl	8005de8 <__multadd>
 8005ed0:	45a0      	cmp	r8, r4
 8005ed2:	d1f5      	bne.n	8005ec0 <__s2b+0x4c>
 8005ed4:	f1a5 0408 	sub.w	r4, r5, #8
 8005ed8:	444c      	add	r4, r9
 8005eda:	1b2d      	subs	r5, r5, r4
 8005edc:	1963      	adds	r3, r4, r5
 8005ede:	42bb      	cmp	r3, r7
 8005ee0:	db04      	blt.n	8005eec <__s2b+0x78>
 8005ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee6:	2509      	movs	r5, #9
 8005ee8:	340a      	adds	r4, #10
 8005eea:	e7f6      	b.n	8005eda <__s2b+0x66>
 8005eec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	220a      	movs	r2, #10
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	3b30      	subs	r3, #48	@ 0x30
 8005ef8:	f7ff ff76 	bl	8005de8 <__multadd>
 8005efc:	e7ee      	b.n	8005edc <__s2b+0x68>
 8005efe:	bf00      	nop
 8005f00:	08008633 	.word	0x08008633
 8005f04:	08008644 	.word	0x08008644

08005f08 <__hi0bits>:
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f0e:	bf3a      	itte	cc
 8005f10:	0403      	lslcc	r3, r0, #16
 8005f12:	2010      	movcc	r0, #16
 8005f14:	2000      	movcs	r0, #0
 8005f16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f1a:	bf3c      	itt	cc
 8005f1c:	021b      	lslcc	r3, r3, #8
 8005f1e:	3008      	addcc	r0, #8
 8005f20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f24:	bf3c      	itt	cc
 8005f26:	011b      	lslcc	r3, r3, #4
 8005f28:	3004      	addcc	r0, #4
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2e:	bf3c      	itt	cc
 8005f30:	009b      	lslcc	r3, r3, #2
 8005f32:	3002      	addcc	r0, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	db05      	blt.n	8005f44 <__hi0bits+0x3c>
 8005f38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f3c:	f100 0001 	add.w	r0, r0, #1
 8005f40:	bf08      	it	eq
 8005f42:	2020      	moveq	r0, #32
 8005f44:	4770      	bx	lr

08005f46 <__lo0bits>:
 8005f46:	6803      	ldr	r3, [r0, #0]
 8005f48:	4602      	mov	r2, r0
 8005f4a:	f013 0007 	ands.w	r0, r3, #7
 8005f4e:	d00b      	beq.n	8005f68 <__lo0bits+0x22>
 8005f50:	07d9      	lsls	r1, r3, #31
 8005f52:	d421      	bmi.n	8005f98 <__lo0bits+0x52>
 8005f54:	0798      	lsls	r0, r3, #30
 8005f56:	bf49      	itett	mi
 8005f58:	085b      	lsrmi	r3, r3, #1
 8005f5a:	089b      	lsrpl	r3, r3, #2
 8005f5c:	2001      	movmi	r0, #1
 8005f5e:	6013      	strmi	r3, [r2, #0]
 8005f60:	bf5c      	itt	pl
 8005f62:	2002      	movpl	r0, #2
 8005f64:	6013      	strpl	r3, [r2, #0]
 8005f66:	4770      	bx	lr
 8005f68:	b299      	uxth	r1, r3
 8005f6a:	b909      	cbnz	r1, 8005f70 <__lo0bits+0x2a>
 8005f6c:	2010      	movs	r0, #16
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	b2d9      	uxtb	r1, r3
 8005f72:	b909      	cbnz	r1, 8005f78 <__lo0bits+0x32>
 8005f74:	3008      	adds	r0, #8
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	0719      	lsls	r1, r3, #28
 8005f7a:	bf04      	itt	eq
 8005f7c:	091b      	lsreq	r3, r3, #4
 8005f7e:	3004      	addeq	r0, #4
 8005f80:	0799      	lsls	r1, r3, #30
 8005f82:	bf04      	itt	eq
 8005f84:	089b      	lsreq	r3, r3, #2
 8005f86:	3002      	addeq	r0, #2
 8005f88:	07d9      	lsls	r1, r3, #31
 8005f8a:	d403      	bmi.n	8005f94 <__lo0bits+0x4e>
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	f100 0001 	add.w	r0, r0, #1
 8005f92:	d003      	beq.n	8005f9c <__lo0bits+0x56>
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	4770      	bx	lr
 8005f98:	2000      	movs	r0, #0
 8005f9a:	4770      	bx	lr
 8005f9c:	2020      	movs	r0, #32
 8005f9e:	4770      	bx	lr

08005fa0 <__i2b>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	f7ff febd 	bl	8005d24 <_Balloc>
 8005faa:	4602      	mov	r2, r0
 8005fac:	b928      	cbnz	r0, 8005fba <__i2b+0x1a>
 8005fae:	f240 1145 	movw	r1, #325	@ 0x145
 8005fb2:	4b04      	ldr	r3, [pc, #16]	@ (8005fc4 <__i2b+0x24>)
 8005fb4:	4804      	ldr	r0, [pc, #16]	@ (8005fc8 <__i2b+0x28>)
 8005fb6:	f001 fc29 	bl	800780c <__assert_func>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	6144      	str	r4, [r0, #20]
 8005fbe:	6103      	str	r3, [r0, #16]
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08008633 	.word	0x08008633
 8005fc8:	08008644 	.word	0x08008644

08005fcc <__multiply>:
 8005fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	690a      	ldr	r2, [r1, #16]
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	460f      	mov	r7, r1
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	bfa2      	ittt	ge
 8005fdc:	4623      	movge	r3, r4
 8005fde:	460c      	movge	r4, r1
 8005fe0:	461f      	movge	r7, r3
 8005fe2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005fe6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005fea:	68a3      	ldr	r3, [r4, #8]
 8005fec:	6861      	ldr	r1, [r4, #4]
 8005fee:	eb0a 0609 	add.w	r6, sl, r9
 8005ff2:	42b3      	cmp	r3, r6
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	bfb8      	it	lt
 8005ff8:	3101      	addlt	r1, #1
 8005ffa:	f7ff fe93 	bl	8005d24 <_Balloc>
 8005ffe:	b930      	cbnz	r0, 800600e <__multiply+0x42>
 8006000:	4602      	mov	r2, r0
 8006002:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006006:	4b43      	ldr	r3, [pc, #268]	@ (8006114 <__multiply+0x148>)
 8006008:	4843      	ldr	r0, [pc, #268]	@ (8006118 <__multiply+0x14c>)
 800600a:	f001 fbff 	bl	800780c <__assert_func>
 800600e:	f100 0514 	add.w	r5, r0, #20
 8006012:	462b      	mov	r3, r5
 8006014:	2200      	movs	r2, #0
 8006016:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800601a:	4543      	cmp	r3, r8
 800601c:	d321      	bcc.n	8006062 <__multiply+0x96>
 800601e:	f107 0114 	add.w	r1, r7, #20
 8006022:	f104 0214 	add.w	r2, r4, #20
 8006026:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800602a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800602e:	9302      	str	r3, [sp, #8]
 8006030:	1b13      	subs	r3, r2, r4
 8006032:	3b15      	subs	r3, #21
 8006034:	f023 0303 	bic.w	r3, r3, #3
 8006038:	3304      	adds	r3, #4
 800603a:	f104 0715 	add.w	r7, r4, #21
 800603e:	42ba      	cmp	r2, r7
 8006040:	bf38      	it	cc
 8006042:	2304      	movcc	r3, #4
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	9b02      	ldr	r3, [sp, #8]
 8006048:	9103      	str	r1, [sp, #12]
 800604a:	428b      	cmp	r3, r1
 800604c:	d80c      	bhi.n	8006068 <__multiply+0x9c>
 800604e:	2e00      	cmp	r6, #0
 8006050:	dd03      	ble.n	800605a <__multiply+0x8e>
 8006052:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006056:	2b00      	cmp	r3, #0
 8006058:	d05a      	beq.n	8006110 <__multiply+0x144>
 800605a:	6106      	str	r6, [r0, #16]
 800605c:	b005      	add	sp, #20
 800605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006062:	f843 2b04 	str.w	r2, [r3], #4
 8006066:	e7d8      	b.n	800601a <__multiply+0x4e>
 8006068:	f8b1 a000 	ldrh.w	sl, [r1]
 800606c:	f1ba 0f00 	cmp.w	sl, #0
 8006070:	d023      	beq.n	80060ba <__multiply+0xee>
 8006072:	46a9      	mov	r9, r5
 8006074:	f04f 0c00 	mov.w	ip, #0
 8006078:	f104 0e14 	add.w	lr, r4, #20
 800607c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006080:	f8d9 3000 	ldr.w	r3, [r9]
 8006084:	fa1f fb87 	uxth.w	fp, r7
 8006088:	b29b      	uxth	r3, r3
 800608a:	fb0a 330b 	mla	r3, sl, fp, r3
 800608e:	4463      	add	r3, ip
 8006090:	f8d9 c000 	ldr.w	ip, [r9]
 8006094:	0c3f      	lsrs	r7, r7, #16
 8006096:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800609a:	fb0a c707 	mla	r7, sl, r7, ip
 800609e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060a8:	4572      	cmp	r2, lr
 80060aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80060ae:	f849 3b04 	str.w	r3, [r9], #4
 80060b2:	d8e3      	bhi.n	800607c <__multiply+0xb0>
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	f845 c003 	str.w	ip, [r5, r3]
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	3104      	adds	r1, #4
 80060be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060c2:	f1b9 0f00 	cmp.w	r9, #0
 80060c6:	d021      	beq.n	800610c <__multiply+0x140>
 80060c8:	46ae      	mov	lr, r5
 80060ca:	f04f 0a00 	mov.w	sl, #0
 80060ce:	682b      	ldr	r3, [r5, #0]
 80060d0:	f104 0c14 	add.w	ip, r4, #20
 80060d4:	f8bc b000 	ldrh.w	fp, [ip]
 80060d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	fb09 770b 	mla	r7, r9, fp, r7
 80060e2:	4457      	add	r7, sl
 80060e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060e8:	f84e 3b04 	str.w	r3, [lr], #4
 80060ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060f4:	f8be 3000 	ldrh.w	r3, [lr]
 80060f8:	4562      	cmp	r2, ip
 80060fa:	fb09 330a 	mla	r3, r9, sl, r3
 80060fe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006106:	d8e5      	bhi.n	80060d4 <__multiply+0x108>
 8006108:	9f01      	ldr	r7, [sp, #4]
 800610a:	51eb      	str	r3, [r5, r7]
 800610c:	3504      	adds	r5, #4
 800610e:	e79a      	b.n	8006046 <__multiply+0x7a>
 8006110:	3e01      	subs	r6, #1
 8006112:	e79c      	b.n	800604e <__multiply+0x82>
 8006114:	08008633 	.word	0x08008633
 8006118:	08008644 	.word	0x08008644

0800611c <__pow5mult>:
 800611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006120:	4615      	mov	r5, r2
 8006122:	f012 0203 	ands.w	r2, r2, #3
 8006126:	4607      	mov	r7, r0
 8006128:	460e      	mov	r6, r1
 800612a:	d007      	beq.n	800613c <__pow5mult+0x20>
 800612c:	4c25      	ldr	r4, [pc, #148]	@ (80061c4 <__pow5mult+0xa8>)
 800612e:	3a01      	subs	r2, #1
 8006130:	2300      	movs	r3, #0
 8006132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006136:	f7ff fe57 	bl	8005de8 <__multadd>
 800613a:	4606      	mov	r6, r0
 800613c:	10ad      	asrs	r5, r5, #2
 800613e:	d03d      	beq.n	80061bc <__pow5mult+0xa0>
 8006140:	69fc      	ldr	r4, [r7, #28]
 8006142:	b97c      	cbnz	r4, 8006164 <__pow5mult+0x48>
 8006144:	2010      	movs	r0, #16
 8006146:	f7ff fd37 	bl	8005bb8 <malloc>
 800614a:	4602      	mov	r2, r0
 800614c:	61f8      	str	r0, [r7, #28]
 800614e:	b928      	cbnz	r0, 800615c <__pow5mult+0x40>
 8006150:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006154:	4b1c      	ldr	r3, [pc, #112]	@ (80061c8 <__pow5mult+0xac>)
 8006156:	481d      	ldr	r0, [pc, #116]	@ (80061cc <__pow5mult+0xb0>)
 8006158:	f001 fb58 	bl	800780c <__assert_func>
 800615c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006160:	6004      	str	r4, [r0, #0]
 8006162:	60c4      	str	r4, [r0, #12]
 8006164:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800616c:	b94c      	cbnz	r4, 8006182 <__pow5mult+0x66>
 800616e:	f240 2171 	movw	r1, #625	@ 0x271
 8006172:	4638      	mov	r0, r7
 8006174:	f7ff ff14 	bl	8005fa0 <__i2b>
 8006178:	2300      	movs	r3, #0
 800617a:	4604      	mov	r4, r0
 800617c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006180:	6003      	str	r3, [r0, #0]
 8006182:	f04f 0900 	mov.w	r9, #0
 8006186:	07eb      	lsls	r3, r5, #31
 8006188:	d50a      	bpl.n	80061a0 <__pow5mult+0x84>
 800618a:	4631      	mov	r1, r6
 800618c:	4622      	mov	r2, r4
 800618e:	4638      	mov	r0, r7
 8006190:	f7ff ff1c 	bl	8005fcc <__multiply>
 8006194:	4680      	mov	r8, r0
 8006196:	4631      	mov	r1, r6
 8006198:	4638      	mov	r0, r7
 800619a:	f7ff fe03 	bl	8005da4 <_Bfree>
 800619e:	4646      	mov	r6, r8
 80061a0:	106d      	asrs	r5, r5, #1
 80061a2:	d00b      	beq.n	80061bc <__pow5mult+0xa0>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	b938      	cbnz	r0, 80061b8 <__pow5mult+0x9c>
 80061a8:	4622      	mov	r2, r4
 80061aa:	4621      	mov	r1, r4
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff ff0d 	bl	8005fcc <__multiply>
 80061b2:	6020      	str	r0, [r4, #0]
 80061b4:	f8c0 9000 	str.w	r9, [r0]
 80061b8:	4604      	mov	r4, r0
 80061ba:	e7e4      	b.n	8006186 <__pow5mult+0x6a>
 80061bc:	4630      	mov	r0, r6
 80061be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c2:	bf00      	nop
 80061c4:	080086a0 	.word	0x080086a0
 80061c8:	080085c4 	.word	0x080085c4
 80061cc:	08008644 	.word	0x08008644

080061d0 <__lshift>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	460c      	mov	r4, r1
 80061d6:	4607      	mov	r7, r0
 80061d8:	4691      	mov	r9, r2
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	6849      	ldr	r1, [r1, #4]
 80061de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061e8:	f108 0601 	add.w	r6, r8, #1
 80061ec:	42b3      	cmp	r3, r6
 80061ee:	db0b      	blt.n	8006208 <__lshift+0x38>
 80061f0:	4638      	mov	r0, r7
 80061f2:	f7ff fd97 	bl	8005d24 <_Balloc>
 80061f6:	4605      	mov	r5, r0
 80061f8:	b948      	cbnz	r0, 800620e <__lshift+0x3e>
 80061fa:	4602      	mov	r2, r0
 80061fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006200:	4b27      	ldr	r3, [pc, #156]	@ (80062a0 <__lshift+0xd0>)
 8006202:	4828      	ldr	r0, [pc, #160]	@ (80062a4 <__lshift+0xd4>)
 8006204:	f001 fb02 	bl	800780c <__assert_func>
 8006208:	3101      	adds	r1, #1
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	e7ee      	b.n	80061ec <__lshift+0x1c>
 800620e:	2300      	movs	r3, #0
 8006210:	f100 0114 	add.w	r1, r0, #20
 8006214:	f100 0210 	add.w	r2, r0, #16
 8006218:	4618      	mov	r0, r3
 800621a:	4553      	cmp	r3, sl
 800621c:	db33      	blt.n	8006286 <__lshift+0xb6>
 800621e:	6920      	ldr	r0, [r4, #16]
 8006220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006224:	f104 0314 	add.w	r3, r4, #20
 8006228:	f019 091f 	ands.w	r9, r9, #31
 800622c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006234:	d02b      	beq.n	800628e <__lshift+0xbe>
 8006236:	468a      	mov	sl, r1
 8006238:	2200      	movs	r2, #0
 800623a:	f1c9 0e20 	rsb	lr, r9, #32
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	fa00 f009 	lsl.w	r0, r0, r9
 8006244:	4310      	orrs	r0, r2
 8006246:	f84a 0b04 	str.w	r0, [sl], #4
 800624a:	f853 2b04 	ldr.w	r2, [r3], #4
 800624e:	459c      	cmp	ip, r3
 8006250:	fa22 f20e 	lsr.w	r2, r2, lr
 8006254:	d8f3      	bhi.n	800623e <__lshift+0x6e>
 8006256:	ebac 0304 	sub.w	r3, ip, r4
 800625a:	3b15      	subs	r3, #21
 800625c:	f023 0303 	bic.w	r3, r3, #3
 8006260:	3304      	adds	r3, #4
 8006262:	f104 0015 	add.w	r0, r4, #21
 8006266:	4584      	cmp	ip, r0
 8006268:	bf38      	it	cc
 800626a:	2304      	movcc	r3, #4
 800626c:	50ca      	str	r2, [r1, r3]
 800626e:	b10a      	cbz	r2, 8006274 <__lshift+0xa4>
 8006270:	f108 0602 	add.w	r6, r8, #2
 8006274:	3e01      	subs	r6, #1
 8006276:	4638      	mov	r0, r7
 8006278:	4621      	mov	r1, r4
 800627a:	612e      	str	r6, [r5, #16]
 800627c:	f7ff fd92 	bl	8005da4 <_Bfree>
 8006280:	4628      	mov	r0, r5
 8006282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006286:	f842 0f04 	str.w	r0, [r2, #4]!
 800628a:	3301      	adds	r3, #1
 800628c:	e7c5      	b.n	800621a <__lshift+0x4a>
 800628e:	3904      	subs	r1, #4
 8006290:	f853 2b04 	ldr.w	r2, [r3], #4
 8006294:	459c      	cmp	ip, r3
 8006296:	f841 2f04 	str.w	r2, [r1, #4]!
 800629a:	d8f9      	bhi.n	8006290 <__lshift+0xc0>
 800629c:	e7ea      	b.n	8006274 <__lshift+0xa4>
 800629e:	bf00      	nop
 80062a0:	08008633 	.word	0x08008633
 80062a4:	08008644 	.word	0x08008644

080062a8 <__mcmp>:
 80062a8:	4603      	mov	r3, r0
 80062aa:	690a      	ldr	r2, [r1, #16]
 80062ac:	6900      	ldr	r0, [r0, #16]
 80062ae:	b530      	push	{r4, r5, lr}
 80062b0:	1a80      	subs	r0, r0, r2
 80062b2:	d10e      	bne.n	80062d2 <__mcmp+0x2a>
 80062b4:	3314      	adds	r3, #20
 80062b6:	3114      	adds	r1, #20
 80062b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062c8:	4295      	cmp	r5, r2
 80062ca:	d003      	beq.n	80062d4 <__mcmp+0x2c>
 80062cc:	d205      	bcs.n	80062da <__mcmp+0x32>
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295
 80062d2:	bd30      	pop	{r4, r5, pc}
 80062d4:	42a3      	cmp	r3, r4
 80062d6:	d3f3      	bcc.n	80062c0 <__mcmp+0x18>
 80062d8:	e7fb      	b.n	80062d2 <__mcmp+0x2a>
 80062da:	2001      	movs	r0, #1
 80062dc:	e7f9      	b.n	80062d2 <__mcmp+0x2a>
	...

080062e0 <__mdiff>:
 80062e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	4689      	mov	r9, r1
 80062e6:	4606      	mov	r6, r0
 80062e8:	4611      	mov	r1, r2
 80062ea:	4648      	mov	r0, r9
 80062ec:	4614      	mov	r4, r2
 80062ee:	f7ff ffdb 	bl	80062a8 <__mcmp>
 80062f2:	1e05      	subs	r5, r0, #0
 80062f4:	d112      	bne.n	800631c <__mdiff+0x3c>
 80062f6:	4629      	mov	r1, r5
 80062f8:	4630      	mov	r0, r6
 80062fa:	f7ff fd13 	bl	8005d24 <_Balloc>
 80062fe:	4602      	mov	r2, r0
 8006300:	b928      	cbnz	r0, 800630e <__mdiff+0x2e>
 8006302:	f240 2137 	movw	r1, #567	@ 0x237
 8006306:	4b3e      	ldr	r3, [pc, #248]	@ (8006400 <__mdiff+0x120>)
 8006308:	483e      	ldr	r0, [pc, #248]	@ (8006404 <__mdiff+0x124>)
 800630a:	f001 fa7f 	bl	800780c <__assert_func>
 800630e:	2301      	movs	r3, #1
 8006310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006314:	4610      	mov	r0, r2
 8006316:	b003      	add	sp, #12
 8006318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631c:	bfbc      	itt	lt
 800631e:	464b      	movlt	r3, r9
 8006320:	46a1      	movlt	r9, r4
 8006322:	4630      	mov	r0, r6
 8006324:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006328:	bfba      	itte	lt
 800632a:	461c      	movlt	r4, r3
 800632c:	2501      	movlt	r5, #1
 800632e:	2500      	movge	r5, #0
 8006330:	f7ff fcf8 	bl	8005d24 <_Balloc>
 8006334:	4602      	mov	r2, r0
 8006336:	b918      	cbnz	r0, 8006340 <__mdiff+0x60>
 8006338:	f240 2145 	movw	r1, #581	@ 0x245
 800633c:	4b30      	ldr	r3, [pc, #192]	@ (8006400 <__mdiff+0x120>)
 800633e:	e7e3      	b.n	8006308 <__mdiff+0x28>
 8006340:	f100 0b14 	add.w	fp, r0, #20
 8006344:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006348:	f109 0310 	add.w	r3, r9, #16
 800634c:	60c5      	str	r5, [r0, #12]
 800634e:	f04f 0c00 	mov.w	ip, #0
 8006352:	f109 0514 	add.w	r5, r9, #20
 8006356:	46d9      	mov	r9, fp
 8006358:	6926      	ldr	r6, [r4, #16]
 800635a:	f104 0e14 	add.w	lr, r4, #20
 800635e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006362:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	9b01      	ldr	r3, [sp, #4]
 800636a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800636e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006372:	b281      	uxth	r1, r0
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	fa1f f38a 	uxth.w	r3, sl
 800637a:	1a5b      	subs	r3, r3, r1
 800637c:	0c00      	lsrs	r0, r0, #16
 800637e:	4463      	add	r3, ip
 8006380:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006384:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006388:	b29b      	uxth	r3, r3
 800638a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800638e:	4576      	cmp	r6, lr
 8006390:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006394:	f849 3b04 	str.w	r3, [r9], #4
 8006398:	d8e6      	bhi.n	8006368 <__mdiff+0x88>
 800639a:	1b33      	subs	r3, r6, r4
 800639c:	3b15      	subs	r3, #21
 800639e:	f023 0303 	bic.w	r3, r3, #3
 80063a2:	3415      	adds	r4, #21
 80063a4:	3304      	adds	r3, #4
 80063a6:	42a6      	cmp	r6, r4
 80063a8:	bf38      	it	cc
 80063aa:	2304      	movcc	r3, #4
 80063ac:	441d      	add	r5, r3
 80063ae:	445b      	add	r3, fp
 80063b0:	461e      	mov	r6, r3
 80063b2:	462c      	mov	r4, r5
 80063b4:	4544      	cmp	r4, r8
 80063b6:	d30e      	bcc.n	80063d6 <__mdiff+0xf6>
 80063b8:	f108 0103 	add.w	r1, r8, #3
 80063bc:	1b49      	subs	r1, r1, r5
 80063be:	f021 0103 	bic.w	r1, r1, #3
 80063c2:	3d03      	subs	r5, #3
 80063c4:	45a8      	cmp	r8, r5
 80063c6:	bf38      	it	cc
 80063c8:	2100      	movcc	r1, #0
 80063ca:	440b      	add	r3, r1
 80063cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063d0:	b199      	cbz	r1, 80063fa <__mdiff+0x11a>
 80063d2:	6117      	str	r7, [r2, #16]
 80063d4:	e79e      	b.n	8006314 <__mdiff+0x34>
 80063d6:	46e6      	mov	lr, ip
 80063d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80063dc:	fa1f fc81 	uxth.w	ip, r1
 80063e0:	44f4      	add	ip, lr
 80063e2:	0c08      	lsrs	r0, r1, #16
 80063e4:	4471      	add	r1, lr
 80063e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80063ea:	b289      	uxth	r1, r1
 80063ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063f4:	f846 1b04 	str.w	r1, [r6], #4
 80063f8:	e7dc      	b.n	80063b4 <__mdiff+0xd4>
 80063fa:	3f01      	subs	r7, #1
 80063fc:	e7e6      	b.n	80063cc <__mdiff+0xec>
 80063fe:	bf00      	nop
 8006400:	08008633 	.word	0x08008633
 8006404:	08008644 	.word	0x08008644

08006408 <__ulp>:
 8006408:	4b0e      	ldr	r3, [pc, #56]	@ (8006444 <__ulp+0x3c>)
 800640a:	400b      	ands	r3, r1
 800640c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006410:	2b00      	cmp	r3, #0
 8006412:	dc08      	bgt.n	8006426 <__ulp+0x1e>
 8006414:	425b      	negs	r3, r3
 8006416:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800641a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800641e:	da04      	bge.n	800642a <__ulp+0x22>
 8006420:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006424:	4113      	asrs	r3, r2
 8006426:	2200      	movs	r2, #0
 8006428:	e008      	b.n	800643c <__ulp+0x34>
 800642a:	f1a2 0314 	sub.w	r3, r2, #20
 800642e:	2b1e      	cmp	r3, #30
 8006430:	bfd6      	itet	le
 8006432:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006436:	2201      	movgt	r2, #1
 8006438:	40da      	lsrle	r2, r3
 800643a:	2300      	movs	r3, #0
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	7ff00000 	.word	0x7ff00000

08006448 <__b2d>:
 8006448:	6902      	ldr	r2, [r0, #16]
 800644a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644c:	f100 0614 	add.w	r6, r0, #20
 8006450:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006454:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006458:	4f1e      	ldr	r7, [pc, #120]	@ (80064d4 <__b2d+0x8c>)
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff fd54 	bl	8005f08 <__hi0bits>
 8006460:	4603      	mov	r3, r0
 8006462:	f1c0 0020 	rsb	r0, r0, #32
 8006466:	2b0a      	cmp	r3, #10
 8006468:	f1a2 0504 	sub.w	r5, r2, #4
 800646c:	6008      	str	r0, [r1, #0]
 800646e:	dc12      	bgt.n	8006496 <__b2d+0x4e>
 8006470:	42ae      	cmp	r6, r5
 8006472:	bf2c      	ite	cs
 8006474:	2200      	movcs	r2, #0
 8006476:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800647a:	f1c3 0c0b 	rsb	ip, r3, #11
 800647e:	3315      	adds	r3, #21
 8006480:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006484:	fa04 f303 	lsl.w	r3, r4, r3
 8006488:	fa22 f20c 	lsr.w	r2, r2, ip
 800648c:	ea4e 0107 	orr.w	r1, lr, r7
 8006490:	431a      	orrs	r2, r3
 8006492:	4610      	mov	r0, r2
 8006494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006496:	42ae      	cmp	r6, r5
 8006498:	bf36      	itet	cc
 800649a:	f1a2 0508 	subcc.w	r5, r2, #8
 800649e:	2200      	movcs	r2, #0
 80064a0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064a4:	3b0b      	subs	r3, #11
 80064a6:	d012      	beq.n	80064ce <__b2d+0x86>
 80064a8:	f1c3 0720 	rsb	r7, r3, #32
 80064ac:	fa22 f107 	lsr.w	r1, r2, r7
 80064b0:	409c      	lsls	r4, r3
 80064b2:	430c      	orrs	r4, r1
 80064b4:	42b5      	cmp	r5, r6
 80064b6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80064ba:	bf94      	ite	ls
 80064bc:	2400      	movls	r4, #0
 80064be:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80064c2:	409a      	lsls	r2, r3
 80064c4:	40fc      	lsrs	r4, r7
 80064c6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80064ca:	4322      	orrs	r2, r4
 80064cc:	e7e1      	b.n	8006492 <__b2d+0x4a>
 80064ce:	ea44 0107 	orr.w	r1, r4, r7
 80064d2:	e7de      	b.n	8006492 <__b2d+0x4a>
 80064d4:	3ff00000 	.word	0x3ff00000

080064d8 <__d2b>:
 80064d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80064dc:	2101      	movs	r1, #1
 80064de:	4690      	mov	r8, r2
 80064e0:	4699      	mov	r9, r3
 80064e2:	9e08      	ldr	r6, [sp, #32]
 80064e4:	f7ff fc1e 	bl	8005d24 <_Balloc>
 80064e8:	4604      	mov	r4, r0
 80064ea:	b930      	cbnz	r0, 80064fa <__d2b+0x22>
 80064ec:	4602      	mov	r2, r0
 80064ee:	f240 310f 	movw	r1, #783	@ 0x30f
 80064f2:	4b23      	ldr	r3, [pc, #140]	@ (8006580 <__d2b+0xa8>)
 80064f4:	4823      	ldr	r0, [pc, #140]	@ (8006584 <__d2b+0xac>)
 80064f6:	f001 f989 	bl	800780c <__assert_func>
 80064fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006502:	b10d      	cbz	r5, 8006508 <__d2b+0x30>
 8006504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	f1b8 0300 	subs.w	r3, r8, #0
 800650e:	d024      	beq.n	800655a <__d2b+0x82>
 8006510:	4668      	mov	r0, sp
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	f7ff fd17 	bl	8005f46 <__lo0bits>
 8006518:	e9dd 1200 	ldrd	r1, r2, [sp]
 800651c:	b1d8      	cbz	r0, 8006556 <__d2b+0x7e>
 800651e:	f1c0 0320 	rsb	r3, r0, #32
 8006522:	fa02 f303 	lsl.w	r3, r2, r3
 8006526:	430b      	orrs	r3, r1
 8006528:	40c2      	lsrs	r2, r0
 800652a:	6163      	str	r3, [r4, #20]
 800652c:	9201      	str	r2, [sp, #4]
 800652e:	9b01      	ldr	r3, [sp, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	bf0c      	ite	eq
 8006534:	2201      	moveq	r2, #1
 8006536:	2202      	movne	r2, #2
 8006538:	61a3      	str	r3, [r4, #24]
 800653a:	6122      	str	r2, [r4, #16]
 800653c:	b1ad      	cbz	r5, 800656a <__d2b+0x92>
 800653e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006542:	4405      	add	r5, r0
 8006544:	6035      	str	r5, [r6, #0]
 8006546:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800654a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654c:	6018      	str	r0, [r3, #0]
 800654e:	4620      	mov	r0, r4
 8006550:	b002      	add	sp, #8
 8006552:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006556:	6161      	str	r1, [r4, #20]
 8006558:	e7e9      	b.n	800652e <__d2b+0x56>
 800655a:	a801      	add	r0, sp, #4
 800655c:	f7ff fcf3 	bl	8005f46 <__lo0bits>
 8006560:	9b01      	ldr	r3, [sp, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	6163      	str	r3, [r4, #20]
 8006566:	3020      	adds	r0, #32
 8006568:	e7e7      	b.n	800653a <__d2b+0x62>
 800656a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800656e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006572:	6030      	str	r0, [r6, #0]
 8006574:	6918      	ldr	r0, [r3, #16]
 8006576:	f7ff fcc7 	bl	8005f08 <__hi0bits>
 800657a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800657e:	e7e4      	b.n	800654a <__d2b+0x72>
 8006580:	08008633 	.word	0x08008633
 8006584:	08008644 	.word	0x08008644

08006588 <__ratio>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	b085      	sub	sp, #20
 800658e:	e9cd 1000 	strd	r1, r0, [sp]
 8006592:	a902      	add	r1, sp, #8
 8006594:	f7ff ff58 	bl	8006448 <__b2d>
 8006598:	468b      	mov	fp, r1
 800659a:	4606      	mov	r6, r0
 800659c:	460f      	mov	r7, r1
 800659e:	9800      	ldr	r0, [sp, #0]
 80065a0:	a903      	add	r1, sp, #12
 80065a2:	f7ff ff51 	bl	8006448 <__b2d>
 80065a6:	460d      	mov	r5, r1
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	4689      	mov	r9, r1
 80065ac:	6919      	ldr	r1, [r3, #16]
 80065ae:	9b00      	ldr	r3, [sp, #0]
 80065b0:	4604      	mov	r4, r0
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	4630      	mov	r0, r6
 80065b6:	1ac9      	subs	r1, r1, r3
 80065b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bfcd      	iteet	gt
 80065c6:	463a      	movgt	r2, r7
 80065c8:	462a      	movle	r2, r5
 80065ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065ce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80065d2:	bfd8      	it	le
 80065d4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80065d8:	464b      	mov	r3, r9
 80065da:	4622      	mov	r2, r4
 80065dc:	4659      	mov	r1, fp
 80065de:	f7fa f8a5 	bl	800072c <__aeabi_ddiv>
 80065e2:	b005      	add	sp, #20
 80065e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065e8 <__copybits>:
 80065e8:	3901      	subs	r1, #1
 80065ea:	b570      	push	{r4, r5, r6, lr}
 80065ec:	1149      	asrs	r1, r1, #5
 80065ee:	6914      	ldr	r4, [r2, #16]
 80065f0:	3101      	adds	r1, #1
 80065f2:	f102 0314 	add.w	r3, r2, #20
 80065f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065fe:	1f05      	subs	r5, r0, #4
 8006600:	42a3      	cmp	r3, r4
 8006602:	d30c      	bcc.n	800661e <__copybits+0x36>
 8006604:	1aa3      	subs	r3, r4, r2
 8006606:	3b11      	subs	r3, #17
 8006608:	f023 0303 	bic.w	r3, r3, #3
 800660c:	3211      	adds	r2, #17
 800660e:	42a2      	cmp	r2, r4
 8006610:	bf88      	it	hi
 8006612:	2300      	movhi	r3, #0
 8006614:	4418      	add	r0, r3
 8006616:	2300      	movs	r3, #0
 8006618:	4288      	cmp	r0, r1
 800661a:	d305      	bcc.n	8006628 <__copybits+0x40>
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006622:	f845 6f04 	str.w	r6, [r5, #4]!
 8006626:	e7eb      	b.n	8006600 <__copybits+0x18>
 8006628:	f840 3b04 	str.w	r3, [r0], #4
 800662c:	e7f4      	b.n	8006618 <__copybits+0x30>

0800662e <__any_on>:
 800662e:	f100 0214 	add.w	r2, r0, #20
 8006632:	6900      	ldr	r0, [r0, #16]
 8006634:	114b      	asrs	r3, r1, #5
 8006636:	4298      	cmp	r0, r3
 8006638:	b510      	push	{r4, lr}
 800663a:	db11      	blt.n	8006660 <__any_on+0x32>
 800663c:	dd0a      	ble.n	8006654 <__any_on+0x26>
 800663e:	f011 011f 	ands.w	r1, r1, #31
 8006642:	d007      	beq.n	8006654 <__any_on+0x26>
 8006644:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006648:	fa24 f001 	lsr.w	r0, r4, r1
 800664c:	fa00 f101 	lsl.w	r1, r0, r1
 8006650:	428c      	cmp	r4, r1
 8006652:	d10b      	bne.n	800666c <__any_on+0x3e>
 8006654:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006658:	4293      	cmp	r3, r2
 800665a:	d803      	bhi.n	8006664 <__any_on+0x36>
 800665c:	2000      	movs	r0, #0
 800665e:	bd10      	pop	{r4, pc}
 8006660:	4603      	mov	r3, r0
 8006662:	e7f7      	b.n	8006654 <__any_on+0x26>
 8006664:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006668:	2900      	cmp	r1, #0
 800666a:	d0f5      	beq.n	8006658 <__any_on+0x2a>
 800666c:	2001      	movs	r0, #1
 800666e:	e7f6      	b.n	800665e <__any_on+0x30>

08006670 <sulp>:
 8006670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006674:	460f      	mov	r7, r1
 8006676:	4690      	mov	r8, r2
 8006678:	f7ff fec6 	bl	8006408 <__ulp>
 800667c:	4604      	mov	r4, r0
 800667e:	460d      	mov	r5, r1
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	d011      	beq.n	80066aa <sulp+0x3a>
 8006686:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800668a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800668e:	2b00      	cmp	r3, #0
 8006690:	dd0b      	ble.n	80066aa <sulp+0x3a>
 8006692:	2400      	movs	r4, #0
 8006694:	051b      	lsls	r3, r3, #20
 8006696:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800669a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800669e:	4622      	mov	r2, r4
 80066a0:	462b      	mov	r3, r5
 80066a2:	f7f9 ff19 	bl	80004d8 <__aeabi_dmul>
 80066a6:	4604      	mov	r4, r0
 80066a8:	460d      	mov	r5, r1
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b2:	0000      	movs	r0, r0
 80066b4:	0000      	movs	r0, r0
	...

080066b8 <_strtod_l>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	b09f      	sub	sp, #124	@ 0x7c
 80066be:	9217      	str	r2, [sp, #92]	@ 0x5c
 80066c0:	2200      	movs	r2, #0
 80066c2:	460c      	mov	r4, r1
 80066c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80066c6:	f04f 0a00 	mov.w	sl, #0
 80066ca:	f04f 0b00 	mov.w	fp, #0
 80066ce:	460a      	mov	r2, r1
 80066d0:	9005      	str	r0, [sp, #20]
 80066d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80066d4:	7811      	ldrb	r1, [r2, #0]
 80066d6:	292b      	cmp	r1, #43	@ 0x2b
 80066d8:	d048      	beq.n	800676c <_strtod_l+0xb4>
 80066da:	d836      	bhi.n	800674a <_strtod_l+0x92>
 80066dc:	290d      	cmp	r1, #13
 80066de:	d830      	bhi.n	8006742 <_strtod_l+0x8a>
 80066e0:	2908      	cmp	r1, #8
 80066e2:	d830      	bhi.n	8006746 <_strtod_l+0x8e>
 80066e4:	2900      	cmp	r1, #0
 80066e6:	d039      	beq.n	800675c <_strtod_l+0xa4>
 80066e8:	2200      	movs	r2, #0
 80066ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80066ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80066ee:	782a      	ldrb	r2, [r5, #0]
 80066f0:	2a30      	cmp	r2, #48	@ 0x30
 80066f2:	f040 80b1 	bne.w	8006858 <_strtod_l+0x1a0>
 80066f6:	786a      	ldrb	r2, [r5, #1]
 80066f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066fc:	2a58      	cmp	r2, #88	@ 0x58
 80066fe:	d16c      	bne.n	80067da <_strtod_l+0x122>
 8006700:	9302      	str	r3, [sp, #8]
 8006702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006704:	4a8e      	ldr	r2, [pc, #568]	@ (8006940 <_strtod_l+0x288>)
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	ab1a      	add	r3, sp, #104	@ 0x68
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	9805      	ldr	r0, [sp, #20]
 800670e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006710:	a919      	add	r1, sp, #100	@ 0x64
 8006712:	f001 f915 	bl	8007940 <__gethex>
 8006716:	f010 060f 	ands.w	r6, r0, #15
 800671a:	4604      	mov	r4, r0
 800671c:	d005      	beq.n	800672a <_strtod_l+0x72>
 800671e:	2e06      	cmp	r6, #6
 8006720:	d126      	bne.n	8006770 <_strtod_l+0xb8>
 8006722:	2300      	movs	r3, #0
 8006724:	3501      	adds	r5, #1
 8006726:	9519      	str	r5, [sp, #100]	@ 0x64
 8006728:	930b      	str	r3, [sp, #44]	@ 0x2c
 800672a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 8584 	bne.w	800723a <_strtod_l+0xb82>
 8006732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006734:	b1bb      	cbz	r3, 8006766 <_strtod_l+0xae>
 8006736:	4650      	mov	r0, sl
 8006738:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800673c:	b01f      	add	sp, #124	@ 0x7c
 800673e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006742:	2920      	cmp	r1, #32
 8006744:	d1d0      	bne.n	80066e8 <_strtod_l+0x30>
 8006746:	3201      	adds	r2, #1
 8006748:	e7c3      	b.n	80066d2 <_strtod_l+0x1a>
 800674a:	292d      	cmp	r1, #45	@ 0x2d
 800674c:	d1cc      	bne.n	80066e8 <_strtod_l+0x30>
 800674e:	2101      	movs	r1, #1
 8006750:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006752:	1c51      	adds	r1, r2, #1
 8006754:	9119      	str	r1, [sp, #100]	@ 0x64
 8006756:	7852      	ldrb	r2, [r2, #1]
 8006758:	2a00      	cmp	r2, #0
 800675a:	d1c7      	bne.n	80066ec <_strtod_l+0x34>
 800675c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800675e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 8568 	bne.w	8007236 <_strtod_l+0xb7e>
 8006766:	4650      	mov	r0, sl
 8006768:	4659      	mov	r1, fp
 800676a:	e7e7      	b.n	800673c <_strtod_l+0x84>
 800676c:	2100      	movs	r1, #0
 800676e:	e7ef      	b.n	8006750 <_strtod_l+0x98>
 8006770:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006772:	b13a      	cbz	r2, 8006784 <_strtod_l+0xcc>
 8006774:	2135      	movs	r1, #53	@ 0x35
 8006776:	a81c      	add	r0, sp, #112	@ 0x70
 8006778:	f7ff ff36 	bl	80065e8 <__copybits>
 800677c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800677e:	9805      	ldr	r0, [sp, #20]
 8006780:	f7ff fb10 	bl	8005da4 <_Bfree>
 8006784:	3e01      	subs	r6, #1
 8006786:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006788:	2e04      	cmp	r6, #4
 800678a:	d806      	bhi.n	800679a <_strtod_l+0xe2>
 800678c:	e8df f006 	tbb	[pc, r6]
 8006790:	201d0314 	.word	0x201d0314
 8006794:	14          	.byte	0x14
 8006795:	00          	.byte	0x00
 8006796:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800679a:	05e1      	lsls	r1, r4, #23
 800679c:	bf48      	it	mi
 800679e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80067a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067a6:	0d1b      	lsrs	r3, r3, #20
 80067a8:	051b      	lsls	r3, r3, #20
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1bd      	bne.n	800672a <_strtod_l+0x72>
 80067ae:	f7fe fb29 	bl	8004e04 <__errno>
 80067b2:	2322      	movs	r3, #34	@ 0x22
 80067b4:	6003      	str	r3, [r0, #0]
 80067b6:	e7b8      	b.n	800672a <_strtod_l+0x72>
 80067b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80067bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80067c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067c4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067c8:	e7e7      	b.n	800679a <_strtod_l+0xe2>
 80067ca:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006944 <_strtod_l+0x28c>
 80067ce:	e7e4      	b.n	800679a <_strtod_l+0xe2>
 80067d0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80067d4:	f04f 3aff 	mov.w	sl, #4294967295
 80067d8:	e7df      	b.n	800679a <_strtod_l+0xe2>
 80067da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	9219      	str	r2, [sp, #100]	@ 0x64
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	2b30      	cmp	r3, #48	@ 0x30
 80067e4:	d0f9      	beq.n	80067da <_strtod_l+0x122>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d09f      	beq.n	800672a <_strtod_l+0x72>
 80067ea:	2301      	movs	r3, #1
 80067ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80067ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067f0:	220a      	movs	r2, #10
 80067f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80067f4:	2300      	movs	r3, #0
 80067f6:	461f      	mov	r7, r3
 80067f8:	9308      	str	r3, [sp, #32]
 80067fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80067fc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80067fe:	7805      	ldrb	r5, [r0, #0]
 8006800:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006804:	b2d9      	uxtb	r1, r3
 8006806:	2909      	cmp	r1, #9
 8006808:	d928      	bls.n	800685c <_strtod_l+0x1a4>
 800680a:	2201      	movs	r2, #1
 800680c:	494e      	ldr	r1, [pc, #312]	@ (8006948 <_strtod_l+0x290>)
 800680e:	f000 ffc7 	bl	80077a0 <strncmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	d032      	beq.n	800687c <_strtod_l+0x1c4>
 8006816:	2000      	movs	r0, #0
 8006818:	462a      	mov	r2, r5
 800681a:	4681      	mov	r9, r0
 800681c:	463d      	mov	r5, r7
 800681e:	4603      	mov	r3, r0
 8006820:	2a65      	cmp	r2, #101	@ 0x65
 8006822:	d001      	beq.n	8006828 <_strtod_l+0x170>
 8006824:	2a45      	cmp	r2, #69	@ 0x45
 8006826:	d114      	bne.n	8006852 <_strtod_l+0x19a>
 8006828:	b91d      	cbnz	r5, 8006832 <_strtod_l+0x17a>
 800682a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800682c:	4302      	orrs	r2, r0
 800682e:	d095      	beq.n	800675c <_strtod_l+0xa4>
 8006830:	2500      	movs	r5, #0
 8006832:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006834:	1c62      	adds	r2, r4, #1
 8006836:	9219      	str	r2, [sp, #100]	@ 0x64
 8006838:	7862      	ldrb	r2, [r4, #1]
 800683a:	2a2b      	cmp	r2, #43	@ 0x2b
 800683c:	d077      	beq.n	800692e <_strtod_l+0x276>
 800683e:	2a2d      	cmp	r2, #45	@ 0x2d
 8006840:	d07b      	beq.n	800693a <_strtod_l+0x282>
 8006842:	f04f 0c00 	mov.w	ip, #0
 8006846:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800684a:	2909      	cmp	r1, #9
 800684c:	f240 8082 	bls.w	8006954 <_strtod_l+0x29c>
 8006850:	9419      	str	r4, [sp, #100]	@ 0x64
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	e0a2      	b.n	800699e <_strtod_l+0x2e6>
 8006858:	2300      	movs	r3, #0
 800685a:	e7c7      	b.n	80067ec <_strtod_l+0x134>
 800685c:	2f08      	cmp	r7, #8
 800685e:	bfd5      	itete	le
 8006860:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006862:	9908      	ldrgt	r1, [sp, #32]
 8006864:	fb02 3301 	mlale	r3, r2, r1, r3
 8006868:	fb02 3301 	mlagt	r3, r2, r1, r3
 800686c:	f100 0001 	add.w	r0, r0, #1
 8006870:	bfd4      	ite	le
 8006872:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006874:	9308      	strgt	r3, [sp, #32]
 8006876:	3701      	adds	r7, #1
 8006878:	9019      	str	r0, [sp, #100]	@ 0x64
 800687a:	e7bf      	b.n	80067fc <_strtod_l+0x144>
 800687c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	9219      	str	r2, [sp, #100]	@ 0x64
 8006882:	785a      	ldrb	r2, [r3, #1]
 8006884:	b37f      	cbz	r7, 80068e6 <_strtod_l+0x22e>
 8006886:	4681      	mov	r9, r0
 8006888:	463d      	mov	r5, r7
 800688a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800688e:	2b09      	cmp	r3, #9
 8006890:	d912      	bls.n	80068b8 <_strtod_l+0x200>
 8006892:	2301      	movs	r3, #1
 8006894:	e7c4      	b.n	8006820 <_strtod_l+0x168>
 8006896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006898:	3001      	adds	r0, #1
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	9219      	str	r2, [sp, #100]	@ 0x64
 800689e:	785a      	ldrb	r2, [r3, #1]
 80068a0:	2a30      	cmp	r2, #48	@ 0x30
 80068a2:	d0f8      	beq.n	8006896 <_strtod_l+0x1de>
 80068a4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	f200 84cb 	bhi.w	8007244 <_strtod_l+0xb8c>
 80068ae:	4681      	mov	r9, r0
 80068b0:	2000      	movs	r0, #0
 80068b2:	4605      	mov	r5, r0
 80068b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80068b8:	3a30      	subs	r2, #48	@ 0x30
 80068ba:	f100 0301 	add.w	r3, r0, #1
 80068be:	d02a      	beq.n	8006916 <_strtod_l+0x25e>
 80068c0:	4499      	add	r9, r3
 80068c2:	210a      	movs	r1, #10
 80068c4:	462b      	mov	r3, r5
 80068c6:	eb00 0c05 	add.w	ip, r0, r5
 80068ca:	4563      	cmp	r3, ip
 80068cc:	d10d      	bne.n	80068ea <_strtod_l+0x232>
 80068ce:	1c69      	adds	r1, r5, #1
 80068d0:	4401      	add	r1, r0
 80068d2:	4428      	add	r0, r5
 80068d4:	2808      	cmp	r0, #8
 80068d6:	dc16      	bgt.n	8006906 <_strtod_l+0x24e>
 80068d8:	230a      	movs	r3, #10
 80068da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068dc:	fb03 2300 	mla	r3, r3, r0, r2
 80068e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80068e2:	2300      	movs	r3, #0
 80068e4:	e018      	b.n	8006918 <_strtod_l+0x260>
 80068e6:	4638      	mov	r0, r7
 80068e8:	e7da      	b.n	80068a0 <_strtod_l+0x1e8>
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	f103 0301 	add.w	r3, r3, #1
 80068f0:	dc03      	bgt.n	80068fa <_strtod_l+0x242>
 80068f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80068f4:	434e      	muls	r6, r1
 80068f6:	960a      	str	r6, [sp, #40]	@ 0x28
 80068f8:	e7e7      	b.n	80068ca <_strtod_l+0x212>
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	bfde      	ittt	le
 80068fe:	9e08      	ldrle	r6, [sp, #32]
 8006900:	434e      	mulle	r6, r1
 8006902:	9608      	strle	r6, [sp, #32]
 8006904:	e7e1      	b.n	80068ca <_strtod_l+0x212>
 8006906:	280f      	cmp	r0, #15
 8006908:	dceb      	bgt.n	80068e2 <_strtod_l+0x22a>
 800690a:	230a      	movs	r3, #10
 800690c:	9808      	ldr	r0, [sp, #32]
 800690e:	fb03 2300 	mla	r3, r3, r0, r2
 8006912:	9308      	str	r3, [sp, #32]
 8006914:	e7e5      	b.n	80068e2 <_strtod_l+0x22a>
 8006916:	4629      	mov	r1, r5
 8006918:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800691a:	460d      	mov	r5, r1
 800691c:	1c50      	adds	r0, r2, #1
 800691e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006920:	7852      	ldrb	r2, [r2, #1]
 8006922:	4618      	mov	r0, r3
 8006924:	e7b1      	b.n	800688a <_strtod_l+0x1d2>
 8006926:	f04f 0900 	mov.w	r9, #0
 800692a:	2301      	movs	r3, #1
 800692c:	e77d      	b.n	800682a <_strtod_l+0x172>
 800692e:	f04f 0c00 	mov.w	ip, #0
 8006932:	1ca2      	adds	r2, r4, #2
 8006934:	9219      	str	r2, [sp, #100]	@ 0x64
 8006936:	78a2      	ldrb	r2, [r4, #2]
 8006938:	e785      	b.n	8006846 <_strtod_l+0x18e>
 800693a:	f04f 0c01 	mov.w	ip, #1
 800693e:	e7f8      	b.n	8006932 <_strtod_l+0x27a>
 8006940:	080087b8 	.word	0x080087b8
 8006944:	7ff00000 	.word	0x7ff00000
 8006948:	080087a0 	.word	0x080087a0
 800694c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800694e:	1c51      	adds	r1, r2, #1
 8006950:	9119      	str	r1, [sp, #100]	@ 0x64
 8006952:	7852      	ldrb	r2, [r2, #1]
 8006954:	2a30      	cmp	r2, #48	@ 0x30
 8006956:	d0f9      	beq.n	800694c <_strtod_l+0x294>
 8006958:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800695c:	2908      	cmp	r1, #8
 800695e:	f63f af78 	bhi.w	8006852 <_strtod_l+0x19a>
 8006962:	f04f 080a 	mov.w	r8, #10
 8006966:	3a30      	subs	r2, #48	@ 0x30
 8006968:	920e      	str	r2, [sp, #56]	@ 0x38
 800696a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800696c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800696e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006970:	1c56      	adds	r6, r2, #1
 8006972:	9619      	str	r6, [sp, #100]	@ 0x64
 8006974:	7852      	ldrb	r2, [r2, #1]
 8006976:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800697a:	f1be 0f09 	cmp.w	lr, #9
 800697e:	d939      	bls.n	80069f4 <_strtod_l+0x33c>
 8006980:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006982:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006986:	1a76      	subs	r6, r6, r1
 8006988:	2e08      	cmp	r6, #8
 800698a:	dc03      	bgt.n	8006994 <_strtod_l+0x2dc>
 800698c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800698e:	4588      	cmp	r8, r1
 8006990:	bfa8      	it	ge
 8006992:	4688      	movge	r8, r1
 8006994:	f1bc 0f00 	cmp.w	ip, #0
 8006998:	d001      	beq.n	800699e <_strtod_l+0x2e6>
 800699a:	f1c8 0800 	rsb	r8, r8, #0
 800699e:	2d00      	cmp	r5, #0
 80069a0:	d14e      	bne.n	8006a40 <_strtod_l+0x388>
 80069a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069a4:	4308      	orrs	r0, r1
 80069a6:	f47f aec0 	bne.w	800672a <_strtod_l+0x72>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f47f aed6 	bne.w	800675c <_strtod_l+0xa4>
 80069b0:	2a69      	cmp	r2, #105	@ 0x69
 80069b2:	d028      	beq.n	8006a06 <_strtod_l+0x34e>
 80069b4:	dc25      	bgt.n	8006a02 <_strtod_l+0x34a>
 80069b6:	2a49      	cmp	r2, #73	@ 0x49
 80069b8:	d025      	beq.n	8006a06 <_strtod_l+0x34e>
 80069ba:	2a4e      	cmp	r2, #78	@ 0x4e
 80069bc:	f47f aece 	bne.w	800675c <_strtod_l+0xa4>
 80069c0:	499a      	ldr	r1, [pc, #616]	@ (8006c2c <_strtod_l+0x574>)
 80069c2:	a819      	add	r0, sp, #100	@ 0x64
 80069c4:	f001 f9de 	bl	8007d84 <__match>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f43f aec7 	beq.w	800675c <_strtod_l+0xa4>
 80069ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b28      	cmp	r3, #40	@ 0x28
 80069d4:	d12e      	bne.n	8006a34 <_strtod_l+0x37c>
 80069d6:	4996      	ldr	r1, [pc, #600]	@ (8006c30 <_strtod_l+0x578>)
 80069d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80069da:	a819      	add	r0, sp, #100	@ 0x64
 80069dc:	f001 f9e6 	bl	8007dac <__hexnan>
 80069e0:	2805      	cmp	r0, #5
 80069e2:	d127      	bne.n	8006a34 <_strtod_l+0x37c>
 80069e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80069e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80069ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80069ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80069f2:	e69a      	b.n	800672a <_strtod_l+0x72>
 80069f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80069f6:	fb08 2101 	mla	r1, r8, r1, r2
 80069fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80069fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a00:	e7b5      	b.n	800696e <_strtod_l+0x2b6>
 8006a02:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a04:	e7da      	b.n	80069bc <_strtod_l+0x304>
 8006a06:	498b      	ldr	r1, [pc, #556]	@ (8006c34 <_strtod_l+0x57c>)
 8006a08:	a819      	add	r0, sp, #100	@ 0x64
 8006a0a:	f001 f9bb 	bl	8007d84 <__match>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f43f aea4 	beq.w	800675c <_strtod_l+0xa4>
 8006a14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a16:	4988      	ldr	r1, [pc, #544]	@ (8006c38 <_strtod_l+0x580>)
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	a819      	add	r0, sp, #100	@ 0x64
 8006a1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a1e:	f001 f9b1 	bl	8007d84 <__match>
 8006a22:	b910      	cbnz	r0, 8006a2a <_strtod_l+0x372>
 8006a24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a26:	3301      	adds	r3, #1
 8006a28:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a2a:	f04f 0a00 	mov.w	sl, #0
 8006a2e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006c3c <_strtod_l+0x584>
 8006a32:	e67a      	b.n	800672a <_strtod_l+0x72>
 8006a34:	4882      	ldr	r0, [pc, #520]	@ (8006c40 <_strtod_l+0x588>)
 8006a36:	f000 fee3 	bl	8007800 <nan>
 8006a3a:	4682      	mov	sl, r0
 8006a3c:	468b      	mov	fp, r1
 8006a3e:	e674      	b.n	800672a <_strtod_l+0x72>
 8006a40:	eba8 0309 	sub.w	r3, r8, r9
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	bf08      	it	eq
 8006a48:	462f      	moveq	r7, r5
 8006a4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a4c:	2d10      	cmp	r5, #16
 8006a4e:	462c      	mov	r4, r5
 8006a50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a52:	bfa8      	it	ge
 8006a54:	2410      	movge	r4, #16
 8006a56:	f7f9 fcc5 	bl	80003e4 <__aeabi_ui2d>
 8006a5a:	2d09      	cmp	r5, #9
 8006a5c:	4682      	mov	sl, r0
 8006a5e:	468b      	mov	fp, r1
 8006a60:	dc11      	bgt.n	8006a86 <_strtod_l+0x3ce>
 8006a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f43f ae60 	beq.w	800672a <_strtod_l+0x72>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6c:	dd76      	ble.n	8006b5c <_strtod_l+0x4a4>
 8006a6e:	2b16      	cmp	r3, #22
 8006a70:	dc5d      	bgt.n	8006b2e <_strtod_l+0x476>
 8006a72:	4974      	ldr	r1, [pc, #464]	@ (8006c44 <_strtod_l+0x58c>)
 8006a74:	4652      	mov	r2, sl
 8006a76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a7a:	465b      	mov	r3, fp
 8006a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a80:	f7f9 fd2a 	bl	80004d8 <__aeabi_dmul>
 8006a84:	e7d9      	b.n	8006a3a <_strtod_l+0x382>
 8006a86:	4b6f      	ldr	r3, [pc, #444]	@ (8006c44 <_strtod_l+0x58c>)
 8006a88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a90:	f7f9 fd22 	bl	80004d8 <__aeabi_dmul>
 8006a94:	4682      	mov	sl, r0
 8006a96:	9808      	ldr	r0, [sp, #32]
 8006a98:	468b      	mov	fp, r1
 8006a9a:	f7f9 fca3 	bl	80003e4 <__aeabi_ui2d>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4650      	mov	r0, sl
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	f7f9 fb61 	bl	800016c <__adddf3>
 8006aaa:	2d0f      	cmp	r5, #15
 8006aac:	4682      	mov	sl, r0
 8006aae:	468b      	mov	fp, r1
 8006ab0:	ddd7      	ble.n	8006a62 <_strtod_l+0x3aa>
 8006ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab4:	1b2c      	subs	r4, r5, r4
 8006ab6:	441c      	add	r4, r3
 8006ab8:	2c00      	cmp	r4, #0
 8006aba:	f340 8096 	ble.w	8006bea <_strtod_l+0x532>
 8006abe:	f014 030f 	ands.w	r3, r4, #15
 8006ac2:	d00a      	beq.n	8006ada <_strtod_l+0x422>
 8006ac4:	495f      	ldr	r1, [pc, #380]	@ (8006c44 <_strtod_l+0x58c>)
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ad0:	465b      	mov	r3, fp
 8006ad2:	f7f9 fd01 	bl	80004d8 <__aeabi_dmul>
 8006ad6:	4682      	mov	sl, r0
 8006ad8:	468b      	mov	fp, r1
 8006ada:	f034 040f 	bics.w	r4, r4, #15
 8006ade:	d073      	beq.n	8006bc8 <_strtod_l+0x510>
 8006ae0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006ae4:	dd48      	ble.n	8006b78 <_strtod_l+0x4c0>
 8006ae6:	2400      	movs	r4, #0
 8006ae8:	46a0      	mov	r8, r4
 8006aea:	46a1      	mov	r9, r4
 8006aec:	940a      	str	r4, [sp, #40]	@ 0x28
 8006aee:	2322      	movs	r3, #34	@ 0x22
 8006af0:	f04f 0a00 	mov.w	sl, #0
 8006af4:	9a05      	ldr	r2, [sp, #20]
 8006af6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006c3c <_strtod_l+0x584>
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f43f ae13 	beq.w	800672a <_strtod_l+0x72>
 8006b04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b06:	9805      	ldr	r0, [sp, #20]
 8006b08:	f7ff f94c 	bl	8005da4 <_Bfree>
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	9805      	ldr	r0, [sp, #20]
 8006b10:	f7ff f948 	bl	8005da4 <_Bfree>
 8006b14:	4641      	mov	r1, r8
 8006b16:	9805      	ldr	r0, [sp, #20]
 8006b18:	f7ff f944 	bl	8005da4 <_Bfree>
 8006b1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b1e:	9805      	ldr	r0, [sp, #20]
 8006b20:	f7ff f940 	bl	8005da4 <_Bfree>
 8006b24:	4621      	mov	r1, r4
 8006b26:	9805      	ldr	r0, [sp, #20]
 8006b28:	f7ff f93c 	bl	8005da4 <_Bfree>
 8006b2c:	e5fd      	b.n	800672a <_strtod_l+0x72>
 8006b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b34:	4293      	cmp	r3, r2
 8006b36:	dbbc      	blt.n	8006ab2 <_strtod_l+0x3fa>
 8006b38:	4c42      	ldr	r4, [pc, #264]	@ (8006c44 <_strtod_l+0x58c>)
 8006b3a:	f1c5 050f 	rsb	r5, r5, #15
 8006b3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b42:	4652      	mov	r2, sl
 8006b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b48:	465b      	mov	r3, fp
 8006b4a:	f7f9 fcc5 	bl	80004d8 <__aeabi_dmul>
 8006b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b50:	1b5d      	subs	r5, r3, r5
 8006b52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b5a:	e791      	b.n	8006a80 <_strtod_l+0x3c8>
 8006b5c:	3316      	adds	r3, #22
 8006b5e:	dba8      	blt.n	8006ab2 <_strtod_l+0x3fa>
 8006b60:	4b38      	ldr	r3, [pc, #224]	@ (8006c44 <_strtod_l+0x58c>)
 8006b62:	eba9 0808 	sub.w	r8, r9, r8
 8006b66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006b70:	4659      	mov	r1, fp
 8006b72:	f7f9 fddb 	bl	800072c <__aeabi_ddiv>
 8006b76:	e760      	b.n	8006a3a <_strtod_l+0x382>
 8006b78:	4b33      	ldr	r3, [pc, #204]	@ (8006c48 <_strtod_l+0x590>)
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	9308      	str	r3, [sp, #32]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4659      	mov	r1, fp
 8006b82:	461e      	mov	r6, r3
 8006b84:	1124      	asrs	r4, r4, #4
 8006b86:	2c01      	cmp	r4, #1
 8006b88:	dc21      	bgt.n	8006bce <_strtod_l+0x516>
 8006b8a:	b10b      	cbz	r3, 8006b90 <_strtod_l+0x4d8>
 8006b8c:	4682      	mov	sl, r0
 8006b8e:	468b      	mov	fp, r1
 8006b90:	492d      	ldr	r1, [pc, #180]	@ (8006c48 <_strtod_l+0x590>)
 8006b92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006b9a:	4652      	mov	r2, sl
 8006b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba0:	465b      	mov	r3, fp
 8006ba2:	f7f9 fc99 	bl	80004d8 <__aeabi_dmul>
 8006ba6:	4b25      	ldr	r3, [pc, #148]	@ (8006c3c <_strtod_l+0x584>)
 8006ba8:	460a      	mov	r2, r1
 8006baa:	400b      	ands	r3, r1
 8006bac:	4927      	ldr	r1, [pc, #156]	@ (8006c4c <_strtod_l+0x594>)
 8006bae:	4682      	mov	sl, r0
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	d898      	bhi.n	8006ae6 <_strtod_l+0x42e>
 8006bb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	bf86      	itte	hi
 8006bbc:	f04f 3aff 	movhi.w	sl, #4294967295
 8006bc0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006c50 <_strtod_l+0x598>
 8006bc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9308      	str	r3, [sp, #32]
 8006bcc:	e07a      	b.n	8006cc4 <_strtod_l+0x60c>
 8006bce:	07e2      	lsls	r2, r4, #31
 8006bd0:	d505      	bpl.n	8006bde <_strtod_l+0x526>
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f7f9 fc7e 	bl	80004d8 <__aeabi_dmul>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9a08      	ldr	r2, [sp, #32]
 8006be0:	3601      	adds	r6, #1
 8006be2:	3208      	adds	r2, #8
 8006be4:	1064      	asrs	r4, r4, #1
 8006be6:	9208      	str	r2, [sp, #32]
 8006be8:	e7cd      	b.n	8006b86 <_strtod_l+0x4ce>
 8006bea:	d0ed      	beq.n	8006bc8 <_strtod_l+0x510>
 8006bec:	4264      	negs	r4, r4
 8006bee:	f014 020f 	ands.w	r2, r4, #15
 8006bf2:	d00a      	beq.n	8006c0a <_strtod_l+0x552>
 8006bf4:	4b13      	ldr	r3, [pc, #76]	@ (8006c44 <_strtod_l+0x58c>)
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f7f9 fd93 	bl	800072c <__aeabi_ddiv>
 8006c06:	4682      	mov	sl, r0
 8006c08:	468b      	mov	fp, r1
 8006c0a:	1124      	asrs	r4, r4, #4
 8006c0c:	d0dc      	beq.n	8006bc8 <_strtod_l+0x510>
 8006c0e:	2c1f      	cmp	r4, #31
 8006c10:	dd20      	ble.n	8006c54 <_strtod_l+0x59c>
 8006c12:	2400      	movs	r4, #0
 8006c14:	46a0      	mov	r8, r4
 8006c16:	46a1      	mov	r9, r4
 8006c18:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c1a:	2322      	movs	r3, #34	@ 0x22
 8006c1c:	9a05      	ldr	r2, [sp, #20]
 8006c1e:	f04f 0a00 	mov.w	sl, #0
 8006c22:	f04f 0b00 	mov.w	fp, #0
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	e768      	b.n	8006afc <_strtod_l+0x444>
 8006c2a:	bf00      	nop
 8006c2c:	0800858b 	.word	0x0800858b
 8006c30:	080087a4 	.word	0x080087a4
 8006c34:	08008583 	.word	0x08008583
 8006c38:	080085ba 	.word	0x080085ba
 8006c3c:	7ff00000 	.word	0x7ff00000
 8006c40:	0800894d 	.word	0x0800894d
 8006c44:	080086d8 	.word	0x080086d8
 8006c48:	080086b0 	.word	0x080086b0
 8006c4c:	7ca00000 	.word	0x7ca00000
 8006c50:	7fefffff 	.word	0x7fefffff
 8006c54:	f014 0310 	ands.w	r3, r4, #16
 8006c58:	bf18      	it	ne
 8006c5a:	236a      	movne	r3, #106	@ 0x6a
 8006c5c:	4650      	mov	r0, sl
 8006c5e:	9308      	str	r3, [sp, #32]
 8006c60:	4659      	mov	r1, fp
 8006c62:	2300      	movs	r3, #0
 8006c64:	4ea9      	ldr	r6, [pc, #676]	@ (8006f0c <_strtod_l+0x854>)
 8006c66:	07e2      	lsls	r2, r4, #31
 8006c68:	d504      	bpl.n	8006c74 <_strtod_l+0x5bc>
 8006c6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c6e:	f7f9 fc33 	bl	80004d8 <__aeabi_dmul>
 8006c72:	2301      	movs	r3, #1
 8006c74:	1064      	asrs	r4, r4, #1
 8006c76:	f106 0608 	add.w	r6, r6, #8
 8006c7a:	d1f4      	bne.n	8006c66 <_strtod_l+0x5ae>
 8006c7c:	b10b      	cbz	r3, 8006c82 <_strtod_l+0x5ca>
 8006c7e:	4682      	mov	sl, r0
 8006c80:	468b      	mov	fp, r1
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	b1b3      	cbz	r3, 8006cb4 <_strtod_l+0x5fc>
 8006c86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	4659      	mov	r1, fp
 8006c92:	dd0f      	ble.n	8006cb4 <_strtod_l+0x5fc>
 8006c94:	2b1f      	cmp	r3, #31
 8006c96:	dd57      	ble.n	8006d48 <_strtod_l+0x690>
 8006c98:	2b34      	cmp	r3, #52	@ 0x34
 8006c9a:	bfd8      	it	le
 8006c9c:	f04f 33ff 	movle.w	r3, #4294967295
 8006ca0:	f04f 0a00 	mov.w	sl, #0
 8006ca4:	bfcf      	iteee	gt
 8006ca6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006caa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006cae:	4093      	lslle	r3, r2
 8006cb0:	ea03 0b01 	andle.w	fp, r3, r1
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4659      	mov	r1, fp
 8006cbc:	f7f9 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1a6      	bne.n	8006c12 <_strtod_l+0x55a>
 8006cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cc6:	463a      	mov	r2, r7
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006ccc:	462b      	mov	r3, r5
 8006cce:	9805      	ldr	r0, [sp, #20]
 8006cd0:	f7ff f8d0 	bl	8005e74 <__s2b>
 8006cd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f af05 	beq.w	8006ae6 <_strtod_l+0x42e>
 8006cdc:	2400      	movs	r4, #0
 8006cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ce0:	eba9 0308 	sub.w	r3, r9, r8
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	bfa8      	it	ge
 8006ce8:	2300      	movge	r3, #0
 8006cea:	46a0      	mov	r8, r4
 8006cec:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cf2:	9316      	str	r3, [sp, #88]	@ 0x58
 8006cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cf6:	9805      	ldr	r0, [sp, #20]
 8006cf8:	6859      	ldr	r1, [r3, #4]
 8006cfa:	f7ff f813 	bl	8005d24 <_Balloc>
 8006cfe:	4681      	mov	r9, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f43f aef4 	beq.w	8006aee <_strtod_l+0x436>
 8006d06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d08:	300c      	adds	r0, #12
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	f103 010c 	add.w	r1, r3, #12
 8006d10:	3202      	adds	r2, #2
 8006d12:	0092      	lsls	r2, r2, #2
 8006d14:	f000 fd66 	bl	80077e4 <memcpy>
 8006d18:	ab1c      	add	r3, sp, #112	@ 0x70
 8006d1a:	9301      	str	r3, [sp, #4]
 8006d1c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	4652      	mov	r2, sl
 8006d22:	465b      	mov	r3, fp
 8006d24:	9805      	ldr	r0, [sp, #20]
 8006d26:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d2a:	f7ff fbd5 	bl	80064d8 <__d2b>
 8006d2e:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d30:	2800      	cmp	r0, #0
 8006d32:	f43f aedc 	beq.w	8006aee <_strtod_l+0x436>
 8006d36:	2101      	movs	r1, #1
 8006d38:	9805      	ldr	r0, [sp, #20]
 8006d3a:	f7ff f931 	bl	8005fa0 <__i2b>
 8006d3e:	4680      	mov	r8, r0
 8006d40:	b948      	cbnz	r0, 8006d56 <_strtod_l+0x69e>
 8006d42:	f04f 0800 	mov.w	r8, #0
 8006d46:	e6d2      	b.n	8006aee <_strtod_l+0x436>
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	ea03 0a0a 	and.w	sl, r3, sl
 8006d54:	e7ae      	b.n	8006cb4 <_strtod_l+0x5fc>
 8006d56:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d58:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	bfab      	itete	ge
 8006d5e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d60:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d62:	18ef      	addge	r7, r5, r3
 8006d64:	1b5e      	sublt	r6, r3, r5
 8006d66:	9b08      	ldr	r3, [sp, #32]
 8006d68:	bfa8      	it	ge
 8006d6a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d6c:	eba5 0503 	sub.w	r5, r5, r3
 8006d70:	4415      	add	r5, r2
 8006d72:	4b67      	ldr	r3, [pc, #412]	@ (8006f10 <_strtod_l+0x858>)
 8006d74:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d78:	bfb8      	it	lt
 8006d7a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006d7c:	429d      	cmp	r5, r3
 8006d7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d82:	da50      	bge.n	8006e26 <_strtod_l+0x76e>
 8006d84:	1b5b      	subs	r3, r3, r5
 8006d86:	2b1f      	cmp	r3, #31
 8006d88:	f04f 0101 	mov.w	r1, #1
 8006d8c:	eba2 0203 	sub.w	r2, r2, r3
 8006d90:	dc3d      	bgt.n	8006e0e <_strtod_l+0x756>
 8006d92:	fa01 f303 	lsl.w	r3, r1, r3
 8006d96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d98:	2300      	movs	r3, #0
 8006d9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d9c:	18bd      	adds	r5, r7, r2
 8006d9e:	9b08      	ldr	r3, [sp, #32]
 8006da0:	42af      	cmp	r7, r5
 8006da2:	4416      	add	r6, r2
 8006da4:	441e      	add	r6, r3
 8006da6:	463b      	mov	r3, r7
 8006da8:	bfa8      	it	ge
 8006daa:	462b      	movge	r3, r5
 8006dac:	42b3      	cmp	r3, r6
 8006dae:	bfa8      	it	ge
 8006db0:	4633      	movge	r3, r6
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bfc2      	ittt	gt
 8006db6:	1aed      	subgt	r5, r5, r3
 8006db8:	1af6      	subgt	r6, r6, r3
 8006dba:	1aff      	subgt	r7, r7, r3
 8006dbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	dd16      	ble.n	8006df0 <_strtod_l+0x738>
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	9805      	ldr	r0, [sp, #20]
 8006dc8:	f7ff f9a8 	bl	800611c <__pow5mult>
 8006dcc:	4680      	mov	r8, r0
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0b7      	beq.n	8006d42 <_strtod_l+0x68a>
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dd6:	9805      	ldr	r0, [sp, #20]
 8006dd8:	f7ff f8f8 	bl	8005fcc <__multiply>
 8006ddc:	900e      	str	r0, [sp, #56]	@ 0x38
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f43f ae85 	beq.w	8006aee <_strtod_l+0x436>
 8006de4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006de6:	9805      	ldr	r0, [sp, #20]
 8006de8:	f7fe ffdc 	bl	8005da4 <_Bfree>
 8006dec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dee:	931a      	str	r3, [sp, #104]	@ 0x68
 8006df0:	2d00      	cmp	r5, #0
 8006df2:	dc1d      	bgt.n	8006e30 <_strtod_l+0x778>
 8006df4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dd23      	ble.n	8006e42 <_strtod_l+0x78a>
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006dfe:	9805      	ldr	r0, [sp, #20]
 8006e00:	f7ff f98c 	bl	800611c <__pow5mult>
 8006e04:	4681      	mov	r9, r0
 8006e06:	b9e0      	cbnz	r0, 8006e42 <_strtod_l+0x78a>
 8006e08:	f04f 0900 	mov.w	r9, #0
 8006e0c:	e66f      	b.n	8006aee <_strtod_l+0x436>
 8006e0e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e12:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e16:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e1a:	35e2      	adds	r5, #226	@ 0xe2
 8006e1c:	fa01 f305 	lsl.w	r3, r1, r5
 8006e20:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e22:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e24:	e7ba      	b.n	8006d9c <_strtod_l+0x6e4>
 8006e26:	2300      	movs	r3, #0
 8006e28:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e2e:	e7b5      	b.n	8006d9c <_strtod_l+0x6e4>
 8006e30:	462a      	mov	r2, r5
 8006e32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e34:	9805      	ldr	r0, [sp, #20]
 8006e36:	f7ff f9cb 	bl	80061d0 <__lshift>
 8006e3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d1d9      	bne.n	8006df4 <_strtod_l+0x73c>
 8006e40:	e655      	b.n	8006aee <_strtod_l+0x436>
 8006e42:	2e00      	cmp	r6, #0
 8006e44:	dd07      	ble.n	8006e56 <_strtod_l+0x79e>
 8006e46:	4649      	mov	r1, r9
 8006e48:	4632      	mov	r2, r6
 8006e4a:	9805      	ldr	r0, [sp, #20]
 8006e4c:	f7ff f9c0 	bl	80061d0 <__lshift>
 8006e50:	4681      	mov	r9, r0
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0d8      	beq.n	8006e08 <_strtod_l+0x750>
 8006e56:	2f00      	cmp	r7, #0
 8006e58:	dd08      	ble.n	8006e6c <_strtod_l+0x7b4>
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	463a      	mov	r2, r7
 8006e5e:	9805      	ldr	r0, [sp, #20]
 8006e60:	f7ff f9b6 	bl	80061d0 <__lshift>
 8006e64:	4680      	mov	r8, r0
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f43f ae41 	beq.w	8006aee <_strtod_l+0x436>
 8006e6c:	464a      	mov	r2, r9
 8006e6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e70:	9805      	ldr	r0, [sp, #20]
 8006e72:	f7ff fa35 	bl	80062e0 <__mdiff>
 8006e76:	4604      	mov	r4, r0
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f43f ae38 	beq.w	8006aee <_strtod_l+0x436>
 8006e7e:	68c3      	ldr	r3, [r0, #12]
 8006e80:	4641      	mov	r1, r8
 8006e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e84:	2300      	movs	r3, #0
 8006e86:	60c3      	str	r3, [r0, #12]
 8006e88:	f7ff fa0e 	bl	80062a8 <__mcmp>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	da45      	bge.n	8006f1c <_strtod_l+0x864>
 8006e90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e92:	ea53 030a 	orrs.w	r3, r3, sl
 8006e96:	d16b      	bne.n	8006f70 <_strtod_l+0x8b8>
 8006e98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d167      	bne.n	8006f70 <_strtod_l+0x8b8>
 8006ea0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ea4:	0d1b      	lsrs	r3, r3, #20
 8006ea6:	051b      	lsls	r3, r3, #20
 8006ea8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006eac:	d960      	bls.n	8006f70 <_strtod_l+0x8b8>
 8006eae:	6963      	ldr	r3, [r4, #20]
 8006eb0:	b913      	cbnz	r3, 8006eb8 <_strtod_l+0x800>
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	dd5b      	ble.n	8006f70 <_strtod_l+0x8b8>
 8006eb8:	4621      	mov	r1, r4
 8006eba:	2201      	movs	r2, #1
 8006ebc:	9805      	ldr	r0, [sp, #20]
 8006ebe:	f7ff f987 	bl	80061d0 <__lshift>
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	f7ff f9ef 	bl	80062a8 <__mcmp>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	dd50      	ble.n	8006f70 <_strtod_l+0x8b8>
 8006ece:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006ed2:	9a08      	ldr	r2, [sp, #32]
 8006ed4:	0d1b      	lsrs	r3, r3, #20
 8006ed6:	051b      	lsls	r3, r3, #20
 8006ed8:	2a00      	cmp	r2, #0
 8006eda:	d06a      	beq.n	8006fb2 <_strtod_l+0x8fa>
 8006edc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ee0:	d867      	bhi.n	8006fb2 <_strtod_l+0x8fa>
 8006ee2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ee6:	f67f ae98 	bls.w	8006c1a <_strtod_l+0x562>
 8006eea:	4650      	mov	r0, sl
 8006eec:	4659      	mov	r1, fp
 8006eee:	4b09      	ldr	r3, [pc, #36]	@ (8006f14 <_strtod_l+0x85c>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f7f9 faf1 	bl	80004d8 <__aeabi_dmul>
 8006ef6:	4b08      	ldr	r3, [pc, #32]	@ (8006f18 <_strtod_l+0x860>)
 8006ef8:	4682      	mov	sl, r0
 8006efa:	400b      	ands	r3, r1
 8006efc:	468b      	mov	fp, r1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f ae00 	bne.w	8006b04 <_strtod_l+0x44c>
 8006f04:	2322      	movs	r3, #34	@ 0x22
 8006f06:	9a05      	ldr	r2, [sp, #20]
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e5fb      	b.n	8006b04 <_strtod_l+0x44c>
 8006f0c:	080087d0 	.word	0x080087d0
 8006f10:	fffffc02 	.word	0xfffffc02
 8006f14:	39500000 	.word	0x39500000
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f20:	d165      	bne.n	8006fee <_strtod_l+0x936>
 8006f22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f28:	b35a      	cbz	r2, 8006f82 <_strtod_l+0x8ca>
 8006f2a:	4a99      	ldr	r2, [pc, #612]	@ (8007190 <_strtod_l+0xad8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d12b      	bne.n	8006f88 <_strtod_l+0x8d0>
 8006f30:	9b08      	ldr	r3, [sp, #32]
 8006f32:	4651      	mov	r1, sl
 8006f34:	b303      	cbz	r3, 8006f78 <_strtod_l+0x8c0>
 8006f36:	465a      	mov	r2, fp
 8006f38:	4b96      	ldr	r3, [pc, #600]	@ (8007194 <_strtod_l+0xadc>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295
 8006f44:	d81b      	bhi.n	8006f7e <_strtod_l+0x8c6>
 8006f46:	0d1b      	lsrs	r3, r3, #20
 8006f48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	4299      	cmp	r1, r3
 8006f52:	d119      	bne.n	8006f88 <_strtod_l+0x8d0>
 8006f54:	4b90      	ldr	r3, [pc, #576]	@ (8007198 <_strtod_l+0xae0>)
 8006f56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d102      	bne.n	8006f62 <_strtod_l+0x8aa>
 8006f5c:	3101      	adds	r1, #1
 8006f5e:	f43f adc6 	beq.w	8006aee <_strtod_l+0x436>
 8006f62:	f04f 0a00 	mov.w	sl, #0
 8006f66:	4b8b      	ldr	r3, [pc, #556]	@ (8007194 <_strtod_l+0xadc>)
 8006f68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1b9      	bne.n	8006eea <_strtod_l+0x832>
 8006f76:	e5c5      	b.n	8006b04 <_strtod_l+0x44c>
 8006f78:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7c:	e7e8      	b.n	8006f50 <_strtod_l+0x898>
 8006f7e:	4613      	mov	r3, r2
 8006f80:	e7e6      	b.n	8006f50 <_strtod_l+0x898>
 8006f82:	ea53 030a 	orrs.w	r3, r3, sl
 8006f86:	d0a2      	beq.n	8006ece <_strtod_l+0x816>
 8006f88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f8a:	b1db      	cbz	r3, 8006fc4 <_strtod_l+0x90c>
 8006f8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f8e:	4213      	tst	r3, r2
 8006f90:	d0ee      	beq.n	8006f70 <_strtod_l+0x8b8>
 8006f92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f94:	4650      	mov	r0, sl
 8006f96:	4659      	mov	r1, fp
 8006f98:	9a08      	ldr	r2, [sp, #32]
 8006f9a:	b1bb      	cbz	r3, 8006fcc <_strtod_l+0x914>
 8006f9c:	f7ff fb68 	bl	8006670 <sulp>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fa8:	f7f9 f8e0 	bl	800016c <__adddf3>
 8006fac:	4682      	mov	sl, r0
 8006fae:	468b      	mov	fp, r1
 8006fb0:	e7de      	b.n	8006f70 <_strtod_l+0x8b8>
 8006fb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006fb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fba:	f04f 3aff 	mov.w	sl, #4294967295
 8006fbe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006fc2:	e7d5      	b.n	8006f70 <_strtod_l+0x8b8>
 8006fc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fc6:	ea13 0f0a 	tst.w	r3, sl
 8006fca:	e7e1      	b.n	8006f90 <_strtod_l+0x8d8>
 8006fcc:	f7ff fb50 	bl	8006670 <sulp>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fd8:	f7f9 f8c6 	bl	8000168 <__aeabi_dsub>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	4682      	mov	sl, r0
 8006fe2:	468b      	mov	fp, r1
 8006fe4:	f7f9 fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d0c1      	beq.n	8006f70 <_strtod_l+0x8b8>
 8006fec:	e615      	b.n	8006c1a <_strtod_l+0x562>
 8006fee:	4641      	mov	r1, r8
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f7ff fac9 	bl	8006588 <__ratio>
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	460f      	mov	r7, r1
 8007000:	f7f9 fce6 	bl	80009d0 <__aeabi_dcmple>
 8007004:	2800      	cmp	r0, #0
 8007006:	d06d      	beq.n	80070e4 <_strtod_l+0xa2c>
 8007008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d178      	bne.n	8007100 <_strtod_l+0xa48>
 800700e:	f1ba 0f00 	cmp.w	sl, #0
 8007012:	d156      	bne.n	80070c2 <_strtod_l+0xa0a>
 8007014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800701a:	2b00      	cmp	r3, #0
 800701c:	d158      	bne.n	80070d0 <_strtod_l+0xa18>
 800701e:	2200      	movs	r2, #0
 8007020:	4630      	mov	r0, r6
 8007022:	4639      	mov	r1, r7
 8007024:	4b5d      	ldr	r3, [pc, #372]	@ (800719c <_strtod_l+0xae4>)
 8007026:	f7f9 fcc9 	bl	80009bc <__aeabi_dcmplt>
 800702a:	2800      	cmp	r0, #0
 800702c:	d157      	bne.n	80070de <_strtod_l+0xa26>
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	2200      	movs	r2, #0
 8007034:	4b5a      	ldr	r3, [pc, #360]	@ (80071a0 <_strtod_l+0xae8>)
 8007036:	f7f9 fa4f 	bl	80004d8 <__aeabi_dmul>
 800703a:	4606      	mov	r6, r0
 800703c:	460f      	mov	r7, r1
 800703e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007042:	9606      	str	r6, [sp, #24]
 8007044:	9307      	str	r3, [sp, #28]
 8007046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800704a:	4d52      	ldr	r5, [pc, #328]	@ (8007194 <_strtod_l+0xadc>)
 800704c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007052:	401d      	ands	r5, r3
 8007054:	4b53      	ldr	r3, [pc, #332]	@ (80071a4 <_strtod_l+0xaec>)
 8007056:	429d      	cmp	r5, r3
 8007058:	f040 80aa 	bne.w	80071b0 <_strtod_l+0xaf8>
 800705c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800705e:	4650      	mov	r0, sl
 8007060:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007064:	4659      	mov	r1, fp
 8007066:	f7ff f9cf 	bl	8006408 <__ulp>
 800706a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800706e:	f7f9 fa33 	bl	80004d8 <__aeabi_dmul>
 8007072:	4652      	mov	r2, sl
 8007074:	465b      	mov	r3, fp
 8007076:	f7f9 f879 	bl	800016c <__adddf3>
 800707a:	460b      	mov	r3, r1
 800707c:	4945      	ldr	r1, [pc, #276]	@ (8007194 <_strtod_l+0xadc>)
 800707e:	4a4a      	ldr	r2, [pc, #296]	@ (80071a8 <_strtod_l+0xaf0>)
 8007080:	4019      	ands	r1, r3
 8007082:	4291      	cmp	r1, r2
 8007084:	4682      	mov	sl, r0
 8007086:	d942      	bls.n	800710e <_strtod_l+0xa56>
 8007088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800708a:	4b43      	ldr	r3, [pc, #268]	@ (8007198 <_strtod_l+0xae0>)
 800708c:	429a      	cmp	r2, r3
 800708e:	d103      	bne.n	8007098 <_strtod_l+0x9e0>
 8007090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007092:	3301      	adds	r3, #1
 8007094:	f43f ad2b 	beq.w	8006aee <_strtod_l+0x436>
 8007098:	f04f 3aff 	mov.w	sl, #4294967295
 800709c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007198 <_strtod_l+0xae0>
 80070a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070a2:	9805      	ldr	r0, [sp, #20]
 80070a4:	f7fe fe7e 	bl	8005da4 <_Bfree>
 80070a8:	4649      	mov	r1, r9
 80070aa:	9805      	ldr	r0, [sp, #20]
 80070ac:	f7fe fe7a 	bl	8005da4 <_Bfree>
 80070b0:	4641      	mov	r1, r8
 80070b2:	9805      	ldr	r0, [sp, #20]
 80070b4:	f7fe fe76 	bl	8005da4 <_Bfree>
 80070b8:	4621      	mov	r1, r4
 80070ba:	9805      	ldr	r0, [sp, #20]
 80070bc:	f7fe fe72 	bl	8005da4 <_Bfree>
 80070c0:	e618      	b.n	8006cf4 <_strtod_l+0x63c>
 80070c2:	f1ba 0f01 	cmp.w	sl, #1
 80070c6:	d103      	bne.n	80070d0 <_strtod_l+0xa18>
 80070c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f43f ada5 	beq.w	8006c1a <_strtod_l+0x562>
 80070d0:	2200      	movs	r2, #0
 80070d2:	4b36      	ldr	r3, [pc, #216]	@ (80071ac <_strtod_l+0xaf4>)
 80070d4:	2600      	movs	r6, #0
 80070d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070da:	4f30      	ldr	r7, [pc, #192]	@ (800719c <_strtod_l+0xae4>)
 80070dc:	e7b3      	b.n	8007046 <_strtod_l+0x98e>
 80070de:	2600      	movs	r6, #0
 80070e0:	4f2f      	ldr	r7, [pc, #188]	@ (80071a0 <_strtod_l+0xae8>)
 80070e2:	e7ac      	b.n	800703e <_strtod_l+0x986>
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	4b2d      	ldr	r3, [pc, #180]	@ (80071a0 <_strtod_l+0xae8>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	f7f9 f9f4 	bl	80004d8 <__aeabi_dmul>
 80070f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070f2:	4606      	mov	r6, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0a1      	beq.n	800703e <_strtod_l+0x986>
 80070fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80070fe:	e7a2      	b.n	8007046 <_strtod_l+0x98e>
 8007100:	2200      	movs	r2, #0
 8007102:	4b26      	ldr	r3, [pc, #152]	@ (800719c <_strtod_l+0xae4>)
 8007104:	4616      	mov	r6, r2
 8007106:	461f      	mov	r7, r3
 8007108:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800710c:	e79b      	b.n	8007046 <_strtod_l+0x98e>
 800710e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007112:	9b08      	ldr	r3, [sp, #32]
 8007114:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1c1      	bne.n	80070a0 <_strtod_l+0x9e8>
 800711c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007120:	0d1b      	lsrs	r3, r3, #20
 8007122:	051b      	lsls	r3, r3, #20
 8007124:	429d      	cmp	r5, r3
 8007126:	d1bb      	bne.n	80070a0 <_strtod_l+0x9e8>
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 ff7a 	bl	8001024 <__aeabi_d2lz>
 8007130:	f7f9 f9a4 	bl	800047c <__aeabi_l2d>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4630      	mov	r0, r6
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 f814 	bl	8000168 <__aeabi_dsub>
 8007140:	460b      	mov	r3, r1
 8007142:	4602      	mov	r2, r0
 8007144:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007148:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800714c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800714e:	ea46 060a 	orr.w	r6, r6, sl
 8007152:	431e      	orrs	r6, r3
 8007154:	d069      	beq.n	800722a <_strtod_l+0xb72>
 8007156:	a30a      	add	r3, pc, #40	@ (adr r3, 8007180 <_strtod_l+0xac8>)
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	f7f9 fc2e 	bl	80009bc <__aeabi_dcmplt>
 8007160:	2800      	cmp	r0, #0
 8007162:	f47f accf 	bne.w	8006b04 <_strtod_l+0x44c>
 8007166:	a308      	add	r3, pc, #32	@ (adr r3, 8007188 <_strtod_l+0xad0>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007170:	f7f9 fc42 	bl	80009f8 <__aeabi_dcmpgt>
 8007174:	2800      	cmp	r0, #0
 8007176:	d093      	beq.n	80070a0 <_strtod_l+0x9e8>
 8007178:	e4c4      	b.n	8006b04 <_strtod_l+0x44c>
 800717a:	bf00      	nop
 800717c:	f3af 8000 	nop.w
 8007180:	94a03595 	.word	0x94a03595
 8007184:	3fdfffff 	.word	0x3fdfffff
 8007188:	35afe535 	.word	0x35afe535
 800718c:	3fe00000 	.word	0x3fe00000
 8007190:	000fffff 	.word	0x000fffff
 8007194:	7ff00000 	.word	0x7ff00000
 8007198:	7fefffff 	.word	0x7fefffff
 800719c:	3ff00000 	.word	0x3ff00000
 80071a0:	3fe00000 	.word	0x3fe00000
 80071a4:	7fe00000 	.word	0x7fe00000
 80071a8:	7c9fffff 	.word	0x7c9fffff
 80071ac:	bff00000 	.word	0xbff00000
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	b323      	cbz	r3, 80071fe <_strtod_l+0xb46>
 80071b4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80071b8:	d821      	bhi.n	80071fe <_strtod_l+0xb46>
 80071ba:	a327      	add	r3, pc, #156	@ (adr r3, 8007258 <_strtod_l+0xba0>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 fc04 	bl	80009d0 <__aeabi_dcmple>
 80071c8:	b1a0      	cbz	r0, 80071f4 <_strtod_l+0xb3c>
 80071ca:	4639      	mov	r1, r7
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7f9 fc5b 	bl	8000a88 <__aeabi_d2uiz>
 80071d2:	2801      	cmp	r0, #1
 80071d4:	bf38      	it	cc
 80071d6:	2001      	movcc	r0, #1
 80071d8:	f7f9 f904 	bl	80003e4 <__aeabi_ui2d>
 80071dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071de:	4606      	mov	r6, r0
 80071e0:	460f      	mov	r7, r1
 80071e2:	b9fb      	cbnz	r3, 8007224 <_strtod_l+0xb6c>
 80071e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071e8:	9014      	str	r0, [sp, #80]	@ 0x50
 80071ea:	9315      	str	r3, [sp, #84]	@ 0x54
 80071ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80071f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80071f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071f6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80071fa:	1b5b      	subs	r3, r3, r5
 80071fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80071fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007202:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007206:	f7ff f8ff 	bl	8006408 <__ulp>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4650      	mov	r0, sl
 8007210:	4659      	mov	r1, fp
 8007212:	f7f9 f961 	bl	80004d8 <__aeabi_dmul>
 8007216:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800721a:	f7f8 ffa7 	bl	800016c <__adddf3>
 800721e:	4682      	mov	sl, r0
 8007220:	468b      	mov	fp, r1
 8007222:	e776      	b.n	8007112 <_strtod_l+0xa5a>
 8007224:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007228:	e7e0      	b.n	80071ec <_strtod_l+0xb34>
 800722a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007260 <_strtod_l+0xba8>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 fbc4 	bl	80009bc <__aeabi_dcmplt>
 8007234:	e79e      	b.n	8007174 <_strtod_l+0xabc>
 8007236:	2300      	movs	r3, #0
 8007238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800723a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800723c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	f7ff ba77 	b.w	8006732 <_strtod_l+0x7a>
 8007244:	2a65      	cmp	r2, #101	@ 0x65
 8007246:	f43f ab6e 	beq.w	8006926 <_strtod_l+0x26e>
 800724a:	2a45      	cmp	r2, #69	@ 0x45
 800724c:	f43f ab6b 	beq.w	8006926 <_strtod_l+0x26e>
 8007250:	2301      	movs	r3, #1
 8007252:	f7ff bba6 	b.w	80069a2 <_strtod_l+0x2ea>
 8007256:	bf00      	nop
 8007258:	ffc00000 	.word	0xffc00000
 800725c:	41dfffff 	.word	0x41dfffff
 8007260:	94a03595 	.word	0x94a03595
 8007264:	3fcfffff 	.word	0x3fcfffff

08007268 <_strtod_r>:
 8007268:	4b01      	ldr	r3, [pc, #4]	@ (8007270 <_strtod_r+0x8>)
 800726a:	f7ff ba25 	b.w	80066b8 <_strtod_l>
 800726e:	bf00      	nop
 8007270:	2000006c 	.word	0x2000006c

08007274 <_strtol_l.constprop.0>:
 8007274:	2b24      	cmp	r3, #36	@ 0x24
 8007276:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727a:	4686      	mov	lr, r0
 800727c:	4690      	mov	r8, r2
 800727e:	d801      	bhi.n	8007284 <_strtol_l.constprop.0+0x10>
 8007280:	2b01      	cmp	r3, #1
 8007282:	d106      	bne.n	8007292 <_strtol_l.constprop.0+0x1e>
 8007284:	f7fd fdbe 	bl	8004e04 <__errno>
 8007288:	2316      	movs	r3, #22
 800728a:	6003      	str	r3, [r0, #0]
 800728c:	2000      	movs	r0, #0
 800728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007292:	460d      	mov	r5, r1
 8007294:	4833      	ldr	r0, [pc, #204]	@ (8007364 <_strtol_l.constprop.0+0xf0>)
 8007296:	462a      	mov	r2, r5
 8007298:	f815 4b01 	ldrb.w	r4, [r5], #1
 800729c:	5d06      	ldrb	r6, [r0, r4]
 800729e:	f016 0608 	ands.w	r6, r6, #8
 80072a2:	d1f8      	bne.n	8007296 <_strtol_l.constprop.0+0x22>
 80072a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80072a6:	d12d      	bne.n	8007304 <_strtol_l.constprop.0+0x90>
 80072a8:	2601      	movs	r6, #1
 80072aa:	782c      	ldrb	r4, [r5, #0]
 80072ac:	1c95      	adds	r5, r2, #2
 80072ae:	f033 0210 	bics.w	r2, r3, #16
 80072b2:	d109      	bne.n	80072c8 <_strtol_l.constprop.0+0x54>
 80072b4:	2c30      	cmp	r4, #48	@ 0x30
 80072b6:	d12a      	bne.n	800730e <_strtol_l.constprop.0+0x9a>
 80072b8:	782a      	ldrb	r2, [r5, #0]
 80072ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072be:	2a58      	cmp	r2, #88	@ 0x58
 80072c0:	d125      	bne.n	800730e <_strtol_l.constprop.0+0x9a>
 80072c2:	2310      	movs	r3, #16
 80072c4:	786c      	ldrb	r4, [r5, #1]
 80072c6:	3502      	adds	r5, #2
 80072c8:	2200      	movs	r2, #0
 80072ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072d2:	fbbc f9f3 	udiv	r9, ip, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80072dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072e0:	2f09      	cmp	r7, #9
 80072e2:	d81b      	bhi.n	800731c <_strtol_l.constprop.0+0xa8>
 80072e4:	463c      	mov	r4, r7
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	dd27      	ble.n	800733a <_strtol_l.constprop.0+0xc6>
 80072ea:	1c57      	adds	r7, r2, #1
 80072ec:	d007      	beq.n	80072fe <_strtol_l.constprop.0+0x8a>
 80072ee:	4581      	cmp	r9, r0
 80072f0:	d320      	bcc.n	8007334 <_strtol_l.constprop.0+0xc0>
 80072f2:	d101      	bne.n	80072f8 <_strtol_l.constprop.0+0x84>
 80072f4:	45a2      	cmp	sl, r4
 80072f6:	db1d      	blt.n	8007334 <_strtol_l.constprop.0+0xc0>
 80072f8:	2201      	movs	r2, #1
 80072fa:	fb00 4003 	mla	r0, r0, r3, r4
 80072fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007302:	e7eb      	b.n	80072dc <_strtol_l.constprop.0+0x68>
 8007304:	2c2b      	cmp	r4, #43	@ 0x2b
 8007306:	bf04      	itt	eq
 8007308:	782c      	ldrbeq	r4, [r5, #0]
 800730a:	1c95      	addeq	r5, r2, #2
 800730c:	e7cf      	b.n	80072ae <_strtol_l.constprop.0+0x3a>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1da      	bne.n	80072c8 <_strtol_l.constprop.0+0x54>
 8007312:	2c30      	cmp	r4, #48	@ 0x30
 8007314:	bf0c      	ite	eq
 8007316:	2308      	moveq	r3, #8
 8007318:	230a      	movne	r3, #10
 800731a:	e7d5      	b.n	80072c8 <_strtol_l.constprop.0+0x54>
 800731c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007320:	2f19      	cmp	r7, #25
 8007322:	d801      	bhi.n	8007328 <_strtol_l.constprop.0+0xb4>
 8007324:	3c37      	subs	r4, #55	@ 0x37
 8007326:	e7de      	b.n	80072e6 <_strtol_l.constprop.0+0x72>
 8007328:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800732c:	2f19      	cmp	r7, #25
 800732e:	d804      	bhi.n	800733a <_strtol_l.constprop.0+0xc6>
 8007330:	3c57      	subs	r4, #87	@ 0x57
 8007332:	e7d8      	b.n	80072e6 <_strtol_l.constprop.0+0x72>
 8007334:	f04f 32ff 	mov.w	r2, #4294967295
 8007338:	e7e1      	b.n	80072fe <_strtol_l.constprop.0+0x8a>
 800733a:	1c53      	adds	r3, r2, #1
 800733c:	d108      	bne.n	8007350 <_strtol_l.constprop.0+0xdc>
 800733e:	2322      	movs	r3, #34	@ 0x22
 8007340:	4660      	mov	r0, ip
 8007342:	f8ce 3000 	str.w	r3, [lr]
 8007346:	f1b8 0f00 	cmp.w	r8, #0
 800734a:	d0a0      	beq.n	800728e <_strtol_l.constprop.0+0x1a>
 800734c:	1e69      	subs	r1, r5, #1
 800734e:	e006      	b.n	800735e <_strtol_l.constprop.0+0xea>
 8007350:	b106      	cbz	r6, 8007354 <_strtol_l.constprop.0+0xe0>
 8007352:	4240      	negs	r0, r0
 8007354:	f1b8 0f00 	cmp.w	r8, #0
 8007358:	d099      	beq.n	800728e <_strtol_l.constprop.0+0x1a>
 800735a:	2a00      	cmp	r2, #0
 800735c:	d1f6      	bne.n	800734c <_strtol_l.constprop.0+0xd8>
 800735e:	f8c8 1000 	str.w	r1, [r8]
 8007362:	e794      	b.n	800728e <_strtol_l.constprop.0+0x1a>
 8007364:	080087f9 	.word	0x080087f9

08007368 <_strtol_r>:
 8007368:	f7ff bf84 	b.w	8007274 <_strtol_l.constprop.0>

0800736c <__ssputs_r>:
 800736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007370:	461f      	mov	r7, r3
 8007372:	688e      	ldr	r6, [r1, #8]
 8007374:	4682      	mov	sl, r0
 8007376:	42be      	cmp	r6, r7
 8007378:	460c      	mov	r4, r1
 800737a:	4690      	mov	r8, r2
 800737c:	680b      	ldr	r3, [r1, #0]
 800737e:	d82d      	bhi.n	80073dc <__ssputs_r+0x70>
 8007380:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007384:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007388:	d026      	beq.n	80073d8 <__ssputs_r+0x6c>
 800738a:	6965      	ldr	r5, [r4, #20]
 800738c:	6909      	ldr	r1, [r1, #16]
 800738e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007392:	eba3 0901 	sub.w	r9, r3, r1
 8007396:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800739a:	1c7b      	adds	r3, r7, #1
 800739c:	444b      	add	r3, r9
 800739e:	106d      	asrs	r5, r5, #1
 80073a0:	429d      	cmp	r5, r3
 80073a2:	bf38      	it	cc
 80073a4:	461d      	movcc	r5, r3
 80073a6:	0553      	lsls	r3, r2, #21
 80073a8:	d527      	bpl.n	80073fa <__ssputs_r+0x8e>
 80073aa:	4629      	mov	r1, r5
 80073ac:	f7fe fc2e 	bl	8005c0c <_malloc_r>
 80073b0:	4606      	mov	r6, r0
 80073b2:	b360      	cbz	r0, 800740e <__ssputs_r+0xa2>
 80073b4:	464a      	mov	r2, r9
 80073b6:	6921      	ldr	r1, [r4, #16]
 80073b8:	f000 fa14 	bl	80077e4 <memcpy>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	6126      	str	r6, [r4, #16]
 80073ca:	444e      	add	r6, r9
 80073cc:	6026      	str	r6, [r4, #0]
 80073ce:	463e      	mov	r6, r7
 80073d0:	6165      	str	r5, [r4, #20]
 80073d2:	eba5 0509 	sub.w	r5, r5, r9
 80073d6:	60a5      	str	r5, [r4, #8]
 80073d8:	42be      	cmp	r6, r7
 80073da:	d900      	bls.n	80073de <__ssputs_r+0x72>
 80073dc:	463e      	mov	r6, r7
 80073de:	4632      	mov	r2, r6
 80073e0:	4641      	mov	r1, r8
 80073e2:	6820      	ldr	r0, [r4, #0]
 80073e4:	f000 f9c2 	bl	800776c <memmove>
 80073e8:	2000      	movs	r0, #0
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	1b9b      	subs	r3, r3, r6
 80073ee:	60a3      	str	r3, [r4, #8]
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	4433      	add	r3, r6
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	462a      	mov	r2, r5
 80073fc:	f000 fd83 	bl	8007f06 <_realloc_r>
 8007400:	4606      	mov	r6, r0
 8007402:	2800      	cmp	r0, #0
 8007404:	d1e0      	bne.n	80073c8 <__ssputs_r+0x5c>
 8007406:	4650      	mov	r0, sl
 8007408:	6921      	ldr	r1, [r4, #16]
 800740a:	f7fe fb8d 	bl	8005b28 <_free_r>
 800740e:	230c      	movs	r3, #12
 8007410:	f8ca 3000 	str.w	r3, [sl]
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	e7e9      	b.n	80073f6 <__ssputs_r+0x8a>
	...

08007424 <_svfiprintf_r>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	4698      	mov	r8, r3
 800742a:	898b      	ldrh	r3, [r1, #12]
 800742c:	4607      	mov	r7, r0
 800742e:	061b      	lsls	r3, r3, #24
 8007430:	460d      	mov	r5, r1
 8007432:	4614      	mov	r4, r2
 8007434:	b09d      	sub	sp, #116	@ 0x74
 8007436:	d510      	bpl.n	800745a <_svfiprintf_r+0x36>
 8007438:	690b      	ldr	r3, [r1, #16]
 800743a:	b973      	cbnz	r3, 800745a <_svfiprintf_r+0x36>
 800743c:	2140      	movs	r1, #64	@ 0x40
 800743e:	f7fe fbe5 	bl	8005c0c <_malloc_r>
 8007442:	6028      	str	r0, [r5, #0]
 8007444:	6128      	str	r0, [r5, #16]
 8007446:	b930      	cbnz	r0, 8007456 <_svfiprintf_r+0x32>
 8007448:	230c      	movs	r3, #12
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	b01d      	add	sp, #116	@ 0x74
 8007452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	2340      	movs	r3, #64	@ 0x40
 8007458:	616b      	str	r3, [r5, #20]
 800745a:	2300      	movs	r3, #0
 800745c:	9309      	str	r3, [sp, #36]	@ 0x24
 800745e:	2320      	movs	r3, #32
 8007460:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007464:	2330      	movs	r3, #48	@ 0x30
 8007466:	f04f 0901 	mov.w	r9, #1
 800746a:	f8cd 800c 	str.w	r8, [sp, #12]
 800746e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007608 <_svfiprintf_r+0x1e4>
 8007472:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007476:	4623      	mov	r3, r4
 8007478:	469a      	mov	sl, r3
 800747a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800747e:	b10a      	cbz	r2, 8007484 <_svfiprintf_r+0x60>
 8007480:	2a25      	cmp	r2, #37	@ 0x25
 8007482:	d1f9      	bne.n	8007478 <_svfiprintf_r+0x54>
 8007484:	ebba 0b04 	subs.w	fp, sl, r4
 8007488:	d00b      	beq.n	80074a2 <_svfiprintf_r+0x7e>
 800748a:	465b      	mov	r3, fp
 800748c:	4622      	mov	r2, r4
 800748e:	4629      	mov	r1, r5
 8007490:	4638      	mov	r0, r7
 8007492:	f7ff ff6b 	bl	800736c <__ssputs_r>
 8007496:	3001      	adds	r0, #1
 8007498:	f000 80a7 	beq.w	80075ea <_svfiprintf_r+0x1c6>
 800749c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749e:	445a      	add	r2, fp
 80074a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a2:	f89a 3000 	ldrb.w	r3, [sl]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f000 809f 	beq.w	80075ea <_svfiprintf_r+0x1c6>
 80074ac:	2300      	movs	r3, #0
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295
 80074b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b6:	f10a 0a01 	add.w	sl, sl, #1
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	9307      	str	r3, [sp, #28]
 80074be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c4:	4654      	mov	r4, sl
 80074c6:	2205      	movs	r2, #5
 80074c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074cc:	484e      	ldr	r0, [pc, #312]	@ (8007608 <_svfiprintf_r+0x1e4>)
 80074ce:	f7fd fcc6 	bl	8004e5e <memchr>
 80074d2:	9a04      	ldr	r2, [sp, #16]
 80074d4:	b9d8      	cbnz	r0, 800750e <_svfiprintf_r+0xea>
 80074d6:	06d0      	lsls	r0, r2, #27
 80074d8:	bf44      	itt	mi
 80074da:	2320      	movmi	r3, #32
 80074dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e0:	0711      	lsls	r1, r2, #28
 80074e2:	bf44      	itt	mi
 80074e4:	232b      	movmi	r3, #43	@ 0x2b
 80074e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ea:	f89a 3000 	ldrb.w	r3, [sl]
 80074ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f0:	d015      	beq.n	800751e <_svfiprintf_r+0xfa>
 80074f2:	4654      	mov	r4, sl
 80074f4:	2000      	movs	r0, #0
 80074f6:	f04f 0c0a 	mov.w	ip, #10
 80074fa:	9a07      	ldr	r2, [sp, #28]
 80074fc:	4621      	mov	r1, r4
 80074fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007502:	3b30      	subs	r3, #48	@ 0x30
 8007504:	2b09      	cmp	r3, #9
 8007506:	d94b      	bls.n	80075a0 <_svfiprintf_r+0x17c>
 8007508:	b1b0      	cbz	r0, 8007538 <_svfiprintf_r+0x114>
 800750a:	9207      	str	r2, [sp, #28]
 800750c:	e014      	b.n	8007538 <_svfiprintf_r+0x114>
 800750e:	eba0 0308 	sub.w	r3, r0, r8
 8007512:	fa09 f303 	lsl.w	r3, r9, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	46a2      	mov	sl, r4
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	e7d2      	b.n	80074c4 <_svfiprintf_r+0xa0>
 800751e:	9b03      	ldr	r3, [sp, #12]
 8007520:	1d19      	adds	r1, r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	9103      	str	r1, [sp, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	bfbb      	ittet	lt
 800752a:	425b      	neglt	r3, r3
 800752c:	f042 0202 	orrlt.w	r2, r2, #2
 8007530:	9307      	strge	r3, [sp, #28]
 8007532:	9307      	strlt	r3, [sp, #28]
 8007534:	bfb8      	it	lt
 8007536:	9204      	strlt	r2, [sp, #16]
 8007538:	7823      	ldrb	r3, [r4, #0]
 800753a:	2b2e      	cmp	r3, #46	@ 0x2e
 800753c:	d10a      	bne.n	8007554 <_svfiprintf_r+0x130>
 800753e:	7863      	ldrb	r3, [r4, #1]
 8007540:	2b2a      	cmp	r3, #42	@ 0x2a
 8007542:	d132      	bne.n	80075aa <_svfiprintf_r+0x186>
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	3402      	adds	r4, #2
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	9203      	str	r2, [sp, #12]
 800754e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007552:	9305      	str	r3, [sp, #20]
 8007554:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800760c <_svfiprintf_r+0x1e8>
 8007558:	2203      	movs	r2, #3
 800755a:	4650      	mov	r0, sl
 800755c:	7821      	ldrb	r1, [r4, #0]
 800755e:	f7fd fc7e 	bl	8004e5e <memchr>
 8007562:	b138      	cbz	r0, 8007574 <_svfiprintf_r+0x150>
 8007564:	2240      	movs	r2, #64	@ 0x40
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	eba0 000a 	sub.w	r0, r0, sl
 800756c:	4082      	lsls	r2, r0
 800756e:	4313      	orrs	r3, r2
 8007570:	3401      	adds	r4, #1
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007578:	2206      	movs	r2, #6
 800757a:	4825      	ldr	r0, [pc, #148]	@ (8007610 <_svfiprintf_r+0x1ec>)
 800757c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007580:	f7fd fc6d 	bl	8004e5e <memchr>
 8007584:	2800      	cmp	r0, #0
 8007586:	d036      	beq.n	80075f6 <_svfiprintf_r+0x1d2>
 8007588:	4b22      	ldr	r3, [pc, #136]	@ (8007614 <_svfiprintf_r+0x1f0>)
 800758a:	bb1b      	cbnz	r3, 80075d4 <_svfiprintf_r+0x1b0>
 800758c:	9b03      	ldr	r3, [sp, #12]
 800758e:	3307      	adds	r3, #7
 8007590:	f023 0307 	bic.w	r3, r3, #7
 8007594:	3308      	adds	r3, #8
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759a:	4433      	add	r3, r6
 800759c:	9309      	str	r3, [sp, #36]	@ 0x24
 800759e:	e76a      	b.n	8007476 <_svfiprintf_r+0x52>
 80075a0:	460c      	mov	r4, r1
 80075a2:	2001      	movs	r0, #1
 80075a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a8:	e7a8      	b.n	80074fc <_svfiprintf_r+0xd8>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f04f 0c0a 	mov.w	ip, #10
 80075b0:	4619      	mov	r1, r3
 80075b2:	3401      	adds	r4, #1
 80075b4:	9305      	str	r3, [sp, #20]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075bc:	3a30      	subs	r2, #48	@ 0x30
 80075be:	2a09      	cmp	r2, #9
 80075c0:	d903      	bls.n	80075ca <_svfiprintf_r+0x1a6>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0c6      	beq.n	8007554 <_svfiprintf_r+0x130>
 80075c6:	9105      	str	r1, [sp, #20]
 80075c8:	e7c4      	b.n	8007554 <_svfiprintf_r+0x130>
 80075ca:	4604      	mov	r4, r0
 80075cc:	2301      	movs	r3, #1
 80075ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d2:	e7f0      	b.n	80075b6 <_svfiprintf_r+0x192>
 80075d4:	ab03      	add	r3, sp, #12
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	462a      	mov	r2, r5
 80075da:	4638      	mov	r0, r7
 80075dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <_svfiprintf_r+0x1f4>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	f7fc fc96 	bl	8003f10 <_printf_float>
 80075e4:	1c42      	adds	r2, r0, #1
 80075e6:	4606      	mov	r6, r0
 80075e8:	d1d6      	bne.n	8007598 <_svfiprintf_r+0x174>
 80075ea:	89ab      	ldrh	r3, [r5, #12]
 80075ec:	065b      	lsls	r3, r3, #25
 80075ee:	f53f af2d 	bmi.w	800744c <_svfiprintf_r+0x28>
 80075f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075f4:	e72c      	b.n	8007450 <_svfiprintf_r+0x2c>
 80075f6:	ab03      	add	r3, sp, #12
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	462a      	mov	r2, r5
 80075fc:	4638      	mov	r0, r7
 80075fe:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <_svfiprintf_r+0x1f4>)
 8007600:	a904      	add	r1, sp, #16
 8007602:	f7fc ff23 	bl	800444c <_printf_i>
 8007606:	e7ed      	b.n	80075e4 <_svfiprintf_r+0x1c0>
 8007608:	080088f9 	.word	0x080088f9
 800760c:	080088ff 	.word	0x080088ff
 8007610:	08008903 	.word	0x08008903
 8007614:	08003f11 	.word	0x08003f11
 8007618:	0800736d 	.word	0x0800736d

0800761c <__sflush_r>:
 800761c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	0716      	lsls	r6, r2, #28
 8007624:	4605      	mov	r5, r0
 8007626:	460c      	mov	r4, r1
 8007628:	d454      	bmi.n	80076d4 <__sflush_r+0xb8>
 800762a:	684b      	ldr	r3, [r1, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dc02      	bgt.n	8007636 <__sflush_r+0x1a>
 8007630:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	dd48      	ble.n	80076c8 <__sflush_r+0xac>
 8007636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007638:	2e00      	cmp	r6, #0
 800763a:	d045      	beq.n	80076c8 <__sflush_r+0xac>
 800763c:	2300      	movs	r3, #0
 800763e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007642:	682f      	ldr	r7, [r5, #0]
 8007644:	6a21      	ldr	r1, [r4, #32]
 8007646:	602b      	str	r3, [r5, #0]
 8007648:	d030      	beq.n	80076ac <__sflush_r+0x90>
 800764a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	0759      	lsls	r1, r3, #29
 8007650:	d505      	bpl.n	800765e <__sflush_r+0x42>
 8007652:	6863      	ldr	r3, [r4, #4]
 8007654:	1ad2      	subs	r2, r2, r3
 8007656:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007658:	b10b      	cbz	r3, 800765e <__sflush_r+0x42>
 800765a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800765c:	1ad2      	subs	r2, r2, r3
 800765e:	2300      	movs	r3, #0
 8007660:	4628      	mov	r0, r5
 8007662:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007664:	6a21      	ldr	r1, [r4, #32]
 8007666:	47b0      	blx	r6
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	d106      	bne.n	800767c <__sflush_r+0x60>
 800766e:	6829      	ldr	r1, [r5, #0]
 8007670:	291d      	cmp	r1, #29
 8007672:	d82b      	bhi.n	80076cc <__sflush_r+0xb0>
 8007674:	4a28      	ldr	r2, [pc, #160]	@ (8007718 <__sflush_r+0xfc>)
 8007676:	410a      	asrs	r2, r1
 8007678:	07d6      	lsls	r6, r2, #31
 800767a:	d427      	bmi.n	80076cc <__sflush_r+0xb0>
 800767c:	2200      	movs	r2, #0
 800767e:	6062      	str	r2, [r4, #4]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	04d9      	lsls	r1, r3, #19
 8007684:	6022      	str	r2, [r4, #0]
 8007686:	d504      	bpl.n	8007692 <__sflush_r+0x76>
 8007688:	1c42      	adds	r2, r0, #1
 800768a:	d101      	bne.n	8007690 <__sflush_r+0x74>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b903      	cbnz	r3, 8007692 <__sflush_r+0x76>
 8007690:	6560      	str	r0, [r4, #84]	@ 0x54
 8007692:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007694:	602f      	str	r7, [r5, #0]
 8007696:	b1b9      	cbz	r1, 80076c8 <__sflush_r+0xac>
 8007698:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800769c:	4299      	cmp	r1, r3
 800769e:	d002      	beq.n	80076a6 <__sflush_r+0x8a>
 80076a0:	4628      	mov	r0, r5
 80076a2:	f7fe fa41 	bl	8005b28 <_free_r>
 80076a6:	2300      	movs	r3, #0
 80076a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076aa:	e00d      	b.n	80076c8 <__sflush_r+0xac>
 80076ac:	2301      	movs	r3, #1
 80076ae:	4628      	mov	r0, r5
 80076b0:	47b0      	blx	r6
 80076b2:	4602      	mov	r2, r0
 80076b4:	1c50      	adds	r0, r2, #1
 80076b6:	d1c9      	bne.n	800764c <__sflush_r+0x30>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0c6      	beq.n	800764c <__sflush_r+0x30>
 80076be:	2b1d      	cmp	r3, #29
 80076c0:	d001      	beq.n	80076c6 <__sflush_r+0xaa>
 80076c2:	2b16      	cmp	r3, #22
 80076c4:	d11d      	bne.n	8007702 <__sflush_r+0xe6>
 80076c6:	602f      	str	r7, [r5, #0]
 80076c8:	2000      	movs	r0, #0
 80076ca:	e021      	b.n	8007710 <__sflush_r+0xf4>
 80076cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d0:	b21b      	sxth	r3, r3
 80076d2:	e01a      	b.n	800770a <__sflush_r+0xee>
 80076d4:	690f      	ldr	r7, [r1, #16]
 80076d6:	2f00      	cmp	r7, #0
 80076d8:	d0f6      	beq.n	80076c8 <__sflush_r+0xac>
 80076da:	0793      	lsls	r3, r2, #30
 80076dc:	bf18      	it	ne
 80076de:	2300      	movne	r3, #0
 80076e0:	680e      	ldr	r6, [r1, #0]
 80076e2:	bf08      	it	eq
 80076e4:	694b      	ldreq	r3, [r1, #20]
 80076e6:	1bf6      	subs	r6, r6, r7
 80076e8:	600f      	str	r7, [r1, #0]
 80076ea:	608b      	str	r3, [r1, #8]
 80076ec:	2e00      	cmp	r6, #0
 80076ee:	ddeb      	ble.n	80076c8 <__sflush_r+0xac>
 80076f0:	4633      	mov	r3, r6
 80076f2:	463a      	mov	r2, r7
 80076f4:	4628      	mov	r0, r5
 80076f6:	6a21      	ldr	r1, [r4, #32]
 80076f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80076fc:	47e0      	blx	ip
 80076fe:	2800      	cmp	r0, #0
 8007700:	dc07      	bgt.n	8007712 <__sflush_r+0xf6>
 8007702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800770a:	f04f 30ff 	mov.w	r0, #4294967295
 800770e:	81a3      	strh	r3, [r4, #12]
 8007710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007712:	4407      	add	r7, r0
 8007714:	1a36      	subs	r6, r6, r0
 8007716:	e7e9      	b.n	80076ec <__sflush_r+0xd0>
 8007718:	dfbffffe 	.word	0xdfbffffe

0800771c <_fflush_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	690b      	ldr	r3, [r1, #16]
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	b913      	cbnz	r3, 800772c <_fflush_r+0x10>
 8007726:	2500      	movs	r5, #0
 8007728:	4628      	mov	r0, r5
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	b118      	cbz	r0, 8007736 <_fflush_r+0x1a>
 800772e:	6a03      	ldr	r3, [r0, #32]
 8007730:	b90b      	cbnz	r3, 8007736 <_fflush_r+0x1a>
 8007732:	f7fd fa47 	bl	8004bc4 <__sinit>
 8007736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d0f3      	beq.n	8007726 <_fflush_r+0xa>
 800773e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007740:	07d0      	lsls	r0, r2, #31
 8007742:	d404      	bmi.n	800774e <_fflush_r+0x32>
 8007744:	0599      	lsls	r1, r3, #22
 8007746:	d402      	bmi.n	800774e <_fflush_r+0x32>
 8007748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800774a:	f7fd fb86 	bl	8004e5a <__retarget_lock_acquire_recursive>
 800774e:	4628      	mov	r0, r5
 8007750:	4621      	mov	r1, r4
 8007752:	f7ff ff63 	bl	800761c <__sflush_r>
 8007756:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007758:	4605      	mov	r5, r0
 800775a:	07da      	lsls	r2, r3, #31
 800775c:	d4e4      	bmi.n	8007728 <_fflush_r+0xc>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	059b      	lsls	r3, r3, #22
 8007762:	d4e1      	bmi.n	8007728 <_fflush_r+0xc>
 8007764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007766:	f7fd fb79 	bl	8004e5c <__retarget_lock_release_recursive>
 800776a:	e7dd      	b.n	8007728 <_fflush_r+0xc>

0800776c <memmove>:
 800776c:	4288      	cmp	r0, r1
 800776e:	b510      	push	{r4, lr}
 8007770:	eb01 0402 	add.w	r4, r1, r2
 8007774:	d902      	bls.n	800777c <memmove+0x10>
 8007776:	4284      	cmp	r4, r0
 8007778:	4623      	mov	r3, r4
 800777a:	d807      	bhi.n	800778c <memmove+0x20>
 800777c:	1e43      	subs	r3, r0, #1
 800777e:	42a1      	cmp	r1, r4
 8007780:	d008      	beq.n	8007794 <memmove+0x28>
 8007782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800778a:	e7f8      	b.n	800777e <memmove+0x12>
 800778c:	4601      	mov	r1, r0
 800778e:	4402      	add	r2, r0
 8007790:	428a      	cmp	r2, r1
 8007792:	d100      	bne.n	8007796 <memmove+0x2a>
 8007794:	bd10      	pop	{r4, pc}
 8007796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800779a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800779e:	e7f7      	b.n	8007790 <memmove+0x24>

080077a0 <strncmp>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	b16a      	cbz	r2, 80077c0 <strncmp+0x20>
 80077a4:	3901      	subs	r1, #1
 80077a6:	1884      	adds	r4, r0, r2
 80077a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d103      	bne.n	80077bc <strncmp+0x1c>
 80077b4:	42a0      	cmp	r0, r4
 80077b6:	d001      	beq.n	80077bc <strncmp+0x1c>
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	d1f5      	bne.n	80077a8 <strncmp+0x8>
 80077bc:	1ad0      	subs	r0, r2, r3
 80077be:	bd10      	pop	{r4, pc}
 80077c0:	4610      	mov	r0, r2
 80077c2:	e7fc      	b.n	80077be <strncmp+0x1e>

080077c4 <_sbrk_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	2300      	movs	r3, #0
 80077c8:	4d05      	ldr	r5, [pc, #20]	@ (80077e0 <_sbrk_r+0x1c>)
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f7fa fa8e 	bl	8001cf0 <_sbrk>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_sbrk_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_sbrk_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	200003dc 	.word	0x200003dc

080077e4 <memcpy>:
 80077e4:	440a      	add	r2, r1
 80077e6:	4291      	cmp	r1, r2
 80077e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ec:	d100      	bne.n	80077f0 <memcpy+0xc>
 80077ee:	4770      	bx	lr
 80077f0:	b510      	push	{r4, lr}
 80077f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077f6:	4291      	cmp	r1, r2
 80077f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077fc:	d1f9      	bne.n	80077f2 <memcpy+0xe>
 80077fe:	bd10      	pop	{r4, pc}

08007800 <nan>:
 8007800:	2000      	movs	r0, #0
 8007802:	4901      	ldr	r1, [pc, #4]	@ (8007808 <nan+0x8>)
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	7ff80000 	.word	0x7ff80000

0800780c <__assert_func>:
 800780c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800780e:	4614      	mov	r4, r2
 8007810:	461a      	mov	r2, r3
 8007812:	4b09      	ldr	r3, [pc, #36]	@ (8007838 <__assert_func+0x2c>)
 8007814:	4605      	mov	r5, r0
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68d8      	ldr	r0, [r3, #12]
 800781a:	b954      	cbnz	r4, 8007832 <__assert_func+0x26>
 800781c:	4b07      	ldr	r3, [pc, #28]	@ (800783c <__assert_func+0x30>)
 800781e:	461c      	mov	r4, r3
 8007820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007824:	9100      	str	r1, [sp, #0]
 8007826:	462b      	mov	r3, r5
 8007828:	4905      	ldr	r1, [pc, #20]	@ (8007840 <__assert_func+0x34>)
 800782a:	f000 fba7 	bl	8007f7c <fiprintf>
 800782e:	f000 fbb7 	bl	8007fa0 <abort>
 8007832:	4b04      	ldr	r3, [pc, #16]	@ (8007844 <__assert_func+0x38>)
 8007834:	e7f4      	b.n	8007820 <__assert_func+0x14>
 8007836:	bf00      	nop
 8007838:	2000001c 	.word	0x2000001c
 800783c:	0800894d 	.word	0x0800894d
 8007840:	0800891f 	.word	0x0800891f
 8007844:	08008912 	.word	0x08008912

08007848 <_calloc_r>:
 8007848:	b570      	push	{r4, r5, r6, lr}
 800784a:	fba1 5402 	umull	r5, r4, r1, r2
 800784e:	b93c      	cbnz	r4, 8007860 <_calloc_r+0x18>
 8007850:	4629      	mov	r1, r5
 8007852:	f7fe f9db 	bl	8005c0c <_malloc_r>
 8007856:	4606      	mov	r6, r0
 8007858:	b928      	cbnz	r0, 8007866 <_calloc_r+0x1e>
 800785a:	2600      	movs	r6, #0
 800785c:	4630      	mov	r0, r6
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	220c      	movs	r2, #12
 8007862:	6002      	str	r2, [r0, #0]
 8007864:	e7f9      	b.n	800785a <_calloc_r+0x12>
 8007866:	462a      	mov	r2, r5
 8007868:	4621      	mov	r1, r4
 800786a:	f7fd fa78 	bl	8004d5e <memset>
 800786e:	e7f5      	b.n	800785c <_calloc_r+0x14>

08007870 <rshift>:
 8007870:	6903      	ldr	r3, [r0, #16]
 8007872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007876:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800787a:	f100 0414 	add.w	r4, r0, #20
 800787e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007882:	dd46      	ble.n	8007912 <rshift+0xa2>
 8007884:	f011 011f 	ands.w	r1, r1, #31
 8007888:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800788c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007890:	d10c      	bne.n	80078ac <rshift+0x3c>
 8007892:	4629      	mov	r1, r5
 8007894:	f100 0710 	add.w	r7, r0, #16
 8007898:	42b1      	cmp	r1, r6
 800789a:	d335      	bcc.n	8007908 <rshift+0x98>
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	1eea      	subs	r2, r5, #3
 80078a2:	4296      	cmp	r6, r2
 80078a4:	bf38      	it	cc
 80078a6:	2300      	movcc	r3, #0
 80078a8:	4423      	add	r3, r4
 80078aa:	e015      	b.n	80078d8 <rshift+0x68>
 80078ac:	46a1      	mov	r9, r4
 80078ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078b2:	f1c1 0820 	rsb	r8, r1, #32
 80078b6:	40cf      	lsrs	r7, r1
 80078b8:	f105 0e04 	add.w	lr, r5, #4
 80078bc:	4576      	cmp	r6, lr
 80078be:	46f4      	mov	ip, lr
 80078c0:	d816      	bhi.n	80078f0 <rshift+0x80>
 80078c2:	1a9a      	subs	r2, r3, r2
 80078c4:	0092      	lsls	r2, r2, #2
 80078c6:	3a04      	subs	r2, #4
 80078c8:	3501      	adds	r5, #1
 80078ca:	42ae      	cmp	r6, r5
 80078cc:	bf38      	it	cc
 80078ce:	2200      	movcc	r2, #0
 80078d0:	18a3      	adds	r3, r4, r2
 80078d2:	50a7      	str	r7, [r4, r2]
 80078d4:	b107      	cbz	r7, 80078d8 <rshift+0x68>
 80078d6:	3304      	adds	r3, #4
 80078d8:	42a3      	cmp	r3, r4
 80078da:	eba3 0204 	sub.w	r2, r3, r4
 80078de:	bf08      	it	eq
 80078e0:	2300      	moveq	r3, #0
 80078e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078e6:	6102      	str	r2, [r0, #16]
 80078e8:	bf08      	it	eq
 80078ea:	6143      	streq	r3, [r0, #20]
 80078ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078f0:	f8dc c000 	ldr.w	ip, [ip]
 80078f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80078f8:	ea4c 0707 	orr.w	r7, ip, r7
 80078fc:	f849 7b04 	str.w	r7, [r9], #4
 8007900:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007904:	40cf      	lsrs	r7, r1
 8007906:	e7d9      	b.n	80078bc <rshift+0x4c>
 8007908:	f851 cb04 	ldr.w	ip, [r1], #4
 800790c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007910:	e7c2      	b.n	8007898 <rshift+0x28>
 8007912:	4623      	mov	r3, r4
 8007914:	e7e0      	b.n	80078d8 <rshift+0x68>

08007916 <__hexdig_fun>:
 8007916:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800791a:	2b09      	cmp	r3, #9
 800791c:	d802      	bhi.n	8007924 <__hexdig_fun+0xe>
 800791e:	3820      	subs	r0, #32
 8007920:	b2c0      	uxtb	r0, r0
 8007922:	4770      	bx	lr
 8007924:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007928:	2b05      	cmp	r3, #5
 800792a:	d801      	bhi.n	8007930 <__hexdig_fun+0x1a>
 800792c:	3847      	subs	r0, #71	@ 0x47
 800792e:	e7f7      	b.n	8007920 <__hexdig_fun+0xa>
 8007930:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007934:	2b05      	cmp	r3, #5
 8007936:	d801      	bhi.n	800793c <__hexdig_fun+0x26>
 8007938:	3827      	subs	r0, #39	@ 0x27
 800793a:	e7f1      	b.n	8007920 <__hexdig_fun+0xa>
 800793c:	2000      	movs	r0, #0
 800793e:	4770      	bx	lr

08007940 <__gethex>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	468a      	mov	sl, r1
 8007946:	4690      	mov	r8, r2
 8007948:	b085      	sub	sp, #20
 800794a:	9302      	str	r3, [sp, #8]
 800794c:	680b      	ldr	r3, [r1, #0]
 800794e:	9001      	str	r0, [sp, #4]
 8007950:	1c9c      	adds	r4, r3, #2
 8007952:	46a1      	mov	r9, r4
 8007954:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007958:	2830      	cmp	r0, #48	@ 0x30
 800795a:	d0fa      	beq.n	8007952 <__gethex+0x12>
 800795c:	eba9 0303 	sub.w	r3, r9, r3
 8007960:	f1a3 0b02 	sub.w	fp, r3, #2
 8007964:	f7ff ffd7 	bl	8007916 <__hexdig_fun>
 8007968:	4605      	mov	r5, r0
 800796a:	2800      	cmp	r0, #0
 800796c:	d168      	bne.n	8007a40 <__gethex+0x100>
 800796e:	2201      	movs	r2, #1
 8007970:	4648      	mov	r0, r9
 8007972:	499f      	ldr	r1, [pc, #636]	@ (8007bf0 <__gethex+0x2b0>)
 8007974:	f7ff ff14 	bl	80077a0 <strncmp>
 8007978:	4607      	mov	r7, r0
 800797a:	2800      	cmp	r0, #0
 800797c:	d167      	bne.n	8007a4e <__gethex+0x10e>
 800797e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007982:	4626      	mov	r6, r4
 8007984:	f7ff ffc7 	bl	8007916 <__hexdig_fun>
 8007988:	2800      	cmp	r0, #0
 800798a:	d062      	beq.n	8007a52 <__gethex+0x112>
 800798c:	4623      	mov	r3, r4
 800798e:	7818      	ldrb	r0, [r3, #0]
 8007990:	4699      	mov	r9, r3
 8007992:	2830      	cmp	r0, #48	@ 0x30
 8007994:	f103 0301 	add.w	r3, r3, #1
 8007998:	d0f9      	beq.n	800798e <__gethex+0x4e>
 800799a:	f7ff ffbc 	bl	8007916 <__hexdig_fun>
 800799e:	fab0 f580 	clz	r5, r0
 80079a2:	f04f 0b01 	mov.w	fp, #1
 80079a6:	096d      	lsrs	r5, r5, #5
 80079a8:	464a      	mov	r2, r9
 80079aa:	4616      	mov	r6, r2
 80079ac:	7830      	ldrb	r0, [r6, #0]
 80079ae:	3201      	adds	r2, #1
 80079b0:	f7ff ffb1 	bl	8007916 <__hexdig_fun>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d1f8      	bne.n	80079aa <__gethex+0x6a>
 80079b8:	2201      	movs	r2, #1
 80079ba:	4630      	mov	r0, r6
 80079bc:	498c      	ldr	r1, [pc, #560]	@ (8007bf0 <__gethex+0x2b0>)
 80079be:	f7ff feef 	bl	80077a0 <strncmp>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d13f      	bne.n	8007a46 <__gethex+0x106>
 80079c6:	b944      	cbnz	r4, 80079da <__gethex+0x9a>
 80079c8:	1c74      	adds	r4, r6, #1
 80079ca:	4622      	mov	r2, r4
 80079cc:	4616      	mov	r6, r2
 80079ce:	7830      	ldrb	r0, [r6, #0]
 80079d0:	3201      	adds	r2, #1
 80079d2:	f7ff ffa0 	bl	8007916 <__hexdig_fun>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d1f8      	bne.n	80079cc <__gethex+0x8c>
 80079da:	1ba4      	subs	r4, r4, r6
 80079dc:	00a7      	lsls	r7, r4, #2
 80079de:	7833      	ldrb	r3, [r6, #0]
 80079e0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80079e4:	2b50      	cmp	r3, #80	@ 0x50
 80079e6:	d13e      	bne.n	8007a66 <__gethex+0x126>
 80079e8:	7873      	ldrb	r3, [r6, #1]
 80079ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80079ec:	d033      	beq.n	8007a56 <__gethex+0x116>
 80079ee:	2b2d      	cmp	r3, #45	@ 0x2d
 80079f0:	d034      	beq.n	8007a5c <__gethex+0x11c>
 80079f2:	2400      	movs	r4, #0
 80079f4:	1c71      	adds	r1, r6, #1
 80079f6:	7808      	ldrb	r0, [r1, #0]
 80079f8:	f7ff ff8d 	bl	8007916 <__hexdig_fun>
 80079fc:	1e43      	subs	r3, r0, #1
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b18      	cmp	r3, #24
 8007a02:	d830      	bhi.n	8007a66 <__gethex+0x126>
 8007a04:	f1a0 0210 	sub.w	r2, r0, #16
 8007a08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a0c:	f7ff ff83 	bl	8007916 <__hexdig_fun>
 8007a10:	f100 3cff 	add.w	ip, r0, #4294967295
 8007a14:	fa5f fc8c 	uxtb.w	ip, ip
 8007a18:	f1bc 0f18 	cmp.w	ip, #24
 8007a1c:	f04f 030a 	mov.w	r3, #10
 8007a20:	d91e      	bls.n	8007a60 <__gethex+0x120>
 8007a22:	b104      	cbz	r4, 8007a26 <__gethex+0xe6>
 8007a24:	4252      	negs	r2, r2
 8007a26:	4417      	add	r7, r2
 8007a28:	f8ca 1000 	str.w	r1, [sl]
 8007a2c:	b1ed      	cbz	r5, 8007a6a <__gethex+0x12a>
 8007a2e:	f1bb 0f00 	cmp.w	fp, #0
 8007a32:	bf0c      	ite	eq
 8007a34:	2506      	moveq	r5, #6
 8007a36:	2500      	movne	r5, #0
 8007a38:	4628      	mov	r0, r5
 8007a3a:	b005      	add	sp, #20
 8007a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a40:	2500      	movs	r5, #0
 8007a42:	462c      	mov	r4, r5
 8007a44:	e7b0      	b.n	80079a8 <__gethex+0x68>
 8007a46:	2c00      	cmp	r4, #0
 8007a48:	d1c7      	bne.n	80079da <__gethex+0x9a>
 8007a4a:	4627      	mov	r7, r4
 8007a4c:	e7c7      	b.n	80079de <__gethex+0x9e>
 8007a4e:	464e      	mov	r6, r9
 8007a50:	462f      	mov	r7, r5
 8007a52:	2501      	movs	r5, #1
 8007a54:	e7c3      	b.n	80079de <__gethex+0x9e>
 8007a56:	2400      	movs	r4, #0
 8007a58:	1cb1      	adds	r1, r6, #2
 8007a5a:	e7cc      	b.n	80079f6 <__gethex+0xb6>
 8007a5c:	2401      	movs	r4, #1
 8007a5e:	e7fb      	b.n	8007a58 <__gethex+0x118>
 8007a60:	fb03 0002 	mla	r0, r3, r2, r0
 8007a64:	e7ce      	b.n	8007a04 <__gethex+0xc4>
 8007a66:	4631      	mov	r1, r6
 8007a68:	e7de      	b.n	8007a28 <__gethex+0xe8>
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	eba6 0309 	sub.w	r3, r6, r9
 8007a70:	3b01      	subs	r3, #1
 8007a72:	2b07      	cmp	r3, #7
 8007a74:	dc0a      	bgt.n	8007a8c <__gethex+0x14c>
 8007a76:	9801      	ldr	r0, [sp, #4]
 8007a78:	f7fe f954 	bl	8005d24 <_Balloc>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	b940      	cbnz	r0, 8007a92 <__gethex+0x152>
 8007a80:	4602      	mov	r2, r0
 8007a82:	21e4      	movs	r1, #228	@ 0xe4
 8007a84:	4b5b      	ldr	r3, [pc, #364]	@ (8007bf4 <__gethex+0x2b4>)
 8007a86:	485c      	ldr	r0, [pc, #368]	@ (8007bf8 <__gethex+0x2b8>)
 8007a88:	f7ff fec0 	bl	800780c <__assert_func>
 8007a8c:	3101      	adds	r1, #1
 8007a8e:	105b      	asrs	r3, r3, #1
 8007a90:	e7ef      	b.n	8007a72 <__gethex+0x132>
 8007a92:	2300      	movs	r3, #0
 8007a94:	f100 0a14 	add.w	sl, r0, #20
 8007a98:	4655      	mov	r5, sl
 8007a9a:	469b      	mov	fp, r3
 8007a9c:	45b1      	cmp	r9, r6
 8007a9e:	d337      	bcc.n	8007b10 <__gethex+0x1d0>
 8007aa0:	f845 bb04 	str.w	fp, [r5], #4
 8007aa4:	eba5 050a 	sub.w	r5, r5, sl
 8007aa8:	10ad      	asrs	r5, r5, #2
 8007aaa:	6125      	str	r5, [r4, #16]
 8007aac:	4658      	mov	r0, fp
 8007aae:	f7fe fa2b 	bl	8005f08 <__hi0bits>
 8007ab2:	016d      	lsls	r5, r5, #5
 8007ab4:	f8d8 6000 	ldr.w	r6, [r8]
 8007ab8:	1a2d      	subs	r5, r5, r0
 8007aba:	42b5      	cmp	r5, r6
 8007abc:	dd54      	ble.n	8007b68 <__gethex+0x228>
 8007abe:	1bad      	subs	r5, r5, r6
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7fe fdb3 	bl	800662e <__any_on>
 8007ac8:	4681      	mov	r9, r0
 8007aca:	b178      	cbz	r0, 8007aec <__gethex+0x1ac>
 8007acc:	f04f 0901 	mov.w	r9, #1
 8007ad0:	1e6b      	subs	r3, r5, #1
 8007ad2:	1159      	asrs	r1, r3, #5
 8007ad4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007ad8:	f003 021f 	and.w	r2, r3, #31
 8007adc:	fa09 f202 	lsl.w	r2, r9, r2
 8007ae0:	420a      	tst	r2, r1
 8007ae2:	d003      	beq.n	8007aec <__gethex+0x1ac>
 8007ae4:	454b      	cmp	r3, r9
 8007ae6:	dc36      	bgt.n	8007b56 <__gethex+0x216>
 8007ae8:	f04f 0902 	mov.w	r9, #2
 8007aec:	4629      	mov	r1, r5
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff febe 	bl	8007870 <rshift>
 8007af4:	442f      	add	r7, r5
 8007af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007afa:	42bb      	cmp	r3, r7
 8007afc:	da42      	bge.n	8007b84 <__gethex+0x244>
 8007afe:	4621      	mov	r1, r4
 8007b00:	9801      	ldr	r0, [sp, #4]
 8007b02:	f7fe f94f 	bl	8005da4 <_Bfree>
 8007b06:	2300      	movs	r3, #0
 8007b08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b0a:	25a3      	movs	r5, #163	@ 0xa3
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e793      	b.n	8007a38 <__gethex+0xf8>
 8007b10:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007b14:	2a2e      	cmp	r2, #46	@ 0x2e
 8007b16:	d012      	beq.n	8007b3e <__gethex+0x1fe>
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d104      	bne.n	8007b26 <__gethex+0x1e6>
 8007b1c:	f845 bb04 	str.w	fp, [r5], #4
 8007b20:	f04f 0b00 	mov.w	fp, #0
 8007b24:	465b      	mov	r3, fp
 8007b26:	7830      	ldrb	r0, [r6, #0]
 8007b28:	9303      	str	r3, [sp, #12]
 8007b2a:	f7ff fef4 	bl	8007916 <__hexdig_fun>
 8007b2e:	9b03      	ldr	r3, [sp, #12]
 8007b30:	f000 000f 	and.w	r0, r0, #15
 8007b34:	4098      	lsls	r0, r3
 8007b36:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	e7ae      	b.n	8007a9c <__gethex+0x15c>
 8007b3e:	45b1      	cmp	r9, r6
 8007b40:	d8ea      	bhi.n	8007b18 <__gethex+0x1d8>
 8007b42:	2201      	movs	r2, #1
 8007b44:	4630      	mov	r0, r6
 8007b46:	492a      	ldr	r1, [pc, #168]	@ (8007bf0 <__gethex+0x2b0>)
 8007b48:	9303      	str	r3, [sp, #12]
 8007b4a:	f7ff fe29 	bl	80077a0 <strncmp>
 8007b4e:	9b03      	ldr	r3, [sp, #12]
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d1e1      	bne.n	8007b18 <__gethex+0x1d8>
 8007b54:	e7a2      	b.n	8007a9c <__gethex+0x15c>
 8007b56:	4620      	mov	r0, r4
 8007b58:	1ea9      	subs	r1, r5, #2
 8007b5a:	f7fe fd68 	bl	800662e <__any_on>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0c2      	beq.n	8007ae8 <__gethex+0x1a8>
 8007b62:	f04f 0903 	mov.w	r9, #3
 8007b66:	e7c1      	b.n	8007aec <__gethex+0x1ac>
 8007b68:	da09      	bge.n	8007b7e <__gethex+0x23e>
 8007b6a:	1b75      	subs	r5, r6, r5
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	462a      	mov	r2, r5
 8007b70:	9801      	ldr	r0, [sp, #4]
 8007b72:	f7fe fb2d 	bl	80061d0 <__lshift>
 8007b76:	4604      	mov	r4, r0
 8007b78:	1b7f      	subs	r7, r7, r5
 8007b7a:	f100 0a14 	add.w	sl, r0, #20
 8007b7e:	f04f 0900 	mov.w	r9, #0
 8007b82:	e7b8      	b.n	8007af6 <__gethex+0x1b6>
 8007b84:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b88:	42bd      	cmp	r5, r7
 8007b8a:	dd6f      	ble.n	8007c6c <__gethex+0x32c>
 8007b8c:	1bed      	subs	r5, r5, r7
 8007b8e:	42ae      	cmp	r6, r5
 8007b90:	dc34      	bgt.n	8007bfc <__gethex+0x2bc>
 8007b92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d022      	beq.n	8007be0 <__gethex+0x2a0>
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d024      	beq.n	8007be8 <__gethex+0x2a8>
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d115      	bne.n	8007bce <__gethex+0x28e>
 8007ba2:	42ae      	cmp	r6, r5
 8007ba4:	d113      	bne.n	8007bce <__gethex+0x28e>
 8007ba6:	2e01      	cmp	r6, #1
 8007ba8:	d10b      	bne.n	8007bc2 <__gethex+0x282>
 8007baa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bae:	9a02      	ldr	r2, [sp, #8]
 8007bb0:	2562      	movs	r5, #98	@ 0x62
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	6123      	str	r3, [r4, #16]
 8007bb8:	f8ca 3000 	str.w	r3, [sl]
 8007bbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bbe:	601c      	str	r4, [r3, #0]
 8007bc0:	e73a      	b.n	8007a38 <__gethex+0xf8>
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	1e71      	subs	r1, r6, #1
 8007bc6:	f7fe fd32 	bl	800662e <__any_on>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d1ed      	bne.n	8007baa <__gethex+0x26a>
 8007bce:	4621      	mov	r1, r4
 8007bd0:	9801      	ldr	r0, [sp, #4]
 8007bd2:	f7fe f8e7 	bl	8005da4 <_Bfree>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bda:	2550      	movs	r5, #80	@ 0x50
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	e72b      	b.n	8007a38 <__gethex+0xf8>
 8007be0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f3      	bne.n	8007bce <__gethex+0x28e>
 8007be6:	e7e0      	b.n	8007baa <__gethex+0x26a>
 8007be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1dd      	bne.n	8007baa <__gethex+0x26a>
 8007bee:	e7ee      	b.n	8007bce <__gethex+0x28e>
 8007bf0:	080087a0 	.word	0x080087a0
 8007bf4:	08008633 	.word	0x08008633
 8007bf8:	0800894e 	.word	0x0800894e
 8007bfc:	1e6f      	subs	r7, r5, #1
 8007bfe:	f1b9 0f00 	cmp.w	r9, #0
 8007c02:	d130      	bne.n	8007c66 <__gethex+0x326>
 8007c04:	b127      	cbz	r7, 8007c10 <__gethex+0x2d0>
 8007c06:	4639      	mov	r1, r7
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f7fe fd10 	bl	800662e <__any_on>
 8007c0e:	4681      	mov	r9, r0
 8007c10:	2301      	movs	r3, #1
 8007c12:	4629      	mov	r1, r5
 8007c14:	1b76      	subs	r6, r6, r5
 8007c16:	2502      	movs	r5, #2
 8007c18:	117a      	asrs	r2, r7, #5
 8007c1a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c1e:	f007 071f 	and.w	r7, r7, #31
 8007c22:	40bb      	lsls	r3, r7
 8007c24:	4213      	tst	r3, r2
 8007c26:	4620      	mov	r0, r4
 8007c28:	bf18      	it	ne
 8007c2a:	f049 0902 	orrne.w	r9, r9, #2
 8007c2e:	f7ff fe1f 	bl	8007870 <rshift>
 8007c32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007c36:	f1b9 0f00 	cmp.w	r9, #0
 8007c3a:	d047      	beq.n	8007ccc <__gethex+0x38c>
 8007c3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d015      	beq.n	8007c70 <__gethex+0x330>
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d017      	beq.n	8007c78 <__gethex+0x338>
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d109      	bne.n	8007c60 <__gethex+0x320>
 8007c4c:	f019 0f02 	tst.w	r9, #2
 8007c50:	d006      	beq.n	8007c60 <__gethex+0x320>
 8007c52:	f8da 3000 	ldr.w	r3, [sl]
 8007c56:	ea49 0903 	orr.w	r9, r9, r3
 8007c5a:	f019 0f01 	tst.w	r9, #1
 8007c5e:	d10e      	bne.n	8007c7e <__gethex+0x33e>
 8007c60:	f045 0510 	orr.w	r5, r5, #16
 8007c64:	e032      	b.n	8007ccc <__gethex+0x38c>
 8007c66:	f04f 0901 	mov.w	r9, #1
 8007c6a:	e7d1      	b.n	8007c10 <__gethex+0x2d0>
 8007c6c:	2501      	movs	r5, #1
 8007c6e:	e7e2      	b.n	8007c36 <__gethex+0x2f6>
 8007c70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c72:	f1c3 0301 	rsb	r3, r3, #1
 8007c76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f0      	beq.n	8007c60 <__gethex+0x320>
 8007c7e:	f04f 0c00 	mov.w	ip, #0
 8007c82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c86:	f104 0314 	add.w	r3, r4, #20
 8007c8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c98:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c9c:	d01b      	beq.n	8007cd6 <__gethex+0x396>
 8007c9e:	3201      	adds	r2, #1
 8007ca0:	6002      	str	r2, [r0, #0]
 8007ca2:	2d02      	cmp	r5, #2
 8007ca4:	f104 0314 	add.w	r3, r4, #20
 8007ca8:	d13c      	bne.n	8007d24 <__gethex+0x3e4>
 8007caa:	f8d8 2000 	ldr.w	r2, [r8]
 8007cae:	3a01      	subs	r2, #1
 8007cb0:	42b2      	cmp	r2, r6
 8007cb2:	d109      	bne.n	8007cc8 <__gethex+0x388>
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	1171      	asrs	r1, r6, #5
 8007cb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cbc:	f006 061f 	and.w	r6, r6, #31
 8007cc0:	fa02 f606 	lsl.w	r6, r2, r6
 8007cc4:	421e      	tst	r6, r3
 8007cc6:	d13a      	bne.n	8007d3e <__gethex+0x3fe>
 8007cc8:	f045 0520 	orr.w	r5, r5, #32
 8007ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cce:	601c      	str	r4, [r3, #0]
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	601f      	str	r7, [r3, #0]
 8007cd4:	e6b0      	b.n	8007a38 <__gethex+0xf8>
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	f843 cc04 	str.w	ip, [r3, #-4]
 8007cdc:	d8d9      	bhi.n	8007c92 <__gethex+0x352>
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	459b      	cmp	fp, r3
 8007ce2:	db17      	blt.n	8007d14 <__gethex+0x3d4>
 8007ce4:	6861      	ldr	r1, [r4, #4]
 8007ce6:	9801      	ldr	r0, [sp, #4]
 8007ce8:	3101      	adds	r1, #1
 8007cea:	f7fe f81b 	bl	8005d24 <_Balloc>
 8007cee:	4681      	mov	r9, r0
 8007cf0:	b918      	cbnz	r0, 8007cfa <__gethex+0x3ba>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	2184      	movs	r1, #132	@ 0x84
 8007cf6:	4b19      	ldr	r3, [pc, #100]	@ (8007d5c <__gethex+0x41c>)
 8007cf8:	e6c5      	b.n	8007a86 <__gethex+0x146>
 8007cfa:	6922      	ldr	r2, [r4, #16]
 8007cfc:	f104 010c 	add.w	r1, r4, #12
 8007d00:	3202      	adds	r2, #2
 8007d02:	0092      	lsls	r2, r2, #2
 8007d04:	300c      	adds	r0, #12
 8007d06:	f7ff fd6d 	bl	80077e4 <memcpy>
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	9801      	ldr	r0, [sp, #4]
 8007d0e:	f7fe f849 	bl	8005da4 <_Bfree>
 8007d12:	464c      	mov	r4, r9
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	6122      	str	r2, [r4, #16]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d20:	615a      	str	r2, [r3, #20]
 8007d22:	e7be      	b.n	8007ca2 <__gethex+0x362>
 8007d24:	6922      	ldr	r2, [r4, #16]
 8007d26:	455a      	cmp	r2, fp
 8007d28:	dd0b      	ble.n	8007d42 <__gethex+0x402>
 8007d2a:	2101      	movs	r1, #1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f7ff fd9f 	bl	8007870 <rshift>
 8007d32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d36:	3701      	adds	r7, #1
 8007d38:	42bb      	cmp	r3, r7
 8007d3a:	f6ff aee0 	blt.w	8007afe <__gethex+0x1be>
 8007d3e:	2501      	movs	r5, #1
 8007d40:	e7c2      	b.n	8007cc8 <__gethex+0x388>
 8007d42:	f016 061f 	ands.w	r6, r6, #31
 8007d46:	d0fa      	beq.n	8007d3e <__gethex+0x3fe>
 8007d48:	4453      	add	r3, sl
 8007d4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d4e:	f7fe f8db 	bl	8005f08 <__hi0bits>
 8007d52:	f1c6 0620 	rsb	r6, r6, #32
 8007d56:	42b0      	cmp	r0, r6
 8007d58:	dbe7      	blt.n	8007d2a <__gethex+0x3ea>
 8007d5a:	e7f0      	b.n	8007d3e <__gethex+0x3fe>
 8007d5c:	08008633 	.word	0x08008633

08007d60 <L_shift>:
 8007d60:	f1c2 0208 	rsb	r2, r2, #8
 8007d64:	0092      	lsls	r2, r2, #2
 8007d66:	b570      	push	{r4, r5, r6, lr}
 8007d68:	f1c2 0620 	rsb	r6, r2, #32
 8007d6c:	6843      	ldr	r3, [r0, #4]
 8007d6e:	6804      	ldr	r4, [r0, #0]
 8007d70:	fa03 f506 	lsl.w	r5, r3, r6
 8007d74:	432c      	orrs	r4, r5
 8007d76:	40d3      	lsrs	r3, r2
 8007d78:	6004      	str	r4, [r0, #0]
 8007d7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d7e:	4288      	cmp	r0, r1
 8007d80:	d3f4      	bcc.n	8007d6c <L_shift+0xc>
 8007d82:	bd70      	pop	{r4, r5, r6, pc}

08007d84 <__match>:
 8007d84:	b530      	push	{r4, r5, lr}
 8007d86:	6803      	ldr	r3, [r0, #0]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d8e:	b914      	cbnz	r4, 8007d96 <__match+0x12>
 8007d90:	6003      	str	r3, [r0, #0]
 8007d92:	2001      	movs	r0, #1
 8007d94:	bd30      	pop	{r4, r5, pc}
 8007d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d9a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007d9e:	2d19      	cmp	r5, #25
 8007da0:	bf98      	it	ls
 8007da2:	3220      	addls	r2, #32
 8007da4:	42a2      	cmp	r2, r4
 8007da6:	d0f0      	beq.n	8007d8a <__match+0x6>
 8007da8:	2000      	movs	r0, #0
 8007daa:	e7f3      	b.n	8007d94 <__match+0x10>

08007dac <__hexnan>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	2500      	movs	r5, #0
 8007db2:	680b      	ldr	r3, [r1, #0]
 8007db4:	4682      	mov	sl, r0
 8007db6:	115e      	asrs	r6, r3, #5
 8007db8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007dbc:	f013 031f 	ands.w	r3, r3, #31
 8007dc0:	bf18      	it	ne
 8007dc2:	3604      	addne	r6, #4
 8007dc4:	1f37      	subs	r7, r6, #4
 8007dc6:	4690      	mov	r8, r2
 8007dc8:	46b9      	mov	r9, r7
 8007dca:	463c      	mov	r4, r7
 8007dcc:	46ab      	mov	fp, r5
 8007dce:	b087      	sub	sp, #28
 8007dd0:	6801      	ldr	r1, [r0, #0]
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	f846 5c04 	str.w	r5, [r6, #-4]
 8007dd8:	9502      	str	r5, [sp, #8]
 8007dda:	784a      	ldrb	r2, [r1, #1]
 8007ddc:	1c4b      	adds	r3, r1, #1
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	b342      	cbz	r2, 8007e34 <__hexnan+0x88>
 8007de2:	4610      	mov	r0, r2
 8007de4:	9105      	str	r1, [sp, #20]
 8007de6:	9204      	str	r2, [sp, #16]
 8007de8:	f7ff fd95 	bl	8007916 <__hexdig_fun>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d151      	bne.n	8007e94 <__hexnan+0xe8>
 8007df0:	9a04      	ldr	r2, [sp, #16]
 8007df2:	9905      	ldr	r1, [sp, #20]
 8007df4:	2a20      	cmp	r2, #32
 8007df6:	d818      	bhi.n	8007e2a <__hexnan+0x7e>
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	459b      	cmp	fp, r3
 8007dfc:	dd13      	ble.n	8007e26 <__hexnan+0x7a>
 8007dfe:	454c      	cmp	r4, r9
 8007e00:	d206      	bcs.n	8007e10 <__hexnan+0x64>
 8007e02:	2d07      	cmp	r5, #7
 8007e04:	dc04      	bgt.n	8007e10 <__hexnan+0x64>
 8007e06:	462a      	mov	r2, r5
 8007e08:	4649      	mov	r1, r9
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7ff ffa8 	bl	8007d60 <L_shift>
 8007e10:	4544      	cmp	r4, r8
 8007e12:	d952      	bls.n	8007eba <__hexnan+0x10e>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f1a4 0904 	sub.w	r9, r4, #4
 8007e1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e1e:	461d      	mov	r5, r3
 8007e20:	464c      	mov	r4, r9
 8007e22:	f8cd b008 	str.w	fp, [sp, #8]
 8007e26:	9903      	ldr	r1, [sp, #12]
 8007e28:	e7d7      	b.n	8007dda <__hexnan+0x2e>
 8007e2a:	2a29      	cmp	r2, #41	@ 0x29
 8007e2c:	d157      	bne.n	8007ede <__hexnan+0x132>
 8007e2e:	3102      	adds	r1, #2
 8007e30:	f8ca 1000 	str.w	r1, [sl]
 8007e34:	f1bb 0f00 	cmp.w	fp, #0
 8007e38:	d051      	beq.n	8007ede <__hexnan+0x132>
 8007e3a:	454c      	cmp	r4, r9
 8007e3c:	d206      	bcs.n	8007e4c <__hexnan+0xa0>
 8007e3e:	2d07      	cmp	r5, #7
 8007e40:	dc04      	bgt.n	8007e4c <__hexnan+0xa0>
 8007e42:	462a      	mov	r2, r5
 8007e44:	4649      	mov	r1, r9
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7ff ff8a 	bl	8007d60 <L_shift>
 8007e4c:	4544      	cmp	r4, r8
 8007e4e:	d936      	bls.n	8007ebe <__hexnan+0x112>
 8007e50:	4623      	mov	r3, r4
 8007e52:	f1a8 0204 	sub.w	r2, r8, #4
 8007e56:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e5a:	429f      	cmp	r7, r3
 8007e5c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e60:	d2f9      	bcs.n	8007e56 <__hexnan+0xaa>
 8007e62:	1b3b      	subs	r3, r7, r4
 8007e64:	f023 0303 	bic.w	r3, r3, #3
 8007e68:	3304      	adds	r3, #4
 8007e6a:	3401      	adds	r4, #1
 8007e6c:	3e03      	subs	r6, #3
 8007e6e:	42b4      	cmp	r4, r6
 8007e70:	bf88      	it	hi
 8007e72:	2304      	movhi	r3, #4
 8007e74:	2200      	movs	r2, #0
 8007e76:	4443      	add	r3, r8
 8007e78:	f843 2b04 	str.w	r2, [r3], #4
 8007e7c:	429f      	cmp	r7, r3
 8007e7e:	d2fb      	bcs.n	8007e78 <__hexnan+0xcc>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	b91b      	cbnz	r3, 8007e8c <__hexnan+0xe0>
 8007e84:	4547      	cmp	r7, r8
 8007e86:	d128      	bne.n	8007eda <__hexnan+0x12e>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	2005      	movs	r0, #5
 8007e8e:	b007      	add	sp, #28
 8007e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e94:	3501      	adds	r5, #1
 8007e96:	2d08      	cmp	r5, #8
 8007e98:	f10b 0b01 	add.w	fp, fp, #1
 8007e9c:	dd06      	ble.n	8007eac <__hexnan+0x100>
 8007e9e:	4544      	cmp	r4, r8
 8007ea0:	d9c1      	bls.n	8007e26 <__hexnan+0x7a>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2501      	movs	r5, #1
 8007ea6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eaa:	3c04      	subs	r4, #4
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	f000 000f 	and.w	r0, r0, #15
 8007eb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007eb6:	6020      	str	r0, [r4, #0]
 8007eb8:	e7b5      	b.n	8007e26 <__hexnan+0x7a>
 8007eba:	2508      	movs	r5, #8
 8007ebc:	e7b3      	b.n	8007e26 <__hexnan+0x7a>
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0dd      	beq.n	8007e80 <__hexnan+0xd4>
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec8:	f1c3 0320 	rsb	r3, r3, #32
 8007ecc:	40da      	lsrs	r2, r3
 8007ece:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ed8:	e7d2      	b.n	8007e80 <__hexnan+0xd4>
 8007eda:	3f04      	subs	r7, #4
 8007edc:	e7d0      	b.n	8007e80 <__hexnan+0xd4>
 8007ede:	2004      	movs	r0, #4
 8007ee0:	e7d5      	b.n	8007e8e <__hexnan+0xe2>

08007ee2 <__ascii_mbtowc>:
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	b901      	cbnz	r1, 8007ee8 <__ascii_mbtowc+0x6>
 8007ee6:	a901      	add	r1, sp, #4
 8007ee8:	b142      	cbz	r2, 8007efc <__ascii_mbtowc+0x1a>
 8007eea:	b14b      	cbz	r3, 8007f00 <__ascii_mbtowc+0x1e>
 8007eec:	7813      	ldrb	r3, [r2, #0]
 8007eee:	600b      	str	r3, [r1, #0]
 8007ef0:	7812      	ldrb	r2, [r2, #0]
 8007ef2:	1e10      	subs	r0, r2, #0
 8007ef4:	bf18      	it	ne
 8007ef6:	2001      	movne	r0, #1
 8007ef8:	b002      	add	sp, #8
 8007efa:	4770      	bx	lr
 8007efc:	4610      	mov	r0, r2
 8007efe:	e7fb      	b.n	8007ef8 <__ascii_mbtowc+0x16>
 8007f00:	f06f 0001 	mvn.w	r0, #1
 8007f04:	e7f8      	b.n	8007ef8 <__ascii_mbtowc+0x16>

08007f06 <_realloc_r>:
 8007f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	4680      	mov	r8, r0
 8007f0c:	4615      	mov	r5, r2
 8007f0e:	460c      	mov	r4, r1
 8007f10:	b921      	cbnz	r1, 8007f1c <_realloc_r+0x16>
 8007f12:	4611      	mov	r1, r2
 8007f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f18:	f7fd be78 	b.w	8005c0c <_malloc_r>
 8007f1c:	b92a      	cbnz	r2, 8007f2a <_realloc_r+0x24>
 8007f1e:	f7fd fe03 	bl	8005b28 <_free_r>
 8007f22:	2400      	movs	r4, #0
 8007f24:	4620      	mov	r0, r4
 8007f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f2a:	f000 f840 	bl	8007fae <_malloc_usable_size_r>
 8007f2e:	4285      	cmp	r5, r0
 8007f30:	4606      	mov	r6, r0
 8007f32:	d802      	bhi.n	8007f3a <_realloc_r+0x34>
 8007f34:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f38:	d8f4      	bhi.n	8007f24 <_realloc_r+0x1e>
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	f7fd fe65 	bl	8005c0c <_malloc_r>
 8007f42:	4607      	mov	r7, r0
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d0ec      	beq.n	8007f22 <_realloc_r+0x1c>
 8007f48:	42b5      	cmp	r5, r6
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	bf28      	it	cs
 8007f50:	4632      	movcs	r2, r6
 8007f52:	f7ff fc47 	bl	80077e4 <memcpy>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4640      	mov	r0, r8
 8007f5a:	f7fd fde5 	bl	8005b28 <_free_r>
 8007f5e:	463c      	mov	r4, r7
 8007f60:	e7e0      	b.n	8007f24 <_realloc_r+0x1e>

08007f62 <__ascii_wctomb>:
 8007f62:	4603      	mov	r3, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	b141      	cbz	r1, 8007f7a <__ascii_wctomb+0x18>
 8007f68:	2aff      	cmp	r2, #255	@ 0xff
 8007f6a:	d904      	bls.n	8007f76 <__ascii_wctomb+0x14>
 8007f6c:	228a      	movs	r2, #138	@ 0x8a
 8007f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	4770      	bx	lr
 8007f76:	2001      	movs	r0, #1
 8007f78:	700a      	strb	r2, [r1, #0]
 8007f7a:	4770      	bx	lr

08007f7c <fiprintf>:
 8007f7c:	b40e      	push	{r1, r2, r3}
 8007f7e:	b503      	push	{r0, r1, lr}
 8007f80:	4601      	mov	r1, r0
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	4805      	ldr	r0, [pc, #20]	@ (8007f9c <fiprintf+0x20>)
 8007f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	f000 f83d 	bl	800800c <_vfiprintf_r>
 8007f92:	b002      	add	sp, #8
 8007f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f98:	b003      	add	sp, #12
 8007f9a:	4770      	bx	lr
 8007f9c:	2000001c 	.word	0x2000001c

08007fa0 <abort>:
 8007fa0:	2006      	movs	r0, #6
 8007fa2:	b508      	push	{r3, lr}
 8007fa4:	f000 fa06 	bl	80083b4 <raise>
 8007fa8:	2001      	movs	r0, #1
 8007faa:	f7f9 fe2c 	bl	8001c06 <_exit>

08007fae <_malloc_usable_size_r>:
 8007fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb2:	1f18      	subs	r0, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bfbc      	itt	lt
 8007fb8:	580b      	ldrlt	r3, [r1, r0]
 8007fba:	18c0      	addlt	r0, r0, r3
 8007fbc:	4770      	bx	lr

08007fbe <__sfputc_r>:
 8007fbe:	6893      	ldr	r3, [r2, #8]
 8007fc0:	b410      	push	{r4}
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	6093      	str	r3, [r2, #8]
 8007fc8:	da07      	bge.n	8007fda <__sfputc_r+0x1c>
 8007fca:	6994      	ldr	r4, [r2, #24]
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	db01      	blt.n	8007fd4 <__sfputc_r+0x16>
 8007fd0:	290a      	cmp	r1, #10
 8007fd2:	d102      	bne.n	8007fda <__sfputc_r+0x1c>
 8007fd4:	bc10      	pop	{r4}
 8007fd6:	f000 b931 	b.w	800823c <__swbuf_r>
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	1c58      	adds	r0, r3, #1
 8007fde:	6010      	str	r0, [r2, #0]
 8007fe0:	7019      	strb	r1, [r3, #0]
 8007fe2:	4608      	mov	r0, r1
 8007fe4:	bc10      	pop	{r4}
 8007fe6:	4770      	bx	lr

08007fe8 <__sfputs_r>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	4614      	mov	r4, r2
 8007ff0:	18d5      	adds	r5, r2, r3
 8007ff2:	42ac      	cmp	r4, r5
 8007ff4:	d101      	bne.n	8007ffa <__sfputs_r+0x12>
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	e007      	b.n	800800a <__sfputs_r+0x22>
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008002:	f7ff ffdc 	bl	8007fbe <__sfputc_r>
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	d1f3      	bne.n	8007ff2 <__sfputs_r+0xa>
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800800c <_vfiprintf_r>:
 800800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	460d      	mov	r5, r1
 8008012:	4614      	mov	r4, r2
 8008014:	4698      	mov	r8, r3
 8008016:	4606      	mov	r6, r0
 8008018:	b09d      	sub	sp, #116	@ 0x74
 800801a:	b118      	cbz	r0, 8008024 <_vfiprintf_r+0x18>
 800801c:	6a03      	ldr	r3, [r0, #32]
 800801e:	b90b      	cbnz	r3, 8008024 <_vfiprintf_r+0x18>
 8008020:	f7fc fdd0 	bl	8004bc4 <__sinit>
 8008024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008026:	07d9      	lsls	r1, r3, #31
 8008028:	d405      	bmi.n	8008036 <_vfiprintf_r+0x2a>
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	059a      	lsls	r2, r3, #22
 800802e:	d402      	bmi.n	8008036 <_vfiprintf_r+0x2a>
 8008030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008032:	f7fc ff12 	bl	8004e5a <__retarget_lock_acquire_recursive>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	071b      	lsls	r3, r3, #28
 800803a:	d501      	bpl.n	8008040 <_vfiprintf_r+0x34>
 800803c:	692b      	ldr	r3, [r5, #16]
 800803e:	b99b      	cbnz	r3, 8008068 <_vfiprintf_r+0x5c>
 8008040:	4629      	mov	r1, r5
 8008042:	4630      	mov	r0, r6
 8008044:	f000 f938 	bl	80082b8 <__swsetup_r>
 8008048:	b170      	cbz	r0, 8008068 <_vfiprintf_r+0x5c>
 800804a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800804c:	07dc      	lsls	r4, r3, #31
 800804e:	d504      	bpl.n	800805a <_vfiprintf_r+0x4e>
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	b01d      	add	sp, #116	@ 0x74
 8008056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805a:	89ab      	ldrh	r3, [r5, #12]
 800805c:	0598      	lsls	r0, r3, #22
 800805e:	d4f7      	bmi.n	8008050 <_vfiprintf_r+0x44>
 8008060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008062:	f7fc fefb 	bl	8004e5c <__retarget_lock_release_recursive>
 8008066:	e7f3      	b.n	8008050 <_vfiprintf_r+0x44>
 8008068:	2300      	movs	r3, #0
 800806a:	9309      	str	r3, [sp, #36]	@ 0x24
 800806c:	2320      	movs	r3, #32
 800806e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008072:	2330      	movs	r3, #48	@ 0x30
 8008074:	f04f 0901 	mov.w	r9, #1
 8008078:	f8cd 800c 	str.w	r8, [sp, #12]
 800807c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008228 <_vfiprintf_r+0x21c>
 8008080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008084:	4623      	mov	r3, r4
 8008086:	469a      	mov	sl, r3
 8008088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800808c:	b10a      	cbz	r2, 8008092 <_vfiprintf_r+0x86>
 800808e:	2a25      	cmp	r2, #37	@ 0x25
 8008090:	d1f9      	bne.n	8008086 <_vfiprintf_r+0x7a>
 8008092:	ebba 0b04 	subs.w	fp, sl, r4
 8008096:	d00b      	beq.n	80080b0 <_vfiprintf_r+0xa4>
 8008098:	465b      	mov	r3, fp
 800809a:	4622      	mov	r2, r4
 800809c:	4629      	mov	r1, r5
 800809e:	4630      	mov	r0, r6
 80080a0:	f7ff ffa2 	bl	8007fe8 <__sfputs_r>
 80080a4:	3001      	adds	r0, #1
 80080a6:	f000 80a7 	beq.w	80081f8 <_vfiprintf_r+0x1ec>
 80080aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ac:	445a      	add	r2, fp
 80080ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80080b0:	f89a 3000 	ldrb.w	r3, [sl]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 809f 	beq.w	80081f8 <_vfiprintf_r+0x1ec>
 80080ba:	2300      	movs	r3, #0
 80080bc:	f04f 32ff 	mov.w	r2, #4294967295
 80080c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080c4:	f10a 0a01 	add.w	sl, sl, #1
 80080c8:	9304      	str	r3, [sp, #16]
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80080d2:	4654      	mov	r4, sl
 80080d4:	2205      	movs	r2, #5
 80080d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080da:	4853      	ldr	r0, [pc, #332]	@ (8008228 <_vfiprintf_r+0x21c>)
 80080dc:	f7fc febf 	bl	8004e5e <memchr>
 80080e0:	9a04      	ldr	r2, [sp, #16]
 80080e2:	b9d8      	cbnz	r0, 800811c <_vfiprintf_r+0x110>
 80080e4:	06d1      	lsls	r1, r2, #27
 80080e6:	bf44      	itt	mi
 80080e8:	2320      	movmi	r3, #32
 80080ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ee:	0713      	lsls	r3, r2, #28
 80080f0:	bf44      	itt	mi
 80080f2:	232b      	movmi	r3, #43	@ 0x2b
 80080f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080f8:	f89a 3000 	ldrb.w	r3, [sl]
 80080fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80080fe:	d015      	beq.n	800812c <_vfiprintf_r+0x120>
 8008100:	4654      	mov	r4, sl
 8008102:	2000      	movs	r0, #0
 8008104:	f04f 0c0a 	mov.w	ip, #10
 8008108:	9a07      	ldr	r2, [sp, #28]
 800810a:	4621      	mov	r1, r4
 800810c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008110:	3b30      	subs	r3, #48	@ 0x30
 8008112:	2b09      	cmp	r3, #9
 8008114:	d94b      	bls.n	80081ae <_vfiprintf_r+0x1a2>
 8008116:	b1b0      	cbz	r0, 8008146 <_vfiprintf_r+0x13a>
 8008118:	9207      	str	r2, [sp, #28]
 800811a:	e014      	b.n	8008146 <_vfiprintf_r+0x13a>
 800811c:	eba0 0308 	sub.w	r3, r0, r8
 8008120:	fa09 f303 	lsl.w	r3, r9, r3
 8008124:	4313      	orrs	r3, r2
 8008126:	46a2      	mov	sl, r4
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	e7d2      	b.n	80080d2 <_vfiprintf_r+0xc6>
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	1d19      	adds	r1, r3, #4
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	9103      	str	r1, [sp, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	bfbb      	ittet	lt
 8008138:	425b      	neglt	r3, r3
 800813a:	f042 0202 	orrlt.w	r2, r2, #2
 800813e:	9307      	strge	r3, [sp, #28]
 8008140:	9307      	strlt	r3, [sp, #28]
 8008142:	bfb8      	it	lt
 8008144:	9204      	strlt	r2, [sp, #16]
 8008146:	7823      	ldrb	r3, [r4, #0]
 8008148:	2b2e      	cmp	r3, #46	@ 0x2e
 800814a:	d10a      	bne.n	8008162 <_vfiprintf_r+0x156>
 800814c:	7863      	ldrb	r3, [r4, #1]
 800814e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008150:	d132      	bne.n	80081b8 <_vfiprintf_r+0x1ac>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	3402      	adds	r4, #2
 8008156:	1d1a      	adds	r2, r3, #4
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	9203      	str	r2, [sp, #12]
 800815c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800822c <_vfiprintf_r+0x220>
 8008166:	2203      	movs	r2, #3
 8008168:	4650      	mov	r0, sl
 800816a:	7821      	ldrb	r1, [r4, #0]
 800816c:	f7fc fe77 	bl	8004e5e <memchr>
 8008170:	b138      	cbz	r0, 8008182 <_vfiprintf_r+0x176>
 8008172:	2240      	movs	r2, #64	@ 0x40
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	eba0 000a 	sub.w	r0, r0, sl
 800817a:	4082      	lsls	r2, r0
 800817c:	4313      	orrs	r3, r2
 800817e:	3401      	adds	r4, #1
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008186:	2206      	movs	r2, #6
 8008188:	4829      	ldr	r0, [pc, #164]	@ (8008230 <_vfiprintf_r+0x224>)
 800818a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800818e:	f7fc fe66 	bl	8004e5e <memchr>
 8008192:	2800      	cmp	r0, #0
 8008194:	d03f      	beq.n	8008216 <_vfiprintf_r+0x20a>
 8008196:	4b27      	ldr	r3, [pc, #156]	@ (8008234 <_vfiprintf_r+0x228>)
 8008198:	bb1b      	cbnz	r3, 80081e2 <_vfiprintf_r+0x1d6>
 800819a:	9b03      	ldr	r3, [sp, #12]
 800819c:	3307      	adds	r3, #7
 800819e:	f023 0307 	bic.w	r3, r3, #7
 80081a2:	3308      	adds	r3, #8
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a8:	443b      	add	r3, r7
 80081aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ac:	e76a      	b.n	8008084 <_vfiprintf_r+0x78>
 80081ae:	460c      	mov	r4, r1
 80081b0:	2001      	movs	r0, #1
 80081b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081b6:	e7a8      	b.n	800810a <_vfiprintf_r+0xfe>
 80081b8:	2300      	movs	r3, #0
 80081ba:	f04f 0c0a 	mov.w	ip, #10
 80081be:	4619      	mov	r1, r3
 80081c0:	3401      	adds	r4, #1
 80081c2:	9305      	str	r3, [sp, #20]
 80081c4:	4620      	mov	r0, r4
 80081c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081ca:	3a30      	subs	r2, #48	@ 0x30
 80081cc:	2a09      	cmp	r2, #9
 80081ce:	d903      	bls.n	80081d8 <_vfiprintf_r+0x1cc>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0c6      	beq.n	8008162 <_vfiprintf_r+0x156>
 80081d4:	9105      	str	r1, [sp, #20]
 80081d6:	e7c4      	b.n	8008162 <_vfiprintf_r+0x156>
 80081d8:	4604      	mov	r4, r0
 80081da:	2301      	movs	r3, #1
 80081dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80081e0:	e7f0      	b.n	80081c4 <_vfiprintf_r+0x1b8>
 80081e2:	ab03      	add	r3, sp, #12
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	462a      	mov	r2, r5
 80081e8:	4630      	mov	r0, r6
 80081ea:	4b13      	ldr	r3, [pc, #76]	@ (8008238 <_vfiprintf_r+0x22c>)
 80081ec:	a904      	add	r1, sp, #16
 80081ee:	f7fb fe8f 	bl	8003f10 <_printf_float>
 80081f2:	4607      	mov	r7, r0
 80081f4:	1c78      	adds	r0, r7, #1
 80081f6:	d1d6      	bne.n	80081a6 <_vfiprintf_r+0x19a>
 80081f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fa:	07d9      	lsls	r1, r3, #31
 80081fc:	d405      	bmi.n	800820a <_vfiprintf_r+0x1fe>
 80081fe:	89ab      	ldrh	r3, [r5, #12]
 8008200:	059a      	lsls	r2, r3, #22
 8008202:	d402      	bmi.n	800820a <_vfiprintf_r+0x1fe>
 8008204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008206:	f7fc fe29 	bl	8004e5c <__retarget_lock_release_recursive>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	065b      	lsls	r3, r3, #25
 800820e:	f53f af1f 	bmi.w	8008050 <_vfiprintf_r+0x44>
 8008212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008214:	e71e      	b.n	8008054 <_vfiprintf_r+0x48>
 8008216:	ab03      	add	r3, sp, #12
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	462a      	mov	r2, r5
 800821c:	4630      	mov	r0, r6
 800821e:	4b06      	ldr	r3, [pc, #24]	@ (8008238 <_vfiprintf_r+0x22c>)
 8008220:	a904      	add	r1, sp, #16
 8008222:	f7fc f913 	bl	800444c <_printf_i>
 8008226:	e7e4      	b.n	80081f2 <_vfiprintf_r+0x1e6>
 8008228:	080088f9 	.word	0x080088f9
 800822c:	080088ff 	.word	0x080088ff
 8008230:	08008903 	.word	0x08008903
 8008234:	08003f11 	.word	0x08003f11
 8008238:	08007fe9 	.word	0x08007fe9

0800823c <__swbuf_r>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	460e      	mov	r6, r1
 8008240:	4614      	mov	r4, r2
 8008242:	4605      	mov	r5, r0
 8008244:	b118      	cbz	r0, 800824e <__swbuf_r+0x12>
 8008246:	6a03      	ldr	r3, [r0, #32]
 8008248:	b90b      	cbnz	r3, 800824e <__swbuf_r+0x12>
 800824a:	f7fc fcbb 	bl	8004bc4 <__sinit>
 800824e:	69a3      	ldr	r3, [r4, #24]
 8008250:	60a3      	str	r3, [r4, #8]
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	071a      	lsls	r2, r3, #28
 8008256:	d501      	bpl.n	800825c <__swbuf_r+0x20>
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	b943      	cbnz	r3, 800826e <__swbuf_r+0x32>
 800825c:	4621      	mov	r1, r4
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f82a 	bl	80082b8 <__swsetup_r>
 8008264:	b118      	cbz	r0, 800826e <__swbuf_r+0x32>
 8008266:	f04f 37ff 	mov.w	r7, #4294967295
 800826a:	4638      	mov	r0, r7
 800826c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	6922      	ldr	r2, [r4, #16]
 8008272:	b2f6      	uxtb	r6, r6
 8008274:	1a98      	subs	r0, r3, r2
 8008276:	6963      	ldr	r3, [r4, #20]
 8008278:	4637      	mov	r7, r6
 800827a:	4283      	cmp	r3, r0
 800827c:	dc05      	bgt.n	800828a <__swbuf_r+0x4e>
 800827e:	4621      	mov	r1, r4
 8008280:	4628      	mov	r0, r5
 8008282:	f7ff fa4b 	bl	800771c <_fflush_r>
 8008286:	2800      	cmp	r0, #0
 8008288:	d1ed      	bne.n	8008266 <__swbuf_r+0x2a>
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	3b01      	subs	r3, #1
 800828e:	60a3      	str	r3, [r4, #8]
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	701e      	strb	r6, [r3, #0]
 8008298:	6962      	ldr	r2, [r4, #20]
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	429a      	cmp	r2, r3
 800829e:	d004      	beq.n	80082aa <__swbuf_r+0x6e>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	07db      	lsls	r3, r3, #31
 80082a4:	d5e1      	bpl.n	800826a <__swbuf_r+0x2e>
 80082a6:	2e0a      	cmp	r6, #10
 80082a8:	d1df      	bne.n	800826a <__swbuf_r+0x2e>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f7ff fa35 	bl	800771c <_fflush_r>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d0d9      	beq.n	800826a <__swbuf_r+0x2e>
 80082b6:	e7d6      	b.n	8008266 <__swbuf_r+0x2a>

080082b8 <__swsetup_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4b29      	ldr	r3, [pc, #164]	@ (8008360 <__swsetup_r+0xa8>)
 80082bc:	4605      	mov	r5, r0
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	460c      	mov	r4, r1
 80082c2:	b118      	cbz	r0, 80082cc <__swsetup_r+0x14>
 80082c4:	6a03      	ldr	r3, [r0, #32]
 80082c6:	b90b      	cbnz	r3, 80082cc <__swsetup_r+0x14>
 80082c8:	f7fc fc7c 	bl	8004bc4 <__sinit>
 80082cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d0:	0719      	lsls	r1, r3, #28
 80082d2:	d422      	bmi.n	800831a <__swsetup_r+0x62>
 80082d4:	06da      	lsls	r2, r3, #27
 80082d6:	d407      	bmi.n	80082e8 <__swsetup_r+0x30>
 80082d8:	2209      	movs	r2, #9
 80082da:	602a      	str	r2, [r5, #0]
 80082dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	e033      	b.n	8008350 <__swsetup_r+0x98>
 80082e8:	0758      	lsls	r0, r3, #29
 80082ea:	d512      	bpl.n	8008312 <__swsetup_r+0x5a>
 80082ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082ee:	b141      	cbz	r1, 8008302 <__swsetup_r+0x4a>
 80082f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082f4:	4299      	cmp	r1, r3
 80082f6:	d002      	beq.n	80082fe <__swsetup_r+0x46>
 80082f8:	4628      	mov	r0, r5
 80082fa:	f7fd fc15 	bl	8005b28 <_free_r>
 80082fe:	2300      	movs	r3, #0
 8008300:	6363      	str	r3, [r4, #52]	@ 0x34
 8008302:	89a3      	ldrh	r3, [r4, #12]
 8008304:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008308:	81a3      	strh	r3, [r4, #12]
 800830a:	2300      	movs	r3, #0
 800830c:	6063      	str	r3, [r4, #4]
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f043 0308 	orr.w	r3, r3, #8
 8008318:	81a3      	strh	r3, [r4, #12]
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	b94b      	cbnz	r3, 8008332 <__swsetup_r+0x7a>
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008328:	d003      	beq.n	8008332 <__swsetup_r+0x7a>
 800832a:	4621      	mov	r1, r4
 800832c:	4628      	mov	r0, r5
 800832e:	f000 f882 	bl	8008436 <__smakebuf_r>
 8008332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008336:	f013 0201 	ands.w	r2, r3, #1
 800833a:	d00a      	beq.n	8008352 <__swsetup_r+0x9a>
 800833c:	2200      	movs	r2, #0
 800833e:	60a2      	str	r2, [r4, #8]
 8008340:	6962      	ldr	r2, [r4, #20]
 8008342:	4252      	negs	r2, r2
 8008344:	61a2      	str	r2, [r4, #24]
 8008346:	6922      	ldr	r2, [r4, #16]
 8008348:	b942      	cbnz	r2, 800835c <__swsetup_r+0xa4>
 800834a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800834e:	d1c5      	bne.n	80082dc <__swsetup_r+0x24>
 8008350:	bd38      	pop	{r3, r4, r5, pc}
 8008352:	0799      	lsls	r1, r3, #30
 8008354:	bf58      	it	pl
 8008356:	6962      	ldrpl	r2, [r4, #20]
 8008358:	60a2      	str	r2, [r4, #8]
 800835a:	e7f4      	b.n	8008346 <__swsetup_r+0x8e>
 800835c:	2000      	movs	r0, #0
 800835e:	e7f7      	b.n	8008350 <__swsetup_r+0x98>
 8008360:	2000001c 	.word	0x2000001c

08008364 <_raise_r>:
 8008364:	291f      	cmp	r1, #31
 8008366:	b538      	push	{r3, r4, r5, lr}
 8008368:	4605      	mov	r5, r0
 800836a:	460c      	mov	r4, r1
 800836c:	d904      	bls.n	8008378 <_raise_r+0x14>
 800836e:	2316      	movs	r3, #22
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	f04f 30ff 	mov.w	r0, #4294967295
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800837a:	b112      	cbz	r2, 8008382 <_raise_r+0x1e>
 800837c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008380:	b94b      	cbnz	r3, 8008396 <_raise_r+0x32>
 8008382:	4628      	mov	r0, r5
 8008384:	f000 f830 	bl	80083e8 <_getpid_r>
 8008388:	4622      	mov	r2, r4
 800838a:	4601      	mov	r1, r0
 800838c:	4628      	mov	r0, r5
 800838e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008392:	f000 b817 	b.w	80083c4 <_kill_r>
 8008396:	2b01      	cmp	r3, #1
 8008398:	d00a      	beq.n	80083b0 <_raise_r+0x4c>
 800839a:	1c59      	adds	r1, r3, #1
 800839c:	d103      	bne.n	80083a6 <_raise_r+0x42>
 800839e:	2316      	movs	r3, #22
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	2001      	movs	r0, #1
 80083a4:	e7e7      	b.n	8008376 <_raise_r+0x12>
 80083a6:	2100      	movs	r1, #0
 80083a8:	4620      	mov	r0, r4
 80083aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80083ae:	4798      	blx	r3
 80083b0:	2000      	movs	r0, #0
 80083b2:	e7e0      	b.n	8008376 <_raise_r+0x12>

080083b4 <raise>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	@ (80083c0 <raise+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f7ff bfd3 	b.w	8008364 <_raise_r>
 80083be:	bf00      	nop
 80083c0:	2000001c 	.word	0x2000001c

080083c4 <_kill_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	2300      	movs	r3, #0
 80083c8:	4d06      	ldr	r5, [pc, #24]	@ (80083e4 <_kill_r+0x20>)
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	f7f9 fc08 	bl	8001be6 <_kill>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d102      	bne.n	80083e0 <_kill_r+0x1c>
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b103      	cbz	r3, 80083e0 <_kill_r+0x1c>
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
 80083e2:	bf00      	nop
 80083e4:	200003dc 	.word	0x200003dc

080083e8 <_getpid_r>:
 80083e8:	f7f9 bbf6 	b.w	8001bd8 <_getpid>

080083ec <__swhatbuf_r>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	4615      	mov	r5, r2
 80083f6:	2900      	cmp	r1, #0
 80083f8:	461e      	mov	r6, r3
 80083fa:	b096      	sub	sp, #88	@ 0x58
 80083fc:	da0c      	bge.n	8008418 <__swhatbuf_r+0x2c>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	2100      	movs	r1, #0
 8008402:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008406:	bf14      	ite	ne
 8008408:	2340      	movne	r3, #64	@ 0x40
 800840a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800840e:	2000      	movs	r0, #0
 8008410:	6031      	str	r1, [r6, #0]
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	b016      	add	sp, #88	@ 0x58
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	466a      	mov	r2, sp
 800841a:	f000 f849 	bl	80084b0 <_fstat_r>
 800841e:	2800      	cmp	r0, #0
 8008420:	dbed      	blt.n	80083fe <__swhatbuf_r+0x12>
 8008422:	9901      	ldr	r1, [sp, #4]
 8008424:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008428:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800842c:	4259      	negs	r1, r3
 800842e:	4159      	adcs	r1, r3
 8008430:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008434:	e7eb      	b.n	800840e <__swhatbuf_r+0x22>

08008436 <__smakebuf_r>:
 8008436:	898b      	ldrh	r3, [r1, #12]
 8008438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800843a:	079d      	lsls	r5, r3, #30
 800843c:	4606      	mov	r6, r0
 800843e:	460c      	mov	r4, r1
 8008440:	d507      	bpl.n	8008452 <__smakebuf_r+0x1c>
 8008442:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	2301      	movs	r3, #1
 800844c:	6163      	str	r3, [r4, #20]
 800844e:	b003      	add	sp, #12
 8008450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008452:	466a      	mov	r2, sp
 8008454:	ab01      	add	r3, sp, #4
 8008456:	f7ff ffc9 	bl	80083ec <__swhatbuf_r>
 800845a:	9f00      	ldr	r7, [sp, #0]
 800845c:	4605      	mov	r5, r0
 800845e:	4639      	mov	r1, r7
 8008460:	4630      	mov	r0, r6
 8008462:	f7fd fbd3 	bl	8005c0c <_malloc_r>
 8008466:	b948      	cbnz	r0, 800847c <__smakebuf_r+0x46>
 8008468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846c:	059a      	lsls	r2, r3, #22
 800846e:	d4ee      	bmi.n	800844e <__smakebuf_r+0x18>
 8008470:	f023 0303 	bic.w	r3, r3, #3
 8008474:	f043 0302 	orr.w	r3, r3, #2
 8008478:	81a3      	strh	r3, [r4, #12]
 800847a:	e7e2      	b.n	8008442 <__smakebuf_r+0xc>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	9b01      	ldr	r3, [sp, #4]
 800848a:	6020      	str	r0, [r4, #0]
 800848c:	b15b      	cbz	r3, 80084a6 <__smakebuf_r+0x70>
 800848e:	4630      	mov	r0, r6
 8008490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008494:	f000 f81e 	bl	80084d4 <_isatty_r>
 8008498:	b128      	cbz	r0, 80084a6 <__smakebuf_r+0x70>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	f023 0303 	bic.w	r3, r3, #3
 80084a0:	f043 0301 	orr.w	r3, r3, #1
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	431d      	orrs	r5, r3
 80084aa:	81a5      	strh	r5, [r4, #12]
 80084ac:	e7cf      	b.n	800844e <__smakebuf_r+0x18>
	...

080084b0 <_fstat_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	2300      	movs	r3, #0
 80084b4:	4d06      	ldr	r5, [pc, #24]	@ (80084d0 <_fstat_r+0x20>)
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f9 fbf1 	bl	8001ca4 <_fstat>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_fstat_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_fstat_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	200003dc 	.word	0x200003dc

080084d4 <_isatty_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	2300      	movs	r3, #0
 80084d8:	4d05      	ldr	r5, [pc, #20]	@ (80084f0 <_isatty_r+0x1c>)
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f9 fbef 	bl	8001cc2 <_isatty>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_isatty_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_isatty_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	200003dc 	.word	0x200003dc

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
