
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007204  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007318  08007318  00008318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a8  080077a8  000091e4  2**0
                  CONTENTS
  4 .ARM          00000008  080077a8  080077a8  000087a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b0  080077b0  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b0  080077b0  000087b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077b4  080077b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080077b8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001e4  0800799c  000091e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800799c  000093ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007444  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a2  00000000  00000000  00010651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00011df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000632  00000000  00000000  00012640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b46  00000000  00000000  00012c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5fb  00000000  00000000  0002a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084487  00000000  00000000  00034db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b923a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  000b9280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000bc88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080072fc 	.word	0x080072fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080072fc 	.word	0x080072fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4a13      	ldr	r2, [pc, #76]	@ (8000c34 <I2C_LCD_ExpanderWrite+0x60>)
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	785a      	ldrb	r2, [r3, #1]
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	490f      	ldr	r1, [pc, #60]	@ (8000c38 <I2C_LCD_ExpanderWrite+0x64>)
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	440b      	add	r3, r1
 8000c04:	3304      	adds	r3, #4
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	79fa      	ldrb	r2, [r7, #7]
 8000c0a:	490b      	ldr	r1, [pc, #44]	@ (8000c38 <I2C_LCD_ExpanderWrite+0x64>)
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	4413      	add	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	3308      	adds	r3, #8
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	b299      	uxth	r1, r3
 8000c1e:	f107 020f 	add.w	r2, r7, #15
 8000c22:	2364      	movs	r3, #100	@ 0x64
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	f001 f884 	bl	8001d34 <HAL_I2C_Master_Transmit>
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000200 	.word	0x20000200
 8000c38:	08007344 	.word	0x08007344

08000c3c <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ffbb 	bl	8000bd4 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000c5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <I2C_LCD_EnPulse+0xac>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <I2C_LCD_EnPulse+0xb0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a21      	ldr	r2, [pc, #132]	@ (8000cf0 <I2C_LCD_EnPulse+0xb4>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	0c9b      	lsrs	r3, r3, #18
 8000c70:	005a      	lsls	r2, r3, #1
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <I2C_LCD_EnPulse+0xb0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	491e      	ldr	r1, [pc, #120]	@ (8000cf0 <I2C_LCD_EnPulse+0xb4>)
 8000c78:	fba1 1303 	umull	r1, r3, r1, r3
 8000c7c:	0c9b      	lsrs	r3, r3, #18
 8000c7e:	085b      	lsrs	r3, r3, #1
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <I2C_LCD_EnPulse+0xac>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d8f8      	bhi.n	8000c84 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	f023 0304 	bic.w	r3, r3, #4
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff ff98 	bl	8000bd4 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <I2C_LCD_EnPulse+0xac>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <I2C_LCD_EnPulse+0xb0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a10      	ldr	r2, [pc, #64]	@ (8000cf0 <I2C_LCD_EnPulse+0xb4>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	0c9b      	lsrs	r3, r3, #18
 8000cb6:	2232      	movs	r2, #50	@ 0x32
 8000cb8:	fb03 f202 	mul.w	r2, r3, r2
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <I2C_LCD_EnPulse+0xb0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	490b      	ldr	r1, [pc, #44]	@ (8000cf0 <I2C_LCD_EnPulse+0xb4>)
 8000cc2:	fba1 1303 	umull	r1, r3, r1, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	085b      	lsrs	r3, r3, #1
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <I2C_LCD_EnPulse+0xac>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f8      	bhi.n	8000cce <I2C_LCD_EnPulse+0x92>
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010
 8000cec:	20000010 	.word	0x20000010
 8000cf0:	431bde83 	.word	0x431bde83

08000cf4 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8000d04:	79ba      	ldrb	r2, [r7, #6]
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff62 	bl	8000bd4 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ff90 	bl	8000c3c <I2C_LCD_EnPulse>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	4613      	mov	r3, r2
 8000d34:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	f023 030f 	bic.w	r3, r3, #15
 8000d3c:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	797b      	ldrb	r3, [r7, #5]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ffcf 	bl	8000cf4 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8000d56:	7bba      	ldrb	r2, [r7, #14]
 8000d58:	797b      	ldrb	r3, [r7, #5]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ffc6 	bl	8000cf4 <I2C_LCD_Write4Bits>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	460a      	mov	r2, r1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8000d80:	79b9      	ldrb	r1, [r7, #6]
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2200      	movs	r2, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ffcc 	bl	8000d24 <I2C_LCD_Send>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8000da4:	79b9      	ldrb	r1, [r7, #6]
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ffba 	bl	8000d24 <I2C_LCD_Send>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8000dc2:	bf00      	nop
 8000dc4:	f000 fc00 	bl	80015c8 <HAL_GetTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b31      	cmp	r3, #49	@ 0x31
 8000dcc:	d9fa      	bls.n	8000dc4 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2130      	movs	r1, #48	@ 0x30
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ffcc 	bl	8000d70 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ddc:	e01f      	b.n	8000e1e <I2C_LCD_Init+0x66>
 8000dde:	4b4b      	ldr	r3, [pc, #300]	@ (8000f0c <I2C_LCD_Init+0x154>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f10 <I2C_LCD_Init+0x158>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	@ (8000f14 <I2C_LCD_Init+0x15c>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0c9b      	lsrs	r3, r3, #18
 8000df0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000df4:	fb03 f202 	mul.w	r2, r3, r2
 8000df8:	4b45      	ldr	r3, [pc, #276]	@ (8000f10 <I2C_LCD_Init+0x158>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4945      	ldr	r1, [pc, #276]	@ (8000f14 <I2C_LCD_Init+0x15c>)
 8000dfe:	fba1 1303 	umull	r1, r3, r1, r3
 8000e02:	0c9b      	lsrs	r3, r3, #18
 8000e04:	085b      	lsrs	r3, r3, #1
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <I2C_LCD_Init+0x154>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f8      	bhi.n	8000e0a <I2C_LCD_Init+0x52>
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d9dc      	bls.n	8000dde <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2130      	movs	r1, #48	@ 0x30
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ffa1 	bl	8000d70 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
 8000e32:	e01f      	b.n	8000e74 <I2C_LCD_Init+0xbc>
 8000e34:	4b35      	ldr	r3, [pc, #212]	@ (8000f0c <I2C_LCD_Init+0x154>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	4b35      	ldr	r3, [pc, #212]	@ (8000f10 <I2C_LCD_Init+0x158>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a35      	ldr	r2, [pc, #212]	@ (8000f14 <I2C_LCD_Init+0x15c>)
 8000e40:	fba2 2303 	umull	r2, r3, r2, r3
 8000e44:	0c9b      	lsrs	r3, r3, #18
 8000e46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e4a:	fb03 f202 	mul.w	r2, r3, r2
 8000e4e:	4b30      	ldr	r3, [pc, #192]	@ (8000f10 <I2C_LCD_Init+0x158>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4930      	ldr	r1, [pc, #192]	@ (8000f14 <I2C_LCD_Init+0x15c>)
 8000e54:	fba1 1303 	umull	r1, r3, r1, r3
 8000e58:	0c9b      	lsrs	r3, r3, #18
 8000e5a:	085b      	lsrs	r3, r3, #1
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <I2C_LCD_Init+0x154>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d8f8      	bhi.n	8000e60 <I2C_LCD_Init+0xa8>
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	3301      	adds	r3, #1
 8000e72:	623b      	str	r3, [r7, #32]
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d9dc      	bls.n	8000e34 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2130      	movs	r1, #48	@ 0x30
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff76 	bl	8000d70 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8000e84:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <I2C_LCD_Init+0x154>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <I2C_LCD_Init+0x158>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <I2C_LCD_Init+0x15c>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	0c9b      	lsrs	r3, r3, #18
 8000e96:	2296      	movs	r2, #150	@ 0x96
 8000e98:	fb03 f202 	mul.w	r2, r3, r2
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <I2C_LCD_Init+0x158>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	491c      	ldr	r1, [pc, #112]	@ (8000f14 <I2C_LCD_Init+0x15c>)
 8000ea2:	fba1 1303 	umull	r1, r3, r1, r3
 8000ea6:	0c9b      	lsrs	r3, r3, #18
 8000ea8:	085b      	lsrs	r3, r3, #1
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <I2C_LCD_Init+0x154>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f8      	bhi.n	8000eae <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff55 	bl	8000d70 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2128      	movs	r1, #40	@ 0x28
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff50 	bl	8000d70 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	210c      	movs	r1, #12
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff4b 	bl	8000d70 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2106      	movs	r1, #6
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff46 	bl	8000d70 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <I2C_LCD_Init+0x160>)
 8000ee8:	2104      	movs	r1, #4
 8000eea:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <I2C_LCD_Init+0x160>)
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f80d 	bl	8000f1c <I2C_LCD_Clear>
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	@ 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010
 8000f10:	20000010 	.word	0x20000010
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	20000200 	.word	0x20000200

08000f1c <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff ff20 	bl	8000d70 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e01f      	b.n	8000f76 <I2C_LCD_Clear+0x5a>
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <I2C_LCD_Clear+0x6c>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <I2C_LCD_Clear+0x70>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a13      	ldr	r2, [pc, #76]	@ (8000f90 <I2C_LCD_Clear+0x74>)
 8000f42:	fba2 2303 	umull	r2, r3, r2, r3
 8000f46:	0c9b      	lsrs	r3, r3, #18
 8000f48:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f4c:	fb03 f202 	mul.w	r2, r3, r2
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <I2C_LCD_Clear+0x70>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	490e      	ldr	r1, [pc, #56]	@ (8000f90 <I2C_LCD_Clear+0x74>)
 8000f56:	fba1 1303 	umull	r1, r3, r1, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	085b      	lsrs	r3, r3, #1
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <I2C_LCD_Clear+0x6c>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f8      	bhi.n	8000f62 <I2C_LCD_Clear+0x46>
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d9dc      	bls.n	8000f36 <I2C_LCD_Clear+0x1a>
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010
 8000f8c:	20000010 	.word	0x20000010
 8000f90:	431bde83 	.word	0x431bde83

08000f94 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <I2C_LCD_SetCursor+0x7c>)
 8000fa8:	f107 0408 	add.w	r4, r7, #8
 8000fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	4917      	ldr	r1, [pc, #92]	@ (8001014 <I2C_LCD_SetCursor+0x80>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	330a      	adds	r3, #10
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	797a      	ldrb	r2, [r7, #5]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d90a      	bls.n	8000fe0 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	4911      	ldr	r1, [pc, #68]	@ (8001014 <I2C_LCD_SetCursor+0x80>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	330a      	adds	r3, #10
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8000fe0:	797b      	ldrb	r3, [r7, #5]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	3318      	adds	r3, #24
 8000fe6:	443b      	add	r3, r7
 8000fe8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff feb4 	bl	8000d70 <I2C_LCD_Cmd>
}
 8001008:	bf00      	nop
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd90      	pop	{r4, r7, pc}
 8001010:	08007318 	.word	0x08007318
 8001014:	08007344 	.word	0x08007344

08001018 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8001024:	e008      	b.n	8001038 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	603a      	str	r2, [r7, #0]
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff feae 	bl	8000d94 <I2C_LCD_Data>
    while (*Str)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f2      	bne.n	8001026 <I2C_LCD_WriteString+0xe>
    }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b092      	sub	sp, #72	@ 0x48
 8001050:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f000 fa61 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f843 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 f8ab 	bl	80011b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800105e:	f000 f87b 	bl	8001158 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  char buf[64];
  I2C_LCD_Init(MyI2C_LCD);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fea8 	bl	8000db8 <I2C_LCD_Init>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff ff91 	bl	8000f94 <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "Start...");
 8001072:	4917      	ldr	r1, [pc, #92]	@ (80010d0 <main+0x84>)
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ffcf 	bl	8001018 <I2C_LCD_WriteString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  snprintf(buf,64,"Value 1: %.2lf\n",value1);
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <main+0x88>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	4638      	mov	r0, r7
 8001082:	e9cd 2300 	strd	r2, r3, [sp]
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <main+0x8c>)
 8001088:	2140      	movs	r1, #64	@ 0x40
 800108a:	f002 fcd5 	bl	8003a38 <sniprintf>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff ff7e 	bl	8000f94 <I2C_LCD_SetCursor>
	  I2C_LCD_WriteString(MyI2C_LCD, buf);
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ffbb 	bl	8001018 <I2C_LCD_WriteString>
	  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ff74 	bl	8000f94 <I2C_LCD_SetCursor>
	  snprintf(buf,64,"Value 1: %.2lf\n",value2);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <main+0x90>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	4638      	mov	r0, r7
 80010b4:	e9cd 2300 	strd	r2, r3, [sp]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <main+0x8c>)
 80010ba:	2140      	movs	r1, #64	@ 0x40
 80010bc:	f002 fcbc 	bl	8003a38 <sniprintf>
	  I2C_LCD_WriteString(MyI2C_LCD, buf);
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ffa7 	bl	8001018 <I2C_LCD_WriteString>
  {
 80010ca:	bf00      	nop
 80010cc:	e7d5      	b.n	800107a <main+0x2e>
 80010ce:	bf00      	nop
 80010d0:	08007328 	.word	0x08007328
 80010d4:	20000000 	.word	0x20000000
 80010d8:	08007334 	.word	0x08007334
 80010dc:	20000008 	.word	0x20000008

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b090      	sub	sp, #64	@ 0x40
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0318 	add.w	r3, r7, #24
 80010ea:	2228      	movs	r2, #40	@ 0x28
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 fd39 	bl	8003b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	2310      	movs	r3, #16
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f107 0318 	add.w	r3, r7, #24
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f964 	bl	80023e4 <HAL_RCC_OscConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001122:	f000 f869 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	230f      	movs	r3, #15
 8001128:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fbd2 	bl	80028e8 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800114a:	f000 f855 	bl	80011f8 <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3740      	adds	r7, #64	@ 0x40
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <MX_I2C1_Init+0x54>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001164:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <MX_I2C1_Init+0x58>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001176:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800117a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_I2C1_Init+0x50>)
 8001196:	f000 fc89 	bl	8001aac <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f000 f82a 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000204 	.word	0x20000204
 80011ac:	40005400 	.word	0x40005400
 80011b0:	000186a0 	.word	0x000186a0

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_GPIO_Init+0x40>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <MX_GPIO_Init+0x40>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_GPIO_Init+0x40>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_GPIO_Init+0x40>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <MX_GPIO_Init+0x40>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <MX_GPIO_Init+0x40>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <HAL_MspInit+0x5c>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <HAL_MspInit+0x5c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_MspInit+0x60>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_MspInit+0x60>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000

08001268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a15      	ldr	r2, [pc, #84]	@ (80012d8 <HAL_I2C_MspInit+0x70>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d123      	bne.n	80012d0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <HAL_I2C_MspInit+0x74>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <HAL_I2C_MspInit+0x74>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_I2C_MspInit+0x74>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a0:	23c0      	movs	r3, #192	@ 0xc0
 80012a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 0310 	add.w	r3, r7, #16
 80012b0:	4619      	mov	r1, r3
 80012b2:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <HAL_I2C_MspInit+0x78>)
 80012b4:	f000 fa76 	bl	80017a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_I2C_MspInit+0x74>)
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_I2C_MspInit+0x74>)
 80012be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c2:	61d3      	str	r3, [r2, #28]
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_I2C_MspInit+0x74>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40005400 	.word	0x40005400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <NMI_Handler+0x4>

080012ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <MemManage_Handler+0x4>

080012fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <UsageFault_Handler+0x4>

0800130c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f936 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return 1;
 8001340:	2301      	movs	r3, #1
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <_kill>:

int _kill(int pid, int sig)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001354:	f002 fc5a 	bl	8003c0c <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	2216      	movs	r2, #22
 800135c:	601a      	str	r2, [r3, #0]
  return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_exit>:

void _exit (int status)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001372:	f04f 31ff 	mov.w	r1, #4294967295
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffe7 	bl	800134a <_kill>
  while (1) {}    /* Make sure we hang here */
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <_exit+0x12>

08001380 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e00a      	b.n	80013a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001392:	f3af 8000 	nop.w
 8001396:	4601      	mov	r1, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	60ba      	str	r2, [r7, #8]
 800139e:	b2ca      	uxtb	r2, r1
 80013a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf0      	blt.n	8001392 <_read+0x12>
  }

  return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e009      	b.n	80013e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf1      	blt.n	80013cc <_write+0x12>
  }
  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001418:	605a      	str	r2, [r3, #4]
  return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <_isatty>:

int _isatty(int file)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
	...

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f002 fbc2 	bl	8003c0c <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20005000 	.word	0x20005000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	20000258 	.word	0x20000258
 80014bc:	200003b0 	.word	0x200003b0

080014c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff fff8 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014d2:	490c      	ldr	r1, [pc, #48]	@ (8001504 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001508 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014e8:	4c09      	ldr	r4, [pc, #36]	@ (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f002 fb8f 	bl	8003c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff fda7 	bl	800104c <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001508:	080077b8 	.word	0x080077b8
  ldr r2, =_sbss
 800150c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001510:	200003ac 	.word	0x200003ac

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <HAL_Init+0x28>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <HAL_Init+0x28>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f907 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fe66 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f911 	bl	800178a <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 f8e7 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	@ (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000010 	.word	0x20000010
 800159c:	20000018 	.word	0x20000018
 80015a0:	20000014 	.word	0x20000014

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a03      	ldr	r2, [pc, #12]	@ (80015c4 <HAL_IncTick+0x20>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000018 	.word	0x20000018
 80015c4:	2000025c 	.word	0x2000025c

080015c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	@ (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	2000025c 	.word	0x2000025c

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
         );
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff90 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff49 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff5e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffb0 	bl	80016f8 <SysTick_Config>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b08b      	sub	sp, #44	@ 0x2c
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b6:	e169      	b.n	8001a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b8:	2201      	movs	r2, #1
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	f040 8158 	bne.w	8001a86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a9a      	ldr	r2, [pc, #616]	@ (8001a44 <HAL_GPIO_Init+0x2a0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d05e      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017e0:	4a98      	ldr	r2, [pc, #608]	@ (8001a44 <HAL_GPIO_Init+0x2a0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d875      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017e6:	4a98      	ldr	r2, [pc, #608]	@ (8001a48 <HAL_GPIO_Init+0x2a4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d058      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017ec:	4a96      	ldr	r2, [pc, #600]	@ (8001a48 <HAL_GPIO_Init+0x2a4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d86f      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017f2:	4a96      	ldr	r2, [pc, #600]	@ (8001a4c <HAL_GPIO_Init+0x2a8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d052      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 80017f8:	4a94      	ldr	r2, [pc, #592]	@ (8001a4c <HAL_GPIO_Init+0x2a8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d869      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 80017fe:	4a94      	ldr	r2, [pc, #592]	@ (8001a50 <HAL_GPIO_Init+0x2ac>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d04c      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 8001804:	4a92      	ldr	r2, [pc, #584]	@ (8001a50 <HAL_GPIO_Init+0x2ac>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d863      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 800180a:	4a92      	ldr	r2, [pc, #584]	@ (8001a54 <HAL_GPIO_Init+0x2b0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d046      	beq.n	800189e <HAL_GPIO_Init+0xfa>
 8001810:	4a90      	ldr	r2, [pc, #576]	@ (8001a54 <HAL_GPIO_Init+0x2b0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d85d      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d82a      	bhi.n	8001870 <HAL_GPIO_Init+0xcc>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d859      	bhi.n	80018d2 <HAL_GPIO_Init+0x12e>
 800181e:	a201      	add	r2, pc, #4	@ (adr r2, 8001824 <HAL_GPIO_Init+0x80>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	0800189f 	.word	0x0800189f
 8001828:	08001879 	.word	0x08001879
 800182c:	0800188b 	.word	0x0800188b
 8001830:	080018cd 	.word	0x080018cd
 8001834:	080018d3 	.word	0x080018d3
 8001838:	080018d3 	.word	0x080018d3
 800183c:	080018d3 	.word	0x080018d3
 8001840:	080018d3 	.word	0x080018d3
 8001844:	080018d3 	.word	0x080018d3
 8001848:	080018d3 	.word	0x080018d3
 800184c:	080018d3 	.word	0x080018d3
 8001850:	080018d3 	.word	0x080018d3
 8001854:	080018d3 	.word	0x080018d3
 8001858:	080018d3 	.word	0x080018d3
 800185c:	080018d3 	.word	0x080018d3
 8001860:	080018d3 	.word	0x080018d3
 8001864:	080018d3 	.word	0x080018d3
 8001868:	08001881 	.word	0x08001881
 800186c:	08001895 	.word	0x08001895
 8001870:	4a79      	ldr	r2, [pc, #484]	@ (8001a58 <HAL_GPIO_Init+0x2b4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001876:	e02c      	b.n	80018d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e029      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	3304      	adds	r3, #4
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e024      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	3308      	adds	r3, #8
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e01f      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	330c      	adds	r3, #12
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e01a      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018a6:	2304      	movs	r3, #4
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e013      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d105      	bne.n	80018c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	611a      	str	r2, [r3, #16]
          break;
 80018be:	e009      	b.n	80018d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c0:	2308      	movs	r3, #8
 80018c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	615a      	str	r2, [r3, #20]
          break;
 80018ca:	e003      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
          break;
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x130>
          break;
 80018d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2bff      	cmp	r3, #255	@ 0xff
 80018d8:	d801      	bhi.n	80018de <HAL_GPIO_Init+0x13a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	e001      	b.n	80018e2 <HAL_GPIO_Init+0x13e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3304      	adds	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2bff      	cmp	r3, #255	@ 0xff
 80018e8:	d802      	bhi.n	80018f0 <HAL_GPIO_Init+0x14c>
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x152>
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	3b08      	subs	r3, #8
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	210f      	movs	r1, #15
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	401a      	ands	r2, r3
 8001908:	6a39      	ldr	r1, [r7, #32]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80b1 	beq.w	8001a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001924:	4b4d      	ldr	r3, [pc, #308]	@ (8001a5c <HAL_GPIO_Init+0x2b8>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a4c      	ldr	r2, [pc, #304]	@ (8001a5c <HAL_GPIO_Init+0x2b8>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <HAL_GPIO_Init+0x2b8>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800193c:	4a48      	ldr	r2, [pc, #288]	@ (8001a60 <HAL_GPIO_Init+0x2bc>)
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a40      	ldr	r2, [pc, #256]	@ (8001a64 <HAL_GPIO_Init+0x2c0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_GPIO_Init+0x1ec>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a68 <HAL_GPIO_Init+0x2c4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1e8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3e      	ldr	r2, [pc, #248]	@ (8001a6c <HAL_GPIO_Init+0x2c8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1e4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a70 <HAL_GPIO_Init+0x2cc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1e0>
 8001980:	2303      	movs	r3, #3
 8001982:	e006      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 8001984:	2304      	movs	r3, #4
 8001986:	e004      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 8001988:	2302      	movs	r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_GPIO_Init+0x1ee>
 8001990:	2300      	movs	r3, #0
 8001992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a2:	492f      	ldr	r1, [pc, #188]	@ (8001a60 <HAL_GPIO_Init+0x2bc>)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	492c      	ldr	r1, [pc, #176]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	4922      	ldr	r1, [pc, #136]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60cb      	str	r3, [r1, #12]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f2:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	491e      	ldr	r1, [pc, #120]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4918      	ldr	r1, [pc, #96]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1a:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4914      	ldr	r1, [pc, #80]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d021      	beq.n	8001a78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a34:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	490e      	ldr	r1, [pc, #56]	@ (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e021      	b.n	8001a86 <HAL_GPIO_Init+0x2e2>
 8001a42:	bf00      	nop
 8001a44:	10320000 	.word	0x10320000
 8001a48:	10310000 	.word	0x10310000
 8001a4c:	10220000 	.word	0x10220000
 8001a50:	10210000 	.word	0x10210000
 8001a54:	10120000 	.word	0x10120000
 8001a58:	10110000 	.word	0x10110000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	40011400 	.word	0x40011400
 8001a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_GPIO_Init+0x304>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4909      	ldr	r1, [pc, #36]	@ (8001aa8 <HAL_GPIO_Init+0x304>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	3301      	adds	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f47f ae8e 	bne.w	80017b8 <HAL_GPIO_Init+0x14>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	372c      	adds	r7, #44	@ 0x2c
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e12b      	b.n	8001d16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fbc8 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2224      	movs	r2, #36	@ 0x24
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0201 	bic.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001afe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b10:	f001 f832 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8001b14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4a81      	ldr	r2, [pc, #516]	@ (8001d20 <HAL_I2C_Init+0x274>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d807      	bhi.n	8001b30 <HAL_I2C_Init+0x84>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a80      	ldr	r2, [pc, #512]	@ (8001d24 <HAL_I2C_Init+0x278>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	bf94      	ite	ls
 8001b28:	2301      	movls	r3, #1
 8001b2a:	2300      	movhi	r3, #0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	e006      	b.n	8001b3e <HAL_I2C_Init+0x92>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a7d      	ldr	r2, [pc, #500]	@ (8001d28 <HAL_I2C_Init+0x27c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	bf94      	ite	ls
 8001b38:	2301      	movls	r3, #1
 8001b3a:	2300      	movhi	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0e7      	b.n	8001d16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4a78      	ldr	r2, [pc, #480]	@ (8001d2c <HAL_I2C_Init+0x280>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0c9b      	lsrs	r3, r3, #18
 8001b50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a6a      	ldr	r2, [pc, #424]	@ (8001d20 <HAL_I2C_Init+0x274>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d802      	bhi.n	8001b80 <HAL_I2C_Init+0xd4>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	e009      	b.n	8001b94 <HAL_I2C_Init+0xe8>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a69      	ldr	r2, [pc, #420]	@ (8001d30 <HAL_I2C_Init+0x284>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	099b      	lsrs	r3, r3, #6
 8001b92:	3301      	adds	r3, #1
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ba6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	495c      	ldr	r1, [pc, #368]	@ (8001d20 <HAL_I2C_Init+0x274>)
 8001bb0:	428b      	cmp	r3, r1
 8001bb2:	d819      	bhi.n	8001be8 <HAL_I2C_Init+0x13c>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e59      	subs	r1, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bc8:	400b      	ands	r3, r1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <HAL_I2C_Init+0x138>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1e59      	subs	r1, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be2:	e051      	b.n	8001c88 <HAL_I2C_Init+0x1dc>
 8001be4:	2304      	movs	r3, #4
 8001be6:	e04f      	b.n	8001c88 <HAL_I2C_Init+0x1dc>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d111      	bne.n	8001c14 <HAL_I2C_Init+0x168>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1e58      	subs	r0, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e012      	b.n	8001c3a <HAL_I2C_Init+0x18e>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e58      	subs	r0, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	0099      	lsls	r1, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Init+0x196>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e022      	b.n	8001c88 <HAL_I2C_Init+0x1dc>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10e      	bne.n	8001c68 <HAL_I2C_Init+0x1bc>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1e58      	subs	r0, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	440b      	add	r3, r1
 8001c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c66:	e00f      	b.n	8001c88 <HAL_I2C_Init+0x1dc>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1e58      	subs	r0, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	0099      	lsls	r1, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	6809      	ldr	r1, [r1, #0]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001cb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6911      	ldr	r1, [r2, #16]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68d2      	ldr	r2, [r2, #12]
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	000186a0 	.word	0x000186a0
 8001d24:	001e847f 	.word	0x001e847f
 8001d28:	003d08ff 	.word	0x003d08ff
 8001d2c:	431bde83 	.word	0x431bde83
 8001d30:	10624dd3 	.word	0x10624dd3

08001d34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	460b      	mov	r3, r1
 8001d42:	817b      	strh	r3, [r7, #10]
 8001d44:	4613      	mov	r3, r2
 8001d46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff fc3e 	bl	80015c8 <HAL_GetTick>
 8001d4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	f040 80e0 	bne.w	8001f1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2319      	movs	r3, #25
 8001d62:	2201      	movs	r2, #1
 8001d64:	4970      	ldr	r1, [pc, #448]	@ (8001f28 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f964 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
 8001d74:	e0d3      	b.n	8001f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_I2C_Master_Transmit+0x50>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e0cc      	b.n	8001f1e <HAL_I2C_Master_Transmit+0x1ea>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d007      	beq.n	8001daa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001db8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2221      	movs	r2, #33	@ 0x21
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	893a      	ldrh	r2, [r7, #8]
 8001dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a50      	ldr	r2, [pc, #320]	@ (8001f2c <HAL_I2C_Master_Transmit+0x1f8>)
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dec:	8979      	ldrh	r1, [r7, #10]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f89c 	bl	8001f30 <I2C_MasterRequestWrite>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e08d      	b.n	8001f1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e18:	e066      	b.n	8001ee8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	6a39      	ldr	r1, [r7, #32]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fa22 	bl	8002268 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d107      	bne.n	8001e42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06b      	b.n	8001f1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d11b      	bne.n	8001ebc <HAL_I2C_Master_Transmit+0x188>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d017      	beq.n	8001ebc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	6a39      	ldr	r1, [r7, #32]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fa19 	bl	80022f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00d      	beq.n	8001ee8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d107      	bne.n	8001ee4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e01a      	b.n	8001f1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d194      	bne.n	8001e1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	00100002 	.word	0x00100002
 8001f2c:	ffff0000 	.word	0xffff0000

08001f30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d006      	beq.n	8001f5a <I2C_MasterRequestWrite+0x2a>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d003      	beq.n	8001f5a <I2C_MasterRequestWrite+0x2a>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f58:	d108      	bne.n	8001f6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e00b      	b.n	8001f84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d107      	bne.n	8001f84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f84f 	bl	8002034 <I2C_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00d      	beq.n	8001fb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001faa:	d103      	bne.n	8001fb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e035      	b.n	8002024 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fc0:	d108      	bne.n	8001fd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fc2:	897b      	ldrh	r3, [r7, #10]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	e01b      	b.n	800200c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	11db      	asrs	r3, r3, #7
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 0306 	and.w	r3, r3, #6
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f063 030f 	orn	r3, r3, #15
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	490e      	ldr	r1, [pc, #56]	@ (800202c <I2C_MasterRequestWrite+0xfc>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f898 	bl	8002128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e010      	b.n	8002024 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002002:	897b      	ldrh	r3, [r7, #10]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	4907      	ldr	r1, [pc, #28]	@ (8002030 <I2C_MasterRequestWrite+0x100>)
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f888 	bl	8002128 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	00010008 	.word	0x00010008
 8002030:	00010002 	.word	0x00010002

08002034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002044:	e048      	b.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d044      	beq.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204e:	f7ff fabb 	bl	80015c8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d139      	bne.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0c1b      	lsrs	r3, r3, #16
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10d      	bne.n	800208a <I2C_WaitOnFlagUntilTimeout+0x56>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	43da      	mvns	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4013      	ands	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	e00c      	b.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	43da      	mvns	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4013      	ands	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d116      	bne.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	f043 0220 	orr.w	r2, r3, #32
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e023      	b.n	8002120 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10d      	bne.n	80020fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	43da      	mvns	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4013      	ands	r3, r2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	e00c      	b.n	8002118 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	43da      	mvns	r2, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	4013      	ands	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d093      	beq.n	8002046 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002136:	e071      	b.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d123      	bne.n	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002156:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002160:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f043 0204 	orr.w	r2, r3, #4
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e067      	b.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d041      	beq.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002198:	f7ff fa16 	bl	80015c8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d302      	bcc.n	80021ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d136      	bne.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0c1b      	lsrs	r3, r3, #16
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10c      	bne.n	80021d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4013      	ands	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	e00b      	b.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	43da      	mvns	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	f043 0220 	orr.w	r2, r3, #32
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e021      	b.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10c      	bne.n	8002240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	43da      	mvns	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4013      	ands	r3, r2
 8002232:	b29b      	uxth	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e00b      	b.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4013      	ands	r3, r2
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	bf14      	ite	ne
 8002252:	2301      	movne	r3, #1
 8002254:	2300      	moveq	r3, #0
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f47f af6d 	bne.w	8002138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002274:	e034      	b.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f886 	bl	8002388 <I2C_IsAcknowledgeFailed>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e034      	b.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d028      	beq.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228e:	f7ff f99b 	bl	80015c8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	429a      	cmp	r2, r3
 800229c:	d302      	bcc.n	80022a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11d      	bne.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ae:	2b80      	cmp	r3, #128	@ 0x80
 80022b0:	d016      	beq.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ea:	2b80      	cmp	r3, #128	@ 0x80
 80022ec:	d1c3      	bne.n	8002276 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002304:	e034      	b.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f83e 	bl	8002388 <I2C_IsAcknowledgeFailed>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e034      	b.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d028      	beq.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231e:	f7ff f953 	bl	80015c8 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11d      	bne.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b04      	cmp	r3, #4
 8002340:	d016      	beq.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	f043 0220 	orr.w	r2, r3, #32
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e007      	b.n	8002380 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d1c3      	bne.n	8002306 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239e:	d11b      	bne.n	80023d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f043 0204 	orr.w	r2, r3, #4
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e272      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002404:	4b92      	ldr	r3, [pc, #584]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b04      	cmp	r3, #4
 800240e:	d00c      	beq.n	800242a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002410:	4b8f      	ldr	r3, [pc, #572]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d112      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
 800241c:	4b8c      	ldr	r3, [pc, #560]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d10b      	bne.n	8002442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	4b89      	ldr	r3, [pc, #548]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d06c      	beq.n	8002510 <HAL_RCC_OscConfig+0x12c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d168      	bne.n	8002510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e24c      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x76>
 800244c:	4b80      	ldr	r3, [pc, #512]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a7f      	ldr	r2, [pc, #508]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e02e      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b7b      	ldr	r3, [pc, #492]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7a      	ldr	r2, [pc, #488]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b78      	ldr	r3, [pc, #480]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a77      	ldr	r2, [pc, #476]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0xbc>
 8002486:	4b72      	ldr	r3, [pc, #456]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a71      	ldr	r2, [pc, #452]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b6f      	ldr	r3, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xd4>
 80024a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b68      	ldr	r3, [pc, #416]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a67      	ldr	r2, [pc, #412]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff f882 	bl	80015c8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7ff f87e 	bl	80015c8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e200      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe4>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff f86e 	bl	80015c8 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff f86a 	bl	80015c8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1ec      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x10c>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b4c      	ldr	r3, [pc, #304]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800252a:	4b49      	ldr	r3, [pc, #292]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
 8002536:	4b46      	ldr	r3, [pc, #280]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b43      	ldr	r3, [pc, #268]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1c0      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b3d      	ldr	r3, [pc, #244]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4939      	ldr	r1, [pc, #228]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e03a      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <HAL_RCC_OscConfig+0x270>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff f823 	bl	80015c8 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002586:	f7ff f81f 	bl	80015c8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1a1      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4927      	ldr	r1, [pc, #156]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ba:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <HAL_RCC_OscConfig+0x270>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff f802 	bl	80015c8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7fe fffe 	bl	80015c8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e180      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d03a      	beq.n	8002668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d019      	beq.n	800262e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fa:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <HAL_RCC_OscConfig+0x274>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002600:	f7fe ffe2 	bl	80015c8 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7fe ffde 	bl	80015c8 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e160      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <HAL_RCC_OscConfig+0x26c>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002626:	2001      	movs	r0, #1
 8002628:	f000 faba 	bl	8002ba0 <RCC_Delay>
 800262c:	e01c      	b.n	8002668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_RCC_OscConfig+0x274>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002634:	f7fe ffc8 	bl	80015c8 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263a:	e00f      	b.n	800265c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263c:	f7fe ffc4 	bl	80015c8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d908      	bls.n	800265c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e146      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	42420000 	.word	0x42420000
 8002658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b92      	ldr	r3, [pc, #584]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e9      	bne.n	800263c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a6 	beq.w	80027c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b8b      	ldr	r3, [pc, #556]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b88      	ldr	r3, [pc, #544]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a87      	ldr	r2, [pc, #540]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b82      	ldr	r3, [pc, #520]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ae:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7e      	ldr	r2, [pc, #504]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ba:	f7fe ff85 	bl	80015c8 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c2:	f7fe ff81 	bl	80015c8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	@ 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e103      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b75      	ldr	r3, [pc, #468]	@ (80028ac <HAL_RCC_OscConfig+0x4c8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x312>
 80026e8:	4b6f      	ldr	r3, [pc, #444]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a6e      	ldr	r2, [pc, #440]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e02d      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x334>
 80026fe:	4b6a      	ldr	r3, [pc, #424]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a69      	ldr	r2, [pc, #420]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	4b67      	ldr	r3, [pc, #412]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a66      	ldr	r2, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	e01c      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d10c      	bne.n	800273a <HAL_RCC_OscConfig+0x356>
 8002720:	4b61      	ldr	r3, [pc, #388]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a60      	ldr	r2, [pc, #384]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	4b5e      	ldr	r3, [pc, #376]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a5d      	ldr	r2, [pc, #372]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	e00b      	b.n	8002752 <HAL_RCC_OscConfig+0x36e>
 800273a:	4b5b      	ldr	r3, [pc, #364]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a5a      	ldr	r2, [pc, #360]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b58      	ldr	r3, [pc, #352]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a57      	ldr	r2, [pc, #348]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d015      	beq.n	8002786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe ff35 	bl	80015c8 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe ff31 	bl	80015c8 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e0b1      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b4b      	ldr	r3, [pc, #300]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCC_OscConfig+0x37e>
 8002784:	e014      	b.n	80027b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7fe ff1f 	bl	80015c8 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe ff1b 	bl	80015c8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e09b      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	4b40      	ldr	r3, [pc, #256]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ee      	bne.n	800278e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b3c      	ldr	r3, [pc, #240]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4a3b      	ldr	r2, [pc, #236]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8087 	beq.w	80028da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027cc:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d061      	beq.n	800289c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d146      	bne.n	800286e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b33      	ldr	r3, [pc, #204]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe feef 	bl	80015c8 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe feeb 	bl	80015c8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e06d      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002800:	4b29      	ldr	r3, [pc, #164]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	4921      	ldr	r1, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002828:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a19      	ldr	r1, [r3, #32]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	430b      	orrs	r3, r1
 800283a:	491b      	ldr	r1, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b1b      	ldr	r3, [pc, #108]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe febf 	bl	80015c8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7fe febb 	bl	80015c8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e03d      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x46a>
 800286c:	e035      	b.n	80028da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_RCC_OscConfig+0x4cc>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fea8 	bl	80015c8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fea4 	bl	80015c8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e026      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x498>
 800289a:	e01e      	b.n	80028da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e019      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40007000 	.word	0x40007000
 80028b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCC_OscConfig+0x500>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0d0      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b67      	ldr	r3, [pc, #412]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	4965      	ldr	r1, [pc, #404]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800294e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a52      	ldr	r2, [pc, #328]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002966:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d040      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d115      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b41      	ldr	r3, [pc, #260]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e073      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06b      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4936      	ldr	r1, [pc, #216]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7fe fdf6 	bl	80015c8 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7fe fdf2 	bl	80015c8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e053      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b27      	ldr	r3, [pc, #156]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d210      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4922      	ldr	r1, [pc, #136]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a62:	4b12      	ldr	r3, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fd54 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08007350 	.word	0x08007350
 8002ab4:	20000010 	.word	0x20000010
 8002ab8:	20000014 	.word	0x20000014

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x30>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aea:	e027      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aee:	613b      	str	r3, [r7, #16]
      break;
 8002af0:	e027      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0c9b      	lsrs	r3, r3, #18
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0c5b      	lsrs	r3, r3, #17
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b16:	5cd3      	ldrb	r3, [r2, r3]
 8002b18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1e:	fb03 f202 	mul.w	r2, r3, r2
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e004      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	613b      	str	r3, [r7, #16]
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b3e:	613b      	str	r3, [r7, #16]
      break;
 8002b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b42:	693b      	ldr	r3, [r7, #16]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	08007368 	.word	0x08007368
 8002b5c:	08007378 	.word	0x08007378
 8002b60:	003d0900 	.word	0x003d0900

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	20000010 	.word	0x20000010

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff2 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08007360 	.word	0x08007360

08002ba0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <RCC_Delay+0x34>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <RCC_Delay+0x38>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	0a5b      	lsrs	r3, r3, #9
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bbc:	bf00      	nop
  }
  while (Delay --);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	60fa      	str	r2, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <RCC_Delay+0x1c>
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	10624dd3 	.word	0x10624dd3

08002bdc <__cvt>:
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be2:	461d      	mov	r5, r3
 8002be4:	bfbb      	ittet	lt
 8002be6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002bea:	461d      	movlt	r5, r3
 8002bec:	2300      	movge	r3, #0
 8002bee:	232d      	movlt	r3, #45	@ 0x2d
 8002bf0:	b088      	sub	sp, #32
 8002bf2:	4614      	mov	r4, r2
 8002bf4:	bfb8      	it	lt
 8002bf6:	4614      	movlt	r4, r2
 8002bf8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002bfa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002bfc:	7013      	strb	r3, [r2, #0]
 8002bfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002c00:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002c04:	f023 0820 	bic.w	r8, r3, #32
 8002c08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002c0c:	d005      	beq.n	8002c1a <__cvt+0x3e>
 8002c0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002c12:	d100      	bne.n	8002c16 <__cvt+0x3a>
 8002c14:	3601      	adds	r6, #1
 8002c16:	2302      	movs	r3, #2
 8002c18:	e000      	b.n	8002c1c <__cvt+0x40>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	aa07      	add	r2, sp, #28
 8002c1e:	9204      	str	r2, [sp, #16]
 8002c20:	aa06      	add	r2, sp, #24
 8002c22:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002c26:	e9cd 3600 	strd	r3, r6, [sp]
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	f001 f8b7 	bl	8003da0 <_dtoa_r>
 8002c32:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002c36:	4607      	mov	r7, r0
 8002c38:	d119      	bne.n	8002c6e <__cvt+0x92>
 8002c3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002c3c:	07db      	lsls	r3, r3, #31
 8002c3e:	d50e      	bpl.n	8002c5e <__cvt+0x82>
 8002c40:	eb00 0906 	add.w	r9, r0, r6
 8002c44:	2200      	movs	r2, #0
 8002c46:	2300      	movs	r3, #0
 8002c48:	4620      	mov	r0, r4
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	f7fd feac 	bl	80009a8 <__aeabi_dcmpeq>
 8002c50:	b108      	cbz	r0, 8002c56 <__cvt+0x7a>
 8002c52:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c56:	2230      	movs	r2, #48	@ 0x30
 8002c58:	9b07      	ldr	r3, [sp, #28]
 8002c5a:	454b      	cmp	r3, r9
 8002c5c:	d31e      	bcc.n	8002c9c <__cvt+0xc0>
 8002c5e:	4638      	mov	r0, r7
 8002c60:	9b07      	ldr	r3, [sp, #28]
 8002c62:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002c64:	1bdb      	subs	r3, r3, r7
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	b008      	add	sp, #32
 8002c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002c72:	eb00 0906 	add.w	r9, r0, r6
 8002c76:	d1e5      	bne.n	8002c44 <__cvt+0x68>
 8002c78:	7803      	ldrb	r3, [r0, #0]
 8002c7a:	2b30      	cmp	r3, #48	@ 0x30
 8002c7c:	d10a      	bne.n	8002c94 <__cvt+0xb8>
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2300      	movs	r3, #0
 8002c82:	4620      	mov	r0, r4
 8002c84:	4629      	mov	r1, r5
 8002c86:	f7fd fe8f 	bl	80009a8 <__aeabi_dcmpeq>
 8002c8a:	b918      	cbnz	r0, 8002c94 <__cvt+0xb8>
 8002c8c:	f1c6 0601 	rsb	r6, r6, #1
 8002c90:	f8ca 6000 	str.w	r6, [sl]
 8002c94:	f8da 3000 	ldr.w	r3, [sl]
 8002c98:	4499      	add	r9, r3
 8002c9a:	e7d3      	b.n	8002c44 <__cvt+0x68>
 8002c9c:	1c59      	adds	r1, r3, #1
 8002c9e:	9107      	str	r1, [sp, #28]
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e7d9      	b.n	8002c58 <__cvt+0x7c>

08002ca4 <__exponent>:
 8002ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ca6:	2900      	cmp	r1, #0
 8002ca8:	bfb6      	itet	lt
 8002caa:	232d      	movlt	r3, #45	@ 0x2d
 8002cac:	232b      	movge	r3, #43	@ 0x2b
 8002cae:	4249      	neglt	r1, r1
 8002cb0:	2909      	cmp	r1, #9
 8002cb2:	7002      	strb	r2, [r0, #0]
 8002cb4:	7043      	strb	r3, [r0, #1]
 8002cb6:	dd29      	ble.n	8002d0c <__exponent+0x68>
 8002cb8:	f10d 0307 	add.w	r3, sp, #7
 8002cbc:	461d      	mov	r5, r3
 8002cbe:	270a      	movs	r7, #10
 8002cc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	fb07 1416 	mls	r4, r7, r6, r1
 8002cca:	3430      	adds	r4, #48	@ 0x30
 8002ccc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	2c63      	cmp	r4, #99	@ 0x63
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8002cda:	dcf1      	bgt.n	8002cc0 <__exponent+0x1c>
 8002cdc:	3130      	adds	r1, #48	@ 0x30
 8002cde:	1e94      	subs	r4, r2, #2
 8002ce0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	1c41      	adds	r1, r0, #1
 8002ce8:	42ab      	cmp	r3, r5
 8002cea:	d30a      	bcc.n	8002d02 <__exponent+0x5e>
 8002cec:	f10d 0309 	add.w	r3, sp, #9
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	42ac      	cmp	r4, r5
 8002cf4:	bf88      	it	hi
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	4403      	add	r3, r0
 8002cfc:	1a18      	subs	r0, r3, r0
 8002cfe:	b003      	add	sp, #12
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d02:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002d06:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002d0a:	e7ed      	b.n	8002ce8 <__exponent+0x44>
 8002d0c:	2330      	movs	r3, #48	@ 0x30
 8002d0e:	3130      	adds	r1, #48	@ 0x30
 8002d10:	7083      	strb	r3, [r0, #2]
 8002d12:	70c1      	strb	r1, [r0, #3]
 8002d14:	1d03      	adds	r3, r0, #4
 8002d16:	e7f1      	b.n	8002cfc <__exponent+0x58>

08002d18 <_printf_float>:
 8002d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d1c:	b091      	sub	sp, #68	@ 0x44
 8002d1e:	460c      	mov	r4, r1
 8002d20:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002d24:	4616      	mov	r6, r2
 8002d26:	461f      	mov	r7, r3
 8002d28:	4605      	mov	r5, r0
 8002d2a:	f000 ff25 	bl	8003b78 <_localeconv_r>
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	9308      	str	r3, [sp, #32]
 8002d34:	f7fd fa0c 	bl	8000150 <strlen>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	930e      	str	r3, [sp, #56]	@ 0x38
 8002d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d40:	9009      	str	r0, [sp, #36]	@ 0x24
 8002d42:	3307      	adds	r3, #7
 8002d44:	f023 0307 	bic.w	r3, r3, #7
 8002d48:	f103 0208 	add.w	r2, r3, #8
 8002d4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002d50:	f8d4 b000 	ldr.w	fp, [r4]
 8002d54:	f8c8 2000 	str.w	r2, [r8]
 8002d58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d62:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002d66:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002d6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002d72:	4b9c      	ldr	r3, [pc, #624]	@ (8002fe4 <_printf_float+0x2cc>)
 8002d74:	f7fd fe4a 	bl	8000a0c <__aeabi_dcmpun>
 8002d78:	bb70      	cbnz	r0, 8002dd8 <_printf_float+0xc0>
 8002d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d82:	4b98      	ldr	r3, [pc, #608]	@ (8002fe4 <_printf_float+0x2cc>)
 8002d84:	f7fd fe24 	bl	80009d0 <__aeabi_dcmple>
 8002d88:	bb30      	cbnz	r0, 8002dd8 <_printf_float+0xc0>
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4640      	mov	r0, r8
 8002d90:	4649      	mov	r1, r9
 8002d92:	f7fd fe13 	bl	80009bc <__aeabi_dcmplt>
 8002d96:	b110      	cbz	r0, 8002d9e <_printf_float+0x86>
 8002d98:	232d      	movs	r3, #45	@ 0x2d
 8002d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d9e:	4a92      	ldr	r2, [pc, #584]	@ (8002fe8 <_printf_float+0x2d0>)
 8002da0:	4b92      	ldr	r3, [pc, #584]	@ (8002fec <_printf_float+0x2d4>)
 8002da2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002da6:	bf94      	ite	ls
 8002da8:	4690      	movls	r8, r2
 8002daa:	4698      	movhi	r8, r3
 8002dac:	2303      	movs	r3, #3
 8002dae:	f04f 0900 	mov.w	r9, #0
 8002db2:	6123      	str	r3, [r4, #16]
 8002db4:	f02b 0304 	bic.w	r3, fp, #4
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	4633      	mov	r3, r6
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	9700      	str	r7, [sp, #0]
 8002dc2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002dc4:	f000 f9d4 	bl	8003170 <_printf_common>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	f040 8090 	bne.w	8002eee <_printf_float+0x1d6>
 8002dce:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd2:	b011      	add	sp, #68	@ 0x44
 8002dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd8:	4642      	mov	r2, r8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	4640      	mov	r0, r8
 8002dde:	4649      	mov	r1, r9
 8002de0:	f7fd fe14 	bl	8000a0c <__aeabi_dcmpun>
 8002de4:	b148      	cbz	r0, 8002dfa <_printf_float+0xe2>
 8002de6:	464b      	mov	r3, r9
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bfb8      	it	lt
 8002dec:	232d      	movlt	r3, #45	@ 0x2d
 8002dee:	4a80      	ldr	r2, [pc, #512]	@ (8002ff0 <_printf_float+0x2d8>)
 8002df0:	bfb8      	it	lt
 8002df2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002df6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff4 <_printf_float+0x2dc>)
 8002df8:	e7d3      	b.n	8002da2 <_printf_float+0x8a>
 8002dfa:	6863      	ldr	r3, [r4, #4]
 8002dfc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	d13f      	bne.n	8002e84 <_printf_float+0x16c>
 8002e04:	2306      	movs	r3, #6
 8002e06:	6063      	str	r3, [r4, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002e0e:	6023      	str	r3, [r4, #0]
 8002e10:	9206      	str	r2, [sp, #24]
 8002e12:	aa0e      	add	r2, sp, #56	@ 0x38
 8002e14:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002e18:	aa0d      	add	r2, sp, #52	@ 0x34
 8002e1a:	9203      	str	r2, [sp, #12]
 8002e1c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002e20:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	4642      	mov	r2, r8
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	910a      	str	r1, [sp, #40]	@ 0x28
 8002e30:	f7ff fed4 	bl	8002bdc <__cvt>
 8002e34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002e36:	4680      	mov	r8, r0
 8002e38:	2947      	cmp	r1, #71	@ 0x47
 8002e3a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002e3c:	d128      	bne.n	8002e90 <_printf_float+0x178>
 8002e3e:	1cc8      	adds	r0, r1, #3
 8002e40:	db02      	blt.n	8002e48 <_printf_float+0x130>
 8002e42:	6863      	ldr	r3, [r4, #4]
 8002e44:	4299      	cmp	r1, r3
 8002e46:	dd40      	ble.n	8002eca <_printf_float+0x1b2>
 8002e48:	f1aa 0a02 	sub.w	sl, sl, #2
 8002e4c:	fa5f fa8a 	uxtb.w	sl, sl
 8002e50:	4652      	mov	r2, sl
 8002e52:	3901      	subs	r1, #1
 8002e54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002e58:	910d      	str	r1, [sp, #52]	@ 0x34
 8002e5a:	f7ff ff23 	bl	8002ca4 <__exponent>
 8002e5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002e60:	4681      	mov	r9, r0
 8002e62:	1813      	adds	r3, r2, r0
 8002e64:	2a01      	cmp	r2, #1
 8002e66:	6123      	str	r3, [r4, #16]
 8002e68:	dc02      	bgt.n	8002e70 <_printf_float+0x158>
 8002e6a:	6822      	ldr	r2, [r4, #0]
 8002e6c:	07d2      	lsls	r2, r2, #31
 8002e6e:	d501      	bpl.n	8002e74 <_printf_float+0x15c>
 8002e70:	3301      	adds	r3, #1
 8002e72:	6123      	str	r3, [r4, #16]
 8002e74:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d09e      	beq.n	8002dba <_printf_float+0xa2>
 8002e7c:	232d      	movs	r3, #45	@ 0x2d
 8002e7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e82:	e79a      	b.n	8002dba <_printf_float+0xa2>
 8002e84:	2947      	cmp	r1, #71	@ 0x47
 8002e86:	d1bf      	bne.n	8002e08 <_printf_float+0xf0>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1bd      	bne.n	8002e08 <_printf_float+0xf0>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e7ba      	b.n	8002e06 <_printf_float+0xee>
 8002e90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002e94:	d9dc      	bls.n	8002e50 <_printf_float+0x138>
 8002e96:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002e9a:	d118      	bne.n	8002ece <_printf_float+0x1b6>
 8002e9c:	2900      	cmp	r1, #0
 8002e9e:	6863      	ldr	r3, [r4, #4]
 8002ea0:	dd0b      	ble.n	8002eba <_printf_float+0x1a2>
 8002ea2:	6121      	str	r1, [r4, #16]
 8002ea4:	b913      	cbnz	r3, 8002eac <_printf_float+0x194>
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	07d0      	lsls	r0, r2, #31
 8002eaa:	d502      	bpl.n	8002eb2 <_printf_float+0x19a>
 8002eac:	3301      	adds	r3, #1
 8002eae:	440b      	add	r3, r1
 8002eb0:	6123      	str	r3, [r4, #16]
 8002eb2:	f04f 0900 	mov.w	r9, #0
 8002eb6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002eb8:	e7dc      	b.n	8002e74 <_printf_float+0x15c>
 8002eba:	b913      	cbnz	r3, 8002ec2 <_printf_float+0x1aa>
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	07d2      	lsls	r2, r2, #31
 8002ec0:	d501      	bpl.n	8002ec6 <_printf_float+0x1ae>
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	e7f4      	b.n	8002eb0 <_printf_float+0x198>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e7f2      	b.n	8002eb0 <_printf_float+0x198>
 8002eca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002ece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ed0:	4299      	cmp	r1, r3
 8002ed2:	db05      	blt.n	8002ee0 <_printf_float+0x1c8>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	6121      	str	r1, [r4, #16]
 8002ed8:	07d8      	lsls	r0, r3, #31
 8002eda:	d5ea      	bpl.n	8002eb2 <_printf_float+0x19a>
 8002edc:	1c4b      	adds	r3, r1, #1
 8002ede:	e7e7      	b.n	8002eb0 <_printf_float+0x198>
 8002ee0:	2900      	cmp	r1, #0
 8002ee2:	bfcc      	ite	gt
 8002ee4:	2201      	movgt	r2, #1
 8002ee6:	f1c1 0202 	rsble	r2, r1, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	e7e0      	b.n	8002eb0 <_printf_float+0x198>
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	055a      	lsls	r2, r3, #21
 8002ef2:	d407      	bmi.n	8002f04 <_printf_float+0x1ec>
 8002ef4:	6923      	ldr	r3, [r4, #16]
 8002ef6:	4642      	mov	r2, r8
 8002ef8:	4631      	mov	r1, r6
 8002efa:	4628      	mov	r0, r5
 8002efc:	47b8      	blx	r7
 8002efe:	3001      	adds	r0, #1
 8002f00:	d12b      	bne.n	8002f5a <_printf_float+0x242>
 8002f02:	e764      	b.n	8002dce <_printf_float+0xb6>
 8002f04:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002f08:	f240 80dc 	bls.w	80030c4 <_printf_float+0x3ac>
 8002f0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002f10:	2200      	movs	r2, #0
 8002f12:	2300      	movs	r3, #0
 8002f14:	f7fd fd48 	bl	80009a8 <__aeabi_dcmpeq>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d033      	beq.n	8002f84 <_printf_float+0x26c>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	4631      	mov	r1, r6
 8002f20:	4628      	mov	r0, r5
 8002f22:	4a35      	ldr	r2, [pc, #212]	@ (8002ff8 <_printf_float+0x2e0>)
 8002f24:	47b8      	blx	r7
 8002f26:	3001      	adds	r0, #1
 8002f28:	f43f af51 	beq.w	8002dce <_printf_float+0xb6>
 8002f2c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002f30:	4543      	cmp	r3, r8
 8002f32:	db02      	blt.n	8002f3a <_printf_float+0x222>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	07d8      	lsls	r0, r3, #31
 8002f38:	d50f      	bpl.n	8002f5a <_printf_float+0x242>
 8002f3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4628      	mov	r0, r5
 8002f42:	47b8      	blx	r7
 8002f44:	3001      	adds	r0, #1
 8002f46:	f43f af42 	beq.w	8002dce <_printf_float+0xb6>
 8002f4a:	f04f 0900 	mov.w	r9, #0
 8002f4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8002f52:	f104 0a1a 	add.w	sl, r4, #26
 8002f56:	45c8      	cmp	r8, r9
 8002f58:	dc09      	bgt.n	8002f6e <_printf_float+0x256>
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	079b      	lsls	r3, r3, #30
 8002f5e:	f100 8102 	bmi.w	8003166 <_printf_float+0x44e>
 8002f62:	68e0      	ldr	r0, [r4, #12]
 8002f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002f66:	4298      	cmp	r0, r3
 8002f68:	bfb8      	it	lt
 8002f6a:	4618      	movlt	r0, r3
 8002f6c:	e731      	b.n	8002dd2 <_printf_float+0xba>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	4652      	mov	r2, sl
 8002f72:	4631      	mov	r1, r6
 8002f74:	4628      	mov	r0, r5
 8002f76:	47b8      	blx	r7
 8002f78:	3001      	adds	r0, #1
 8002f7a:	f43f af28 	beq.w	8002dce <_printf_float+0xb6>
 8002f7e:	f109 0901 	add.w	r9, r9, #1
 8002f82:	e7e8      	b.n	8002f56 <_printf_float+0x23e>
 8002f84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	dc38      	bgt.n	8002ffc <_printf_float+0x2e4>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	4628      	mov	r0, r5
 8002f90:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <_printf_float+0x2e0>)
 8002f92:	47b8      	blx	r7
 8002f94:	3001      	adds	r0, #1
 8002f96:	f43f af1a 	beq.w	8002dce <_printf_float+0xb6>
 8002f9a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002f9e:	ea59 0303 	orrs.w	r3, r9, r3
 8002fa2:	d102      	bne.n	8002faa <_printf_float+0x292>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	07d9      	lsls	r1, r3, #31
 8002fa8:	d5d7      	bpl.n	8002f5a <_printf_float+0x242>
 8002faa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002fae:	4631      	mov	r1, r6
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	47b8      	blx	r7
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	f43f af0a 	beq.w	8002dce <_printf_float+0xb6>
 8002fba:	f04f 0a00 	mov.w	sl, #0
 8002fbe:	f104 0b1a 	add.w	fp, r4, #26
 8002fc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	4553      	cmp	r3, sl
 8002fc8:	dc01      	bgt.n	8002fce <_printf_float+0x2b6>
 8002fca:	464b      	mov	r3, r9
 8002fcc:	e793      	b.n	8002ef6 <_printf_float+0x1de>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	465a      	mov	r2, fp
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b8      	blx	r7
 8002fd8:	3001      	adds	r0, #1
 8002fda:	f43f aef8 	beq.w	8002dce <_printf_float+0xb6>
 8002fde:	f10a 0a01 	add.w	sl, sl, #1
 8002fe2:	e7ee      	b.n	8002fc2 <_printf_float+0x2aa>
 8002fe4:	7fefffff 	.word	0x7fefffff
 8002fe8:	0800737a 	.word	0x0800737a
 8002fec:	0800737e 	.word	0x0800737e
 8002ff0:	08007382 	.word	0x08007382
 8002ff4:	08007386 	.word	0x08007386
 8002ff8:	0800738a 	.word	0x0800738a
 8002ffc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ffe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003002:	4553      	cmp	r3, sl
 8003004:	bfa8      	it	ge
 8003006:	4653      	movge	r3, sl
 8003008:	2b00      	cmp	r3, #0
 800300a:	4699      	mov	r9, r3
 800300c:	dc36      	bgt.n	800307c <_printf_float+0x364>
 800300e:	f04f 0b00 	mov.w	fp, #0
 8003012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003016:	f104 021a 	add.w	r2, r4, #26
 800301a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800301c:	930a      	str	r3, [sp, #40]	@ 0x28
 800301e:	eba3 0309 	sub.w	r3, r3, r9
 8003022:	455b      	cmp	r3, fp
 8003024:	dc31      	bgt.n	800308a <_printf_float+0x372>
 8003026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003028:	459a      	cmp	sl, r3
 800302a:	dc3a      	bgt.n	80030a2 <_printf_float+0x38a>
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	07da      	lsls	r2, r3, #31
 8003030:	d437      	bmi.n	80030a2 <_printf_float+0x38a>
 8003032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003034:	ebaa 0903 	sub.w	r9, sl, r3
 8003038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800303a:	ebaa 0303 	sub.w	r3, sl, r3
 800303e:	4599      	cmp	r9, r3
 8003040:	bfa8      	it	ge
 8003042:	4699      	movge	r9, r3
 8003044:	f1b9 0f00 	cmp.w	r9, #0
 8003048:	dc33      	bgt.n	80030b2 <_printf_float+0x39a>
 800304a:	f04f 0800 	mov.w	r8, #0
 800304e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003052:	f104 0b1a 	add.w	fp, r4, #26
 8003056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003058:	ebaa 0303 	sub.w	r3, sl, r3
 800305c:	eba3 0309 	sub.w	r3, r3, r9
 8003060:	4543      	cmp	r3, r8
 8003062:	f77f af7a 	ble.w	8002f5a <_printf_float+0x242>
 8003066:	2301      	movs	r3, #1
 8003068:	465a      	mov	r2, fp
 800306a:	4631      	mov	r1, r6
 800306c:	4628      	mov	r0, r5
 800306e:	47b8      	blx	r7
 8003070:	3001      	adds	r0, #1
 8003072:	f43f aeac 	beq.w	8002dce <_printf_float+0xb6>
 8003076:	f108 0801 	add.w	r8, r8, #1
 800307a:	e7ec      	b.n	8003056 <_printf_float+0x33e>
 800307c:	4642      	mov	r2, r8
 800307e:	4631      	mov	r1, r6
 8003080:	4628      	mov	r0, r5
 8003082:	47b8      	blx	r7
 8003084:	3001      	adds	r0, #1
 8003086:	d1c2      	bne.n	800300e <_printf_float+0x2f6>
 8003088:	e6a1      	b.n	8002dce <_printf_float+0xb6>
 800308a:	2301      	movs	r3, #1
 800308c:	4631      	mov	r1, r6
 800308e:	4628      	mov	r0, r5
 8003090:	920a      	str	r2, [sp, #40]	@ 0x28
 8003092:	47b8      	blx	r7
 8003094:	3001      	adds	r0, #1
 8003096:	f43f ae9a 	beq.w	8002dce <_printf_float+0xb6>
 800309a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800309c:	f10b 0b01 	add.w	fp, fp, #1
 80030a0:	e7bb      	b.n	800301a <_printf_float+0x302>
 80030a2:	4631      	mov	r1, r6
 80030a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80030a8:	4628      	mov	r0, r5
 80030aa:	47b8      	blx	r7
 80030ac:	3001      	adds	r0, #1
 80030ae:	d1c0      	bne.n	8003032 <_printf_float+0x31a>
 80030b0:	e68d      	b.n	8002dce <_printf_float+0xb6>
 80030b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80030b4:	464b      	mov	r3, r9
 80030b6:	4631      	mov	r1, r6
 80030b8:	4628      	mov	r0, r5
 80030ba:	4442      	add	r2, r8
 80030bc:	47b8      	blx	r7
 80030be:	3001      	adds	r0, #1
 80030c0:	d1c3      	bne.n	800304a <_printf_float+0x332>
 80030c2:	e684      	b.n	8002dce <_printf_float+0xb6>
 80030c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80030c8:	f1ba 0f01 	cmp.w	sl, #1
 80030cc:	dc01      	bgt.n	80030d2 <_printf_float+0x3ba>
 80030ce:	07db      	lsls	r3, r3, #31
 80030d0:	d536      	bpl.n	8003140 <_printf_float+0x428>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4642      	mov	r2, r8
 80030d6:	4631      	mov	r1, r6
 80030d8:	4628      	mov	r0, r5
 80030da:	47b8      	blx	r7
 80030dc:	3001      	adds	r0, #1
 80030de:	f43f ae76 	beq.w	8002dce <_printf_float+0xb6>
 80030e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80030e6:	4631      	mov	r1, r6
 80030e8:	4628      	mov	r0, r5
 80030ea:	47b8      	blx	r7
 80030ec:	3001      	adds	r0, #1
 80030ee:	f43f ae6e 	beq.w	8002dce <_printf_float+0xb6>
 80030f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80030f6:	2200      	movs	r2, #0
 80030f8:	2300      	movs	r3, #0
 80030fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80030fe:	f7fd fc53 	bl	80009a8 <__aeabi_dcmpeq>
 8003102:	b9c0      	cbnz	r0, 8003136 <_printf_float+0x41e>
 8003104:	4653      	mov	r3, sl
 8003106:	f108 0201 	add.w	r2, r8, #1
 800310a:	4631      	mov	r1, r6
 800310c:	4628      	mov	r0, r5
 800310e:	47b8      	blx	r7
 8003110:	3001      	adds	r0, #1
 8003112:	d10c      	bne.n	800312e <_printf_float+0x416>
 8003114:	e65b      	b.n	8002dce <_printf_float+0xb6>
 8003116:	2301      	movs	r3, #1
 8003118:	465a      	mov	r2, fp
 800311a:	4631      	mov	r1, r6
 800311c:	4628      	mov	r0, r5
 800311e:	47b8      	blx	r7
 8003120:	3001      	adds	r0, #1
 8003122:	f43f ae54 	beq.w	8002dce <_printf_float+0xb6>
 8003126:	f108 0801 	add.w	r8, r8, #1
 800312a:	45d0      	cmp	r8, sl
 800312c:	dbf3      	blt.n	8003116 <_printf_float+0x3fe>
 800312e:	464b      	mov	r3, r9
 8003130:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003134:	e6e0      	b.n	8002ef8 <_printf_float+0x1e0>
 8003136:	f04f 0800 	mov.w	r8, #0
 800313a:	f104 0b1a 	add.w	fp, r4, #26
 800313e:	e7f4      	b.n	800312a <_printf_float+0x412>
 8003140:	2301      	movs	r3, #1
 8003142:	4642      	mov	r2, r8
 8003144:	e7e1      	b.n	800310a <_printf_float+0x3f2>
 8003146:	2301      	movs	r3, #1
 8003148:	464a      	mov	r2, r9
 800314a:	4631      	mov	r1, r6
 800314c:	4628      	mov	r0, r5
 800314e:	47b8      	blx	r7
 8003150:	3001      	adds	r0, #1
 8003152:	f43f ae3c 	beq.w	8002dce <_printf_float+0xb6>
 8003156:	f108 0801 	add.w	r8, r8, #1
 800315a:	68e3      	ldr	r3, [r4, #12]
 800315c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800315e:	1a5b      	subs	r3, r3, r1
 8003160:	4543      	cmp	r3, r8
 8003162:	dcf0      	bgt.n	8003146 <_printf_float+0x42e>
 8003164:	e6fd      	b.n	8002f62 <_printf_float+0x24a>
 8003166:	f04f 0800 	mov.w	r8, #0
 800316a:	f104 0919 	add.w	r9, r4, #25
 800316e:	e7f4      	b.n	800315a <_printf_float+0x442>

08003170 <_printf_common>:
 8003170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003174:	4616      	mov	r6, r2
 8003176:	4698      	mov	r8, r3
 8003178:	688a      	ldr	r2, [r1, #8]
 800317a:	690b      	ldr	r3, [r1, #16]
 800317c:	4607      	mov	r7, r0
 800317e:	4293      	cmp	r3, r2
 8003180:	bfb8      	it	lt
 8003182:	4613      	movlt	r3, r2
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800318a:	460c      	mov	r4, r1
 800318c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003190:	b10a      	cbz	r2, 8003196 <_printf_common+0x26>
 8003192:	3301      	adds	r3, #1
 8003194:	6033      	str	r3, [r6, #0]
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	0699      	lsls	r1, r3, #26
 800319a:	bf42      	ittt	mi
 800319c:	6833      	ldrmi	r3, [r6, #0]
 800319e:	3302      	addmi	r3, #2
 80031a0:	6033      	strmi	r3, [r6, #0]
 80031a2:	6825      	ldr	r5, [r4, #0]
 80031a4:	f015 0506 	ands.w	r5, r5, #6
 80031a8:	d106      	bne.n	80031b8 <_printf_common+0x48>
 80031aa:	f104 0a19 	add.w	sl, r4, #25
 80031ae:	68e3      	ldr	r3, [r4, #12]
 80031b0:	6832      	ldr	r2, [r6, #0]
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	42ab      	cmp	r3, r5
 80031b6:	dc2b      	bgt.n	8003210 <_printf_common+0xa0>
 80031b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	3b00      	subs	r3, #0
 80031c0:	bf18      	it	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	0692      	lsls	r2, r2, #26
 80031c6:	d430      	bmi.n	800322a <_printf_common+0xba>
 80031c8:	4641      	mov	r1, r8
 80031ca:	4638      	mov	r0, r7
 80031cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031d0:	47c8      	blx	r9
 80031d2:	3001      	adds	r0, #1
 80031d4:	d023      	beq.n	800321e <_printf_common+0xae>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	6922      	ldr	r2, [r4, #16]
 80031da:	f003 0306 	and.w	r3, r3, #6
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf14      	ite	ne
 80031e2:	2500      	movne	r5, #0
 80031e4:	6833      	ldreq	r3, [r6, #0]
 80031e6:	f04f 0600 	mov.w	r6, #0
 80031ea:	bf08      	it	eq
 80031ec:	68e5      	ldreq	r5, [r4, #12]
 80031ee:	f104 041a 	add.w	r4, r4, #26
 80031f2:	bf08      	it	eq
 80031f4:	1aed      	subeq	r5, r5, r3
 80031f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80031fa:	bf08      	it	eq
 80031fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003200:	4293      	cmp	r3, r2
 8003202:	bfc4      	itt	gt
 8003204:	1a9b      	subgt	r3, r3, r2
 8003206:	18ed      	addgt	r5, r5, r3
 8003208:	42b5      	cmp	r5, r6
 800320a:	d11a      	bne.n	8003242 <_printf_common+0xd2>
 800320c:	2000      	movs	r0, #0
 800320e:	e008      	b.n	8003222 <_printf_common+0xb2>
 8003210:	2301      	movs	r3, #1
 8003212:	4652      	mov	r2, sl
 8003214:	4641      	mov	r1, r8
 8003216:	4638      	mov	r0, r7
 8003218:	47c8      	blx	r9
 800321a:	3001      	adds	r0, #1
 800321c:	d103      	bne.n	8003226 <_printf_common+0xb6>
 800321e:	f04f 30ff 	mov.w	r0, #4294967295
 8003222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003226:	3501      	adds	r5, #1
 8003228:	e7c1      	b.n	80031ae <_printf_common+0x3e>
 800322a:	2030      	movs	r0, #48	@ 0x30
 800322c:	18e1      	adds	r1, r4, r3
 800322e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003238:	4422      	add	r2, r4
 800323a:	3302      	adds	r3, #2
 800323c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003240:	e7c2      	b.n	80031c8 <_printf_common+0x58>
 8003242:	2301      	movs	r3, #1
 8003244:	4622      	mov	r2, r4
 8003246:	4641      	mov	r1, r8
 8003248:	4638      	mov	r0, r7
 800324a:	47c8      	blx	r9
 800324c:	3001      	adds	r0, #1
 800324e:	d0e6      	beq.n	800321e <_printf_common+0xae>
 8003250:	3601      	adds	r6, #1
 8003252:	e7d9      	b.n	8003208 <_printf_common+0x98>

08003254 <_printf_i>:
 8003254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003258:	7e0f      	ldrb	r7, [r1, #24]
 800325a:	4691      	mov	r9, r2
 800325c:	2f78      	cmp	r7, #120	@ 0x78
 800325e:	4680      	mov	r8, r0
 8003260:	460c      	mov	r4, r1
 8003262:	469a      	mov	sl, r3
 8003264:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800326a:	d807      	bhi.n	800327c <_printf_i+0x28>
 800326c:	2f62      	cmp	r7, #98	@ 0x62
 800326e:	d80a      	bhi.n	8003286 <_printf_i+0x32>
 8003270:	2f00      	cmp	r7, #0
 8003272:	f000 80d3 	beq.w	800341c <_printf_i+0x1c8>
 8003276:	2f58      	cmp	r7, #88	@ 0x58
 8003278:	f000 80ba 	beq.w	80033f0 <_printf_i+0x19c>
 800327c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003284:	e03a      	b.n	80032fc <_printf_i+0xa8>
 8003286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800328a:	2b15      	cmp	r3, #21
 800328c:	d8f6      	bhi.n	800327c <_printf_i+0x28>
 800328e:	a101      	add	r1, pc, #4	@ (adr r1, 8003294 <_printf_i+0x40>)
 8003290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003294:	080032ed 	.word	0x080032ed
 8003298:	08003301 	.word	0x08003301
 800329c:	0800327d 	.word	0x0800327d
 80032a0:	0800327d 	.word	0x0800327d
 80032a4:	0800327d 	.word	0x0800327d
 80032a8:	0800327d 	.word	0x0800327d
 80032ac:	08003301 	.word	0x08003301
 80032b0:	0800327d 	.word	0x0800327d
 80032b4:	0800327d 	.word	0x0800327d
 80032b8:	0800327d 	.word	0x0800327d
 80032bc:	0800327d 	.word	0x0800327d
 80032c0:	08003403 	.word	0x08003403
 80032c4:	0800332b 	.word	0x0800332b
 80032c8:	080033bd 	.word	0x080033bd
 80032cc:	0800327d 	.word	0x0800327d
 80032d0:	0800327d 	.word	0x0800327d
 80032d4:	08003425 	.word	0x08003425
 80032d8:	0800327d 	.word	0x0800327d
 80032dc:	0800332b 	.word	0x0800332b
 80032e0:	0800327d 	.word	0x0800327d
 80032e4:	0800327d 	.word	0x0800327d
 80032e8:	080033c5 	.word	0x080033c5
 80032ec:	6833      	ldr	r3, [r6, #0]
 80032ee:	1d1a      	adds	r2, r3, #4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6032      	str	r2, [r6, #0]
 80032f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80032fc:	2301      	movs	r3, #1
 80032fe:	e09e      	b.n	800343e <_printf_i+0x1ea>
 8003300:	6833      	ldr	r3, [r6, #0]
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	1d19      	adds	r1, r3, #4
 8003306:	6031      	str	r1, [r6, #0]
 8003308:	0606      	lsls	r6, r0, #24
 800330a:	d501      	bpl.n	8003310 <_printf_i+0xbc>
 800330c:	681d      	ldr	r5, [r3, #0]
 800330e:	e003      	b.n	8003318 <_printf_i+0xc4>
 8003310:	0645      	lsls	r5, r0, #25
 8003312:	d5fb      	bpl.n	800330c <_printf_i+0xb8>
 8003314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003318:	2d00      	cmp	r5, #0
 800331a:	da03      	bge.n	8003324 <_printf_i+0xd0>
 800331c:	232d      	movs	r3, #45	@ 0x2d
 800331e:	426d      	negs	r5, r5
 8003320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003324:	230a      	movs	r3, #10
 8003326:	4859      	ldr	r0, [pc, #356]	@ (800348c <_printf_i+0x238>)
 8003328:	e011      	b.n	800334e <_printf_i+0xfa>
 800332a:	6821      	ldr	r1, [r4, #0]
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	0608      	lsls	r0, r1, #24
 8003330:	f853 5b04 	ldr.w	r5, [r3], #4
 8003334:	d402      	bmi.n	800333c <_printf_i+0xe8>
 8003336:	0649      	lsls	r1, r1, #25
 8003338:	bf48      	it	mi
 800333a:	b2ad      	uxthmi	r5, r5
 800333c:	2f6f      	cmp	r7, #111	@ 0x6f
 800333e:	6033      	str	r3, [r6, #0]
 8003340:	bf14      	ite	ne
 8003342:	230a      	movne	r3, #10
 8003344:	2308      	moveq	r3, #8
 8003346:	4851      	ldr	r0, [pc, #324]	@ (800348c <_printf_i+0x238>)
 8003348:	2100      	movs	r1, #0
 800334a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800334e:	6866      	ldr	r6, [r4, #4]
 8003350:	2e00      	cmp	r6, #0
 8003352:	bfa8      	it	ge
 8003354:	6821      	ldrge	r1, [r4, #0]
 8003356:	60a6      	str	r6, [r4, #8]
 8003358:	bfa4      	itt	ge
 800335a:	f021 0104 	bicge.w	r1, r1, #4
 800335e:	6021      	strge	r1, [r4, #0]
 8003360:	b90d      	cbnz	r5, 8003366 <_printf_i+0x112>
 8003362:	2e00      	cmp	r6, #0
 8003364:	d04b      	beq.n	80033fe <_printf_i+0x1aa>
 8003366:	4616      	mov	r6, r2
 8003368:	fbb5 f1f3 	udiv	r1, r5, r3
 800336c:	fb03 5711 	mls	r7, r3, r1, r5
 8003370:	5dc7      	ldrb	r7, [r0, r7]
 8003372:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003376:	462f      	mov	r7, r5
 8003378:	42bb      	cmp	r3, r7
 800337a:	460d      	mov	r5, r1
 800337c:	d9f4      	bls.n	8003368 <_printf_i+0x114>
 800337e:	2b08      	cmp	r3, #8
 8003380:	d10b      	bne.n	800339a <_printf_i+0x146>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	07df      	lsls	r7, r3, #31
 8003386:	d508      	bpl.n	800339a <_printf_i+0x146>
 8003388:	6923      	ldr	r3, [r4, #16]
 800338a:	6861      	ldr	r1, [r4, #4]
 800338c:	4299      	cmp	r1, r3
 800338e:	bfde      	ittt	le
 8003390:	2330      	movle	r3, #48	@ 0x30
 8003392:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003396:	f106 36ff 	addle.w	r6, r6, #4294967295
 800339a:	1b92      	subs	r2, r2, r6
 800339c:	6122      	str	r2, [r4, #16]
 800339e:	464b      	mov	r3, r9
 80033a0:	4621      	mov	r1, r4
 80033a2:	4640      	mov	r0, r8
 80033a4:	f8cd a000 	str.w	sl, [sp]
 80033a8:	aa03      	add	r2, sp, #12
 80033aa:	f7ff fee1 	bl	8003170 <_printf_common>
 80033ae:	3001      	adds	r0, #1
 80033b0:	d14a      	bne.n	8003448 <_printf_i+0x1f4>
 80033b2:	f04f 30ff 	mov.w	r0, #4294967295
 80033b6:	b004      	add	sp, #16
 80033b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	f043 0320 	orr.w	r3, r3, #32
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	2778      	movs	r7, #120	@ 0x78
 80033c6:	4832      	ldr	r0, [pc, #200]	@ (8003490 <_printf_i+0x23c>)
 80033c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	6831      	ldr	r1, [r6, #0]
 80033d0:	061f      	lsls	r7, r3, #24
 80033d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80033d6:	d402      	bmi.n	80033de <_printf_i+0x18a>
 80033d8:	065f      	lsls	r7, r3, #25
 80033da:	bf48      	it	mi
 80033dc:	b2ad      	uxthmi	r5, r5
 80033de:	6031      	str	r1, [r6, #0]
 80033e0:	07d9      	lsls	r1, r3, #31
 80033e2:	bf44      	itt	mi
 80033e4:	f043 0320 	orrmi.w	r3, r3, #32
 80033e8:	6023      	strmi	r3, [r4, #0]
 80033ea:	b11d      	cbz	r5, 80033f4 <_printf_i+0x1a0>
 80033ec:	2310      	movs	r3, #16
 80033ee:	e7ab      	b.n	8003348 <_printf_i+0xf4>
 80033f0:	4826      	ldr	r0, [pc, #152]	@ (800348c <_printf_i+0x238>)
 80033f2:	e7e9      	b.n	80033c8 <_printf_i+0x174>
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	e7f6      	b.n	80033ec <_printf_i+0x198>
 80033fe:	4616      	mov	r6, r2
 8003400:	e7bd      	b.n	800337e <_printf_i+0x12a>
 8003402:	6833      	ldr	r3, [r6, #0]
 8003404:	6825      	ldr	r5, [r4, #0]
 8003406:	1d18      	adds	r0, r3, #4
 8003408:	6961      	ldr	r1, [r4, #20]
 800340a:	6030      	str	r0, [r6, #0]
 800340c:	062e      	lsls	r6, r5, #24
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	d501      	bpl.n	8003416 <_printf_i+0x1c2>
 8003412:	6019      	str	r1, [r3, #0]
 8003414:	e002      	b.n	800341c <_printf_i+0x1c8>
 8003416:	0668      	lsls	r0, r5, #25
 8003418:	d5fb      	bpl.n	8003412 <_printf_i+0x1be>
 800341a:	8019      	strh	r1, [r3, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	4616      	mov	r6, r2
 8003420:	6123      	str	r3, [r4, #16]
 8003422:	e7bc      	b.n	800339e <_printf_i+0x14a>
 8003424:	6833      	ldr	r3, [r6, #0]
 8003426:	2100      	movs	r1, #0
 8003428:	1d1a      	adds	r2, r3, #4
 800342a:	6032      	str	r2, [r6, #0]
 800342c:	681e      	ldr	r6, [r3, #0]
 800342e:	6862      	ldr	r2, [r4, #4]
 8003430:	4630      	mov	r0, r6
 8003432:	f000 fc18 	bl	8003c66 <memchr>
 8003436:	b108      	cbz	r0, 800343c <_printf_i+0x1e8>
 8003438:	1b80      	subs	r0, r0, r6
 800343a:	6060      	str	r0, [r4, #4]
 800343c:	6863      	ldr	r3, [r4, #4]
 800343e:	6123      	str	r3, [r4, #16]
 8003440:	2300      	movs	r3, #0
 8003442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003446:	e7aa      	b.n	800339e <_printf_i+0x14a>
 8003448:	4632      	mov	r2, r6
 800344a:	4649      	mov	r1, r9
 800344c:	4640      	mov	r0, r8
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	47d0      	blx	sl
 8003452:	3001      	adds	r0, #1
 8003454:	d0ad      	beq.n	80033b2 <_printf_i+0x15e>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	079b      	lsls	r3, r3, #30
 800345a:	d413      	bmi.n	8003484 <_printf_i+0x230>
 800345c:	68e0      	ldr	r0, [r4, #12]
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	4298      	cmp	r0, r3
 8003462:	bfb8      	it	lt
 8003464:	4618      	movlt	r0, r3
 8003466:	e7a6      	b.n	80033b6 <_printf_i+0x162>
 8003468:	2301      	movs	r3, #1
 800346a:	4632      	mov	r2, r6
 800346c:	4649      	mov	r1, r9
 800346e:	4640      	mov	r0, r8
 8003470:	47d0      	blx	sl
 8003472:	3001      	adds	r0, #1
 8003474:	d09d      	beq.n	80033b2 <_printf_i+0x15e>
 8003476:	3501      	adds	r5, #1
 8003478:	68e3      	ldr	r3, [r4, #12]
 800347a:	9903      	ldr	r1, [sp, #12]
 800347c:	1a5b      	subs	r3, r3, r1
 800347e:	42ab      	cmp	r3, r5
 8003480:	dcf2      	bgt.n	8003468 <_printf_i+0x214>
 8003482:	e7eb      	b.n	800345c <_printf_i+0x208>
 8003484:	2500      	movs	r5, #0
 8003486:	f104 0619 	add.w	r6, r4, #25
 800348a:	e7f5      	b.n	8003478 <_printf_i+0x224>
 800348c:	0800738c 	.word	0x0800738c
 8003490:	0800739d 	.word	0x0800739d

08003494 <_scanf_float>:
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003498:	b087      	sub	sp, #28
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	688b      	ldr	r3, [r1, #8]
 800349e:	4617      	mov	r7, r2
 80034a0:	1e5a      	subs	r2, r3, #1
 80034a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80034a6:	bf82      	ittt	hi
 80034a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80034ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80034b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80034b4:	460a      	mov	r2, r1
 80034b6:	f04f 0500 	mov.w	r5, #0
 80034ba:	bf88      	it	hi
 80034bc:	608b      	strhi	r3, [r1, #8]
 80034be:	680b      	ldr	r3, [r1, #0]
 80034c0:	4680      	mov	r8, r0
 80034c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80034c6:	f842 3b1c 	str.w	r3, [r2], #28
 80034ca:	460c      	mov	r4, r1
 80034cc:	bf98      	it	ls
 80034ce:	f04f 0b00 	movls.w	fp, #0
 80034d2:	4616      	mov	r6, r2
 80034d4:	46aa      	mov	sl, r5
 80034d6:	46a9      	mov	r9, r5
 80034d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80034dc:	9201      	str	r2, [sp, #4]
 80034de:	9502      	str	r5, [sp, #8]
 80034e0:	68a2      	ldr	r2, [r4, #8]
 80034e2:	b152      	cbz	r2, 80034fa <_scanf_float+0x66>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80034ea:	d865      	bhi.n	80035b8 <_scanf_float+0x124>
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d83d      	bhi.n	800356c <_scanf_float+0xd8>
 80034f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80034f4:	b2c8      	uxtb	r0, r1
 80034f6:	280e      	cmp	r0, #14
 80034f8:	d93b      	bls.n	8003572 <_scanf_float+0xde>
 80034fa:	f1b9 0f00 	cmp.w	r9, #0
 80034fe:	d003      	beq.n	8003508 <_scanf_float+0x74>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003506:	6023      	str	r3, [r4, #0]
 8003508:	f10a 3aff 	add.w	sl, sl, #4294967295
 800350c:	f1ba 0f01 	cmp.w	sl, #1
 8003510:	f200 8118 	bhi.w	8003744 <_scanf_float+0x2b0>
 8003514:	9b01      	ldr	r3, [sp, #4]
 8003516:	429e      	cmp	r6, r3
 8003518:	f200 8109 	bhi.w	800372e <_scanf_float+0x29a>
 800351c:	2001      	movs	r0, #1
 800351e:	b007      	add	sp, #28
 8003520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003524:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003528:	2a0d      	cmp	r2, #13
 800352a:	d8e6      	bhi.n	80034fa <_scanf_float+0x66>
 800352c:	a101      	add	r1, pc, #4	@ (adr r1, 8003534 <_scanf_float+0xa0>)
 800352e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003532:	bf00      	nop
 8003534:	0800367b 	.word	0x0800367b
 8003538:	080034fb 	.word	0x080034fb
 800353c:	080034fb 	.word	0x080034fb
 8003540:	080034fb 	.word	0x080034fb
 8003544:	080036db 	.word	0x080036db
 8003548:	080036b3 	.word	0x080036b3
 800354c:	080034fb 	.word	0x080034fb
 8003550:	080034fb 	.word	0x080034fb
 8003554:	08003689 	.word	0x08003689
 8003558:	080034fb 	.word	0x080034fb
 800355c:	080034fb 	.word	0x080034fb
 8003560:	080034fb 	.word	0x080034fb
 8003564:	080034fb 	.word	0x080034fb
 8003568:	08003641 	.word	0x08003641
 800356c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003570:	e7da      	b.n	8003528 <_scanf_float+0x94>
 8003572:	290e      	cmp	r1, #14
 8003574:	d8c1      	bhi.n	80034fa <_scanf_float+0x66>
 8003576:	a001      	add	r0, pc, #4	@ (adr r0, 800357c <_scanf_float+0xe8>)
 8003578:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800357c:	08003631 	.word	0x08003631
 8003580:	080034fb 	.word	0x080034fb
 8003584:	08003631 	.word	0x08003631
 8003588:	080036c7 	.word	0x080036c7
 800358c:	080034fb 	.word	0x080034fb
 8003590:	080035d9 	.word	0x080035d9
 8003594:	08003617 	.word	0x08003617
 8003598:	08003617 	.word	0x08003617
 800359c:	08003617 	.word	0x08003617
 80035a0:	08003617 	.word	0x08003617
 80035a4:	08003617 	.word	0x08003617
 80035a8:	08003617 	.word	0x08003617
 80035ac:	08003617 	.word	0x08003617
 80035b0:	08003617 	.word	0x08003617
 80035b4:	08003617 	.word	0x08003617
 80035b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80035ba:	d809      	bhi.n	80035d0 <_scanf_float+0x13c>
 80035bc:	2b60      	cmp	r3, #96	@ 0x60
 80035be:	d8b1      	bhi.n	8003524 <_scanf_float+0x90>
 80035c0:	2b54      	cmp	r3, #84	@ 0x54
 80035c2:	d07b      	beq.n	80036bc <_scanf_float+0x228>
 80035c4:	2b59      	cmp	r3, #89	@ 0x59
 80035c6:	d198      	bne.n	80034fa <_scanf_float+0x66>
 80035c8:	2d07      	cmp	r5, #7
 80035ca:	d196      	bne.n	80034fa <_scanf_float+0x66>
 80035cc:	2508      	movs	r5, #8
 80035ce:	e02c      	b.n	800362a <_scanf_float+0x196>
 80035d0:	2b74      	cmp	r3, #116	@ 0x74
 80035d2:	d073      	beq.n	80036bc <_scanf_float+0x228>
 80035d4:	2b79      	cmp	r3, #121	@ 0x79
 80035d6:	e7f6      	b.n	80035c6 <_scanf_float+0x132>
 80035d8:	6821      	ldr	r1, [r4, #0]
 80035da:	05c8      	lsls	r0, r1, #23
 80035dc:	d51b      	bpl.n	8003616 <_scanf_float+0x182>
 80035de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80035e2:	6021      	str	r1, [r4, #0]
 80035e4:	f109 0901 	add.w	r9, r9, #1
 80035e8:	f1bb 0f00 	cmp.w	fp, #0
 80035ec:	d003      	beq.n	80035f6 <_scanf_float+0x162>
 80035ee:	3201      	adds	r2, #1
 80035f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035f4:	60a2      	str	r2, [r4, #8]
 80035f6:	68a3      	ldr	r3, [r4, #8]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60a3      	str	r3, [r4, #8]
 80035fc:	6923      	ldr	r3, [r4, #16]
 80035fe:	3301      	adds	r3, #1
 8003600:	6123      	str	r3, [r4, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3b01      	subs	r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	f340 8087 	ble.w	800371c <_scanf_float+0x288>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	e764      	b.n	80034e0 <_scanf_float+0x4c>
 8003616:	eb1a 0105 	adds.w	r1, sl, r5
 800361a:	f47f af6e 	bne.w	80034fa <_scanf_float+0x66>
 800361e:	460d      	mov	r5, r1
 8003620:	468a      	mov	sl, r1
 8003622:	6822      	ldr	r2, [r4, #0]
 8003624:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003628:	6022      	str	r2, [r4, #0]
 800362a:	f806 3b01 	strb.w	r3, [r6], #1
 800362e:	e7e2      	b.n	80035f6 <_scanf_float+0x162>
 8003630:	6822      	ldr	r2, [r4, #0]
 8003632:	0610      	lsls	r0, r2, #24
 8003634:	f57f af61 	bpl.w	80034fa <_scanf_float+0x66>
 8003638:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800363c:	6022      	str	r2, [r4, #0]
 800363e:	e7f4      	b.n	800362a <_scanf_float+0x196>
 8003640:	f1ba 0f00 	cmp.w	sl, #0
 8003644:	d10e      	bne.n	8003664 <_scanf_float+0x1d0>
 8003646:	f1b9 0f00 	cmp.w	r9, #0
 800364a:	d10e      	bne.n	800366a <_scanf_float+0x1d6>
 800364c:	6822      	ldr	r2, [r4, #0]
 800364e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003652:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003656:	d108      	bne.n	800366a <_scanf_float+0x1d6>
 8003658:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800365c:	f04f 0a01 	mov.w	sl, #1
 8003660:	6022      	str	r2, [r4, #0]
 8003662:	e7e2      	b.n	800362a <_scanf_float+0x196>
 8003664:	f1ba 0f02 	cmp.w	sl, #2
 8003668:	d055      	beq.n	8003716 <_scanf_float+0x282>
 800366a:	2d01      	cmp	r5, #1
 800366c:	d002      	beq.n	8003674 <_scanf_float+0x1e0>
 800366e:	2d04      	cmp	r5, #4
 8003670:	f47f af43 	bne.w	80034fa <_scanf_float+0x66>
 8003674:	3501      	adds	r5, #1
 8003676:	b2ed      	uxtb	r5, r5
 8003678:	e7d7      	b.n	800362a <_scanf_float+0x196>
 800367a:	f1ba 0f01 	cmp.w	sl, #1
 800367e:	f47f af3c 	bne.w	80034fa <_scanf_float+0x66>
 8003682:	f04f 0a02 	mov.w	sl, #2
 8003686:	e7d0      	b.n	800362a <_scanf_float+0x196>
 8003688:	b97d      	cbnz	r5, 80036aa <_scanf_float+0x216>
 800368a:	f1b9 0f00 	cmp.w	r9, #0
 800368e:	f47f af37 	bne.w	8003500 <_scanf_float+0x6c>
 8003692:	6822      	ldr	r2, [r4, #0]
 8003694:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003698:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800369c:	f040 8103 	bne.w	80038a6 <_scanf_float+0x412>
 80036a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80036a4:	2501      	movs	r5, #1
 80036a6:	6022      	str	r2, [r4, #0]
 80036a8:	e7bf      	b.n	800362a <_scanf_float+0x196>
 80036aa:	2d03      	cmp	r5, #3
 80036ac:	d0e2      	beq.n	8003674 <_scanf_float+0x1e0>
 80036ae:	2d05      	cmp	r5, #5
 80036b0:	e7de      	b.n	8003670 <_scanf_float+0x1dc>
 80036b2:	2d02      	cmp	r5, #2
 80036b4:	f47f af21 	bne.w	80034fa <_scanf_float+0x66>
 80036b8:	2503      	movs	r5, #3
 80036ba:	e7b6      	b.n	800362a <_scanf_float+0x196>
 80036bc:	2d06      	cmp	r5, #6
 80036be:	f47f af1c 	bne.w	80034fa <_scanf_float+0x66>
 80036c2:	2507      	movs	r5, #7
 80036c4:	e7b1      	b.n	800362a <_scanf_float+0x196>
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	0591      	lsls	r1, r2, #22
 80036ca:	f57f af16 	bpl.w	80034fa <_scanf_float+0x66>
 80036ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80036d2:	6022      	str	r2, [r4, #0]
 80036d4:	f8cd 9008 	str.w	r9, [sp, #8]
 80036d8:	e7a7      	b.n	800362a <_scanf_float+0x196>
 80036da:	6822      	ldr	r2, [r4, #0]
 80036dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80036e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80036e4:	d006      	beq.n	80036f4 <_scanf_float+0x260>
 80036e6:	0550      	lsls	r0, r2, #21
 80036e8:	f57f af07 	bpl.w	80034fa <_scanf_float+0x66>
 80036ec:	f1b9 0f00 	cmp.w	r9, #0
 80036f0:	f000 80d9 	beq.w	80038a6 <_scanf_float+0x412>
 80036f4:	0591      	lsls	r1, r2, #22
 80036f6:	bf58      	it	pl
 80036f8:	9902      	ldrpl	r1, [sp, #8]
 80036fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80036fe:	bf58      	it	pl
 8003700:	eba9 0101 	subpl.w	r1, r9, r1
 8003704:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003708:	f04f 0900 	mov.w	r9, #0
 800370c:	bf58      	it	pl
 800370e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003712:	6022      	str	r2, [r4, #0]
 8003714:	e789      	b.n	800362a <_scanf_float+0x196>
 8003716:	f04f 0a03 	mov.w	sl, #3
 800371a:	e786      	b.n	800362a <_scanf_float+0x196>
 800371c:	4639      	mov	r1, r7
 800371e:	4640      	mov	r0, r8
 8003720:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003724:	4798      	blx	r3
 8003726:	2800      	cmp	r0, #0
 8003728:	f43f aeda 	beq.w	80034e0 <_scanf_float+0x4c>
 800372c:	e6e5      	b.n	80034fa <_scanf_float+0x66>
 800372e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003732:	463a      	mov	r2, r7
 8003734:	4640      	mov	r0, r8
 8003736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800373a:	4798      	blx	r3
 800373c:	6923      	ldr	r3, [r4, #16]
 800373e:	3b01      	subs	r3, #1
 8003740:	6123      	str	r3, [r4, #16]
 8003742:	e6e7      	b.n	8003514 <_scanf_float+0x80>
 8003744:	1e6b      	subs	r3, r5, #1
 8003746:	2b06      	cmp	r3, #6
 8003748:	d824      	bhi.n	8003794 <_scanf_float+0x300>
 800374a:	2d02      	cmp	r5, #2
 800374c:	d836      	bhi.n	80037bc <_scanf_float+0x328>
 800374e:	9b01      	ldr	r3, [sp, #4]
 8003750:	429e      	cmp	r6, r3
 8003752:	f67f aee3 	bls.w	800351c <_scanf_float+0x88>
 8003756:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800375a:	463a      	mov	r2, r7
 800375c:	4640      	mov	r0, r8
 800375e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003762:	4798      	blx	r3
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	3b01      	subs	r3, #1
 8003768:	6123      	str	r3, [r4, #16]
 800376a:	e7f0      	b.n	800374e <_scanf_float+0x2ba>
 800376c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003770:	463a      	mov	r2, r7
 8003772:	4640      	mov	r0, r8
 8003774:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003778:	4798      	blx	r3
 800377a:	6923      	ldr	r3, [r4, #16]
 800377c:	3b01      	subs	r3, #1
 800377e:	6123      	str	r3, [r4, #16]
 8003780:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003784:	fa5f fa8a 	uxtb.w	sl, sl
 8003788:	f1ba 0f02 	cmp.w	sl, #2
 800378c:	d1ee      	bne.n	800376c <_scanf_float+0x2d8>
 800378e:	3d03      	subs	r5, #3
 8003790:	b2ed      	uxtb	r5, r5
 8003792:	1b76      	subs	r6, r6, r5
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	05da      	lsls	r2, r3, #23
 8003798:	d530      	bpl.n	80037fc <_scanf_float+0x368>
 800379a:	055b      	lsls	r3, r3, #21
 800379c:	d511      	bpl.n	80037c2 <_scanf_float+0x32e>
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	429e      	cmp	r6, r3
 80037a2:	f67f aebb 	bls.w	800351c <_scanf_float+0x88>
 80037a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80037aa:	463a      	mov	r2, r7
 80037ac:	4640      	mov	r0, r8
 80037ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80037b2:	4798      	blx	r3
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	6123      	str	r3, [r4, #16]
 80037ba:	e7f0      	b.n	800379e <_scanf_float+0x30a>
 80037bc:	46aa      	mov	sl, r5
 80037be:	46b3      	mov	fp, r6
 80037c0:	e7de      	b.n	8003780 <_scanf_float+0x2ec>
 80037c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80037c6:	6923      	ldr	r3, [r4, #16]
 80037c8:	2965      	cmp	r1, #101	@ 0x65
 80037ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80037ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80037d2:	6123      	str	r3, [r4, #16]
 80037d4:	d00c      	beq.n	80037f0 <_scanf_float+0x35c>
 80037d6:	2945      	cmp	r1, #69	@ 0x45
 80037d8:	d00a      	beq.n	80037f0 <_scanf_float+0x35c>
 80037da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80037de:	463a      	mov	r2, r7
 80037e0:	4640      	mov	r0, r8
 80037e2:	4798      	blx	r3
 80037e4:	6923      	ldr	r3, [r4, #16]
 80037e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	1eb5      	subs	r5, r6, #2
 80037ee:	6123      	str	r3, [r4, #16]
 80037f0:	463a      	mov	r2, r7
 80037f2:	4640      	mov	r0, r8
 80037f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80037f8:	4798      	blx	r3
 80037fa:	462e      	mov	r6, r5
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	f012 0210 	ands.w	r2, r2, #16
 8003802:	d001      	beq.n	8003808 <_scanf_float+0x374>
 8003804:	2000      	movs	r0, #0
 8003806:	e68a      	b.n	800351e <_scanf_float+0x8a>
 8003808:	7032      	strb	r2, [r6, #0]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003814:	d11c      	bne.n	8003850 <_scanf_float+0x3bc>
 8003816:	9b02      	ldr	r3, [sp, #8]
 8003818:	454b      	cmp	r3, r9
 800381a:	eba3 0209 	sub.w	r2, r3, r9
 800381e:	d123      	bne.n	8003868 <_scanf_float+0x3d4>
 8003820:	2200      	movs	r2, #0
 8003822:	4640      	mov	r0, r8
 8003824:	9901      	ldr	r1, [sp, #4]
 8003826:	f002 fc23 	bl	8006070 <_strtod_r>
 800382a:	9b03      	ldr	r3, [sp, #12]
 800382c:	6825      	ldr	r5, [r4, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f015 0f02 	tst.w	r5, #2
 8003834:	4606      	mov	r6, r0
 8003836:	460f      	mov	r7, r1
 8003838:	f103 0204 	add.w	r2, r3, #4
 800383c:	d01f      	beq.n	800387e <_scanf_float+0x3ea>
 800383e:	9903      	ldr	r1, [sp, #12]
 8003840:	600a      	str	r2, [r1, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	e9c3 6700 	strd	r6, r7, [r3]
 8003848:	68e3      	ldr	r3, [r4, #12]
 800384a:	3301      	adds	r3, #1
 800384c:	60e3      	str	r3, [r4, #12]
 800384e:	e7d9      	b.n	8003804 <_scanf_float+0x370>
 8003850:	9b04      	ldr	r3, [sp, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0e4      	beq.n	8003820 <_scanf_float+0x38c>
 8003856:	9905      	ldr	r1, [sp, #20]
 8003858:	230a      	movs	r3, #10
 800385a:	4640      	mov	r0, r8
 800385c:	3101      	adds	r1, #1
 800385e:	f002 fc87 	bl	8006170 <_strtol_r>
 8003862:	9b04      	ldr	r3, [sp, #16]
 8003864:	9e05      	ldr	r6, [sp, #20]
 8003866:	1ac2      	subs	r2, r0, r3
 8003868:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800386c:	429e      	cmp	r6, r3
 800386e:	bf28      	it	cs
 8003870:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003874:	4630      	mov	r0, r6
 8003876:	490d      	ldr	r1, [pc, #52]	@ (80038ac <_scanf_float+0x418>)
 8003878:	f000 f912 	bl	8003aa0 <siprintf>
 800387c:	e7d0      	b.n	8003820 <_scanf_float+0x38c>
 800387e:	076d      	lsls	r5, r5, #29
 8003880:	d4dd      	bmi.n	800383e <_scanf_float+0x3aa>
 8003882:	9d03      	ldr	r5, [sp, #12]
 8003884:	602a      	str	r2, [r5, #0]
 8003886:	681d      	ldr	r5, [r3, #0]
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	f7fd f8be 	bl	8000a0c <__aeabi_dcmpun>
 8003890:	b120      	cbz	r0, 800389c <_scanf_float+0x408>
 8003892:	4807      	ldr	r0, [pc, #28]	@ (80038b0 <_scanf_float+0x41c>)
 8003894:	f000 f9f6 	bl	8003c84 <nanf>
 8003898:	6028      	str	r0, [r5, #0]
 800389a:	e7d5      	b.n	8003848 <_scanf_float+0x3b4>
 800389c:	4630      	mov	r0, r6
 800389e:	4639      	mov	r1, r7
 80038a0:	f7fd f912 	bl	8000ac8 <__aeabi_d2f>
 80038a4:	e7f8      	b.n	8003898 <_scanf_float+0x404>
 80038a6:	f04f 0900 	mov.w	r9, #0
 80038aa:	e62d      	b.n	8003508 <_scanf_float+0x74>
 80038ac:	080073ae 	.word	0x080073ae
 80038b0:	08007745 	.word	0x08007745

080038b4 <std>:
 80038b4:	2300      	movs	r3, #0
 80038b6:	b510      	push	{r4, lr}
 80038b8:	4604      	mov	r4, r0
 80038ba:	e9c0 3300 	strd	r3, r3, [r0]
 80038be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038c2:	6083      	str	r3, [r0, #8]
 80038c4:	8181      	strh	r1, [r0, #12]
 80038c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80038c8:	81c2      	strh	r2, [r0, #14]
 80038ca:	6183      	str	r3, [r0, #24]
 80038cc:	4619      	mov	r1, r3
 80038ce:	2208      	movs	r2, #8
 80038d0:	305c      	adds	r0, #92	@ 0x5c
 80038d2:	f000 f948 	bl	8003b66 <memset>
 80038d6:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <std+0x58>)
 80038d8:	6224      	str	r4, [r4, #32]
 80038da:	6263      	str	r3, [r4, #36]	@ 0x24
 80038dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <std+0x5c>)
 80038de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <std+0x60>)
 80038e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <std+0x64>)
 80038e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80038e8:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <std+0x68>)
 80038ea:	429c      	cmp	r4, r3
 80038ec:	d006      	beq.n	80038fc <std+0x48>
 80038ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038f2:	4294      	cmp	r4, r2
 80038f4:	d002      	beq.n	80038fc <std+0x48>
 80038f6:	33d0      	adds	r3, #208	@ 0xd0
 80038f8:	429c      	cmp	r4, r3
 80038fa:	d105      	bne.n	8003908 <std+0x54>
 80038fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003904:	f000 b9ac 	b.w	8003c60 <__retarget_lock_init_recursive>
 8003908:	bd10      	pop	{r4, pc}
 800390a:	bf00      	nop
 800390c:	08003ae1 	.word	0x08003ae1
 8003910:	08003b03 	.word	0x08003b03
 8003914:	08003b3b 	.word	0x08003b3b
 8003918:	08003b5f 	.word	0x08003b5f
 800391c:	20000260 	.word	0x20000260

08003920 <stdio_exit_handler>:
 8003920:	4a02      	ldr	r2, [pc, #8]	@ (800392c <stdio_exit_handler+0xc>)
 8003922:	4903      	ldr	r1, [pc, #12]	@ (8003930 <stdio_exit_handler+0x10>)
 8003924:	4803      	ldr	r0, [pc, #12]	@ (8003934 <stdio_exit_handler+0x14>)
 8003926:	f000 b869 	b.w	80039fc <_fwalk_sglue>
 800392a:	bf00      	nop
 800392c:	2000001c 	.word	0x2000001c
 8003930:	08006525 	.word	0x08006525
 8003934:	2000002c 	.word	0x2000002c

08003938 <cleanup_stdio>:
 8003938:	6841      	ldr	r1, [r0, #4]
 800393a:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <cleanup_stdio+0x34>)
 800393c:	b510      	push	{r4, lr}
 800393e:	4299      	cmp	r1, r3
 8003940:	4604      	mov	r4, r0
 8003942:	d001      	beq.n	8003948 <cleanup_stdio+0x10>
 8003944:	f002 fdee 	bl	8006524 <_fflush_r>
 8003948:	68a1      	ldr	r1, [r4, #8]
 800394a:	4b09      	ldr	r3, [pc, #36]	@ (8003970 <cleanup_stdio+0x38>)
 800394c:	4299      	cmp	r1, r3
 800394e:	d002      	beq.n	8003956 <cleanup_stdio+0x1e>
 8003950:	4620      	mov	r0, r4
 8003952:	f002 fde7 	bl	8006524 <_fflush_r>
 8003956:	68e1      	ldr	r1, [r4, #12]
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <cleanup_stdio+0x3c>)
 800395a:	4299      	cmp	r1, r3
 800395c:	d004      	beq.n	8003968 <cleanup_stdio+0x30>
 800395e:	4620      	mov	r0, r4
 8003960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003964:	f002 bdde 	b.w	8006524 <_fflush_r>
 8003968:	bd10      	pop	{r4, pc}
 800396a:	bf00      	nop
 800396c:	20000260 	.word	0x20000260
 8003970:	200002c8 	.word	0x200002c8
 8003974:	20000330 	.word	0x20000330

08003978 <global_stdio_init.part.0>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <global_stdio_init.part.0+0x30>)
 800397c:	4c0b      	ldr	r4, [pc, #44]	@ (80039ac <global_stdio_init.part.0+0x34>)
 800397e:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <global_stdio_init.part.0+0x38>)
 8003980:	4620      	mov	r0, r4
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	2104      	movs	r1, #4
 8003986:	2200      	movs	r2, #0
 8003988:	f7ff ff94 	bl	80038b4 <std>
 800398c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003990:	2201      	movs	r2, #1
 8003992:	2109      	movs	r1, #9
 8003994:	f7ff ff8e 	bl	80038b4 <std>
 8003998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800399c:	2202      	movs	r2, #2
 800399e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039a2:	2112      	movs	r1, #18
 80039a4:	f7ff bf86 	b.w	80038b4 <std>
 80039a8:	20000398 	.word	0x20000398
 80039ac:	20000260 	.word	0x20000260
 80039b0:	08003921 	.word	0x08003921

080039b4 <__sfp_lock_acquire>:
 80039b4:	4801      	ldr	r0, [pc, #4]	@ (80039bc <__sfp_lock_acquire+0x8>)
 80039b6:	f000 b954 	b.w	8003c62 <__retarget_lock_acquire_recursive>
 80039ba:	bf00      	nop
 80039bc:	200003a1 	.word	0x200003a1

080039c0 <__sfp_lock_release>:
 80039c0:	4801      	ldr	r0, [pc, #4]	@ (80039c8 <__sfp_lock_release+0x8>)
 80039c2:	f000 b94f 	b.w	8003c64 <__retarget_lock_release_recursive>
 80039c6:	bf00      	nop
 80039c8:	200003a1 	.word	0x200003a1

080039cc <__sinit>:
 80039cc:	b510      	push	{r4, lr}
 80039ce:	4604      	mov	r4, r0
 80039d0:	f7ff fff0 	bl	80039b4 <__sfp_lock_acquire>
 80039d4:	6a23      	ldr	r3, [r4, #32]
 80039d6:	b11b      	cbz	r3, 80039e0 <__sinit+0x14>
 80039d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039dc:	f7ff bff0 	b.w	80039c0 <__sfp_lock_release>
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <__sinit+0x28>)
 80039e2:	6223      	str	r3, [r4, #32]
 80039e4:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <__sinit+0x2c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f5      	bne.n	80039d8 <__sinit+0xc>
 80039ec:	f7ff ffc4 	bl	8003978 <global_stdio_init.part.0>
 80039f0:	e7f2      	b.n	80039d8 <__sinit+0xc>
 80039f2:	bf00      	nop
 80039f4:	08003939 	.word	0x08003939
 80039f8:	20000398 	.word	0x20000398

080039fc <_fwalk_sglue>:
 80039fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a00:	4607      	mov	r7, r0
 8003a02:	4688      	mov	r8, r1
 8003a04:	4614      	mov	r4, r2
 8003a06:	2600      	movs	r6, #0
 8003a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8003a10:	d505      	bpl.n	8003a1e <_fwalk_sglue+0x22>
 8003a12:	6824      	ldr	r4, [r4, #0]
 8003a14:	2c00      	cmp	r4, #0
 8003a16:	d1f7      	bne.n	8003a08 <_fwalk_sglue+0xc>
 8003a18:	4630      	mov	r0, r6
 8003a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a1e:	89ab      	ldrh	r3, [r5, #12]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d907      	bls.n	8003a34 <_fwalk_sglue+0x38>
 8003a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	d003      	beq.n	8003a34 <_fwalk_sglue+0x38>
 8003a2c:	4629      	mov	r1, r5
 8003a2e:	4638      	mov	r0, r7
 8003a30:	47c0      	blx	r8
 8003a32:	4306      	orrs	r6, r0
 8003a34:	3568      	adds	r5, #104	@ 0x68
 8003a36:	e7e9      	b.n	8003a0c <_fwalk_sglue+0x10>

08003a38 <sniprintf>:
 8003a38:	b40c      	push	{r2, r3}
 8003a3a:	b530      	push	{r4, r5, lr}
 8003a3c:	4b17      	ldr	r3, [pc, #92]	@ (8003a9c <sniprintf+0x64>)
 8003a3e:	1e0c      	subs	r4, r1, #0
 8003a40:	681d      	ldr	r5, [r3, #0]
 8003a42:	b09d      	sub	sp, #116	@ 0x74
 8003a44:	da08      	bge.n	8003a58 <sniprintf+0x20>
 8003a46:	238b      	movs	r3, #139	@ 0x8b
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	602b      	str	r3, [r5, #0]
 8003a4e:	b01d      	add	sp, #116	@ 0x74
 8003a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a54:	b002      	add	sp, #8
 8003a56:	4770      	bx	lr
 8003a58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a60:	bf0c      	ite	eq
 8003a62:	4623      	moveq	r3, r4
 8003a64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	9307      	str	r3, [sp, #28]
 8003a6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a70:	9002      	str	r0, [sp, #8]
 8003a72:	9006      	str	r0, [sp, #24]
 8003a74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a78:	4628      	mov	r0, r5
 8003a7a:	ab21      	add	r3, sp, #132	@ 0x84
 8003a7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a7e:	a902      	add	r1, sp, #8
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	f002 fbd3 	bl	800622c <_svfiprintf_r>
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	bfbc      	itt	lt
 8003a8a:	238b      	movlt	r3, #139	@ 0x8b
 8003a8c:	602b      	strlt	r3, [r5, #0]
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	d0dd      	beq.n	8003a4e <sniprintf+0x16>
 8003a92:	2200      	movs	r2, #0
 8003a94:	9b02      	ldr	r3, [sp, #8]
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	e7d9      	b.n	8003a4e <sniprintf+0x16>
 8003a9a:	bf00      	nop
 8003a9c:	20000028 	.word	0x20000028

08003aa0 <siprintf>:
 8003aa0:	b40e      	push	{r1, r2, r3}
 8003aa2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003aa6:	b500      	push	{lr}
 8003aa8:	b09c      	sub	sp, #112	@ 0x70
 8003aaa:	ab1d      	add	r3, sp, #116	@ 0x74
 8003aac:	9002      	str	r0, [sp, #8]
 8003aae:	9006      	str	r0, [sp, #24]
 8003ab0:	9107      	str	r1, [sp, #28]
 8003ab2:	9104      	str	r1, [sp, #16]
 8003ab4:	4808      	ldr	r0, [pc, #32]	@ (8003ad8 <siprintf+0x38>)
 8003ab6:	4909      	ldr	r1, [pc, #36]	@ (8003adc <siprintf+0x3c>)
 8003ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003abc:	9105      	str	r1, [sp, #20]
 8003abe:	6800      	ldr	r0, [r0, #0]
 8003ac0:	a902      	add	r1, sp, #8
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	f002 fbb2 	bl	800622c <_svfiprintf_r>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	9b02      	ldr	r3, [sp, #8]
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	b01c      	add	sp, #112	@ 0x70
 8003ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ad4:	b003      	add	sp, #12
 8003ad6:	4770      	bx	lr
 8003ad8:	20000028 	.word	0x20000028
 8003adc:	ffff0208 	.word	0xffff0208

08003ae0 <__sread>:
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ae8:	f000 f86c 	bl	8003bc4 <_read_r>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	bfab      	itete	ge
 8003af0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003af2:	89a3      	ldrhlt	r3, [r4, #12]
 8003af4:	181b      	addge	r3, r3, r0
 8003af6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003afa:	bfac      	ite	ge
 8003afc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003afe:	81a3      	strhlt	r3, [r4, #12]
 8003b00:	bd10      	pop	{r4, pc}

08003b02 <__swrite>:
 8003b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b06:	461f      	mov	r7, r3
 8003b08:	898b      	ldrh	r3, [r1, #12]
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	05db      	lsls	r3, r3, #23
 8003b0e:	460c      	mov	r4, r1
 8003b10:	4616      	mov	r6, r2
 8003b12:	d505      	bpl.n	8003b20 <__swrite+0x1e>
 8003b14:	2302      	movs	r3, #2
 8003b16:	2200      	movs	r2, #0
 8003b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1c:	f000 f840 	bl	8003ba0 <_lseek_r>
 8003b20:	89a3      	ldrh	r3, [r4, #12]
 8003b22:	4632      	mov	r2, r6
 8003b24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b28:	81a3      	strh	r3, [r4, #12]
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	463b      	mov	r3, r7
 8003b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b36:	f000 b857 	b.w	8003be8 <_write_r>

08003b3a <__sseek>:
 8003b3a:	b510      	push	{r4, lr}
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b42:	f000 f82d 	bl	8003ba0 <_lseek_r>
 8003b46:	1c43      	adds	r3, r0, #1
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	bf15      	itete	ne
 8003b4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b56:	81a3      	strheq	r3, [r4, #12]
 8003b58:	bf18      	it	ne
 8003b5a:	81a3      	strhne	r3, [r4, #12]
 8003b5c:	bd10      	pop	{r4, pc}

08003b5e <__sclose>:
 8003b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b62:	f000 b80d 	b.w	8003b80 <_close_r>

08003b66 <memset>:
 8003b66:	4603      	mov	r3, r0
 8003b68:	4402      	add	r2, r0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d100      	bne.n	8003b70 <memset+0xa>
 8003b6e:	4770      	bx	lr
 8003b70:	f803 1b01 	strb.w	r1, [r3], #1
 8003b74:	e7f9      	b.n	8003b6a <memset+0x4>
	...

08003b78 <_localeconv_r>:
 8003b78:	4800      	ldr	r0, [pc, #0]	@ (8003b7c <_localeconv_r+0x4>)
 8003b7a:	4770      	bx	lr
 8003b7c:	20000168 	.word	0x20000168

08003b80 <_close_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	2300      	movs	r3, #0
 8003b84:	4d05      	ldr	r5, [pc, #20]	@ (8003b9c <_close_r+0x1c>)
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fd fc31 	bl	80013f2 <_close>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_close_r+0x1a>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_close_r+0x1a>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	2000039c 	.word	0x2000039c

08003ba0 <_lseek_r>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	4d05      	ldr	r5, [pc, #20]	@ (8003bc0 <_lseek_r+0x20>)
 8003bac:	602a      	str	r2, [r5, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7fd fc43 	bl	800143a <_lseek>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <_lseek_r+0x1e>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	b103      	cbz	r3, 8003bbe <_lseek_r+0x1e>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	2000039c 	.word	0x2000039c

08003bc4 <_read_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	2200      	movs	r2, #0
 8003bce:	4d05      	ldr	r5, [pc, #20]	@ (8003be4 <_read_r+0x20>)
 8003bd0:	602a      	str	r2, [r5, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f7fd fbd4 	bl	8001380 <_read>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	d102      	bne.n	8003be2 <_read_r+0x1e>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	b103      	cbz	r3, 8003be2 <_read_r+0x1e>
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	bd38      	pop	{r3, r4, r5, pc}
 8003be4:	2000039c 	.word	0x2000039c

08003be8 <_write_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4604      	mov	r4, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4d05      	ldr	r5, [pc, #20]	@ (8003c08 <_write_r+0x20>)
 8003bf4:	602a      	str	r2, [r5, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f7fd fbdf 	bl	80013ba <_write>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_write_r+0x1e>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_write_r+0x1e>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	2000039c 	.word	0x2000039c

08003c0c <__errno>:
 8003c0c:	4b01      	ldr	r3, [pc, #4]	@ (8003c14 <__errno+0x8>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000028 	.word	0x20000028

08003c18 <__libc_init_array>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	2600      	movs	r6, #0
 8003c1c:	4d0c      	ldr	r5, [pc, #48]	@ (8003c50 <__libc_init_array+0x38>)
 8003c1e:	4c0d      	ldr	r4, [pc, #52]	@ (8003c54 <__libc_init_array+0x3c>)
 8003c20:	1b64      	subs	r4, r4, r5
 8003c22:	10a4      	asrs	r4, r4, #2
 8003c24:	42a6      	cmp	r6, r4
 8003c26:	d109      	bne.n	8003c3c <__libc_init_array+0x24>
 8003c28:	f003 fb68 	bl	80072fc <_init>
 8003c2c:	2600      	movs	r6, #0
 8003c2e:	4d0a      	ldr	r5, [pc, #40]	@ (8003c58 <__libc_init_array+0x40>)
 8003c30:	4c0a      	ldr	r4, [pc, #40]	@ (8003c5c <__libc_init_array+0x44>)
 8003c32:	1b64      	subs	r4, r4, r5
 8003c34:	10a4      	asrs	r4, r4, #2
 8003c36:	42a6      	cmp	r6, r4
 8003c38:	d105      	bne.n	8003c46 <__libc_init_array+0x2e>
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c40:	4798      	blx	r3
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7ee      	b.n	8003c24 <__libc_init_array+0xc>
 8003c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c4a:	4798      	blx	r3
 8003c4c:	3601      	adds	r6, #1
 8003c4e:	e7f2      	b.n	8003c36 <__libc_init_array+0x1e>
 8003c50:	080077b0 	.word	0x080077b0
 8003c54:	080077b0 	.word	0x080077b0
 8003c58:	080077b0 	.word	0x080077b0
 8003c5c:	080077b4 	.word	0x080077b4

08003c60 <__retarget_lock_init_recursive>:
 8003c60:	4770      	bx	lr

08003c62 <__retarget_lock_acquire_recursive>:
 8003c62:	4770      	bx	lr

08003c64 <__retarget_lock_release_recursive>:
 8003c64:	4770      	bx	lr

08003c66 <memchr>:
 8003c66:	4603      	mov	r3, r0
 8003c68:	b510      	push	{r4, lr}
 8003c6a:	b2c9      	uxtb	r1, r1
 8003c6c:	4402      	add	r2, r0
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	d101      	bne.n	8003c78 <memchr+0x12>
 8003c74:	2000      	movs	r0, #0
 8003c76:	e003      	b.n	8003c80 <memchr+0x1a>
 8003c78:	7804      	ldrb	r4, [r0, #0]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	428c      	cmp	r4, r1
 8003c7e:	d1f6      	bne.n	8003c6e <memchr+0x8>
 8003c80:	bd10      	pop	{r4, pc}
	...

08003c84 <nanf>:
 8003c84:	4800      	ldr	r0, [pc, #0]	@ (8003c88 <nanf+0x4>)
 8003c86:	4770      	bx	lr
 8003c88:	7fc00000 	.word	0x7fc00000

08003c8c <quorem>:
 8003c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	6903      	ldr	r3, [r0, #16]
 8003c92:	690c      	ldr	r4, [r1, #16]
 8003c94:	4607      	mov	r7, r0
 8003c96:	42a3      	cmp	r3, r4
 8003c98:	db7e      	blt.n	8003d98 <quorem+0x10c>
 8003c9a:	3c01      	subs	r4, #1
 8003c9c:	00a3      	lsls	r3, r4, #2
 8003c9e:	f100 0514 	add.w	r5, r0, #20
 8003ca2:	f101 0814 	add.w	r8, r1, #20
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003cc2:	d32e      	bcc.n	8003d22 <quorem+0x96>
 8003cc4:	f04f 0a00 	mov.w	sl, #0
 8003cc8:	46c4      	mov	ip, r8
 8003cca:	46ae      	mov	lr, r5
 8003ccc:	46d3      	mov	fp, sl
 8003cce:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003cd2:	b298      	uxth	r0, r3
 8003cd4:	fb06 a000 	mla	r0, r6, r0, sl
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	0c02      	lsrs	r2, r0, #16
 8003cdc:	fb06 2303 	mla	r3, r6, r3, r2
 8003ce0:	f8de 2000 	ldr.w	r2, [lr]
 8003ce4:	b280      	uxth	r0, r0
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	1a12      	subs	r2, r2, r0
 8003cea:	445a      	add	r2, fp
 8003cec:	f8de 0000 	ldr.w	r0, [lr]
 8003cf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003cfa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003d04:	45e1      	cmp	r9, ip
 8003d06:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003d0a:	f84e 2b04 	str.w	r2, [lr], #4
 8003d0e:	d2de      	bcs.n	8003cce <quorem+0x42>
 8003d10:	9b00      	ldr	r3, [sp, #0]
 8003d12:	58eb      	ldr	r3, [r5, r3]
 8003d14:	b92b      	cbnz	r3, 8003d22 <quorem+0x96>
 8003d16:	9b01      	ldr	r3, [sp, #4]
 8003d18:	3b04      	subs	r3, #4
 8003d1a:	429d      	cmp	r5, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	d32f      	bcc.n	8003d80 <quorem+0xf4>
 8003d20:	613c      	str	r4, [r7, #16]
 8003d22:	4638      	mov	r0, r7
 8003d24:	f001 f9c4 	bl	80050b0 <__mcmp>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	db25      	blt.n	8003d78 <quorem+0xec>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d34:	f8d1 c000 	ldr.w	ip, [r1]
 8003d38:	fa1f fe82 	uxth.w	lr, r2
 8003d3c:	fa1f f38c 	uxth.w	r3, ip
 8003d40:	eba3 030e 	sub.w	r3, r3, lr
 8003d44:	4403      	add	r3, r0
 8003d46:	0c12      	lsrs	r2, r2, #16
 8003d48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003d4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d56:	45c1      	cmp	r9, r8
 8003d58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d5c:	f841 3b04 	str.w	r3, [r1], #4
 8003d60:	d2e6      	bcs.n	8003d30 <quorem+0xa4>
 8003d62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d6a:	b922      	cbnz	r2, 8003d76 <quorem+0xea>
 8003d6c:	3b04      	subs	r3, #4
 8003d6e:	429d      	cmp	r5, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	d30b      	bcc.n	8003d8c <quorem+0x100>
 8003d74:	613c      	str	r4, [r7, #16]
 8003d76:	3601      	adds	r6, #1
 8003d78:	4630      	mov	r0, r6
 8003d7a:	b003      	add	sp, #12
 8003d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	3b04      	subs	r3, #4
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	d1cb      	bne.n	8003d20 <quorem+0x94>
 8003d88:	3c01      	subs	r4, #1
 8003d8a:	e7c6      	b.n	8003d1a <quorem+0x8e>
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	2a00      	cmp	r2, #0
 8003d92:	d1ef      	bne.n	8003d74 <quorem+0xe8>
 8003d94:	3c01      	subs	r4, #1
 8003d96:	e7ea      	b.n	8003d6e <quorem+0xe2>
 8003d98:	2000      	movs	r0, #0
 8003d9a:	e7ee      	b.n	8003d7a <quorem+0xee>
 8003d9c:	0000      	movs	r0, r0
	...

08003da0 <_dtoa_r>:
 8003da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da4:	4614      	mov	r4, r2
 8003da6:	461d      	mov	r5, r3
 8003da8:	69c7      	ldr	r7, [r0, #28]
 8003daa:	b097      	sub	sp, #92	@ 0x5c
 8003dac:	4683      	mov	fp, r0
 8003dae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003db2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003db4:	b97f      	cbnz	r7, 8003dd6 <_dtoa_r+0x36>
 8003db6:	2010      	movs	r0, #16
 8003db8:	f000 fe02 	bl	80049c0 <malloc>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f8cb 001c 	str.w	r0, [fp, #28]
 8003dc2:	b920      	cbnz	r0, 8003dce <_dtoa_r+0x2e>
 8003dc4:	21ef      	movs	r1, #239	@ 0xef
 8003dc6:	4ba8      	ldr	r3, [pc, #672]	@ (8004068 <_dtoa_r+0x2c8>)
 8003dc8:	48a8      	ldr	r0, [pc, #672]	@ (800406c <_dtoa_r+0x2cc>)
 8003dca:	f002 fc23 	bl	8006614 <__assert_func>
 8003dce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003dd2:	6007      	str	r7, [r0, #0]
 8003dd4:	60c7      	str	r7, [r0, #12]
 8003dd6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	b159      	cbz	r1, 8003df6 <_dtoa_r+0x56>
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	2301      	movs	r3, #1
 8003de2:	4093      	lsls	r3, r2
 8003de4:	604a      	str	r2, [r1, #4]
 8003de6:	608b      	str	r3, [r1, #8]
 8003de8:	4658      	mov	r0, fp
 8003dea:	f000 fedf 	bl	8004bac <_Bfree>
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	1e2b      	subs	r3, r5, #0
 8003df8:	bfaf      	iteee	ge
 8003dfa:	2300      	movge	r3, #0
 8003dfc:	2201      	movlt	r2, #1
 8003dfe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003e02:	9303      	strlt	r3, [sp, #12]
 8003e04:	bfa8      	it	ge
 8003e06:	6033      	strge	r3, [r6, #0]
 8003e08:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003e0c:	4b98      	ldr	r3, [pc, #608]	@ (8004070 <_dtoa_r+0x2d0>)
 8003e0e:	bfb8      	it	lt
 8003e10:	6032      	strlt	r2, [r6, #0]
 8003e12:	ea33 0308 	bics.w	r3, r3, r8
 8003e16:	d112      	bne.n	8003e3e <_dtoa_r+0x9e>
 8003e18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003e1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003e24:	4323      	orrs	r3, r4
 8003e26:	f000 8550 	beq.w	80048ca <_dtoa_r+0xb2a>
 8003e2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003e2c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004074 <_dtoa_r+0x2d4>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8552 	beq.w	80048da <_dtoa_r+0xb3a>
 8003e36:	f10a 0303 	add.w	r3, sl, #3
 8003e3a:	f000 bd4c 	b.w	80048d6 <_dtoa_r+0xb36>
 8003e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f7fc fdab 	bl	80009a8 <__aeabi_dcmpeq>
 8003e52:	4607      	mov	r7, r0
 8003e54:	b158      	cbz	r0, 8003e6e <_dtoa_r+0xce>
 8003e56:	2301      	movs	r3, #1
 8003e58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003e5e:	b113      	cbz	r3, 8003e66 <_dtoa_r+0xc6>
 8003e60:	4b85      	ldr	r3, [pc, #532]	@ (8004078 <_dtoa_r+0x2d8>)
 8003e62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800407c <_dtoa_r+0x2dc>
 8003e6a:	f000 bd36 	b.w	80048da <_dtoa_r+0xb3a>
 8003e6e:	ab14      	add	r3, sp, #80	@ 0x50
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	ab15      	add	r3, sp, #84	@ 0x54
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	4658      	mov	r0, fp
 8003e78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003e7c:	f001 fa30 	bl	80052e0 <__d2b>
 8003e80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003e84:	4681      	mov	r9, r0
 8003e86:	2e00      	cmp	r6, #0
 8003e88:	d077      	beq.n	8003f7a <_dtoa_r+0x1da>
 8003e8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003ea0:	9712      	str	r7, [sp, #72]	@ 0x48
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4b76      	ldr	r3, [pc, #472]	@ (8004080 <_dtoa_r+0x2e0>)
 8003ea8:	f7fc f95e 	bl	8000168 <__aeabi_dsub>
 8003eac:	a368      	add	r3, pc, #416	@ (adr r3, 8004050 <_dtoa_r+0x2b0>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	f7fc fb11 	bl	80004d8 <__aeabi_dmul>
 8003eb6:	a368      	add	r3, pc, #416	@ (adr r3, 8004058 <_dtoa_r+0x2b8>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f7fc f956 	bl	800016c <__adddf3>
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	460d      	mov	r5, r1
 8003ec6:	f7fc fa9d 	bl	8000404 <__aeabi_i2d>
 8003eca:	a365      	add	r3, pc, #404	@ (adr r3, 8004060 <_dtoa_r+0x2c0>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f7fc fb02 	bl	80004d8 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4620      	mov	r0, r4
 8003eda:	4629      	mov	r1, r5
 8003edc:	f7fc f946 	bl	800016c <__adddf3>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	f7fc fda8 	bl	8000a38 <__aeabi_d2iz>
 8003ee8:	2200      	movs	r2, #0
 8003eea:	4607      	mov	r7, r0
 8003eec:	2300      	movs	r3, #0
 8003eee:	4620      	mov	r0, r4
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	f7fc fd63 	bl	80009bc <__aeabi_dcmplt>
 8003ef6:	b140      	cbz	r0, 8003f0a <_dtoa_r+0x16a>
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f7fc fa83 	bl	8000404 <__aeabi_i2d>
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	f7fc fd51 	bl	80009a8 <__aeabi_dcmpeq>
 8003f06:	b900      	cbnz	r0, 8003f0a <_dtoa_r+0x16a>
 8003f08:	3f01      	subs	r7, #1
 8003f0a:	2f16      	cmp	r7, #22
 8003f0c:	d853      	bhi.n	8003fb6 <_dtoa_r+0x216>
 8003f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f12:	4b5c      	ldr	r3, [pc, #368]	@ (8004084 <_dtoa_r+0x2e4>)
 8003f14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc fd4e 	bl	80009bc <__aeabi_dcmplt>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d04a      	beq.n	8003fba <_dtoa_r+0x21a>
 8003f24:	2300      	movs	r3, #0
 8003f26:	3f01      	subs	r7, #1
 8003f28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003f2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003f2c:	1b9b      	subs	r3, r3, r6
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	bf46      	itte	mi
 8003f32:	f1c3 0801 	rsbmi	r8, r3, #1
 8003f36:	2300      	movmi	r3, #0
 8003f38:	f04f 0800 	movpl.w	r8, #0
 8003f3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f3e:	bf48      	it	mi
 8003f40:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003f42:	2f00      	cmp	r7, #0
 8003f44:	db3b      	blt.n	8003fbe <_dtoa_r+0x21e>
 8003f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f48:	970e      	str	r7, [sp, #56]	@ 0x38
 8003f4a:	443b      	add	r3, r7
 8003f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f4e:	2300      	movs	r3, #0
 8003f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f54:	2b09      	cmp	r3, #9
 8003f56:	d866      	bhi.n	8004026 <_dtoa_r+0x286>
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	bfc4      	itt	gt
 8003f5c:	3b04      	subgt	r3, #4
 8003f5e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003f60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f62:	bfc8      	it	gt
 8003f64:	2400      	movgt	r4, #0
 8003f66:	f1a3 0302 	sub.w	r3, r3, #2
 8003f6a:	bfd8      	it	le
 8003f6c:	2401      	movle	r4, #1
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d864      	bhi.n	800403c <_dtoa_r+0x29c>
 8003f72:	e8df f003 	tbb	[pc, r3]
 8003f76:	382b      	.short	0x382b
 8003f78:	5636      	.short	0x5636
 8003f7a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003f7e:	441e      	add	r6, r3
 8003f80:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	bfc1      	itttt	gt
 8003f88:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003f90:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f94:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f98:	bfd6      	itet	le
 8003f9a:	f1c3 0320 	rsble	r3, r3, #32
 8003f9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003fa2:	fa04 f003 	lslle.w	r0, r4, r3
 8003fa6:	f7fc fa1d 	bl	80003e4 <__aeabi_ui2d>
 8003faa:	2201      	movs	r2, #1
 8003fac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003fb0:	3e01      	subs	r6, #1
 8003fb2:	9212      	str	r2, [sp, #72]	@ 0x48
 8003fb4:	e775      	b.n	8003ea2 <_dtoa_r+0x102>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e7b6      	b.n	8003f28 <_dtoa_r+0x188>
 8003fba:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003fbc:	e7b5      	b.n	8003f2a <_dtoa_r+0x18a>
 8003fbe:	427b      	negs	r3, r7
 8003fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	eba8 0807 	sub.w	r8, r8, r7
 8003fc8:	930e      	str	r3, [sp, #56]	@ 0x38
 8003fca:	e7c2      	b.n	8003f52 <_dtoa_r+0x1b2>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	dc35      	bgt.n	8004042 <_dtoa_r+0x2a2>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	461a      	mov	r2, r3
 8003fda:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003fde:	9221      	str	r2, [sp, #132]	@ 0x84
 8003fe0:	e00b      	b.n	8003ffa <_dtoa_r+0x25a>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e7f3      	b.n	8003fce <_dtoa_r+0x22e>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	9308      	str	r3, [sp, #32]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	9307      	str	r3, [sp, #28]
 8003ff6:	bfb8      	it	lt
 8003ff8:	2301      	movlt	r3, #1
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004002:	f102 0514 	add.w	r5, r2, #20
 8004006:	429d      	cmp	r5, r3
 8004008:	d91f      	bls.n	800404a <_dtoa_r+0x2aa>
 800400a:	6041      	str	r1, [r0, #4]
 800400c:	4658      	mov	r0, fp
 800400e:	f000 fd8d 	bl	8004b2c <_Balloc>
 8004012:	4682      	mov	sl, r0
 8004014:	2800      	cmp	r0, #0
 8004016:	d139      	bne.n	800408c <_dtoa_r+0x2ec>
 8004018:	4602      	mov	r2, r0
 800401a:	f240 11af 	movw	r1, #431	@ 0x1af
 800401e:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <_dtoa_r+0x2e8>)
 8004020:	e6d2      	b.n	8003dc8 <_dtoa_r+0x28>
 8004022:	2301      	movs	r3, #1
 8004024:	e7e0      	b.n	8003fe8 <_dtoa_r+0x248>
 8004026:	2401      	movs	r4, #1
 8004028:	2300      	movs	r3, #0
 800402a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800402c:	9320      	str	r3, [sp, #128]	@ 0x80
 800402e:	f04f 33ff 	mov.w	r3, #4294967295
 8004032:	2200      	movs	r2, #0
 8004034:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004038:	2312      	movs	r3, #18
 800403a:	e7d0      	b.n	8003fde <_dtoa_r+0x23e>
 800403c:	2301      	movs	r3, #1
 800403e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004040:	e7f5      	b.n	800402e <_dtoa_r+0x28e>
 8004042:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004044:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004048:	e7d7      	b.n	8003ffa <_dtoa_r+0x25a>
 800404a:	3101      	adds	r1, #1
 800404c:	0052      	lsls	r2, r2, #1
 800404e:	e7d8      	b.n	8004002 <_dtoa_r+0x262>
 8004050:	636f4361 	.word	0x636f4361
 8004054:	3fd287a7 	.word	0x3fd287a7
 8004058:	8b60c8b3 	.word	0x8b60c8b3
 800405c:	3fc68a28 	.word	0x3fc68a28
 8004060:	509f79fb 	.word	0x509f79fb
 8004064:	3fd34413 	.word	0x3fd34413
 8004068:	080073c0 	.word	0x080073c0
 800406c:	080073d7 	.word	0x080073d7
 8004070:	7ff00000 	.word	0x7ff00000
 8004074:	080073bc 	.word	0x080073bc
 8004078:	0800738b 	.word	0x0800738b
 800407c:	0800738a 	.word	0x0800738a
 8004080:	3ff80000 	.word	0x3ff80000
 8004084:	080074d0 	.word	0x080074d0
 8004088:	0800742f 	.word	0x0800742f
 800408c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004090:	6018      	str	r0, [r3, #0]
 8004092:	9b07      	ldr	r3, [sp, #28]
 8004094:	2b0e      	cmp	r3, #14
 8004096:	f200 80a4 	bhi.w	80041e2 <_dtoa_r+0x442>
 800409a:	2c00      	cmp	r4, #0
 800409c:	f000 80a1 	beq.w	80041e2 <_dtoa_r+0x442>
 80040a0:	2f00      	cmp	r7, #0
 80040a2:	dd33      	ble.n	800410c <_dtoa_r+0x36c>
 80040a4:	4b86      	ldr	r3, [pc, #536]	@ (80042c0 <_dtoa_r+0x520>)
 80040a6:	f007 020f 	and.w	r2, r7, #15
 80040aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040ae:	05f8      	lsls	r0, r7, #23
 80040b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80040bc:	d516      	bpl.n	80040ec <_dtoa_r+0x34c>
 80040be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040c2:	4b80      	ldr	r3, [pc, #512]	@ (80042c4 <_dtoa_r+0x524>)
 80040c4:	2603      	movs	r6, #3
 80040c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80040ca:	f7fc fb2f 	bl	800072c <__aeabi_ddiv>
 80040ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040d2:	f004 040f 	and.w	r4, r4, #15
 80040d6:	4d7b      	ldr	r5, [pc, #492]	@ (80042c4 <_dtoa_r+0x524>)
 80040d8:	b954      	cbnz	r4, 80040f0 <_dtoa_r+0x350>
 80040da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040e2:	f7fc fb23 	bl	800072c <__aeabi_ddiv>
 80040e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040ea:	e028      	b.n	800413e <_dtoa_r+0x39e>
 80040ec:	2602      	movs	r6, #2
 80040ee:	e7f2      	b.n	80040d6 <_dtoa_r+0x336>
 80040f0:	07e1      	lsls	r1, r4, #31
 80040f2:	d508      	bpl.n	8004106 <_dtoa_r+0x366>
 80040f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040fc:	f7fc f9ec 	bl	80004d8 <__aeabi_dmul>
 8004100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004104:	3601      	adds	r6, #1
 8004106:	1064      	asrs	r4, r4, #1
 8004108:	3508      	adds	r5, #8
 800410a:	e7e5      	b.n	80040d8 <_dtoa_r+0x338>
 800410c:	f000 80d2 	beq.w	80042b4 <_dtoa_r+0x514>
 8004110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004114:	427c      	negs	r4, r7
 8004116:	4b6a      	ldr	r3, [pc, #424]	@ (80042c0 <_dtoa_r+0x520>)
 8004118:	f004 020f 	and.w	r2, r4, #15
 800411c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc f9d8 	bl	80004d8 <__aeabi_dmul>
 8004128:	2602      	movs	r6, #2
 800412a:	2300      	movs	r3, #0
 800412c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004130:	4d64      	ldr	r5, [pc, #400]	@ (80042c4 <_dtoa_r+0x524>)
 8004132:	1124      	asrs	r4, r4, #4
 8004134:	2c00      	cmp	r4, #0
 8004136:	f040 80b2 	bne.w	800429e <_dtoa_r+0x4fe>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1d3      	bne.n	80040e6 <_dtoa_r+0x346>
 800413e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004142:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80b7 	beq.w	80042b8 <_dtoa_r+0x518>
 800414a:	2200      	movs	r2, #0
 800414c:	4620      	mov	r0, r4
 800414e:	4629      	mov	r1, r5
 8004150:	4b5d      	ldr	r3, [pc, #372]	@ (80042c8 <_dtoa_r+0x528>)
 8004152:	f7fc fc33 	bl	80009bc <__aeabi_dcmplt>
 8004156:	2800      	cmp	r0, #0
 8004158:	f000 80ae 	beq.w	80042b8 <_dtoa_r+0x518>
 800415c:	9b07      	ldr	r3, [sp, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80aa 	beq.w	80042b8 <_dtoa_r+0x518>
 8004164:	9b08      	ldr	r3, [sp, #32]
 8004166:	2b00      	cmp	r3, #0
 8004168:	dd37      	ble.n	80041da <_dtoa_r+0x43a>
 800416a:	1e7b      	subs	r3, r7, #1
 800416c:	4620      	mov	r0, r4
 800416e:	9304      	str	r3, [sp, #16]
 8004170:	2200      	movs	r2, #0
 8004172:	4629      	mov	r1, r5
 8004174:	4b55      	ldr	r3, [pc, #340]	@ (80042cc <_dtoa_r+0x52c>)
 8004176:	f7fc f9af 	bl	80004d8 <__aeabi_dmul>
 800417a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800417e:	9c08      	ldr	r4, [sp, #32]
 8004180:	3601      	adds	r6, #1
 8004182:	4630      	mov	r0, r6
 8004184:	f7fc f93e 	bl	8000404 <__aeabi_i2d>
 8004188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800418c:	f7fc f9a4 	bl	80004d8 <__aeabi_dmul>
 8004190:	2200      	movs	r2, #0
 8004192:	4b4f      	ldr	r3, [pc, #316]	@ (80042d0 <_dtoa_r+0x530>)
 8004194:	f7fb ffea 	bl	800016c <__adddf3>
 8004198:	4605      	mov	r5, r0
 800419a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800419e:	2c00      	cmp	r4, #0
 80041a0:	f040 809a 	bne.w	80042d8 <_dtoa_r+0x538>
 80041a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041a8:	2200      	movs	r2, #0
 80041aa:	4b4a      	ldr	r3, [pc, #296]	@ (80042d4 <_dtoa_r+0x534>)
 80041ac:	f7fb ffdc 	bl	8000168 <__aeabi_dsub>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041b8:	462a      	mov	r2, r5
 80041ba:	4633      	mov	r3, r6
 80041bc:	f7fc fc1c 	bl	80009f8 <__aeabi_dcmpgt>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	f040 828e 	bne.w	80046e2 <_dtoa_r+0x942>
 80041c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041ca:	462a      	mov	r2, r5
 80041cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80041d0:	f7fc fbf4 	bl	80009bc <__aeabi_dcmplt>
 80041d4:	2800      	cmp	r0, #0
 80041d6:	f040 8127 	bne.w	8004428 <_dtoa_r+0x688>
 80041da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80041de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80041e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f2c0 8163 	blt.w	80044b0 <_dtoa_r+0x710>
 80041ea:	2f0e      	cmp	r7, #14
 80041ec:	f300 8160 	bgt.w	80044b0 <_dtoa_r+0x710>
 80041f0:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <_dtoa_r+0x520>)
 80041f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80041f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80041fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004200:	2b00      	cmp	r3, #0
 8004202:	da03      	bge.n	800420c <_dtoa_r+0x46c>
 8004204:	9b07      	ldr	r3, [sp, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	f340 8100 	ble.w	800440c <_dtoa_r+0x66c>
 800420c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004210:	4656      	mov	r6, sl
 8004212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004216:	4620      	mov	r0, r4
 8004218:	4629      	mov	r1, r5
 800421a:	f7fc fa87 	bl	800072c <__aeabi_ddiv>
 800421e:	f7fc fc0b 	bl	8000a38 <__aeabi_d2iz>
 8004222:	4680      	mov	r8, r0
 8004224:	f7fc f8ee 	bl	8000404 <__aeabi_i2d>
 8004228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800422c:	f7fc f954 	bl	80004d8 <__aeabi_dmul>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4620      	mov	r0, r4
 8004236:	4629      	mov	r1, r5
 8004238:	f7fb ff96 	bl	8000168 <__aeabi_dsub>
 800423c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004240:	9d07      	ldr	r5, [sp, #28]
 8004242:	f806 4b01 	strb.w	r4, [r6], #1
 8004246:	eba6 040a 	sub.w	r4, r6, sl
 800424a:	42a5      	cmp	r5, r4
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	f040 8116 	bne.w	8004480 <_dtoa_r+0x6e0>
 8004254:	f7fb ff8a 	bl	800016c <__adddf3>
 8004258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800425c:	4604      	mov	r4, r0
 800425e:	460d      	mov	r5, r1
 8004260:	f7fc fbca 	bl	80009f8 <__aeabi_dcmpgt>
 8004264:	2800      	cmp	r0, #0
 8004266:	f040 80f8 	bne.w	800445a <_dtoa_r+0x6ba>
 800426a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800426e:	4620      	mov	r0, r4
 8004270:	4629      	mov	r1, r5
 8004272:	f7fc fb99 	bl	80009a8 <__aeabi_dcmpeq>
 8004276:	b118      	cbz	r0, 8004280 <_dtoa_r+0x4e0>
 8004278:	f018 0f01 	tst.w	r8, #1
 800427c:	f040 80ed 	bne.w	800445a <_dtoa_r+0x6ba>
 8004280:	4649      	mov	r1, r9
 8004282:	4658      	mov	r0, fp
 8004284:	f000 fc92 	bl	8004bac <_Bfree>
 8004288:	2300      	movs	r3, #0
 800428a:	7033      	strb	r3, [r6, #0]
 800428c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800428e:	3701      	adds	r7, #1
 8004290:	601f      	str	r7, [r3, #0]
 8004292:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8320 	beq.w	80048da <_dtoa_r+0xb3a>
 800429a:	601e      	str	r6, [r3, #0]
 800429c:	e31d      	b.n	80048da <_dtoa_r+0xb3a>
 800429e:	07e2      	lsls	r2, r4, #31
 80042a0:	d505      	bpl.n	80042ae <_dtoa_r+0x50e>
 80042a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042a6:	f7fc f917 	bl	80004d8 <__aeabi_dmul>
 80042aa:	2301      	movs	r3, #1
 80042ac:	3601      	adds	r6, #1
 80042ae:	1064      	asrs	r4, r4, #1
 80042b0:	3508      	adds	r5, #8
 80042b2:	e73f      	b.n	8004134 <_dtoa_r+0x394>
 80042b4:	2602      	movs	r6, #2
 80042b6:	e742      	b.n	800413e <_dtoa_r+0x39e>
 80042b8:	9c07      	ldr	r4, [sp, #28]
 80042ba:	9704      	str	r7, [sp, #16]
 80042bc:	e761      	b.n	8004182 <_dtoa_r+0x3e2>
 80042be:	bf00      	nop
 80042c0:	080074d0 	.word	0x080074d0
 80042c4:	080074a8 	.word	0x080074a8
 80042c8:	3ff00000 	.word	0x3ff00000
 80042cc:	40240000 	.word	0x40240000
 80042d0:	401c0000 	.word	0x401c0000
 80042d4:	40140000 	.word	0x40140000
 80042d8:	4b70      	ldr	r3, [pc, #448]	@ (800449c <_dtoa_r+0x6fc>)
 80042da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80042dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042e4:	4454      	add	r4, sl
 80042e6:	2900      	cmp	r1, #0
 80042e8:	d045      	beq.n	8004376 <_dtoa_r+0x5d6>
 80042ea:	2000      	movs	r0, #0
 80042ec:	496c      	ldr	r1, [pc, #432]	@ (80044a0 <_dtoa_r+0x700>)
 80042ee:	f7fc fa1d 	bl	800072c <__aeabi_ddiv>
 80042f2:	4633      	mov	r3, r6
 80042f4:	462a      	mov	r2, r5
 80042f6:	f7fb ff37 	bl	8000168 <__aeabi_dsub>
 80042fa:	4656      	mov	r6, sl
 80042fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004304:	f7fc fb98 	bl	8000a38 <__aeabi_d2iz>
 8004308:	4605      	mov	r5, r0
 800430a:	f7fc f87b 	bl	8000404 <__aeabi_i2d>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004316:	f7fb ff27 	bl	8000168 <__aeabi_dsub>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	3530      	adds	r5, #48	@ 0x30
 8004320:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004324:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004328:	f806 5b01 	strb.w	r5, [r6], #1
 800432c:	f7fc fb46 	bl	80009bc <__aeabi_dcmplt>
 8004330:	2800      	cmp	r0, #0
 8004332:	d163      	bne.n	80043fc <_dtoa_r+0x65c>
 8004334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004338:	2000      	movs	r0, #0
 800433a:	495a      	ldr	r1, [pc, #360]	@ (80044a4 <_dtoa_r+0x704>)
 800433c:	f7fb ff14 	bl	8000168 <__aeabi_dsub>
 8004340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004344:	f7fc fb3a 	bl	80009bc <__aeabi_dcmplt>
 8004348:	2800      	cmp	r0, #0
 800434a:	f040 8087 	bne.w	800445c <_dtoa_r+0x6bc>
 800434e:	42a6      	cmp	r6, r4
 8004350:	f43f af43 	beq.w	80041da <_dtoa_r+0x43a>
 8004354:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004358:	2200      	movs	r2, #0
 800435a:	4b53      	ldr	r3, [pc, #332]	@ (80044a8 <_dtoa_r+0x708>)
 800435c:	f7fc f8bc 	bl	80004d8 <__aeabi_dmul>
 8004360:	2200      	movs	r2, #0
 8004362:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800436a:	4b4f      	ldr	r3, [pc, #316]	@ (80044a8 <_dtoa_r+0x708>)
 800436c:	f7fc f8b4 	bl	80004d8 <__aeabi_dmul>
 8004370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004374:	e7c4      	b.n	8004300 <_dtoa_r+0x560>
 8004376:	4631      	mov	r1, r6
 8004378:	4628      	mov	r0, r5
 800437a:	f7fc f8ad 	bl	80004d8 <__aeabi_dmul>
 800437e:	4656      	mov	r6, sl
 8004380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004384:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800438a:	f7fc fb55 	bl	8000a38 <__aeabi_d2iz>
 800438e:	4605      	mov	r5, r0
 8004390:	f7fc f838 	bl	8000404 <__aeabi_i2d>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800439c:	f7fb fee4 	bl	8000168 <__aeabi_dsub>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	3530      	adds	r5, #48	@ 0x30
 80043a6:	f806 5b01 	strb.w	r5, [r6], #1
 80043aa:	42a6      	cmp	r6, r4
 80043ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	d124      	bne.n	8004400 <_dtoa_r+0x660>
 80043b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80043ba:	4b39      	ldr	r3, [pc, #228]	@ (80044a0 <_dtoa_r+0x700>)
 80043bc:	f7fb fed6 	bl	800016c <__adddf3>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043c8:	f7fc fb16 	bl	80009f8 <__aeabi_dcmpgt>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d145      	bne.n	800445c <_dtoa_r+0x6bc>
 80043d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80043d4:	2000      	movs	r0, #0
 80043d6:	4932      	ldr	r1, [pc, #200]	@ (80044a0 <_dtoa_r+0x700>)
 80043d8:	f7fb fec6 	bl	8000168 <__aeabi_dsub>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043e4:	f7fc faea 	bl	80009bc <__aeabi_dcmplt>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	f43f aef6 	beq.w	80041da <_dtoa_r+0x43a>
 80043ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80043f0:	1e73      	subs	r3, r6, #1
 80043f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80043f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80043f8:	2b30      	cmp	r3, #48	@ 0x30
 80043fa:	d0f8      	beq.n	80043ee <_dtoa_r+0x64e>
 80043fc:	9f04      	ldr	r7, [sp, #16]
 80043fe:	e73f      	b.n	8004280 <_dtoa_r+0x4e0>
 8004400:	4b29      	ldr	r3, [pc, #164]	@ (80044a8 <_dtoa_r+0x708>)
 8004402:	f7fc f869 	bl	80004d8 <__aeabi_dmul>
 8004406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800440a:	e7bc      	b.n	8004386 <_dtoa_r+0x5e6>
 800440c:	d10c      	bne.n	8004428 <_dtoa_r+0x688>
 800440e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004412:	2200      	movs	r2, #0
 8004414:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <_dtoa_r+0x70c>)
 8004416:	f7fc f85f 	bl	80004d8 <__aeabi_dmul>
 800441a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800441e:	f7fc fae1 	bl	80009e4 <__aeabi_dcmpge>
 8004422:	2800      	cmp	r0, #0
 8004424:	f000 815b 	beq.w	80046de <_dtoa_r+0x93e>
 8004428:	2400      	movs	r4, #0
 800442a:	4625      	mov	r5, r4
 800442c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800442e:	4656      	mov	r6, sl
 8004430:	43db      	mvns	r3, r3
 8004432:	9304      	str	r3, [sp, #16]
 8004434:	2700      	movs	r7, #0
 8004436:	4621      	mov	r1, r4
 8004438:	4658      	mov	r0, fp
 800443a:	f000 fbb7 	bl	8004bac <_Bfree>
 800443e:	2d00      	cmp	r5, #0
 8004440:	d0dc      	beq.n	80043fc <_dtoa_r+0x65c>
 8004442:	b12f      	cbz	r7, 8004450 <_dtoa_r+0x6b0>
 8004444:	42af      	cmp	r7, r5
 8004446:	d003      	beq.n	8004450 <_dtoa_r+0x6b0>
 8004448:	4639      	mov	r1, r7
 800444a:	4658      	mov	r0, fp
 800444c:	f000 fbae 	bl	8004bac <_Bfree>
 8004450:	4629      	mov	r1, r5
 8004452:	4658      	mov	r0, fp
 8004454:	f000 fbaa 	bl	8004bac <_Bfree>
 8004458:	e7d0      	b.n	80043fc <_dtoa_r+0x65c>
 800445a:	9704      	str	r7, [sp, #16]
 800445c:	4633      	mov	r3, r6
 800445e:	461e      	mov	r6, r3
 8004460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004464:	2a39      	cmp	r2, #57	@ 0x39
 8004466:	d107      	bne.n	8004478 <_dtoa_r+0x6d8>
 8004468:	459a      	cmp	sl, r3
 800446a:	d1f8      	bne.n	800445e <_dtoa_r+0x6be>
 800446c:	9a04      	ldr	r2, [sp, #16]
 800446e:	3201      	adds	r2, #1
 8004470:	9204      	str	r2, [sp, #16]
 8004472:	2230      	movs	r2, #48	@ 0x30
 8004474:	f88a 2000 	strb.w	r2, [sl]
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	3201      	adds	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	e7bd      	b.n	80043fc <_dtoa_r+0x65c>
 8004480:	2200      	movs	r2, #0
 8004482:	4b09      	ldr	r3, [pc, #36]	@ (80044a8 <_dtoa_r+0x708>)
 8004484:	f7fc f828 	bl	80004d8 <__aeabi_dmul>
 8004488:	2200      	movs	r2, #0
 800448a:	2300      	movs	r3, #0
 800448c:	4604      	mov	r4, r0
 800448e:	460d      	mov	r5, r1
 8004490:	f7fc fa8a 	bl	80009a8 <__aeabi_dcmpeq>
 8004494:	2800      	cmp	r0, #0
 8004496:	f43f aebc 	beq.w	8004212 <_dtoa_r+0x472>
 800449a:	e6f1      	b.n	8004280 <_dtoa_r+0x4e0>
 800449c:	080074d0 	.word	0x080074d0
 80044a0:	3fe00000 	.word	0x3fe00000
 80044a4:	3ff00000 	.word	0x3ff00000
 80044a8:	40240000 	.word	0x40240000
 80044ac:	40140000 	.word	0x40140000
 80044b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	f000 80db 	beq.w	800466e <_dtoa_r+0x8ce>
 80044b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80044ba:	2a01      	cmp	r2, #1
 80044bc:	f300 80bf 	bgt.w	800463e <_dtoa_r+0x89e>
 80044c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80044c2:	2a00      	cmp	r2, #0
 80044c4:	f000 80b7 	beq.w	8004636 <_dtoa_r+0x896>
 80044c8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80044cc:	4646      	mov	r6, r8
 80044ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80044d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044d2:	2101      	movs	r1, #1
 80044d4:	441a      	add	r2, r3
 80044d6:	4658      	mov	r0, fp
 80044d8:	4498      	add	r8, r3
 80044da:	9209      	str	r2, [sp, #36]	@ 0x24
 80044dc:	f000 fc64 	bl	8004da8 <__i2b>
 80044e0:	4605      	mov	r5, r0
 80044e2:	b15e      	cbz	r6, 80044fc <_dtoa_r+0x75c>
 80044e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	dd08      	ble.n	80044fc <_dtoa_r+0x75c>
 80044ea:	42b3      	cmp	r3, r6
 80044ec:	bfa8      	it	ge
 80044ee:	4633      	movge	r3, r6
 80044f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044f2:	eba8 0803 	sub.w	r8, r8, r3
 80044f6:	1af6      	subs	r6, r6, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80044fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044fe:	b1f3      	cbz	r3, 800453e <_dtoa_r+0x79e>
 8004500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80b7 	beq.w	8004676 <_dtoa_r+0x8d6>
 8004508:	b18c      	cbz	r4, 800452e <_dtoa_r+0x78e>
 800450a:	4629      	mov	r1, r5
 800450c:	4622      	mov	r2, r4
 800450e:	4658      	mov	r0, fp
 8004510:	f000 fd08 	bl	8004f24 <__pow5mult>
 8004514:	464a      	mov	r2, r9
 8004516:	4601      	mov	r1, r0
 8004518:	4605      	mov	r5, r0
 800451a:	4658      	mov	r0, fp
 800451c:	f000 fc5a 	bl	8004dd4 <__multiply>
 8004520:	4649      	mov	r1, r9
 8004522:	9004      	str	r0, [sp, #16]
 8004524:	4658      	mov	r0, fp
 8004526:	f000 fb41 	bl	8004bac <_Bfree>
 800452a:	9b04      	ldr	r3, [sp, #16]
 800452c:	4699      	mov	r9, r3
 800452e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004530:	1b1a      	subs	r2, r3, r4
 8004532:	d004      	beq.n	800453e <_dtoa_r+0x79e>
 8004534:	4649      	mov	r1, r9
 8004536:	4658      	mov	r0, fp
 8004538:	f000 fcf4 	bl	8004f24 <__pow5mult>
 800453c:	4681      	mov	r9, r0
 800453e:	2101      	movs	r1, #1
 8004540:	4658      	mov	r0, fp
 8004542:	f000 fc31 	bl	8004da8 <__i2b>
 8004546:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004548:	4604      	mov	r4, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 81c9 	beq.w	80048e2 <_dtoa_r+0xb42>
 8004550:	461a      	mov	r2, r3
 8004552:	4601      	mov	r1, r0
 8004554:	4658      	mov	r0, fp
 8004556:	f000 fce5 	bl	8004f24 <__pow5mult>
 800455a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800455c:	4604      	mov	r4, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	f300 808f 	bgt.w	8004682 <_dtoa_r+0x8e2>
 8004564:	9b02      	ldr	r3, [sp, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 8087 	bne.w	800467a <_dtoa_r+0x8da>
 800456c:	9b03      	ldr	r3, [sp, #12]
 800456e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 8083 	bne.w	800467e <_dtoa_r+0x8de>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800457e:	0d1b      	lsrs	r3, r3, #20
 8004580:	051b      	lsls	r3, r3, #20
 8004582:	b12b      	cbz	r3, 8004590 <_dtoa_r+0x7f0>
 8004584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004586:	f108 0801 	add.w	r8, r8, #1
 800458a:	3301      	adds	r3, #1
 800458c:	9309      	str	r3, [sp, #36]	@ 0x24
 800458e:	2301      	movs	r3, #1
 8004590:	930a      	str	r3, [sp, #40]	@ 0x28
 8004592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 81aa 	beq.w	80048ee <_dtoa_r+0xb4e>
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80045a0:	6918      	ldr	r0, [r3, #16]
 80045a2:	f000 fbb5 	bl	8004d10 <__hi0bits>
 80045a6:	f1c0 0020 	rsb	r0, r0, #32
 80045aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045ac:	4418      	add	r0, r3
 80045ae:	f010 001f 	ands.w	r0, r0, #31
 80045b2:	d071      	beq.n	8004698 <_dtoa_r+0x8f8>
 80045b4:	f1c0 0320 	rsb	r3, r0, #32
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	dd65      	ble.n	8004688 <_dtoa_r+0x8e8>
 80045bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045be:	f1c0 001c 	rsb	r0, r0, #28
 80045c2:	4403      	add	r3, r0
 80045c4:	4480      	add	r8, r0
 80045c6:	4406      	add	r6, r0
 80045c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80045ca:	f1b8 0f00 	cmp.w	r8, #0
 80045ce:	dd05      	ble.n	80045dc <_dtoa_r+0x83c>
 80045d0:	4649      	mov	r1, r9
 80045d2:	4642      	mov	r2, r8
 80045d4:	4658      	mov	r0, fp
 80045d6:	f000 fcff 	bl	8004fd8 <__lshift>
 80045da:	4681      	mov	r9, r0
 80045dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	dd05      	ble.n	80045ee <_dtoa_r+0x84e>
 80045e2:	4621      	mov	r1, r4
 80045e4:	461a      	mov	r2, r3
 80045e6:	4658      	mov	r0, fp
 80045e8:	f000 fcf6 	bl	8004fd8 <__lshift>
 80045ec:	4604      	mov	r4, r0
 80045ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d053      	beq.n	800469c <_dtoa_r+0x8fc>
 80045f4:	4621      	mov	r1, r4
 80045f6:	4648      	mov	r0, r9
 80045f8:	f000 fd5a 	bl	80050b0 <__mcmp>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	da4d      	bge.n	800469c <_dtoa_r+0x8fc>
 8004600:	1e7b      	subs	r3, r7, #1
 8004602:	4649      	mov	r1, r9
 8004604:	9304      	str	r3, [sp, #16]
 8004606:	220a      	movs	r2, #10
 8004608:	2300      	movs	r3, #0
 800460a:	4658      	mov	r0, fp
 800460c:	f000 faf0 	bl	8004bf0 <__multadd>
 8004610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004612:	4681      	mov	r9, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 816c 	beq.w	80048f2 <_dtoa_r+0xb52>
 800461a:	2300      	movs	r3, #0
 800461c:	4629      	mov	r1, r5
 800461e:	220a      	movs	r2, #10
 8004620:	4658      	mov	r0, fp
 8004622:	f000 fae5 	bl	8004bf0 <__multadd>
 8004626:	9b08      	ldr	r3, [sp, #32]
 8004628:	4605      	mov	r5, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	dc61      	bgt.n	80046f2 <_dtoa_r+0x952>
 800462e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004630:	2b02      	cmp	r3, #2
 8004632:	dc3b      	bgt.n	80046ac <_dtoa_r+0x90c>
 8004634:	e05d      	b.n	80046f2 <_dtoa_r+0x952>
 8004636:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004638:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800463c:	e746      	b.n	80044cc <_dtoa_r+0x72c>
 800463e:	9b07      	ldr	r3, [sp, #28]
 8004640:	1e5c      	subs	r4, r3, #1
 8004642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004644:	42a3      	cmp	r3, r4
 8004646:	bfbf      	itttt	lt
 8004648:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800464a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800464c:	1ae3      	sublt	r3, r4, r3
 800464e:	18d2      	addlt	r2, r2, r3
 8004650:	bfa8      	it	ge
 8004652:	1b1c      	subge	r4, r3, r4
 8004654:	9b07      	ldr	r3, [sp, #28]
 8004656:	bfbe      	ittt	lt
 8004658:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800465a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800465c:	2400      	movlt	r4, #0
 800465e:	2b00      	cmp	r3, #0
 8004660:	bfb5      	itete	lt
 8004662:	eba8 0603 	sublt.w	r6, r8, r3
 8004666:	4646      	movge	r6, r8
 8004668:	2300      	movlt	r3, #0
 800466a:	9b07      	ldrge	r3, [sp, #28]
 800466c:	e730      	b.n	80044d0 <_dtoa_r+0x730>
 800466e:	4646      	mov	r6, r8
 8004670:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004672:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004674:	e735      	b.n	80044e2 <_dtoa_r+0x742>
 8004676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004678:	e75c      	b.n	8004534 <_dtoa_r+0x794>
 800467a:	2300      	movs	r3, #0
 800467c:	e788      	b.n	8004590 <_dtoa_r+0x7f0>
 800467e:	9b02      	ldr	r3, [sp, #8]
 8004680:	e786      	b.n	8004590 <_dtoa_r+0x7f0>
 8004682:	2300      	movs	r3, #0
 8004684:	930a      	str	r3, [sp, #40]	@ 0x28
 8004686:	e788      	b.n	800459a <_dtoa_r+0x7fa>
 8004688:	d09f      	beq.n	80045ca <_dtoa_r+0x82a>
 800468a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800468c:	331c      	adds	r3, #28
 800468e:	441a      	add	r2, r3
 8004690:	4498      	add	r8, r3
 8004692:	441e      	add	r6, r3
 8004694:	9209      	str	r2, [sp, #36]	@ 0x24
 8004696:	e798      	b.n	80045ca <_dtoa_r+0x82a>
 8004698:	4603      	mov	r3, r0
 800469a:	e7f6      	b.n	800468a <_dtoa_r+0x8ea>
 800469c:	9b07      	ldr	r3, [sp, #28]
 800469e:	9704      	str	r7, [sp, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	dc20      	bgt.n	80046e6 <_dtoa_r+0x946>
 80046a4:	9308      	str	r3, [sp, #32]
 80046a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	dd1e      	ble.n	80046ea <_dtoa_r+0x94a>
 80046ac:	9b08      	ldr	r3, [sp, #32]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f47f aebc 	bne.w	800442c <_dtoa_r+0x68c>
 80046b4:	4621      	mov	r1, r4
 80046b6:	2205      	movs	r2, #5
 80046b8:	4658      	mov	r0, fp
 80046ba:	f000 fa99 	bl	8004bf0 <__multadd>
 80046be:	4601      	mov	r1, r0
 80046c0:	4604      	mov	r4, r0
 80046c2:	4648      	mov	r0, r9
 80046c4:	f000 fcf4 	bl	80050b0 <__mcmp>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	f77f aeaf 	ble.w	800442c <_dtoa_r+0x68c>
 80046ce:	2331      	movs	r3, #49	@ 0x31
 80046d0:	4656      	mov	r6, sl
 80046d2:	f806 3b01 	strb.w	r3, [r6], #1
 80046d6:	9b04      	ldr	r3, [sp, #16]
 80046d8:	3301      	adds	r3, #1
 80046da:	9304      	str	r3, [sp, #16]
 80046dc:	e6aa      	b.n	8004434 <_dtoa_r+0x694>
 80046de:	9c07      	ldr	r4, [sp, #28]
 80046e0:	9704      	str	r7, [sp, #16]
 80046e2:	4625      	mov	r5, r4
 80046e4:	e7f3      	b.n	80046ce <_dtoa_r+0x92e>
 80046e6:	9b07      	ldr	r3, [sp, #28]
 80046e8:	9308      	str	r3, [sp, #32]
 80046ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8104 	beq.w	80048fa <_dtoa_r+0xb5a>
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	dd05      	ble.n	8004702 <_dtoa_r+0x962>
 80046f6:	4629      	mov	r1, r5
 80046f8:	4632      	mov	r2, r6
 80046fa:	4658      	mov	r0, fp
 80046fc:	f000 fc6c 	bl	8004fd8 <__lshift>
 8004700:	4605      	mov	r5, r0
 8004702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d05a      	beq.n	80047be <_dtoa_r+0xa1e>
 8004708:	4658      	mov	r0, fp
 800470a:	6869      	ldr	r1, [r5, #4]
 800470c:	f000 fa0e 	bl	8004b2c <_Balloc>
 8004710:	4606      	mov	r6, r0
 8004712:	b928      	cbnz	r0, 8004720 <_dtoa_r+0x980>
 8004714:	4602      	mov	r2, r0
 8004716:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800471a:	4b83      	ldr	r3, [pc, #524]	@ (8004928 <_dtoa_r+0xb88>)
 800471c:	f7ff bb54 	b.w	8003dc8 <_dtoa_r+0x28>
 8004720:	692a      	ldr	r2, [r5, #16]
 8004722:	f105 010c 	add.w	r1, r5, #12
 8004726:	3202      	adds	r2, #2
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	300c      	adds	r0, #12
 800472c:	f001 ff5e 	bl	80065ec <memcpy>
 8004730:	2201      	movs	r2, #1
 8004732:	4631      	mov	r1, r6
 8004734:	4658      	mov	r0, fp
 8004736:	f000 fc4f 	bl	8004fd8 <__lshift>
 800473a:	462f      	mov	r7, r5
 800473c:	4605      	mov	r5, r0
 800473e:	f10a 0301 	add.w	r3, sl, #1
 8004742:	9307      	str	r3, [sp, #28]
 8004744:	9b08      	ldr	r3, [sp, #32]
 8004746:	4453      	add	r3, sl
 8004748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800474a:	9b02      	ldr	r3, [sp, #8]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	930a      	str	r3, [sp, #40]	@ 0x28
 8004752:	9b07      	ldr	r3, [sp, #28]
 8004754:	4621      	mov	r1, r4
 8004756:	3b01      	subs	r3, #1
 8004758:	4648      	mov	r0, r9
 800475a:	9302      	str	r3, [sp, #8]
 800475c:	f7ff fa96 	bl	8003c8c <quorem>
 8004760:	4639      	mov	r1, r7
 8004762:	9008      	str	r0, [sp, #32]
 8004764:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004768:	4648      	mov	r0, r9
 800476a:	f000 fca1 	bl	80050b0 <__mcmp>
 800476e:	462a      	mov	r2, r5
 8004770:	9009      	str	r0, [sp, #36]	@ 0x24
 8004772:	4621      	mov	r1, r4
 8004774:	4658      	mov	r0, fp
 8004776:	f000 fcb7 	bl	80050e8 <__mdiff>
 800477a:	68c2      	ldr	r2, [r0, #12]
 800477c:	4606      	mov	r6, r0
 800477e:	bb02      	cbnz	r2, 80047c2 <_dtoa_r+0xa22>
 8004780:	4601      	mov	r1, r0
 8004782:	4648      	mov	r0, r9
 8004784:	f000 fc94 	bl	80050b0 <__mcmp>
 8004788:	4602      	mov	r2, r0
 800478a:	4631      	mov	r1, r6
 800478c:	4658      	mov	r0, fp
 800478e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004790:	f000 fa0c 	bl	8004bac <_Bfree>
 8004794:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004796:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004798:	9e07      	ldr	r6, [sp, #28]
 800479a:	ea43 0102 	orr.w	r1, r3, r2
 800479e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047a0:	4319      	orrs	r1, r3
 80047a2:	d110      	bne.n	80047c6 <_dtoa_r+0xa26>
 80047a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80047a8:	d029      	beq.n	80047fe <_dtoa_r+0xa5e>
 80047aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	dd02      	ble.n	80047b6 <_dtoa_r+0xa16>
 80047b0:	9b08      	ldr	r3, [sp, #32]
 80047b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80047b6:	9b02      	ldr	r3, [sp, #8]
 80047b8:	f883 8000 	strb.w	r8, [r3]
 80047bc:	e63b      	b.n	8004436 <_dtoa_r+0x696>
 80047be:	4628      	mov	r0, r5
 80047c0:	e7bb      	b.n	800473a <_dtoa_r+0x99a>
 80047c2:	2201      	movs	r2, #1
 80047c4:	e7e1      	b.n	800478a <_dtoa_r+0x9ea>
 80047c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	db04      	blt.n	80047d6 <_dtoa_r+0xa36>
 80047cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80047ce:	430b      	orrs	r3, r1
 80047d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047d2:	430b      	orrs	r3, r1
 80047d4:	d120      	bne.n	8004818 <_dtoa_r+0xa78>
 80047d6:	2a00      	cmp	r2, #0
 80047d8:	dded      	ble.n	80047b6 <_dtoa_r+0xa16>
 80047da:	4649      	mov	r1, r9
 80047dc:	2201      	movs	r2, #1
 80047de:	4658      	mov	r0, fp
 80047e0:	f000 fbfa 	bl	8004fd8 <__lshift>
 80047e4:	4621      	mov	r1, r4
 80047e6:	4681      	mov	r9, r0
 80047e8:	f000 fc62 	bl	80050b0 <__mcmp>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	dc03      	bgt.n	80047f8 <_dtoa_r+0xa58>
 80047f0:	d1e1      	bne.n	80047b6 <_dtoa_r+0xa16>
 80047f2:	f018 0f01 	tst.w	r8, #1
 80047f6:	d0de      	beq.n	80047b6 <_dtoa_r+0xa16>
 80047f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80047fc:	d1d8      	bne.n	80047b0 <_dtoa_r+0xa10>
 80047fe:	2339      	movs	r3, #57	@ 0x39
 8004800:	9a02      	ldr	r2, [sp, #8]
 8004802:	7013      	strb	r3, [r2, #0]
 8004804:	4633      	mov	r3, r6
 8004806:	461e      	mov	r6, r3
 8004808:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800480c:	3b01      	subs	r3, #1
 800480e:	2a39      	cmp	r2, #57	@ 0x39
 8004810:	d052      	beq.n	80048b8 <_dtoa_r+0xb18>
 8004812:	3201      	adds	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e60e      	b.n	8004436 <_dtoa_r+0x696>
 8004818:	2a00      	cmp	r2, #0
 800481a:	dd07      	ble.n	800482c <_dtoa_r+0xa8c>
 800481c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004820:	d0ed      	beq.n	80047fe <_dtoa_r+0xa5e>
 8004822:	9a02      	ldr	r2, [sp, #8]
 8004824:	f108 0301 	add.w	r3, r8, #1
 8004828:	7013      	strb	r3, [r2, #0]
 800482a:	e604      	b.n	8004436 <_dtoa_r+0x696>
 800482c:	9b07      	ldr	r3, [sp, #28]
 800482e:	9a07      	ldr	r2, [sp, #28]
 8004830:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004834:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004836:	4293      	cmp	r3, r2
 8004838:	d028      	beq.n	800488c <_dtoa_r+0xaec>
 800483a:	4649      	mov	r1, r9
 800483c:	2300      	movs	r3, #0
 800483e:	220a      	movs	r2, #10
 8004840:	4658      	mov	r0, fp
 8004842:	f000 f9d5 	bl	8004bf0 <__multadd>
 8004846:	42af      	cmp	r7, r5
 8004848:	4681      	mov	r9, r0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	f04f 020a 	mov.w	r2, #10
 8004852:	4639      	mov	r1, r7
 8004854:	4658      	mov	r0, fp
 8004856:	d107      	bne.n	8004868 <_dtoa_r+0xac8>
 8004858:	f000 f9ca 	bl	8004bf0 <__multadd>
 800485c:	4607      	mov	r7, r0
 800485e:	4605      	mov	r5, r0
 8004860:	9b07      	ldr	r3, [sp, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	9307      	str	r3, [sp, #28]
 8004866:	e774      	b.n	8004752 <_dtoa_r+0x9b2>
 8004868:	f000 f9c2 	bl	8004bf0 <__multadd>
 800486c:	4629      	mov	r1, r5
 800486e:	4607      	mov	r7, r0
 8004870:	2300      	movs	r3, #0
 8004872:	220a      	movs	r2, #10
 8004874:	4658      	mov	r0, fp
 8004876:	f000 f9bb 	bl	8004bf0 <__multadd>
 800487a:	4605      	mov	r5, r0
 800487c:	e7f0      	b.n	8004860 <_dtoa_r+0xac0>
 800487e:	9b08      	ldr	r3, [sp, #32]
 8004880:	2700      	movs	r7, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	bfcc      	ite	gt
 8004886:	461e      	movgt	r6, r3
 8004888:	2601      	movle	r6, #1
 800488a:	4456      	add	r6, sl
 800488c:	4649      	mov	r1, r9
 800488e:	2201      	movs	r2, #1
 8004890:	4658      	mov	r0, fp
 8004892:	f000 fba1 	bl	8004fd8 <__lshift>
 8004896:	4621      	mov	r1, r4
 8004898:	4681      	mov	r9, r0
 800489a:	f000 fc09 	bl	80050b0 <__mcmp>
 800489e:	2800      	cmp	r0, #0
 80048a0:	dcb0      	bgt.n	8004804 <_dtoa_r+0xa64>
 80048a2:	d102      	bne.n	80048aa <_dtoa_r+0xb0a>
 80048a4:	f018 0f01 	tst.w	r8, #1
 80048a8:	d1ac      	bne.n	8004804 <_dtoa_r+0xa64>
 80048aa:	4633      	mov	r3, r6
 80048ac:	461e      	mov	r6, r3
 80048ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048b2:	2a30      	cmp	r2, #48	@ 0x30
 80048b4:	d0fa      	beq.n	80048ac <_dtoa_r+0xb0c>
 80048b6:	e5be      	b.n	8004436 <_dtoa_r+0x696>
 80048b8:	459a      	cmp	sl, r3
 80048ba:	d1a4      	bne.n	8004806 <_dtoa_r+0xa66>
 80048bc:	9b04      	ldr	r3, [sp, #16]
 80048be:	3301      	adds	r3, #1
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	2331      	movs	r3, #49	@ 0x31
 80048c4:	f88a 3000 	strb.w	r3, [sl]
 80048c8:	e5b5      	b.n	8004436 <_dtoa_r+0x696>
 80048ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80048cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800492c <_dtoa_r+0xb8c>
 80048d0:	b11b      	cbz	r3, 80048da <_dtoa_r+0xb3a>
 80048d2:	f10a 0308 	add.w	r3, sl, #8
 80048d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4650      	mov	r0, sl
 80048dc:	b017      	add	sp, #92	@ 0x5c
 80048de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f77f ae3d 	ble.w	8004564 <_dtoa_r+0x7c4>
 80048ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80048ee:	2001      	movs	r0, #1
 80048f0:	e65b      	b.n	80045aa <_dtoa_r+0x80a>
 80048f2:	9b08      	ldr	r3, [sp, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f77f aed6 	ble.w	80046a6 <_dtoa_r+0x906>
 80048fa:	4656      	mov	r6, sl
 80048fc:	4621      	mov	r1, r4
 80048fe:	4648      	mov	r0, r9
 8004900:	f7ff f9c4 	bl	8003c8c <quorem>
 8004904:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004908:	9b08      	ldr	r3, [sp, #32]
 800490a:	f806 8b01 	strb.w	r8, [r6], #1
 800490e:	eba6 020a 	sub.w	r2, r6, sl
 8004912:	4293      	cmp	r3, r2
 8004914:	ddb3      	ble.n	800487e <_dtoa_r+0xade>
 8004916:	4649      	mov	r1, r9
 8004918:	2300      	movs	r3, #0
 800491a:	220a      	movs	r2, #10
 800491c:	4658      	mov	r0, fp
 800491e:	f000 f967 	bl	8004bf0 <__multadd>
 8004922:	4681      	mov	r9, r0
 8004924:	e7ea      	b.n	80048fc <_dtoa_r+0xb5c>
 8004926:	bf00      	nop
 8004928:	0800742f 	.word	0x0800742f
 800492c:	080073b3 	.word	0x080073b3

08004930 <_free_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	4605      	mov	r5, r0
 8004934:	2900      	cmp	r1, #0
 8004936:	d040      	beq.n	80049ba <_free_r+0x8a>
 8004938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800493c:	1f0c      	subs	r4, r1, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfb8      	it	lt
 8004942:	18e4      	addlt	r4, r4, r3
 8004944:	f000 f8e6 	bl	8004b14 <__malloc_lock>
 8004948:	4a1c      	ldr	r2, [pc, #112]	@ (80049bc <_free_r+0x8c>)
 800494a:	6813      	ldr	r3, [r2, #0]
 800494c:	b933      	cbnz	r3, 800495c <_free_r+0x2c>
 800494e:	6063      	str	r3, [r4, #4]
 8004950:	6014      	str	r4, [r2, #0]
 8004952:	4628      	mov	r0, r5
 8004954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004958:	f000 b8e2 	b.w	8004b20 <__malloc_unlock>
 800495c:	42a3      	cmp	r3, r4
 800495e:	d908      	bls.n	8004972 <_free_r+0x42>
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	1821      	adds	r1, r4, r0
 8004964:	428b      	cmp	r3, r1
 8004966:	bf01      	itttt	eq
 8004968:	6819      	ldreq	r1, [r3, #0]
 800496a:	685b      	ldreq	r3, [r3, #4]
 800496c:	1809      	addeq	r1, r1, r0
 800496e:	6021      	streq	r1, [r4, #0]
 8004970:	e7ed      	b.n	800494e <_free_r+0x1e>
 8004972:	461a      	mov	r2, r3
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	b10b      	cbz	r3, 800497c <_free_r+0x4c>
 8004978:	42a3      	cmp	r3, r4
 800497a:	d9fa      	bls.n	8004972 <_free_r+0x42>
 800497c:	6811      	ldr	r1, [r2, #0]
 800497e:	1850      	adds	r0, r2, r1
 8004980:	42a0      	cmp	r0, r4
 8004982:	d10b      	bne.n	800499c <_free_r+0x6c>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	4401      	add	r1, r0
 8004988:	1850      	adds	r0, r2, r1
 800498a:	4283      	cmp	r3, r0
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	d1e0      	bne.n	8004952 <_free_r+0x22>
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4408      	add	r0, r1
 8004996:	6010      	str	r0, [r2, #0]
 8004998:	6053      	str	r3, [r2, #4]
 800499a:	e7da      	b.n	8004952 <_free_r+0x22>
 800499c:	d902      	bls.n	80049a4 <_free_r+0x74>
 800499e:	230c      	movs	r3, #12
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	e7d6      	b.n	8004952 <_free_r+0x22>
 80049a4:	6820      	ldr	r0, [r4, #0]
 80049a6:	1821      	adds	r1, r4, r0
 80049a8:	428b      	cmp	r3, r1
 80049aa:	bf01      	itttt	eq
 80049ac:	6819      	ldreq	r1, [r3, #0]
 80049ae:	685b      	ldreq	r3, [r3, #4]
 80049b0:	1809      	addeq	r1, r1, r0
 80049b2:	6021      	streq	r1, [r4, #0]
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	6054      	str	r4, [r2, #4]
 80049b8:	e7cb      	b.n	8004952 <_free_r+0x22>
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	200003a8 	.word	0x200003a8

080049c0 <malloc>:
 80049c0:	4b02      	ldr	r3, [pc, #8]	@ (80049cc <malloc+0xc>)
 80049c2:	4601      	mov	r1, r0
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	f000 b825 	b.w	8004a14 <_malloc_r>
 80049ca:	bf00      	nop
 80049cc:	20000028 	.word	0x20000028

080049d0 <sbrk_aligned>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004a10 <sbrk_aligned+0x40>)
 80049d4:	460c      	mov	r4, r1
 80049d6:	6831      	ldr	r1, [r6, #0]
 80049d8:	4605      	mov	r5, r0
 80049da:	b911      	cbnz	r1, 80049e2 <sbrk_aligned+0x12>
 80049dc:	f001 fdf6 	bl	80065cc <_sbrk_r>
 80049e0:	6030      	str	r0, [r6, #0]
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f001 fdf1 	bl	80065cc <_sbrk_r>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d103      	bne.n	80049f6 <sbrk_aligned+0x26>
 80049ee:	f04f 34ff 	mov.w	r4, #4294967295
 80049f2:	4620      	mov	r0, r4
 80049f4:	bd70      	pop	{r4, r5, r6, pc}
 80049f6:	1cc4      	adds	r4, r0, #3
 80049f8:	f024 0403 	bic.w	r4, r4, #3
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d0f8      	beq.n	80049f2 <sbrk_aligned+0x22>
 8004a00:	1a21      	subs	r1, r4, r0
 8004a02:	4628      	mov	r0, r5
 8004a04:	f001 fde2 	bl	80065cc <_sbrk_r>
 8004a08:	3001      	adds	r0, #1
 8004a0a:	d1f2      	bne.n	80049f2 <sbrk_aligned+0x22>
 8004a0c:	e7ef      	b.n	80049ee <sbrk_aligned+0x1e>
 8004a0e:	bf00      	nop
 8004a10:	200003a4 	.word	0x200003a4

08004a14 <_malloc_r>:
 8004a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a18:	1ccd      	adds	r5, r1, #3
 8004a1a:	f025 0503 	bic.w	r5, r5, #3
 8004a1e:	3508      	adds	r5, #8
 8004a20:	2d0c      	cmp	r5, #12
 8004a22:	bf38      	it	cc
 8004a24:	250c      	movcc	r5, #12
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	4606      	mov	r6, r0
 8004a2a:	db01      	blt.n	8004a30 <_malloc_r+0x1c>
 8004a2c:	42a9      	cmp	r1, r5
 8004a2e:	d904      	bls.n	8004a3a <_malloc_r+0x26>
 8004a30:	230c      	movs	r3, #12
 8004a32:	6033      	str	r3, [r6, #0]
 8004a34:	2000      	movs	r0, #0
 8004a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b10 <_malloc_r+0xfc>
 8004a3e:	f000 f869 	bl	8004b14 <__malloc_lock>
 8004a42:	f8d8 3000 	ldr.w	r3, [r8]
 8004a46:	461c      	mov	r4, r3
 8004a48:	bb44      	cbnz	r4, 8004a9c <_malloc_r+0x88>
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff ffbf 	bl	80049d0 <sbrk_aligned>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	4604      	mov	r4, r0
 8004a56:	d158      	bne.n	8004b0a <_malloc_r+0xf6>
 8004a58:	f8d8 4000 	ldr.w	r4, [r8]
 8004a5c:	4627      	mov	r7, r4
 8004a5e:	2f00      	cmp	r7, #0
 8004a60:	d143      	bne.n	8004aea <_malloc_r+0xd6>
 8004a62:	2c00      	cmp	r4, #0
 8004a64:	d04b      	beq.n	8004afe <_malloc_r+0xea>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	4639      	mov	r1, r7
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	eb04 0903 	add.w	r9, r4, r3
 8004a70:	f001 fdac 	bl	80065cc <_sbrk_r>
 8004a74:	4581      	cmp	r9, r0
 8004a76:	d142      	bne.n	8004afe <_malloc_r+0xea>
 8004a78:	6821      	ldr	r1, [r4, #0]
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	1a6d      	subs	r5, r5, r1
 8004a7e:	4629      	mov	r1, r5
 8004a80:	f7ff ffa6 	bl	80049d0 <sbrk_aligned>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d03a      	beq.n	8004afe <_malloc_r+0xea>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	442b      	add	r3, r5
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	bb62      	cbnz	r2, 8004af0 <_malloc_r+0xdc>
 8004a96:	f8c8 7000 	str.w	r7, [r8]
 8004a9a:	e00f      	b.n	8004abc <_malloc_r+0xa8>
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	1b52      	subs	r2, r2, r5
 8004aa0:	d420      	bmi.n	8004ae4 <_malloc_r+0xd0>
 8004aa2:	2a0b      	cmp	r2, #11
 8004aa4:	d917      	bls.n	8004ad6 <_malloc_r+0xc2>
 8004aa6:	1961      	adds	r1, r4, r5
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	6025      	str	r5, [r4, #0]
 8004aac:	bf18      	it	ne
 8004aae:	6059      	strne	r1, [r3, #4]
 8004ab0:	6863      	ldr	r3, [r4, #4]
 8004ab2:	bf08      	it	eq
 8004ab4:	f8c8 1000 	streq.w	r1, [r8]
 8004ab8:	5162      	str	r2, [r4, r5]
 8004aba:	604b      	str	r3, [r1, #4]
 8004abc:	4630      	mov	r0, r6
 8004abe:	f000 f82f 	bl	8004b20 <__malloc_unlock>
 8004ac2:	f104 000b 	add.w	r0, r4, #11
 8004ac6:	1d23      	adds	r3, r4, #4
 8004ac8:	f020 0007 	bic.w	r0, r0, #7
 8004acc:	1ac2      	subs	r2, r0, r3
 8004ace:	bf1c      	itt	ne
 8004ad0:	1a1b      	subne	r3, r3, r0
 8004ad2:	50a3      	strne	r3, [r4, r2]
 8004ad4:	e7af      	b.n	8004a36 <_malloc_r+0x22>
 8004ad6:	6862      	ldr	r2, [r4, #4]
 8004ad8:	42a3      	cmp	r3, r4
 8004ada:	bf0c      	ite	eq
 8004adc:	f8c8 2000 	streq.w	r2, [r8]
 8004ae0:	605a      	strne	r2, [r3, #4]
 8004ae2:	e7eb      	b.n	8004abc <_malloc_r+0xa8>
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	6864      	ldr	r4, [r4, #4]
 8004ae8:	e7ae      	b.n	8004a48 <_malloc_r+0x34>
 8004aea:	463c      	mov	r4, r7
 8004aec:	687f      	ldr	r7, [r7, #4]
 8004aee:	e7b6      	b.n	8004a5e <_malloc_r+0x4a>
 8004af0:	461a      	mov	r2, r3
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d1fb      	bne.n	8004af0 <_malloc_r+0xdc>
 8004af8:	2300      	movs	r3, #0
 8004afa:	6053      	str	r3, [r2, #4]
 8004afc:	e7de      	b.n	8004abc <_malloc_r+0xa8>
 8004afe:	230c      	movs	r3, #12
 8004b00:	4630      	mov	r0, r6
 8004b02:	6033      	str	r3, [r6, #0]
 8004b04:	f000 f80c 	bl	8004b20 <__malloc_unlock>
 8004b08:	e794      	b.n	8004a34 <_malloc_r+0x20>
 8004b0a:	6005      	str	r5, [r0, #0]
 8004b0c:	e7d6      	b.n	8004abc <_malloc_r+0xa8>
 8004b0e:	bf00      	nop
 8004b10:	200003a8 	.word	0x200003a8

08004b14 <__malloc_lock>:
 8004b14:	4801      	ldr	r0, [pc, #4]	@ (8004b1c <__malloc_lock+0x8>)
 8004b16:	f7ff b8a4 	b.w	8003c62 <__retarget_lock_acquire_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	200003a0 	.word	0x200003a0

08004b20 <__malloc_unlock>:
 8004b20:	4801      	ldr	r0, [pc, #4]	@ (8004b28 <__malloc_unlock+0x8>)
 8004b22:	f7ff b89f 	b.w	8003c64 <__retarget_lock_release_recursive>
 8004b26:	bf00      	nop
 8004b28:	200003a0 	.word	0x200003a0

08004b2c <_Balloc>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	69c6      	ldr	r6, [r0, #28]
 8004b30:	4604      	mov	r4, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	b976      	cbnz	r6, 8004b54 <_Balloc+0x28>
 8004b36:	2010      	movs	r0, #16
 8004b38:	f7ff ff42 	bl	80049c0 <malloc>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	61e0      	str	r0, [r4, #28]
 8004b40:	b920      	cbnz	r0, 8004b4c <_Balloc+0x20>
 8004b42:	216b      	movs	r1, #107	@ 0x6b
 8004b44:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <_Balloc+0x78>)
 8004b46:	4818      	ldr	r0, [pc, #96]	@ (8004ba8 <_Balloc+0x7c>)
 8004b48:	f001 fd64 	bl	8006614 <__assert_func>
 8004b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b50:	6006      	str	r6, [r0, #0]
 8004b52:	60c6      	str	r6, [r0, #12]
 8004b54:	69e6      	ldr	r6, [r4, #28]
 8004b56:	68f3      	ldr	r3, [r6, #12]
 8004b58:	b183      	cbz	r3, 8004b7c <_Balloc+0x50>
 8004b5a:	69e3      	ldr	r3, [r4, #28]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b62:	b9b8      	cbnz	r0, 8004b94 <_Balloc+0x68>
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f605 	lsl.w	r6, r1, r5
 8004b6a:	1d72      	adds	r2, r6, #5
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	0092      	lsls	r2, r2, #2
 8004b70:	f001 fd6e 	bl	8006650 <_calloc_r>
 8004b74:	b160      	cbz	r0, 8004b90 <_Balloc+0x64>
 8004b76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b7a:	e00e      	b.n	8004b9a <_Balloc+0x6e>
 8004b7c:	2221      	movs	r2, #33	@ 0x21
 8004b7e:	2104      	movs	r1, #4
 8004b80:	4620      	mov	r0, r4
 8004b82:	f001 fd65 	bl	8006650 <_calloc_r>
 8004b86:	69e3      	ldr	r3, [r4, #28]
 8004b88:	60f0      	str	r0, [r6, #12]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e4      	bne.n	8004b5a <_Balloc+0x2e>
 8004b90:	2000      	movs	r0, #0
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	6802      	ldr	r2, [r0, #0]
 8004b96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ba0:	e7f7      	b.n	8004b92 <_Balloc+0x66>
 8004ba2:	bf00      	nop
 8004ba4:	080073c0 	.word	0x080073c0
 8004ba8:	08007440 	.word	0x08007440

08004bac <_Bfree>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	69c6      	ldr	r6, [r0, #28]
 8004bb0:	4605      	mov	r5, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	b976      	cbnz	r6, 8004bd4 <_Bfree+0x28>
 8004bb6:	2010      	movs	r0, #16
 8004bb8:	f7ff ff02 	bl	80049c0 <malloc>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	61e8      	str	r0, [r5, #28]
 8004bc0:	b920      	cbnz	r0, 8004bcc <_Bfree+0x20>
 8004bc2:	218f      	movs	r1, #143	@ 0x8f
 8004bc4:	4b08      	ldr	r3, [pc, #32]	@ (8004be8 <_Bfree+0x3c>)
 8004bc6:	4809      	ldr	r0, [pc, #36]	@ (8004bec <_Bfree+0x40>)
 8004bc8:	f001 fd24 	bl	8006614 <__assert_func>
 8004bcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004bd0:	6006      	str	r6, [r0, #0]
 8004bd2:	60c6      	str	r6, [r0, #12]
 8004bd4:	b13c      	cbz	r4, 8004be6 <_Bfree+0x3a>
 8004bd6:	69eb      	ldr	r3, [r5, #28]
 8004bd8:	6862      	ldr	r2, [r4, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004be0:	6021      	str	r1, [r4, #0]
 8004be2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	080073c0 	.word	0x080073c0
 8004bec:	08007440 	.word	0x08007440

08004bf0 <__multadd>:
 8004bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	461e      	mov	r6, r3
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	690d      	ldr	r5, [r1, #16]
 8004bfe:	f101 0c14 	add.w	ip, r1, #20
 8004c02:	f8dc 3000 	ldr.w	r3, [ip]
 8004c06:	3001      	adds	r0, #1
 8004c08:	b299      	uxth	r1, r3
 8004c0a:	fb02 6101 	mla	r1, r2, r1, r6
 8004c0e:	0c1e      	lsrs	r6, r3, #16
 8004c10:	0c0b      	lsrs	r3, r1, #16
 8004c12:	fb02 3306 	mla	r3, r2, r6, r3
 8004c16:	b289      	uxth	r1, r1
 8004c18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004c1c:	4285      	cmp	r5, r0
 8004c1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004c22:	f84c 1b04 	str.w	r1, [ip], #4
 8004c26:	dcec      	bgt.n	8004c02 <__multadd+0x12>
 8004c28:	b30e      	cbz	r6, 8004c6e <__multadd+0x7e>
 8004c2a:	68a3      	ldr	r3, [r4, #8]
 8004c2c:	42ab      	cmp	r3, r5
 8004c2e:	dc19      	bgt.n	8004c64 <__multadd+0x74>
 8004c30:	6861      	ldr	r1, [r4, #4]
 8004c32:	4638      	mov	r0, r7
 8004c34:	3101      	adds	r1, #1
 8004c36:	f7ff ff79 	bl	8004b2c <_Balloc>
 8004c3a:	4680      	mov	r8, r0
 8004c3c:	b928      	cbnz	r0, 8004c4a <__multadd+0x5a>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	21ba      	movs	r1, #186	@ 0xba
 8004c42:	4b0c      	ldr	r3, [pc, #48]	@ (8004c74 <__multadd+0x84>)
 8004c44:	480c      	ldr	r0, [pc, #48]	@ (8004c78 <__multadd+0x88>)
 8004c46:	f001 fce5 	bl	8006614 <__assert_func>
 8004c4a:	6922      	ldr	r2, [r4, #16]
 8004c4c:	f104 010c 	add.w	r1, r4, #12
 8004c50:	3202      	adds	r2, #2
 8004c52:	0092      	lsls	r2, r2, #2
 8004c54:	300c      	adds	r0, #12
 8004c56:	f001 fcc9 	bl	80065ec <memcpy>
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4638      	mov	r0, r7
 8004c5e:	f7ff ffa5 	bl	8004bac <_Bfree>
 8004c62:	4644      	mov	r4, r8
 8004c64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c68:	3501      	adds	r5, #1
 8004c6a:	615e      	str	r6, [r3, #20]
 8004c6c:	6125      	str	r5, [r4, #16]
 8004c6e:	4620      	mov	r0, r4
 8004c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c74:	0800742f 	.word	0x0800742f
 8004c78:	08007440 	.word	0x08007440

08004c7c <__s2b>:
 8004c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c80:	4615      	mov	r5, r2
 8004c82:	2209      	movs	r2, #9
 8004c84:	461f      	mov	r7, r3
 8004c86:	3308      	adds	r3, #8
 8004c88:	460c      	mov	r4, r1
 8004c8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c8e:	4606      	mov	r6, r0
 8004c90:	2201      	movs	r2, #1
 8004c92:	2100      	movs	r1, #0
 8004c94:	429a      	cmp	r2, r3
 8004c96:	db09      	blt.n	8004cac <__s2b+0x30>
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f7ff ff47 	bl	8004b2c <_Balloc>
 8004c9e:	b940      	cbnz	r0, 8004cb2 <__s2b+0x36>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	21d3      	movs	r1, #211	@ 0xd3
 8004ca4:	4b18      	ldr	r3, [pc, #96]	@ (8004d08 <__s2b+0x8c>)
 8004ca6:	4819      	ldr	r0, [pc, #100]	@ (8004d0c <__s2b+0x90>)
 8004ca8:	f001 fcb4 	bl	8006614 <__assert_func>
 8004cac:	0052      	lsls	r2, r2, #1
 8004cae:	3101      	adds	r1, #1
 8004cb0:	e7f0      	b.n	8004c94 <__s2b+0x18>
 8004cb2:	9b08      	ldr	r3, [sp, #32]
 8004cb4:	2d09      	cmp	r5, #9
 8004cb6:	6143      	str	r3, [r0, #20]
 8004cb8:	f04f 0301 	mov.w	r3, #1
 8004cbc:	6103      	str	r3, [r0, #16]
 8004cbe:	dd16      	ble.n	8004cee <__s2b+0x72>
 8004cc0:	f104 0909 	add.w	r9, r4, #9
 8004cc4:	46c8      	mov	r8, r9
 8004cc6:	442c      	add	r4, r5
 8004cc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004ccc:	4601      	mov	r1, r0
 8004cce:	220a      	movs	r2, #10
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	3b30      	subs	r3, #48	@ 0x30
 8004cd4:	f7ff ff8c 	bl	8004bf0 <__multadd>
 8004cd8:	45a0      	cmp	r8, r4
 8004cda:	d1f5      	bne.n	8004cc8 <__s2b+0x4c>
 8004cdc:	f1a5 0408 	sub.w	r4, r5, #8
 8004ce0:	444c      	add	r4, r9
 8004ce2:	1b2d      	subs	r5, r5, r4
 8004ce4:	1963      	adds	r3, r4, r5
 8004ce6:	42bb      	cmp	r3, r7
 8004ce8:	db04      	blt.n	8004cf4 <__s2b+0x78>
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cee:	2509      	movs	r5, #9
 8004cf0:	340a      	adds	r4, #10
 8004cf2:	e7f6      	b.n	8004ce2 <__s2b+0x66>
 8004cf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	220a      	movs	r2, #10
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	3b30      	subs	r3, #48	@ 0x30
 8004d00:	f7ff ff76 	bl	8004bf0 <__multadd>
 8004d04:	e7ee      	b.n	8004ce4 <__s2b+0x68>
 8004d06:	bf00      	nop
 8004d08:	0800742f 	.word	0x0800742f
 8004d0c:	08007440 	.word	0x08007440

08004d10 <__hi0bits>:
 8004d10:	4603      	mov	r3, r0
 8004d12:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004d16:	bf3a      	itte	cc
 8004d18:	0403      	lslcc	r3, r0, #16
 8004d1a:	2010      	movcc	r0, #16
 8004d1c:	2000      	movcs	r0, #0
 8004d1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d22:	bf3c      	itt	cc
 8004d24:	021b      	lslcc	r3, r3, #8
 8004d26:	3008      	addcc	r0, #8
 8004d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d2c:	bf3c      	itt	cc
 8004d2e:	011b      	lslcc	r3, r3, #4
 8004d30:	3004      	addcc	r0, #4
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d36:	bf3c      	itt	cc
 8004d38:	009b      	lslcc	r3, r3, #2
 8004d3a:	3002      	addcc	r0, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	db05      	blt.n	8004d4c <__hi0bits+0x3c>
 8004d40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004d44:	f100 0001 	add.w	r0, r0, #1
 8004d48:	bf08      	it	eq
 8004d4a:	2020      	moveq	r0, #32
 8004d4c:	4770      	bx	lr

08004d4e <__lo0bits>:
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	4602      	mov	r2, r0
 8004d52:	f013 0007 	ands.w	r0, r3, #7
 8004d56:	d00b      	beq.n	8004d70 <__lo0bits+0x22>
 8004d58:	07d9      	lsls	r1, r3, #31
 8004d5a:	d421      	bmi.n	8004da0 <__lo0bits+0x52>
 8004d5c:	0798      	lsls	r0, r3, #30
 8004d5e:	bf49      	itett	mi
 8004d60:	085b      	lsrmi	r3, r3, #1
 8004d62:	089b      	lsrpl	r3, r3, #2
 8004d64:	2001      	movmi	r0, #1
 8004d66:	6013      	strmi	r3, [r2, #0]
 8004d68:	bf5c      	itt	pl
 8004d6a:	2002      	movpl	r0, #2
 8004d6c:	6013      	strpl	r3, [r2, #0]
 8004d6e:	4770      	bx	lr
 8004d70:	b299      	uxth	r1, r3
 8004d72:	b909      	cbnz	r1, 8004d78 <__lo0bits+0x2a>
 8004d74:	2010      	movs	r0, #16
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	b2d9      	uxtb	r1, r3
 8004d7a:	b909      	cbnz	r1, 8004d80 <__lo0bits+0x32>
 8004d7c:	3008      	adds	r0, #8
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	0719      	lsls	r1, r3, #28
 8004d82:	bf04      	itt	eq
 8004d84:	091b      	lsreq	r3, r3, #4
 8004d86:	3004      	addeq	r0, #4
 8004d88:	0799      	lsls	r1, r3, #30
 8004d8a:	bf04      	itt	eq
 8004d8c:	089b      	lsreq	r3, r3, #2
 8004d8e:	3002      	addeq	r0, #2
 8004d90:	07d9      	lsls	r1, r3, #31
 8004d92:	d403      	bmi.n	8004d9c <__lo0bits+0x4e>
 8004d94:	085b      	lsrs	r3, r3, #1
 8004d96:	f100 0001 	add.w	r0, r0, #1
 8004d9a:	d003      	beq.n	8004da4 <__lo0bits+0x56>
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	4770      	bx	lr
 8004da0:	2000      	movs	r0, #0
 8004da2:	4770      	bx	lr
 8004da4:	2020      	movs	r0, #32
 8004da6:	4770      	bx	lr

08004da8 <__i2b>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	460c      	mov	r4, r1
 8004dac:	2101      	movs	r1, #1
 8004dae:	f7ff febd 	bl	8004b2c <_Balloc>
 8004db2:	4602      	mov	r2, r0
 8004db4:	b928      	cbnz	r0, 8004dc2 <__i2b+0x1a>
 8004db6:	f240 1145 	movw	r1, #325	@ 0x145
 8004dba:	4b04      	ldr	r3, [pc, #16]	@ (8004dcc <__i2b+0x24>)
 8004dbc:	4804      	ldr	r0, [pc, #16]	@ (8004dd0 <__i2b+0x28>)
 8004dbe:	f001 fc29 	bl	8006614 <__assert_func>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	6144      	str	r4, [r0, #20]
 8004dc6:	6103      	str	r3, [r0, #16]
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	bf00      	nop
 8004dcc:	0800742f 	.word	0x0800742f
 8004dd0:	08007440 	.word	0x08007440

08004dd4 <__multiply>:
 8004dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd8:	4614      	mov	r4, r2
 8004dda:	690a      	ldr	r2, [r1, #16]
 8004ddc:	6923      	ldr	r3, [r4, #16]
 8004dde:	460f      	mov	r7, r1
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bfa2      	ittt	ge
 8004de4:	4623      	movge	r3, r4
 8004de6:	460c      	movge	r4, r1
 8004de8:	461f      	movge	r7, r3
 8004dea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004dee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004df2:	68a3      	ldr	r3, [r4, #8]
 8004df4:	6861      	ldr	r1, [r4, #4]
 8004df6:	eb0a 0609 	add.w	r6, sl, r9
 8004dfa:	42b3      	cmp	r3, r6
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	bfb8      	it	lt
 8004e00:	3101      	addlt	r1, #1
 8004e02:	f7ff fe93 	bl	8004b2c <_Balloc>
 8004e06:	b930      	cbnz	r0, 8004e16 <__multiply+0x42>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004e0e:	4b43      	ldr	r3, [pc, #268]	@ (8004f1c <__multiply+0x148>)
 8004e10:	4843      	ldr	r0, [pc, #268]	@ (8004f20 <__multiply+0x14c>)
 8004e12:	f001 fbff 	bl	8006614 <__assert_func>
 8004e16:	f100 0514 	add.w	r5, r0, #20
 8004e1a:	462b      	mov	r3, r5
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e22:	4543      	cmp	r3, r8
 8004e24:	d321      	bcc.n	8004e6a <__multiply+0x96>
 8004e26:	f107 0114 	add.w	r1, r7, #20
 8004e2a:	f104 0214 	add.w	r2, r4, #20
 8004e2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004e32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004e36:	9302      	str	r3, [sp, #8]
 8004e38:	1b13      	subs	r3, r2, r4
 8004e3a:	3b15      	subs	r3, #21
 8004e3c:	f023 0303 	bic.w	r3, r3, #3
 8004e40:	3304      	adds	r3, #4
 8004e42:	f104 0715 	add.w	r7, r4, #21
 8004e46:	42ba      	cmp	r2, r7
 8004e48:	bf38      	it	cc
 8004e4a:	2304      	movcc	r3, #4
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	9b02      	ldr	r3, [sp, #8]
 8004e50:	9103      	str	r1, [sp, #12]
 8004e52:	428b      	cmp	r3, r1
 8004e54:	d80c      	bhi.n	8004e70 <__multiply+0x9c>
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	dd03      	ble.n	8004e62 <__multiply+0x8e>
 8004e5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d05a      	beq.n	8004f18 <__multiply+0x144>
 8004e62:	6106      	str	r6, [r0, #16]
 8004e64:	b005      	add	sp, #20
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	f843 2b04 	str.w	r2, [r3], #4
 8004e6e:	e7d8      	b.n	8004e22 <__multiply+0x4e>
 8004e70:	f8b1 a000 	ldrh.w	sl, [r1]
 8004e74:	f1ba 0f00 	cmp.w	sl, #0
 8004e78:	d023      	beq.n	8004ec2 <__multiply+0xee>
 8004e7a:	46a9      	mov	r9, r5
 8004e7c:	f04f 0c00 	mov.w	ip, #0
 8004e80:	f104 0e14 	add.w	lr, r4, #20
 8004e84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004e88:	f8d9 3000 	ldr.w	r3, [r9]
 8004e8c:	fa1f fb87 	uxth.w	fp, r7
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	fb0a 330b 	mla	r3, sl, fp, r3
 8004e96:	4463      	add	r3, ip
 8004e98:	f8d9 c000 	ldr.w	ip, [r9]
 8004e9c:	0c3f      	lsrs	r7, r7, #16
 8004e9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004ea2:	fb0a c707 	mla	r7, sl, r7, ip
 8004ea6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004eb0:	4572      	cmp	r2, lr
 8004eb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004eb6:	f849 3b04 	str.w	r3, [r9], #4
 8004eba:	d8e3      	bhi.n	8004e84 <__multiply+0xb0>
 8004ebc:	9b01      	ldr	r3, [sp, #4]
 8004ebe:	f845 c003 	str.w	ip, [r5, r3]
 8004ec2:	9b03      	ldr	r3, [sp, #12]
 8004ec4:	3104      	adds	r1, #4
 8004ec6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004eca:	f1b9 0f00 	cmp.w	r9, #0
 8004ece:	d021      	beq.n	8004f14 <__multiply+0x140>
 8004ed0:	46ae      	mov	lr, r5
 8004ed2:	f04f 0a00 	mov.w	sl, #0
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	f104 0c14 	add.w	ip, r4, #20
 8004edc:	f8bc b000 	ldrh.w	fp, [ip]
 8004ee0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	fb09 770b 	mla	r7, r9, fp, r7
 8004eea:	4457      	add	r7, sl
 8004eec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004ef0:	f84e 3b04 	str.w	r3, [lr], #4
 8004ef4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004ef8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004efc:	f8be 3000 	ldrh.w	r3, [lr]
 8004f00:	4562      	cmp	r2, ip
 8004f02:	fb09 330a 	mla	r3, r9, sl, r3
 8004f06:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004f0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f0e:	d8e5      	bhi.n	8004edc <__multiply+0x108>
 8004f10:	9f01      	ldr	r7, [sp, #4]
 8004f12:	51eb      	str	r3, [r5, r7]
 8004f14:	3504      	adds	r5, #4
 8004f16:	e79a      	b.n	8004e4e <__multiply+0x7a>
 8004f18:	3e01      	subs	r6, #1
 8004f1a:	e79c      	b.n	8004e56 <__multiply+0x82>
 8004f1c:	0800742f 	.word	0x0800742f
 8004f20:	08007440 	.word	0x08007440

08004f24 <__pow5mult>:
 8004f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f28:	4615      	mov	r5, r2
 8004f2a:	f012 0203 	ands.w	r2, r2, #3
 8004f2e:	4607      	mov	r7, r0
 8004f30:	460e      	mov	r6, r1
 8004f32:	d007      	beq.n	8004f44 <__pow5mult+0x20>
 8004f34:	4c25      	ldr	r4, [pc, #148]	@ (8004fcc <__pow5mult+0xa8>)
 8004f36:	3a01      	subs	r2, #1
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f3e:	f7ff fe57 	bl	8004bf0 <__multadd>
 8004f42:	4606      	mov	r6, r0
 8004f44:	10ad      	asrs	r5, r5, #2
 8004f46:	d03d      	beq.n	8004fc4 <__pow5mult+0xa0>
 8004f48:	69fc      	ldr	r4, [r7, #28]
 8004f4a:	b97c      	cbnz	r4, 8004f6c <__pow5mult+0x48>
 8004f4c:	2010      	movs	r0, #16
 8004f4e:	f7ff fd37 	bl	80049c0 <malloc>
 8004f52:	4602      	mov	r2, r0
 8004f54:	61f8      	str	r0, [r7, #28]
 8004f56:	b928      	cbnz	r0, 8004f64 <__pow5mult+0x40>
 8004f58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd0 <__pow5mult+0xac>)
 8004f5e:	481d      	ldr	r0, [pc, #116]	@ (8004fd4 <__pow5mult+0xb0>)
 8004f60:	f001 fb58 	bl	8006614 <__assert_func>
 8004f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f68:	6004      	str	r4, [r0, #0]
 8004f6a:	60c4      	str	r4, [r0, #12]
 8004f6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f74:	b94c      	cbnz	r4, 8004f8a <__pow5mult+0x66>
 8004f76:	f240 2171 	movw	r1, #625	@ 0x271
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f7ff ff14 	bl	8004da8 <__i2b>
 8004f80:	2300      	movs	r3, #0
 8004f82:	4604      	mov	r4, r0
 8004f84:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f88:	6003      	str	r3, [r0, #0]
 8004f8a:	f04f 0900 	mov.w	r9, #0
 8004f8e:	07eb      	lsls	r3, r5, #31
 8004f90:	d50a      	bpl.n	8004fa8 <__pow5mult+0x84>
 8004f92:	4631      	mov	r1, r6
 8004f94:	4622      	mov	r2, r4
 8004f96:	4638      	mov	r0, r7
 8004f98:	f7ff ff1c 	bl	8004dd4 <__multiply>
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	f7ff fe03 	bl	8004bac <_Bfree>
 8004fa6:	4646      	mov	r6, r8
 8004fa8:	106d      	asrs	r5, r5, #1
 8004faa:	d00b      	beq.n	8004fc4 <__pow5mult+0xa0>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	b938      	cbnz	r0, 8004fc0 <__pow5mult+0x9c>
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f7ff ff0d 	bl	8004dd4 <__multiply>
 8004fba:	6020      	str	r0, [r4, #0]
 8004fbc:	f8c0 9000 	str.w	r9, [r0]
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e7e4      	b.n	8004f8e <__pow5mult+0x6a>
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fca:	bf00      	nop
 8004fcc:	0800749c 	.word	0x0800749c
 8004fd0:	080073c0 	.word	0x080073c0
 8004fd4:	08007440 	.word	0x08007440

08004fd8 <__lshift>:
 8004fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fdc:	460c      	mov	r4, r1
 8004fde:	4607      	mov	r7, r0
 8004fe0:	4691      	mov	r9, r2
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	6849      	ldr	r1, [r1, #4]
 8004fe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fea:	68a3      	ldr	r3, [r4, #8]
 8004fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ff0:	f108 0601 	add.w	r6, r8, #1
 8004ff4:	42b3      	cmp	r3, r6
 8004ff6:	db0b      	blt.n	8005010 <__lshift+0x38>
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	f7ff fd97 	bl	8004b2c <_Balloc>
 8004ffe:	4605      	mov	r5, r0
 8005000:	b948      	cbnz	r0, 8005016 <__lshift+0x3e>
 8005002:	4602      	mov	r2, r0
 8005004:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005008:	4b27      	ldr	r3, [pc, #156]	@ (80050a8 <__lshift+0xd0>)
 800500a:	4828      	ldr	r0, [pc, #160]	@ (80050ac <__lshift+0xd4>)
 800500c:	f001 fb02 	bl	8006614 <__assert_func>
 8005010:	3101      	adds	r1, #1
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	e7ee      	b.n	8004ff4 <__lshift+0x1c>
 8005016:	2300      	movs	r3, #0
 8005018:	f100 0114 	add.w	r1, r0, #20
 800501c:	f100 0210 	add.w	r2, r0, #16
 8005020:	4618      	mov	r0, r3
 8005022:	4553      	cmp	r3, sl
 8005024:	db33      	blt.n	800508e <__lshift+0xb6>
 8005026:	6920      	ldr	r0, [r4, #16]
 8005028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800502c:	f104 0314 	add.w	r3, r4, #20
 8005030:	f019 091f 	ands.w	r9, r9, #31
 8005034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005038:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800503c:	d02b      	beq.n	8005096 <__lshift+0xbe>
 800503e:	468a      	mov	sl, r1
 8005040:	2200      	movs	r2, #0
 8005042:	f1c9 0e20 	rsb	lr, r9, #32
 8005046:	6818      	ldr	r0, [r3, #0]
 8005048:	fa00 f009 	lsl.w	r0, r0, r9
 800504c:	4310      	orrs	r0, r2
 800504e:	f84a 0b04 	str.w	r0, [sl], #4
 8005052:	f853 2b04 	ldr.w	r2, [r3], #4
 8005056:	459c      	cmp	ip, r3
 8005058:	fa22 f20e 	lsr.w	r2, r2, lr
 800505c:	d8f3      	bhi.n	8005046 <__lshift+0x6e>
 800505e:	ebac 0304 	sub.w	r3, ip, r4
 8005062:	3b15      	subs	r3, #21
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	3304      	adds	r3, #4
 800506a:	f104 0015 	add.w	r0, r4, #21
 800506e:	4584      	cmp	ip, r0
 8005070:	bf38      	it	cc
 8005072:	2304      	movcc	r3, #4
 8005074:	50ca      	str	r2, [r1, r3]
 8005076:	b10a      	cbz	r2, 800507c <__lshift+0xa4>
 8005078:	f108 0602 	add.w	r6, r8, #2
 800507c:	3e01      	subs	r6, #1
 800507e:	4638      	mov	r0, r7
 8005080:	4621      	mov	r1, r4
 8005082:	612e      	str	r6, [r5, #16]
 8005084:	f7ff fd92 	bl	8004bac <_Bfree>
 8005088:	4628      	mov	r0, r5
 800508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005092:	3301      	adds	r3, #1
 8005094:	e7c5      	b.n	8005022 <__lshift+0x4a>
 8005096:	3904      	subs	r1, #4
 8005098:	f853 2b04 	ldr.w	r2, [r3], #4
 800509c:	459c      	cmp	ip, r3
 800509e:	f841 2f04 	str.w	r2, [r1, #4]!
 80050a2:	d8f9      	bhi.n	8005098 <__lshift+0xc0>
 80050a4:	e7ea      	b.n	800507c <__lshift+0xa4>
 80050a6:	bf00      	nop
 80050a8:	0800742f 	.word	0x0800742f
 80050ac:	08007440 	.word	0x08007440

080050b0 <__mcmp>:
 80050b0:	4603      	mov	r3, r0
 80050b2:	690a      	ldr	r2, [r1, #16]
 80050b4:	6900      	ldr	r0, [r0, #16]
 80050b6:	b530      	push	{r4, r5, lr}
 80050b8:	1a80      	subs	r0, r0, r2
 80050ba:	d10e      	bne.n	80050da <__mcmp+0x2a>
 80050bc:	3314      	adds	r3, #20
 80050be:	3114      	adds	r1, #20
 80050c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80050c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80050c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80050cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80050d0:	4295      	cmp	r5, r2
 80050d2:	d003      	beq.n	80050dc <__mcmp+0x2c>
 80050d4:	d205      	bcs.n	80050e2 <__mcmp+0x32>
 80050d6:	f04f 30ff 	mov.w	r0, #4294967295
 80050da:	bd30      	pop	{r4, r5, pc}
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d3f3      	bcc.n	80050c8 <__mcmp+0x18>
 80050e0:	e7fb      	b.n	80050da <__mcmp+0x2a>
 80050e2:	2001      	movs	r0, #1
 80050e4:	e7f9      	b.n	80050da <__mcmp+0x2a>
	...

080050e8 <__mdiff>:
 80050e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	4689      	mov	r9, r1
 80050ee:	4606      	mov	r6, r0
 80050f0:	4611      	mov	r1, r2
 80050f2:	4648      	mov	r0, r9
 80050f4:	4614      	mov	r4, r2
 80050f6:	f7ff ffdb 	bl	80050b0 <__mcmp>
 80050fa:	1e05      	subs	r5, r0, #0
 80050fc:	d112      	bne.n	8005124 <__mdiff+0x3c>
 80050fe:	4629      	mov	r1, r5
 8005100:	4630      	mov	r0, r6
 8005102:	f7ff fd13 	bl	8004b2c <_Balloc>
 8005106:	4602      	mov	r2, r0
 8005108:	b928      	cbnz	r0, 8005116 <__mdiff+0x2e>
 800510a:	f240 2137 	movw	r1, #567	@ 0x237
 800510e:	4b3e      	ldr	r3, [pc, #248]	@ (8005208 <__mdiff+0x120>)
 8005110:	483e      	ldr	r0, [pc, #248]	@ (800520c <__mdiff+0x124>)
 8005112:	f001 fa7f 	bl	8006614 <__assert_func>
 8005116:	2301      	movs	r3, #1
 8005118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800511c:	4610      	mov	r0, r2
 800511e:	b003      	add	sp, #12
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	bfbc      	itt	lt
 8005126:	464b      	movlt	r3, r9
 8005128:	46a1      	movlt	r9, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005130:	bfba      	itte	lt
 8005132:	461c      	movlt	r4, r3
 8005134:	2501      	movlt	r5, #1
 8005136:	2500      	movge	r5, #0
 8005138:	f7ff fcf8 	bl	8004b2c <_Balloc>
 800513c:	4602      	mov	r2, r0
 800513e:	b918      	cbnz	r0, 8005148 <__mdiff+0x60>
 8005140:	f240 2145 	movw	r1, #581	@ 0x245
 8005144:	4b30      	ldr	r3, [pc, #192]	@ (8005208 <__mdiff+0x120>)
 8005146:	e7e3      	b.n	8005110 <__mdiff+0x28>
 8005148:	f100 0b14 	add.w	fp, r0, #20
 800514c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005150:	f109 0310 	add.w	r3, r9, #16
 8005154:	60c5      	str	r5, [r0, #12]
 8005156:	f04f 0c00 	mov.w	ip, #0
 800515a:	f109 0514 	add.w	r5, r9, #20
 800515e:	46d9      	mov	r9, fp
 8005160:	6926      	ldr	r6, [r4, #16]
 8005162:	f104 0e14 	add.w	lr, r4, #20
 8005166:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800516a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	9b01      	ldr	r3, [sp, #4]
 8005172:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005176:	f853 af04 	ldr.w	sl, [r3, #4]!
 800517a:	b281      	uxth	r1, r0
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	fa1f f38a 	uxth.w	r3, sl
 8005182:	1a5b      	subs	r3, r3, r1
 8005184:	0c00      	lsrs	r0, r0, #16
 8005186:	4463      	add	r3, ip
 8005188:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800518c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005190:	b29b      	uxth	r3, r3
 8005192:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005196:	4576      	cmp	r6, lr
 8005198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800519c:	f849 3b04 	str.w	r3, [r9], #4
 80051a0:	d8e6      	bhi.n	8005170 <__mdiff+0x88>
 80051a2:	1b33      	subs	r3, r6, r4
 80051a4:	3b15      	subs	r3, #21
 80051a6:	f023 0303 	bic.w	r3, r3, #3
 80051aa:	3415      	adds	r4, #21
 80051ac:	3304      	adds	r3, #4
 80051ae:	42a6      	cmp	r6, r4
 80051b0:	bf38      	it	cc
 80051b2:	2304      	movcc	r3, #4
 80051b4:	441d      	add	r5, r3
 80051b6:	445b      	add	r3, fp
 80051b8:	461e      	mov	r6, r3
 80051ba:	462c      	mov	r4, r5
 80051bc:	4544      	cmp	r4, r8
 80051be:	d30e      	bcc.n	80051de <__mdiff+0xf6>
 80051c0:	f108 0103 	add.w	r1, r8, #3
 80051c4:	1b49      	subs	r1, r1, r5
 80051c6:	f021 0103 	bic.w	r1, r1, #3
 80051ca:	3d03      	subs	r5, #3
 80051cc:	45a8      	cmp	r8, r5
 80051ce:	bf38      	it	cc
 80051d0:	2100      	movcc	r1, #0
 80051d2:	440b      	add	r3, r1
 80051d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80051d8:	b199      	cbz	r1, 8005202 <__mdiff+0x11a>
 80051da:	6117      	str	r7, [r2, #16]
 80051dc:	e79e      	b.n	800511c <__mdiff+0x34>
 80051de:	46e6      	mov	lr, ip
 80051e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80051e4:	fa1f fc81 	uxth.w	ip, r1
 80051e8:	44f4      	add	ip, lr
 80051ea:	0c08      	lsrs	r0, r1, #16
 80051ec:	4471      	add	r1, lr
 80051ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80051f2:	b289      	uxth	r1, r1
 80051f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80051f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80051fc:	f846 1b04 	str.w	r1, [r6], #4
 8005200:	e7dc      	b.n	80051bc <__mdiff+0xd4>
 8005202:	3f01      	subs	r7, #1
 8005204:	e7e6      	b.n	80051d4 <__mdiff+0xec>
 8005206:	bf00      	nop
 8005208:	0800742f 	.word	0x0800742f
 800520c:	08007440 	.word	0x08007440

08005210 <__ulp>:
 8005210:	4b0e      	ldr	r3, [pc, #56]	@ (800524c <__ulp+0x3c>)
 8005212:	400b      	ands	r3, r1
 8005214:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005218:	2b00      	cmp	r3, #0
 800521a:	dc08      	bgt.n	800522e <__ulp+0x1e>
 800521c:	425b      	negs	r3, r3
 800521e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005222:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005226:	da04      	bge.n	8005232 <__ulp+0x22>
 8005228:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800522c:	4113      	asrs	r3, r2
 800522e:	2200      	movs	r2, #0
 8005230:	e008      	b.n	8005244 <__ulp+0x34>
 8005232:	f1a2 0314 	sub.w	r3, r2, #20
 8005236:	2b1e      	cmp	r3, #30
 8005238:	bfd6      	itet	le
 800523a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800523e:	2201      	movgt	r2, #1
 8005240:	40da      	lsrle	r2, r3
 8005242:	2300      	movs	r3, #0
 8005244:	4619      	mov	r1, r3
 8005246:	4610      	mov	r0, r2
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	7ff00000 	.word	0x7ff00000

08005250 <__b2d>:
 8005250:	6902      	ldr	r2, [r0, #16]
 8005252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005254:	f100 0614 	add.w	r6, r0, #20
 8005258:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800525c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8005260:	4f1e      	ldr	r7, [pc, #120]	@ (80052dc <__b2d+0x8c>)
 8005262:	4620      	mov	r0, r4
 8005264:	f7ff fd54 	bl	8004d10 <__hi0bits>
 8005268:	4603      	mov	r3, r0
 800526a:	f1c0 0020 	rsb	r0, r0, #32
 800526e:	2b0a      	cmp	r3, #10
 8005270:	f1a2 0504 	sub.w	r5, r2, #4
 8005274:	6008      	str	r0, [r1, #0]
 8005276:	dc12      	bgt.n	800529e <__b2d+0x4e>
 8005278:	42ae      	cmp	r6, r5
 800527a:	bf2c      	ite	cs
 800527c:	2200      	movcs	r2, #0
 800527e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005282:	f1c3 0c0b 	rsb	ip, r3, #11
 8005286:	3315      	adds	r3, #21
 8005288:	fa24 fe0c 	lsr.w	lr, r4, ip
 800528c:	fa04 f303 	lsl.w	r3, r4, r3
 8005290:	fa22 f20c 	lsr.w	r2, r2, ip
 8005294:	ea4e 0107 	orr.w	r1, lr, r7
 8005298:	431a      	orrs	r2, r3
 800529a:	4610      	mov	r0, r2
 800529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800529e:	42ae      	cmp	r6, r5
 80052a0:	bf36      	itet	cc
 80052a2:	f1a2 0508 	subcc.w	r5, r2, #8
 80052a6:	2200      	movcs	r2, #0
 80052a8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80052ac:	3b0b      	subs	r3, #11
 80052ae:	d012      	beq.n	80052d6 <__b2d+0x86>
 80052b0:	f1c3 0720 	rsb	r7, r3, #32
 80052b4:	fa22 f107 	lsr.w	r1, r2, r7
 80052b8:	409c      	lsls	r4, r3
 80052ba:	430c      	orrs	r4, r1
 80052bc:	42b5      	cmp	r5, r6
 80052be:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80052c2:	bf94      	ite	ls
 80052c4:	2400      	movls	r4, #0
 80052c6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80052ca:	409a      	lsls	r2, r3
 80052cc:	40fc      	lsrs	r4, r7
 80052ce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80052d2:	4322      	orrs	r2, r4
 80052d4:	e7e1      	b.n	800529a <__b2d+0x4a>
 80052d6:	ea44 0107 	orr.w	r1, r4, r7
 80052da:	e7de      	b.n	800529a <__b2d+0x4a>
 80052dc:	3ff00000 	.word	0x3ff00000

080052e0 <__d2b>:
 80052e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80052e4:	2101      	movs	r1, #1
 80052e6:	4690      	mov	r8, r2
 80052e8:	4699      	mov	r9, r3
 80052ea:	9e08      	ldr	r6, [sp, #32]
 80052ec:	f7ff fc1e 	bl	8004b2c <_Balloc>
 80052f0:	4604      	mov	r4, r0
 80052f2:	b930      	cbnz	r0, 8005302 <__d2b+0x22>
 80052f4:	4602      	mov	r2, r0
 80052f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80052fa:	4b23      	ldr	r3, [pc, #140]	@ (8005388 <__d2b+0xa8>)
 80052fc:	4823      	ldr	r0, [pc, #140]	@ (800538c <__d2b+0xac>)
 80052fe:	f001 f989 	bl	8006614 <__assert_func>
 8005302:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005306:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800530a:	b10d      	cbz	r5, 8005310 <__d2b+0x30>
 800530c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005310:	9301      	str	r3, [sp, #4]
 8005312:	f1b8 0300 	subs.w	r3, r8, #0
 8005316:	d024      	beq.n	8005362 <__d2b+0x82>
 8005318:	4668      	mov	r0, sp
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	f7ff fd17 	bl	8004d4e <__lo0bits>
 8005320:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005324:	b1d8      	cbz	r0, 800535e <__d2b+0x7e>
 8005326:	f1c0 0320 	rsb	r3, r0, #32
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	430b      	orrs	r3, r1
 8005330:	40c2      	lsrs	r2, r0
 8005332:	6163      	str	r3, [r4, #20]
 8005334:	9201      	str	r2, [sp, #4]
 8005336:	9b01      	ldr	r3, [sp, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf0c      	ite	eq
 800533c:	2201      	moveq	r2, #1
 800533e:	2202      	movne	r2, #2
 8005340:	61a3      	str	r3, [r4, #24]
 8005342:	6122      	str	r2, [r4, #16]
 8005344:	b1ad      	cbz	r5, 8005372 <__d2b+0x92>
 8005346:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800534a:	4405      	add	r5, r0
 800534c:	6035      	str	r5, [r6, #0]
 800534e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005354:	6018      	str	r0, [r3, #0]
 8005356:	4620      	mov	r0, r4
 8005358:	b002      	add	sp, #8
 800535a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800535e:	6161      	str	r1, [r4, #20]
 8005360:	e7e9      	b.n	8005336 <__d2b+0x56>
 8005362:	a801      	add	r0, sp, #4
 8005364:	f7ff fcf3 	bl	8004d4e <__lo0bits>
 8005368:	9b01      	ldr	r3, [sp, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	6163      	str	r3, [r4, #20]
 800536e:	3020      	adds	r0, #32
 8005370:	e7e7      	b.n	8005342 <__d2b+0x62>
 8005372:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005376:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800537a:	6030      	str	r0, [r6, #0]
 800537c:	6918      	ldr	r0, [r3, #16]
 800537e:	f7ff fcc7 	bl	8004d10 <__hi0bits>
 8005382:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005386:	e7e4      	b.n	8005352 <__d2b+0x72>
 8005388:	0800742f 	.word	0x0800742f
 800538c:	08007440 	.word	0x08007440

08005390 <__ratio>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	b085      	sub	sp, #20
 8005396:	e9cd 1000 	strd	r1, r0, [sp]
 800539a:	a902      	add	r1, sp, #8
 800539c:	f7ff ff58 	bl	8005250 <__b2d>
 80053a0:	468b      	mov	fp, r1
 80053a2:	4606      	mov	r6, r0
 80053a4:	460f      	mov	r7, r1
 80053a6:	9800      	ldr	r0, [sp, #0]
 80053a8:	a903      	add	r1, sp, #12
 80053aa:	f7ff ff51 	bl	8005250 <__b2d>
 80053ae:	460d      	mov	r5, r1
 80053b0:	9b01      	ldr	r3, [sp, #4]
 80053b2:	4689      	mov	r9, r1
 80053b4:	6919      	ldr	r1, [r3, #16]
 80053b6:	9b00      	ldr	r3, [sp, #0]
 80053b8:	4604      	mov	r4, r0
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	4630      	mov	r0, r6
 80053be:	1ac9      	subs	r1, r1, r3
 80053c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bfcd      	iteet	gt
 80053ce:	463a      	movgt	r2, r7
 80053d0:	462a      	movle	r2, r5
 80053d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80053d6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80053da:	bfd8      	it	le
 80053dc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80053e0:	464b      	mov	r3, r9
 80053e2:	4622      	mov	r2, r4
 80053e4:	4659      	mov	r1, fp
 80053e6:	f7fb f9a1 	bl	800072c <__aeabi_ddiv>
 80053ea:	b005      	add	sp, #20
 80053ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080053f0 <__copybits>:
 80053f0:	3901      	subs	r1, #1
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	1149      	asrs	r1, r1, #5
 80053f6:	6914      	ldr	r4, [r2, #16]
 80053f8:	3101      	adds	r1, #1
 80053fa:	f102 0314 	add.w	r3, r2, #20
 80053fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005402:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005406:	1f05      	subs	r5, r0, #4
 8005408:	42a3      	cmp	r3, r4
 800540a:	d30c      	bcc.n	8005426 <__copybits+0x36>
 800540c:	1aa3      	subs	r3, r4, r2
 800540e:	3b11      	subs	r3, #17
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	3211      	adds	r2, #17
 8005416:	42a2      	cmp	r2, r4
 8005418:	bf88      	it	hi
 800541a:	2300      	movhi	r3, #0
 800541c:	4418      	add	r0, r3
 800541e:	2300      	movs	r3, #0
 8005420:	4288      	cmp	r0, r1
 8005422:	d305      	bcc.n	8005430 <__copybits+0x40>
 8005424:	bd70      	pop	{r4, r5, r6, pc}
 8005426:	f853 6b04 	ldr.w	r6, [r3], #4
 800542a:	f845 6f04 	str.w	r6, [r5, #4]!
 800542e:	e7eb      	b.n	8005408 <__copybits+0x18>
 8005430:	f840 3b04 	str.w	r3, [r0], #4
 8005434:	e7f4      	b.n	8005420 <__copybits+0x30>

08005436 <__any_on>:
 8005436:	f100 0214 	add.w	r2, r0, #20
 800543a:	6900      	ldr	r0, [r0, #16]
 800543c:	114b      	asrs	r3, r1, #5
 800543e:	4298      	cmp	r0, r3
 8005440:	b510      	push	{r4, lr}
 8005442:	db11      	blt.n	8005468 <__any_on+0x32>
 8005444:	dd0a      	ble.n	800545c <__any_on+0x26>
 8005446:	f011 011f 	ands.w	r1, r1, #31
 800544a:	d007      	beq.n	800545c <__any_on+0x26>
 800544c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005450:	fa24 f001 	lsr.w	r0, r4, r1
 8005454:	fa00 f101 	lsl.w	r1, r0, r1
 8005458:	428c      	cmp	r4, r1
 800545a:	d10b      	bne.n	8005474 <__any_on+0x3e>
 800545c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005460:	4293      	cmp	r3, r2
 8005462:	d803      	bhi.n	800546c <__any_on+0x36>
 8005464:	2000      	movs	r0, #0
 8005466:	bd10      	pop	{r4, pc}
 8005468:	4603      	mov	r3, r0
 800546a:	e7f7      	b.n	800545c <__any_on+0x26>
 800546c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005470:	2900      	cmp	r1, #0
 8005472:	d0f5      	beq.n	8005460 <__any_on+0x2a>
 8005474:	2001      	movs	r0, #1
 8005476:	e7f6      	b.n	8005466 <__any_on+0x30>

08005478 <sulp>:
 8005478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	460f      	mov	r7, r1
 800547e:	4690      	mov	r8, r2
 8005480:	f7ff fec6 	bl	8005210 <__ulp>
 8005484:	4604      	mov	r4, r0
 8005486:	460d      	mov	r5, r1
 8005488:	f1b8 0f00 	cmp.w	r8, #0
 800548c:	d011      	beq.n	80054b2 <sulp+0x3a>
 800548e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005492:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005496:	2b00      	cmp	r3, #0
 8005498:	dd0b      	ble.n	80054b2 <sulp+0x3a>
 800549a:	2400      	movs	r4, #0
 800549c:	051b      	lsls	r3, r3, #20
 800549e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80054a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80054a6:	4622      	mov	r2, r4
 80054a8:	462b      	mov	r3, r5
 80054aa:	f7fb f815 	bl	80004d8 <__aeabi_dmul>
 80054ae:	4604      	mov	r4, r0
 80054b0:	460d      	mov	r5, r1
 80054b2:	4620      	mov	r0, r4
 80054b4:	4629      	mov	r1, r5
 80054b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ba:	0000      	movs	r0, r0
 80054bc:	0000      	movs	r0, r0
	...

080054c0 <_strtod_l>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	b09f      	sub	sp, #124	@ 0x7c
 80054c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80054c8:	2200      	movs	r2, #0
 80054ca:	460c      	mov	r4, r1
 80054cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80054ce:	f04f 0a00 	mov.w	sl, #0
 80054d2:	f04f 0b00 	mov.w	fp, #0
 80054d6:	460a      	mov	r2, r1
 80054d8:	9005      	str	r0, [sp, #20]
 80054da:	9219      	str	r2, [sp, #100]	@ 0x64
 80054dc:	7811      	ldrb	r1, [r2, #0]
 80054de:	292b      	cmp	r1, #43	@ 0x2b
 80054e0:	d048      	beq.n	8005574 <_strtod_l+0xb4>
 80054e2:	d836      	bhi.n	8005552 <_strtod_l+0x92>
 80054e4:	290d      	cmp	r1, #13
 80054e6:	d830      	bhi.n	800554a <_strtod_l+0x8a>
 80054e8:	2908      	cmp	r1, #8
 80054ea:	d830      	bhi.n	800554e <_strtod_l+0x8e>
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d039      	beq.n	8005564 <_strtod_l+0xa4>
 80054f0:	2200      	movs	r2, #0
 80054f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80054f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80054f6:	782a      	ldrb	r2, [r5, #0]
 80054f8:	2a30      	cmp	r2, #48	@ 0x30
 80054fa:	f040 80b1 	bne.w	8005660 <_strtod_l+0x1a0>
 80054fe:	786a      	ldrb	r2, [r5, #1]
 8005500:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005504:	2a58      	cmp	r2, #88	@ 0x58
 8005506:	d16c      	bne.n	80055e2 <_strtod_l+0x122>
 8005508:	9302      	str	r3, [sp, #8]
 800550a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800550c:	4a8e      	ldr	r2, [pc, #568]	@ (8005748 <_strtod_l+0x288>)
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	ab1a      	add	r3, sp, #104	@ 0x68
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	9805      	ldr	r0, [sp, #20]
 8005516:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005518:	a919      	add	r1, sp, #100	@ 0x64
 800551a:	f001 f915 	bl	8006748 <__gethex>
 800551e:	f010 060f 	ands.w	r6, r0, #15
 8005522:	4604      	mov	r4, r0
 8005524:	d005      	beq.n	8005532 <_strtod_l+0x72>
 8005526:	2e06      	cmp	r6, #6
 8005528:	d126      	bne.n	8005578 <_strtod_l+0xb8>
 800552a:	2300      	movs	r3, #0
 800552c:	3501      	adds	r5, #1
 800552e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005532:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 8584 	bne.w	8006042 <_strtod_l+0xb82>
 800553a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800553c:	b1bb      	cbz	r3, 800556e <_strtod_l+0xae>
 800553e:	4650      	mov	r0, sl
 8005540:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005544:	b01f      	add	sp, #124	@ 0x7c
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	2920      	cmp	r1, #32
 800554c:	d1d0      	bne.n	80054f0 <_strtod_l+0x30>
 800554e:	3201      	adds	r2, #1
 8005550:	e7c3      	b.n	80054da <_strtod_l+0x1a>
 8005552:	292d      	cmp	r1, #45	@ 0x2d
 8005554:	d1cc      	bne.n	80054f0 <_strtod_l+0x30>
 8005556:	2101      	movs	r1, #1
 8005558:	910b      	str	r1, [sp, #44]	@ 0x2c
 800555a:	1c51      	adds	r1, r2, #1
 800555c:	9119      	str	r1, [sp, #100]	@ 0x64
 800555e:	7852      	ldrb	r2, [r2, #1]
 8005560:	2a00      	cmp	r2, #0
 8005562:	d1c7      	bne.n	80054f4 <_strtod_l+0x34>
 8005564:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005566:	9419      	str	r4, [sp, #100]	@ 0x64
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 8568 	bne.w	800603e <_strtod_l+0xb7e>
 800556e:	4650      	mov	r0, sl
 8005570:	4659      	mov	r1, fp
 8005572:	e7e7      	b.n	8005544 <_strtod_l+0x84>
 8005574:	2100      	movs	r1, #0
 8005576:	e7ef      	b.n	8005558 <_strtod_l+0x98>
 8005578:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800557a:	b13a      	cbz	r2, 800558c <_strtod_l+0xcc>
 800557c:	2135      	movs	r1, #53	@ 0x35
 800557e:	a81c      	add	r0, sp, #112	@ 0x70
 8005580:	f7ff ff36 	bl	80053f0 <__copybits>
 8005584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005586:	9805      	ldr	r0, [sp, #20]
 8005588:	f7ff fb10 	bl	8004bac <_Bfree>
 800558c:	3e01      	subs	r6, #1
 800558e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005590:	2e04      	cmp	r6, #4
 8005592:	d806      	bhi.n	80055a2 <_strtod_l+0xe2>
 8005594:	e8df f006 	tbb	[pc, r6]
 8005598:	201d0314 	.word	0x201d0314
 800559c:	14          	.byte	0x14
 800559d:	00          	.byte	0x00
 800559e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80055a2:	05e1      	lsls	r1, r4, #23
 80055a4:	bf48      	it	mi
 80055a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80055aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80055ae:	0d1b      	lsrs	r3, r3, #20
 80055b0:	051b      	lsls	r3, r3, #20
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1bd      	bne.n	8005532 <_strtod_l+0x72>
 80055b6:	f7fe fb29 	bl	8003c0c <__errno>
 80055ba:	2322      	movs	r3, #34	@ 0x22
 80055bc:	6003      	str	r3, [r0, #0]
 80055be:	e7b8      	b.n	8005532 <_strtod_l+0x72>
 80055c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80055c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80055c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80055cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80055d0:	e7e7      	b.n	80055a2 <_strtod_l+0xe2>
 80055d2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800574c <_strtod_l+0x28c>
 80055d6:	e7e4      	b.n	80055a2 <_strtod_l+0xe2>
 80055d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80055dc:	f04f 3aff 	mov.w	sl, #4294967295
 80055e0:	e7df      	b.n	80055a2 <_strtod_l+0xe2>
 80055e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b30      	cmp	r3, #48	@ 0x30
 80055ec:	d0f9      	beq.n	80055e2 <_strtod_l+0x122>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d09f      	beq.n	8005532 <_strtod_l+0x72>
 80055f2:	2301      	movs	r3, #1
 80055f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80055f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055f8:	220a      	movs	r2, #10
 80055fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80055fc:	2300      	movs	r3, #0
 80055fe:	461f      	mov	r7, r3
 8005600:	9308      	str	r3, [sp, #32]
 8005602:	930a      	str	r3, [sp, #40]	@ 0x28
 8005604:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005606:	7805      	ldrb	r5, [r0, #0]
 8005608:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800560c:	b2d9      	uxtb	r1, r3
 800560e:	2909      	cmp	r1, #9
 8005610:	d928      	bls.n	8005664 <_strtod_l+0x1a4>
 8005612:	2201      	movs	r2, #1
 8005614:	494e      	ldr	r1, [pc, #312]	@ (8005750 <_strtod_l+0x290>)
 8005616:	f000 ffc7 	bl	80065a8 <strncmp>
 800561a:	2800      	cmp	r0, #0
 800561c:	d032      	beq.n	8005684 <_strtod_l+0x1c4>
 800561e:	2000      	movs	r0, #0
 8005620:	462a      	mov	r2, r5
 8005622:	4681      	mov	r9, r0
 8005624:	463d      	mov	r5, r7
 8005626:	4603      	mov	r3, r0
 8005628:	2a65      	cmp	r2, #101	@ 0x65
 800562a:	d001      	beq.n	8005630 <_strtod_l+0x170>
 800562c:	2a45      	cmp	r2, #69	@ 0x45
 800562e:	d114      	bne.n	800565a <_strtod_l+0x19a>
 8005630:	b91d      	cbnz	r5, 800563a <_strtod_l+0x17a>
 8005632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005634:	4302      	orrs	r2, r0
 8005636:	d095      	beq.n	8005564 <_strtod_l+0xa4>
 8005638:	2500      	movs	r5, #0
 800563a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800563c:	1c62      	adds	r2, r4, #1
 800563e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005640:	7862      	ldrb	r2, [r4, #1]
 8005642:	2a2b      	cmp	r2, #43	@ 0x2b
 8005644:	d077      	beq.n	8005736 <_strtod_l+0x276>
 8005646:	2a2d      	cmp	r2, #45	@ 0x2d
 8005648:	d07b      	beq.n	8005742 <_strtod_l+0x282>
 800564a:	f04f 0c00 	mov.w	ip, #0
 800564e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005652:	2909      	cmp	r1, #9
 8005654:	f240 8082 	bls.w	800575c <_strtod_l+0x29c>
 8005658:	9419      	str	r4, [sp, #100]	@ 0x64
 800565a:	f04f 0800 	mov.w	r8, #0
 800565e:	e0a2      	b.n	80057a6 <_strtod_l+0x2e6>
 8005660:	2300      	movs	r3, #0
 8005662:	e7c7      	b.n	80055f4 <_strtod_l+0x134>
 8005664:	2f08      	cmp	r7, #8
 8005666:	bfd5      	itete	le
 8005668:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800566a:	9908      	ldrgt	r1, [sp, #32]
 800566c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005670:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005674:	f100 0001 	add.w	r0, r0, #1
 8005678:	bfd4      	ite	le
 800567a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800567c:	9308      	strgt	r3, [sp, #32]
 800567e:	3701      	adds	r7, #1
 8005680:	9019      	str	r0, [sp, #100]	@ 0x64
 8005682:	e7bf      	b.n	8005604 <_strtod_l+0x144>
 8005684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	9219      	str	r2, [sp, #100]	@ 0x64
 800568a:	785a      	ldrb	r2, [r3, #1]
 800568c:	b37f      	cbz	r7, 80056ee <_strtod_l+0x22e>
 800568e:	4681      	mov	r9, r0
 8005690:	463d      	mov	r5, r7
 8005692:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005696:	2b09      	cmp	r3, #9
 8005698:	d912      	bls.n	80056c0 <_strtod_l+0x200>
 800569a:	2301      	movs	r3, #1
 800569c:	e7c4      	b.n	8005628 <_strtod_l+0x168>
 800569e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056a0:	3001      	adds	r0, #1
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80056a6:	785a      	ldrb	r2, [r3, #1]
 80056a8:	2a30      	cmp	r2, #48	@ 0x30
 80056aa:	d0f8      	beq.n	800569e <_strtod_l+0x1de>
 80056ac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	f200 84cb 	bhi.w	800604c <_strtod_l+0xb8c>
 80056b6:	4681      	mov	r9, r0
 80056b8:	2000      	movs	r0, #0
 80056ba:	4605      	mov	r5, r0
 80056bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056be:	930c      	str	r3, [sp, #48]	@ 0x30
 80056c0:	3a30      	subs	r2, #48	@ 0x30
 80056c2:	f100 0301 	add.w	r3, r0, #1
 80056c6:	d02a      	beq.n	800571e <_strtod_l+0x25e>
 80056c8:	4499      	add	r9, r3
 80056ca:	210a      	movs	r1, #10
 80056cc:	462b      	mov	r3, r5
 80056ce:	eb00 0c05 	add.w	ip, r0, r5
 80056d2:	4563      	cmp	r3, ip
 80056d4:	d10d      	bne.n	80056f2 <_strtod_l+0x232>
 80056d6:	1c69      	adds	r1, r5, #1
 80056d8:	4401      	add	r1, r0
 80056da:	4428      	add	r0, r5
 80056dc:	2808      	cmp	r0, #8
 80056de:	dc16      	bgt.n	800570e <_strtod_l+0x24e>
 80056e0:	230a      	movs	r3, #10
 80056e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80056e4:	fb03 2300 	mla	r3, r3, r0, r2
 80056e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80056ea:	2300      	movs	r3, #0
 80056ec:	e018      	b.n	8005720 <_strtod_l+0x260>
 80056ee:	4638      	mov	r0, r7
 80056f0:	e7da      	b.n	80056a8 <_strtod_l+0x1e8>
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	f103 0301 	add.w	r3, r3, #1
 80056f8:	dc03      	bgt.n	8005702 <_strtod_l+0x242>
 80056fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80056fc:	434e      	muls	r6, r1
 80056fe:	960a      	str	r6, [sp, #40]	@ 0x28
 8005700:	e7e7      	b.n	80056d2 <_strtod_l+0x212>
 8005702:	2b10      	cmp	r3, #16
 8005704:	bfde      	ittt	le
 8005706:	9e08      	ldrle	r6, [sp, #32]
 8005708:	434e      	mulle	r6, r1
 800570a:	9608      	strle	r6, [sp, #32]
 800570c:	e7e1      	b.n	80056d2 <_strtod_l+0x212>
 800570e:	280f      	cmp	r0, #15
 8005710:	dceb      	bgt.n	80056ea <_strtod_l+0x22a>
 8005712:	230a      	movs	r3, #10
 8005714:	9808      	ldr	r0, [sp, #32]
 8005716:	fb03 2300 	mla	r3, r3, r0, r2
 800571a:	9308      	str	r3, [sp, #32]
 800571c:	e7e5      	b.n	80056ea <_strtod_l+0x22a>
 800571e:	4629      	mov	r1, r5
 8005720:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005722:	460d      	mov	r5, r1
 8005724:	1c50      	adds	r0, r2, #1
 8005726:	9019      	str	r0, [sp, #100]	@ 0x64
 8005728:	7852      	ldrb	r2, [r2, #1]
 800572a:	4618      	mov	r0, r3
 800572c:	e7b1      	b.n	8005692 <_strtod_l+0x1d2>
 800572e:	f04f 0900 	mov.w	r9, #0
 8005732:	2301      	movs	r3, #1
 8005734:	e77d      	b.n	8005632 <_strtod_l+0x172>
 8005736:	f04f 0c00 	mov.w	ip, #0
 800573a:	1ca2      	adds	r2, r4, #2
 800573c:	9219      	str	r2, [sp, #100]	@ 0x64
 800573e:	78a2      	ldrb	r2, [r4, #2]
 8005740:	e785      	b.n	800564e <_strtod_l+0x18e>
 8005742:	f04f 0c01 	mov.w	ip, #1
 8005746:	e7f8      	b.n	800573a <_strtod_l+0x27a>
 8005748:	080075b0 	.word	0x080075b0
 800574c:	7ff00000 	.word	0x7ff00000
 8005750:	08007598 	.word	0x08007598
 8005754:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005756:	1c51      	adds	r1, r2, #1
 8005758:	9119      	str	r1, [sp, #100]	@ 0x64
 800575a:	7852      	ldrb	r2, [r2, #1]
 800575c:	2a30      	cmp	r2, #48	@ 0x30
 800575e:	d0f9      	beq.n	8005754 <_strtod_l+0x294>
 8005760:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005764:	2908      	cmp	r1, #8
 8005766:	f63f af78 	bhi.w	800565a <_strtod_l+0x19a>
 800576a:	f04f 080a 	mov.w	r8, #10
 800576e:	3a30      	subs	r2, #48	@ 0x30
 8005770:	920e      	str	r2, [sp, #56]	@ 0x38
 8005772:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005774:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005776:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005778:	1c56      	adds	r6, r2, #1
 800577a:	9619      	str	r6, [sp, #100]	@ 0x64
 800577c:	7852      	ldrb	r2, [r2, #1]
 800577e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005782:	f1be 0f09 	cmp.w	lr, #9
 8005786:	d939      	bls.n	80057fc <_strtod_l+0x33c>
 8005788:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800578a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800578e:	1a76      	subs	r6, r6, r1
 8005790:	2e08      	cmp	r6, #8
 8005792:	dc03      	bgt.n	800579c <_strtod_l+0x2dc>
 8005794:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005796:	4588      	cmp	r8, r1
 8005798:	bfa8      	it	ge
 800579a:	4688      	movge	r8, r1
 800579c:	f1bc 0f00 	cmp.w	ip, #0
 80057a0:	d001      	beq.n	80057a6 <_strtod_l+0x2e6>
 80057a2:	f1c8 0800 	rsb	r8, r8, #0
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	d14e      	bne.n	8005848 <_strtod_l+0x388>
 80057aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057ac:	4308      	orrs	r0, r1
 80057ae:	f47f aec0 	bne.w	8005532 <_strtod_l+0x72>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f47f aed6 	bne.w	8005564 <_strtod_l+0xa4>
 80057b8:	2a69      	cmp	r2, #105	@ 0x69
 80057ba:	d028      	beq.n	800580e <_strtod_l+0x34e>
 80057bc:	dc25      	bgt.n	800580a <_strtod_l+0x34a>
 80057be:	2a49      	cmp	r2, #73	@ 0x49
 80057c0:	d025      	beq.n	800580e <_strtod_l+0x34e>
 80057c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80057c4:	f47f aece 	bne.w	8005564 <_strtod_l+0xa4>
 80057c8:	499a      	ldr	r1, [pc, #616]	@ (8005a34 <_strtod_l+0x574>)
 80057ca:	a819      	add	r0, sp, #100	@ 0x64
 80057cc:	f001 f9de 	bl	8006b8c <__match>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	f43f aec7 	beq.w	8005564 <_strtod_l+0xa4>
 80057d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b28      	cmp	r3, #40	@ 0x28
 80057dc:	d12e      	bne.n	800583c <_strtod_l+0x37c>
 80057de:	4996      	ldr	r1, [pc, #600]	@ (8005a38 <_strtod_l+0x578>)
 80057e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80057e2:	a819      	add	r0, sp, #100	@ 0x64
 80057e4:	f001 f9e6 	bl	8006bb4 <__hexnan>
 80057e8:	2805      	cmp	r0, #5
 80057ea:	d127      	bne.n	800583c <_strtod_l+0x37c>
 80057ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80057ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80057f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80057f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80057fa:	e69a      	b.n	8005532 <_strtod_l+0x72>
 80057fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80057fe:	fb08 2101 	mla	r1, r8, r1, r2
 8005802:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005806:	920e      	str	r2, [sp, #56]	@ 0x38
 8005808:	e7b5      	b.n	8005776 <_strtod_l+0x2b6>
 800580a:	2a6e      	cmp	r2, #110	@ 0x6e
 800580c:	e7da      	b.n	80057c4 <_strtod_l+0x304>
 800580e:	498b      	ldr	r1, [pc, #556]	@ (8005a3c <_strtod_l+0x57c>)
 8005810:	a819      	add	r0, sp, #100	@ 0x64
 8005812:	f001 f9bb 	bl	8006b8c <__match>
 8005816:	2800      	cmp	r0, #0
 8005818:	f43f aea4 	beq.w	8005564 <_strtod_l+0xa4>
 800581c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800581e:	4988      	ldr	r1, [pc, #544]	@ (8005a40 <_strtod_l+0x580>)
 8005820:	3b01      	subs	r3, #1
 8005822:	a819      	add	r0, sp, #100	@ 0x64
 8005824:	9319      	str	r3, [sp, #100]	@ 0x64
 8005826:	f001 f9b1 	bl	8006b8c <__match>
 800582a:	b910      	cbnz	r0, 8005832 <_strtod_l+0x372>
 800582c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800582e:	3301      	adds	r3, #1
 8005830:	9319      	str	r3, [sp, #100]	@ 0x64
 8005832:	f04f 0a00 	mov.w	sl, #0
 8005836:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005a44 <_strtod_l+0x584>
 800583a:	e67a      	b.n	8005532 <_strtod_l+0x72>
 800583c:	4882      	ldr	r0, [pc, #520]	@ (8005a48 <_strtod_l+0x588>)
 800583e:	f000 fee3 	bl	8006608 <nan>
 8005842:	4682      	mov	sl, r0
 8005844:	468b      	mov	fp, r1
 8005846:	e674      	b.n	8005532 <_strtod_l+0x72>
 8005848:	eba8 0309 	sub.w	r3, r8, r9
 800584c:	2f00      	cmp	r7, #0
 800584e:	bf08      	it	eq
 8005850:	462f      	moveq	r7, r5
 8005852:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005854:	2d10      	cmp	r5, #16
 8005856:	462c      	mov	r4, r5
 8005858:	9309      	str	r3, [sp, #36]	@ 0x24
 800585a:	bfa8      	it	ge
 800585c:	2410      	movge	r4, #16
 800585e:	f7fa fdc1 	bl	80003e4 <__aeabi_ui2d>
 8005862:	2d09      	cmp	r5, #9
 8005864:	4682      	mov	sl, r0
 8005866:	468b      	mov	fp, r1
 8005868:	dc11      	bgt.n	800588e <_strtod_l+0x3ce>
 800586a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	f43f ae60 	beq.w	8005532 <_strtod_l+0x72>
 8005872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005874:	dd76      	ble.n	8005964 <_strtod_l+0x4a4>
 8005876:	2b16      	cmp	r3, #22
 8005878:	dc5d      	bgt.n	8005936 <_strtod_l+0x476>
 800587a:	4974      	ldr	r1, [pc, #464]	@ (8005a4c <_strtod_l+0x58c>)
 800587c:	4652      	mov	r2, sl
 800587e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005882:	465b      	mov	r3, fp
 8005884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005888:	f7fa fe26 	bl	80004d8 <__aeabi_dmul>
 800588c:	e7d9      	b.n	8005842 <_strtod_l+0x382>
 800588e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a4c <_strtod_l+0x58c>)
 8005890:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005894:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005898:	f7fa fe1e 	bl	80004d8 <__aeabi_dmul>
 800589c:	4682      	mov	sl, r0
 800589e:	9808      	ldr	r0, [sp, #32]
 80058a0:	468b      	mov	fp, r1
 80058a2:	f7fa fd9f 	bl	80003e4 <__aeabi_ui2d>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4650      	mov	r0, sl
 80058ac:	4659      	mov	r1, fp
 80058ae:	f7fa fc5d 	bl	800016c <__adddf3>
 80058b2:	2d0f      	cmp	r5, #15
 80058b4:	4682      	mov	sl, r0
 80058b6:	468b      	mov	fp, r1
 80058b8:	ddd7      	ble.n	800586a <_strtod_l+0x3aa>
 80058ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058bc:	1b2c      	subs	r4, r5, r4
 80058be:	441c      	add	r4, r3
 80058c0:	2c00      	cmp	r4, #0
 80058c2:	f340 8096 	ble.w	80059f2 <_strtod_l+0x532>
 80058c6:	f014 030f 	ands.w	r3, r4, #15
 80058ca:	d00a      	beq.n	80058e2 <_strtod_l+0x422>
 80058cc:	495f      	ldr	r1, [pc, #380]	@ (8005a4c <_strtod_l+0x58c>)
 80058ce:	4652      	mov	r2, sl
 80058d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80058d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058d8:	465b      	mov	r3, fp
 80058da:	f7fa fdfd 	bl	80004d8 <__aeabi_dmul>
 80058de:	4682      	mov	sl, r0
 80058e0:	468b      	mov	fp, r1
 80058e2:	f034 040f 	bics.w	r4, r4, #15
 80058e6:	d073      	beq.n	80059d0 <_strtod_l+0x510>
 80058e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80058ec:	dd48      	ble.n	8005980 <_strtod_l+0x4c0>
 80058ee:	2400      	movs	r4, #0
 80058f0:	46a0      	mov	r8, r4
 80058f2:	46a1      	mov	r9, r4
 80058f4:	940a      	str	r4, [sp, #40]	@ 0x28
 80058f6:	2322      	movs	r3, #34	@ 0x22
 80058f8:	f04f 0a00 	mov.w	sl, #0
 80058fc:	9a05      	ldr	r2, [sp, #20]
 80058fe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005a44 <_strtod_l+0x584>
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	f43f ae13 	beq.w	8005532 <_strtod_l+0x72>
 800590c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800590e:	9805      	ldr	r0, [sp, #20]
 8005910:	f7ff f94c 	bl	8004bac <_Bfree>
 8005914:	4649      	mov	r1, r9
 8005916:	9805      	ldr	r0, [sp, #20]
 8005918:	f7ff f948 	bl	8004bac <_Bfree>
 800591c:	4641      	mov	r1, r8
 800591e:	9805      	ldr	r0, [sp, #20]
 8005920:	f7ff f944 	bl	8004bac <_Bfree>
 8005924:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005926:	9805      	ldr	r0, [sp, #20]
 8005928:	f7ff f940 	bl	8004bac <_Bfree>
 800592c:	4621      	mov	r1, r4
 800592e:	9805      	ldr	r0, [sp, #20]
 8005930:	f7ff f93c 	bl	8004bac <_Bfree>
 8005934:	e5fd      	b.n	8005532 <_strtod_l+0x72>
 8005936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005938:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800593c:	4293      	cmp	r3, r2
 800593e:	dbbc      	blt.n	80058ba <_strtod_l+0x3fa>
 8005940:	4c42      	ldr	r4, [pc, #264]	@ (8005a4c <_strtod_l+0x58c>)
 8005942:	f1c5 050f 	rsb	r5, r5, #15
 8005946:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800594a:	4652      	mov	r2, sl
 800594c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005950:	465b      	mov	r3, fp
 8005952:	f7fa fdc1 	bl	80004d8 <__aeabi_dmul>
 8005956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005958:	1b5d      	subs	r5, r3, r5
 800595a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800595e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005962:	e791      	b.n	8005888 <_strtod_l+0x3c8>
 8005964:	3316      	adds	r3, #22
 8005966:	dba8      	blt.n	80058ba <_strtod_l+0x3fa>
 8005968:	4b38      	ldr	r3, [pc, #224]	@ (8005a4c <_strtod_l+0x58c>)
 800596a:	eba9 0808 	sub.w	r8, r9, r8
 800596e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005972:	4650      	mov	r0, sl
 8005974:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005978:	4659      	mov	r1, fp
 800597a:	f7fa fed7 	bl	800072c <__aeabi_ddiv>
 800597e:	e760      	b.n	8005842 <_strtod_l+0x382>
 8005980:	4b33      	ldr	r3, [pc, #204]	@ (8005a50 <_strtod_l+0x590>)
 8005982:	4650      	mov	r0, sl
 8005984:	9308      	str	r3, [sp, #32]
 8005986:	2300      	movs	r3, #0
 8005988:	4659      	mov	r1, fp
 800598a:	461e      	mov	r6, r3
 800598c:	1124      	asrs	r4, r4, #4
 800598e:	2c01      	cmp	r4, #1
 8005990:	dc21      	bgt.n	80059d6 <_strtod_l+0x516>
 8005992:	b10b      	cbz	r3, 8005998 <_strtod_l+0x4d8>
 8005994:	4682      	mov	sl, r0
 8005996:	468b      	mov	fp, r1
 8005998:	492d      	ldr	r1, [pc, #180]	@ (8005a50 <_strtod_l+0x590>)
 800599a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800599e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80059a2:	4652      	mov	r2, sl
 80059a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059a8:	465b      	mov	r3, fp
 80059aa:	f7fa fd95 	bl	80004d8 <__aeabi_dmul>
 80059ae:	4b25      	ldr	r3, [pc, #148]	@ (8005a44 <_strtod_l+0x584>)
 80059b0:	460a      	mov	r2, r1
 80059b2:	400b      	ands	r3, r1
 80059b4:	4927      	ldr	r1, [pc, #156]	@ (8005a54 <_strtod_l+0x594>)
 80059b6:	4682      	mov	sl, r0
 80059b8:	428b      	cmp	r3, r1
 80059ba:	d898      	bhi.n	80058ee <_strtod_l+0x42e>
 80059bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80059c0:	428b      	cmp	r3, r1
 80059c2:	bf86      	itte	hi
 80059c4:	f04f 3aff 	movhi.w	sl, #4294967295
 80059c8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005a58 <_strtod_l+0x598>
 80059cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80059d0:	2300      	movs	r3, #0
 80059d2:	9308      	str	r3, [sp, #32]
 80059d4:	e07a      	b.n	8005acc <_strtod_l+0x60c>
 80059d6:	07e2      	lsls	r2, r4, #31
 80059d8:	d505      	bpl.n	80059e6 <_strtod_l+0x526>
 80059da:	9b08      	ldr	r3, [sp, #32]
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fd7a 	bl	80004d8 <__aeabi_dmul>
 80059e4:	2301      	movs	r3, #1
 80059e6:	9a08      	ldr	r2, [sp, #32]
 80059e8:	3601      	adds	r6, #1
 80059ea:	3208      	adds	r2, #8
 80059ec:	1064      	asrs	r4, r4, #1
 80059ee:	9208      	str	r2, [sp, #32]
 80059f0:	e7cd      	b.n	800598e <_strtod_l+0x4ce>
 80059f2:	d0ed      	beq.n	80059d0 <_strtod_l+0x510>
 80059f4:	4264      	negs	r4, r4
 80059f6:	f014 020f 	ands.w	r2, r4, #15
 80059fa:	d00a      	beq.n	8005a12 <_strtod_l+0x552>
 80059fc:	4b13      	ldr	r3, [pc, #76]	@ (8005a4c <_strtod_l+0x58c>)
 80059fe:	4650      	mov	r0, sl
 8005a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a04:	4659      	mov	r1, fp
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f7fa fe8f 	bl	800072c <__aeabi_ddiv>
 8005a0e:	4682      	mov	sl, r0
 8005a10:	468b      	mov	fp, r1
 8005a12:	1124      	asrs	r4, r4, #4
 8005a14:	d0dc      	beq.n	80059d0 <_strtod_l+0x510>
 8005a16:	2c1f      	cmp	r4, #31
 8005a18:	dd20      	ble.n	8005a5c <_strtod_l+0x59c>
 8005a1a:	2400      	movs	r4, #0
 8005a1c:	46a0      	mov	r8, r4
 8005a1e:	46a1      	mov	r9, r4
 8005a20:	940a      	str	r4, [sp, #40]	@ 0x28
 8005a22:	2322      	movs	r3, #34	@ 0x22
 8005a24:	9a05      	ldr	r2, [sp, #20]
 8005a26:	f04f 0a00 	mov.w	sl, #0
 8005a2a:	f04f 0b00 	mov.w	fp, #0
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	e768      	b.n	8005904 <_strtod_l+0x444>
 8005a32:	bf00      	nop
 8005a34:	08007387 	.word	0x08007387
 8005a38:	0800759c 	.word	0x0800759c
 8005a3c:	0800737f 	.word	0x0800737f
 8005a40:	080073b6 	.word	0x080073b6
 8005a44:	7ff00000 	.word	0x7ff00000
 8005a48:	08007745 	.word	0x08007745
 8005a4c:	080074d0 	.word	0x080074d0
 8005a50:	080074a8 	.word	0x080074a8
 8005a54:	7ca00000 	.word	0x7ca00000
 8005a58:	7fefffff 	.word	0x7fefffff
 8005a5c:	f014 0310 	ands.w	r3, r4, #16
 8005a60:	bf18      	it	ne
 8005a62:	236a      	movne	r3, #106	@ 0x6a
 8005a64:	4650      	mov	r0, sl
 8005a66:	9308      	str	r3, [sp, #32]
 8005a68:	4659      	mov	r1, fp
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4ea9      	ldr	r6, [pc, #676]	@ (8005d14 <_strtod_l+0x854>)
 8005a6e:	07e2      	lsls	r2, r4, #31
 8005a70:	d504      	bpl.n	8005a7c <_strtod_l+0x5bc>
 8005a72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a76:	f7fa fd2f 	bl	80004d8 <__aeabi_dmul>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	1064      	asrs	r4, r4, #1
 8005a7e:	f106 0608 	add.w	r6, r6, #8
 8005a82:	d1f4      	bne.n	8005a6e <_strtod_l+0x5ae>
 8005a84:	b10b      	cbz	r3, 8005a8a <_strtod_l+0x5ca>
 8005a86:	4682      	mov	sl, r0
 8005a88:	468b      	mov	fp, r1
 8005a8a:	9b08      	ldr	r3, [sp, #32]
 8005a8c:	b1b3      	cbz	r3, 8005abc <_strtod_l+0x5fc>
 8005a8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005a92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	4659      	mov	r1, fp
 8005a9a:	dd0f      	ble.n	8005abc <_strtod_l+0x5fc>
 8005a9c:	2b1f      	cmp	r3, #31
 8005a9e:	dd57      	ble.n	8005b50 <_strtod_l+0x690>
 8005aa0:	2b34      	cmp	r3, #52	@ 0x34
 8005aa2:	bfd8      	it	le
 8005aa4:	f04f 33ff 	movle.w	r3, #4294967295
 8005aa8:	f04f 0a00 	mov.w	sl, #0
 8005aac:	bfcf      	iteee	gt
 8005aae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005ab2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005ab6:	4093      	lslle	r3, r2
 8005ab8:	ea03 0b01 	andle.w	fp, r3, r1
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	4659      	mov	r1, fp
 8005ac4:	f7fa ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d1a6      	bne.n	8005a1a <_strtod_l+0x55a>
 8005acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ace:	463a      	mov	r2, r7
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	9805      	ldr	r0, [sp, #20]
 8005ad8:	f7ff f8d0 	bl	8004c7c <__s2b>
 8005adc:	900a      	str	r0, [sp, #40]	@ 0x28
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f43f af05 	beq.w	80058ee <_strtod_l+0x42e>
 8005ae4:	2400      	movs	r4, #0
 8005ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ae8:	eba9 0308 	sub.w	r3, r9, r8
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	bfa8      	it	ge
 8005af0:	2300      	movge	r3, #0
 8005af2:	46a0      	mov	r8, r4
 8005af4:	9312      	str	r3, [sp, #72]	@ 0x48
 8005af6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005afa:	9316      	str	r3, [sp, #88]	@ 0x58
 8005afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005afe:	9805      	ldr	r0, [sp, #20]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	f7ff f813 	bl	8004b2c <_Balloc>
 8005b06:	4681      	mov	r9, r0
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	f43f aef4 	beq.w	80058f6 <_strtod_l+0x436>
 8005b0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b10:	300c      	adds	r0, #12
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	f103 010c 	add.w	r1, r3, #12
 8005b18:	3202      	adds	r2, #2
 8005b1a:	0092      	lsls	r2, r2, #2
 8005b1c:	f000 fd66 	bl	80065ec <memcpy>
 8005b20:	ab1c      	add	r3, sp, #112	@ 0x70
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	4652      	mov	r2, sl
 8005b2a:	465b      	mov	r3, fp
 8005b2c:	9805      	ldr	r0, [sp, #20]
 8005b2e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005b32:	f7ff fbd5 	bl	80052e0 <__d2b>
 8005b36:	901a      	str	r0, [sp, #104]	@ 0x68
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f43f aedc 	beq.w	80058f6 <_strtod_l+0x436>
 8005b3e:	2101      	movs	r1, #1
 8005b40:	9805      	ldr	r0, [sp, #20]
 8005b42:	f7ff f931 	bl	8004da8 <__i2b>
 8005b46:	4680      	mov	r8, r0
 8005b48:	b948      	cbnz	r0, 8005b5e <_strtod_l+0x69e>
 8005b4a:	f04f 0800 	mov.w	r8, #0
 8005b4e:	e6d2      	b.n	80058f6 <_strtod_l+0x436>
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	ea03 0a0a 	and.w	sl, r3, sl
 8005b5c:	e7ae      	b.n	8005abc <_strtod_l+0x5fc>
 8005b5e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005b60:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	bfab      	itete	ge
 8005b66:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005b68:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005b6a:	18ef      	addge	r7, r5, r3
 8005b6c:	1b5e      	sublt	r6, r3, r5
 8005b6e:	9b08      	ldr	r3, [sp, #32]
 8005b70:	bfa8      	it	ge
 8005b72:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005b74:	eba5 0503 	sub.w	r5, r5, r3
 8005b78:	4415      	add	r5, r2
 8005b7a:	4b67      	ldr	r3, [pc, #412]	@ (8005d18 <_strtod_l+0x858>)
 8005b7c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005b80:	bfb8      	it	lt
 8005b82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005b84:	429d      	cmp	r5, r3
 8005b86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005b8a:	da50      	bge.n	8005c2e <_strtod_l+0x76e>
 8005b8c:	1b5b      	subs	r3, r3, r5
 8005b8e:	2b1f      	cmp	r3, #31
 8005b90:	f04f 0101 	mov.w	r1, #1
 8005b94:	eba2 0203 	sub.w	r2, r2, r3
 8005b98:	dc3d      	bgt.n	8005c16 <_strtod_l+0x756>
 8005b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ba4:	18bd      	adds	r5, r7, r2
 8005ba6:	9b08      	ldr	r3, [sp, #32]
 8005ba8:	42af      	cmp	r7, r5
 8005baa:	4416      	add	r6, r2
 8005bac:	441e      	add	r6, r3
 8005bae:	463b      	mov	r3, r7
 8005bb0:	bfa8      	it	ge
 8005bb2:	462b      	movge	r3, r5
 8005bb4:	42b3      	cmp	r3, r6
 8005bb6:	bfa8      	it	ge
 8005bb8:	4633      	movge	r3, r6
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bfc2      	ittt	gt
 8005bbe:	1aed      	subgt	r5, r5, r3
 8005bc0:	1af6      	subgt	r6, r6, r3
 8005bc2:	1aff      	subgt	r7, r7, r3
 8005bc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dd16      	ble.n	8005bf8 <_strtod_l+0x738>
 8005bca:	4641      	mov	r1, r8
 8005bcc:	461a      	mov	r2, r3
 8005bce:	9805      	ldr	r0, [sp, #20]
 8005bd0:	f7ff f9a8 	bl	8004f24 <__pow5mult>
 8005bd4:	4680      	mov	r8, r0
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d0b7      	beq.n	8005b4a <_strtod_l+0x68a>
 8005bda:	4601      	mov	r1, r0
 8005bdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005bde:	9805      	ldr	r0, [sp, #20]
 8005be0:	f7ff f8f8 	bl	8004dd4 <__multiply>
 8005be4:	900e      	str	r0, [sp, #56]	@ 0x38
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f ae85 	beq.w	80058f6 <_strtod_l+0x436>
 8005bec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005bee:	9805      	ldr	r0, [sp, #20]
 8005bf0:	f7fe ffdc 	bl	8004bac <_Bfree>
 8005bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	dc1d      	bgt.n	8005c38 <_strtod_l+0x778>
 8005bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	dd23      	ble.n	8005c4a <_strtod_l+0x78a>
 8005c02:	4649      	mov	r1, r9
 8005c04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005c06:	9805      	ldr	r0, [sp, #20]
 8005c08:	f7ff f98c 	bl	8004f24 <__pow5mult>
 8005c0c:	4681      	mov	r9, r0
 8005c0e:	b9e0      	cbnz	r0, 8005c4a <_strtod_l+0x78a>
 8005c10:	f04f 0900 	mov.w	r9, #0
 8005c14:	e66f      	b.n	80058f6 <_strtod_l+0x436>
 8005c16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005c1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005c1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005c22:	35e2      	adds	r5, #226	@ 0xe2
 8005c24:	fa01 f305 	lsl.w	r3, r1, r5
 8005c28:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005c2c:	e7ba      	b.n	8005ba4 <_strtod_l+0x6e4>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c32:	2301      	movs	r3, #1
 8005c34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c36:	e7b5      	b.n	8005ba4 <_strtod_l+0x6e4>
 8005c38:	462a      	mov	r2, r5
 8005c3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c3c:	9805      	ldr	r0, [sp, #20]
 8005c3e:	f7ff f9cb 	bl	8004fd8 <__lshift>
 8005c42:	901a      	str	r0, [sp, #104]	@ 0x68
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d1d9      	bne.n	8005bfc <_strtod_l+0x73c>
 8005c48:	e655      	b.n	80058f6 <_strtod_l+0x436>
 8005c4a:	2e00      	cmp	r6, #0
 8005c4c:	dd07      	ble.n	8005c5e <_strtod_l+0x79e>
 8005c4e:	4649      	mov	r1, r9
 8005c50:	4632      	mov	r2, r6
 8005c52:	9805      	ldr	r0, [sp, #20]
 8005c54:	f7ff f9c0 	bl	8004fd8 <__lshift>
 8005c58:	4681      	mov	r9, r0
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d0d8      	beq.n	8005c10 <_strtod_l+0x750>
 8005c5e:	2f00      	cmp	r7, #0
 8005c60:	dd08      	ble.n	8005c74 <_strtod_l+0x7b4>
 8005c62:	4641      	mov	r1, r8
 8005c64:	463a      	mov	r2, r7
 8005c66:	9805      	ldr	r0, [sp, #20]
 8005c68:	f7ff f9b6 	bl	8004fd8 <__lshift>
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f43f ae41 	beq.w	80058f6 <_strtod_l+0x436>
 8005c74:	464a      	mov	r2, r9
 8005c76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c78:	9805      	ldr	r0, [sp, #20]
 8005c7a:	f7ff fa35 	bl	80050e8 <__mdiff>
 8005c7e:	4604      	mov	r4, r0
 8005c80:	2800      	cmp	r0, #0
 8005c82:	f43f ae38 	beq.w	80058f6 <_strtod_l+0x436>
 8005c86:	68c3      	ldr	r3, [r0, #12]
 8005c88:	4641      	mov	r1, r8
 8005c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60c3      	str	r3, [r0, #12]
 8005c90:	f7ff fa0e 	bl	80050b0 <__mcmp>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	da45      	bge.n	8005d24 <_strtod_l+0x864>
 8005c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c9a:	ea53 030a 	orrs.w	r3, r3, sl
 8005c9e:	d16b      	bne.n	8005d78 <_strtod_l+0x8b8>
 8005ca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d167      	bne.n	8005d78 <_strtod_l+0x8b8>
 8005ca8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005cac:	0d1b      	lsrs	r3, r3, #20
 8005cae:	051b      	lsls	r3, r3, #20
 8005cb0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005cb4:	d960      	bls.n	8005d78 <_strtod_l+0x8b8>
 8005cb6:	6963      	ldr	r3, [r4, #20]
 8005cb8:	b913      	cbnz	r3, 8005cc0 <_strtod_l+0x800>
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	dd5b      	ble.n	8005d78 <_strtod_l+0x8b8>
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	9805      	ldr	r0, [sp, #20]
 8005cc6:	f7ff f987 	bl	8004fd8 <__lshift>
 8005cca:	4641      	mov	r1, r8
 8005ccc:	4604      	mov	r4, r0
 8005cce:	f7ff f9ef 	bl	80050b0 <__mcmp>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	dd50      	ble.n	8005d78 <_strtod_l+0x8b8>
 8005cd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005cda:	9a08      	ldr	r2, [sp, #32]
 8005cdc:	0d1b      	lsrs	r3, r3, #20
 8005cde:	051b      	lsls	r3, r3, #20
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d06a      	beq.n	8005dba <_strtod_l+0x8fa>
 8005ce4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005ce8:	d867      	bhi.n	8005dba <_strtod_l+0x8fa>
 8005cea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005cee:	f67f ae98 	bls.w	8005a22 <_strtod_l+0x562>
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	4659      	mov	r1, fp
 8005cf6:	4b09      	ldr	r3, [pc, #36]	@ (8005d1c <_strtod_l+0x85c>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f7fa fbed 	bl	80004d8 <__aeabi_dmul>
 8005cfe:	4b08      	ldr	r3, [pc, #32]	@ (8005d20 <_strtod_l+0x860>)
 8005d00:	4682      	mov	sl, r0
 8005d02:	400b      	ands	r3, r1
 8005d04:	468b      	mov	fp, r1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f47f ae00 	bne.w	800590c <_strtod_l+0x44c>
 8005d0c:	2322      	movs	r3, #34	@ 0x22
 8005d0e:	9a05      	ldr	r2, [sp, #20]
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	e5fb      	b.n	800590c <_strtod_l+0x44c>
 8005d14:	080075c8 	.word	0x080075c8
 8005d18:	fffffc02 	.word	0xfffffc02
 8005d1c:	39500000 	.word	0x39500000
 8005d20:	7ff00000 	.word	0x7ff00000
 8005d24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005d28:	d165      	bne.n	8005df6 <_strtod_l+0x936>
 8005d2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d30:	b35a      	cbz	r2, 8005d8a <_strtod_l+0x8ca>
 8005d32:	4a99      	ldr	r2, [pc, #612]	@ (8005f98 <_strtod_l+0xad8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d12b      	bne.n	8005d90 <_strtod_l+0x8d0>
 8005d38:	9b08      	ldr	r3, [sp, #32]
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	b303      	cbz	r3, 8005d80 <_strtod_l+0x8c0>
 8005d3e:	465a      	mov	r2, fp
 8005d40:	4b96      	ldr	r3, [pc, #600]	@ (8005f9c <_strtod_l+0xadc>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	d81b      	bhi.n	8005d86 <_strtod_l+0x8c6>
 8005d4e:	0d1b      	lsrs	r3, r3, #20
 8005d50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	d119      	bne.n	8005d90 <_strtod_l+0x8d0>
 8005d5c:	4b90      	ldr	r3, [pc, #576]	@ (8005fa0 <_strtod_l+0xae0>)
 8005d5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d102      	bne.n	8005d6a <_strtod_l+0x8aa>
 8005d64:	3101      	adds	r1, #1
 8005d66:	f43f adc6 	beq.w	80058f6 <_strtod_l+0x436>
 8005d6a:	f04f 0a00 	mov.w	sl, #0
 8005d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8005f9c <_strtod_l+0xadc>)
 8005d70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d72:	401a      	ands	r2, r3
 8005d74:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005d78:	9b08      	ldr	r3, [sp, #32]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1b9      	bne.n	8005cf2 <_strtod_l+0x832>
 8005d7e:	e5c5      	b.n	800590c <_strtod_l+0x44c>
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295
 8005d84:	e7e8      	b.n	8005d58 <_strtod_l+0x898>
 8005d86:	4613      	mov	r3, r2
 8005d88:	e7e6      	b.n	8005d58 <_strtod_l+0x898>
 8005d8a:	ea53 030a 	orrs.w	r3, r3, sl
 8005d8e:	d0a2      	beq.n	8005cd6 <_strtod_l+0x816>
 8005d90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d92:	b1db      	cbz	r3, 8005dcc <_strtod_l+0x90c>
 8005d94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d96:	4213      	tst	r3, r2
 8005d98:	d0ee      	beq.n	8005d78 <_strtod_l+0x8b8>
 8005d9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	4659      	mov	r1, fp
 8005da0:	9a08      	ldr	r2, [sp, #32]
 8005da2:	b1bb      	cbz	r3, 8005dd4 <_strtod_l+0x914>
 8005da4:	f7ff fb68 	bl	8005478 <sulp>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005db0:	f7fa f9dc 	bl	800016c <__adddf3>
 8005db4:	4682      	mov	sl, r0
 8005db6:	468b      	mov	fp, r1
 8005db8:	e7de      	b.n	8005d78 <_strtod_l+0x8b8>
 8005dba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005dbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005dc2:	f04f 3aff 	mov.w	sl, #4294967295
 8005dc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005dca:	e7d5      	b.n	8005d78 <_strtod_l+0x8b8>
 8005dcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005dce:	ea13 0f0a 	tst.w	r3, sl
 8005dd2:	e7e1      	b.n	8005d98 <_strtod_l+0x8d8>
 8005dd4:	f7ff fb50 	bl	8005478 <sulp>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005de0:	f7fa f9c2 	bl	8000168 <__aeabi_dsub>
 8005de4:	2200      	movs	r2, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	4682      	mov	sl, r0
 8005dea:	468b      	mov	fp, r1
 8005dec:	f7fa fddc 	bl	80009a8 <__aeabi_dcmpeq>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d0c1      	beq.n	8005d78 <_strtod_l+0x8b8>
 8005df4:	e615      	b.n	8005a22 <_strtod_l+0x562>
 8005df6:	4641      	mov	r1, r8
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f7ff fac9 	bl	8005390 <__ratio>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005e04:	4606      	mov	r6, r0
 8005e06:	460f      	mov	r7, r1
 8005e08:	f7fa fde2 	bl	80009d0 <__aeabi_dcmple>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d06d      	beq.n	8005eec <_strtod_l+0xa2c>
 8005e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d178      	bne.n	8005f08 <_strtod_l+0xa48>
 8005e16:	f1ba 0f00 	cmp.w	sl, #0
 8005e1a:	d156      	bne.n	8005eca <_strtod_l+0xa0a>
 8005e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d158      	bne.n	8005ed8 <_strtod_l+0xa18>
 8005e26:	2200      	movs	r2, #0
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	4b5d      	ldr	r3, [pc, #372]	@ (8005fa4 <_strtod_l+0xae4>)
 8005e2e:	f7fa fdc5 	bl	80009bc <__aeabi_dcmplt>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d157      	bne.n	8005ee6 <_strtod_l+0xa26>
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8005fa8 <_strtod_l+0xae8>)
 8005e3e:	f7fa fb4b 	bl	80004d8 <__aeabi_dmul>
 8005e42:	4606      	mov	r6, r0
 8005e44:	460f      	mov	r7, r1
 8005e46:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005e4a:	9606      	str	r6, [sp, #24]
 8005e4c:	9307      	str	r3, [sp, #28]
 8005e4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e52:	4d52      	ldr	r5, [pc, #328]	@ (8005f9c <_strtod_l+0xadc>)
 8005e54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005e58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e5a:	401d      	ands	r5, r3
 8005e5c:	4b53      	ldr	r3, [pc, #332]	@ (8005fac <_strtod_l+0xaec>)
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	f040 80aa 	bne.w	8005fb8 <_strtod_l+0xaf8>
 8005e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e66:	4650      	mov	r0, sl
 8005e68:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005e6c:	4659      	mov	r1, fp
 8005e6e:	f7ff f9cf 	bl	8005210 <__ulp>
 8005e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e76:	f7fa fb2f 	bl	80004d8 <__aeabi_dmul>
 8005e7a:	4652      	mov	r2, sl
 8005e7c:	465b      	mov	r3, fp
 8005e7e:	f7fa f975 	bl	800016c <__adddf3>
 8005e82:	460b      	mov	r3, r1
 8005e84:	4945      	ldr	r1, [pc, #276]	@ (8005f9c <_strtod_l+0xadc>)
 8005e86:	4a4a      	ldr	r2, [pc, #296]	@ (8005fb0 <_strtod_l+0xaf0>)
 8005e88:	4019      	ands	r1, r3
 8005e8a:	4291      	cmp	r1, r2
 8005e8c:	4682      	mov	sl, r0
 8005e8e:	d942      	bls.n	8005f16 <_strtod_l+0xa56>
 8005e90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e92:	4b43      	ldr	r3, [pc, #268]	@ (8005fa0 <_strtod_l+0xae0>)
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d103      	bne.n	8005ea0 <_strtod_l+0x9e0>
 8005e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f43f ad2b 	beq.w	80058f6 <_strtod_l+0x436>
 8005ea0:	f04f 3aff 	mov.w	sl, #4294967295
 8005ea4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005fa0 <_strtod_l+0xae0>
 8005ea8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005eaa:	9805      	ldr	r0, [sp, #20]
 8005eac:	f7fe fe7e 	bl	8004bac <_Bfree>
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	9805      	ldr	r0, [sp, #20]
 8005eb4:	f7fe fe7a 	bl	8004bac <_Bfree>
 8005eb8:	4641      	mov	r1, r8
 8005eba:	9805      	ldr	r0, [sp, #20]
 8005ebc:	f7fe fe76 	bl	8004bac <_Bfree>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	9805      	ldr	r0, [sp, #20]
 8005ec4:	f7fe fe72 	bl	8004bac <_Bfree>
 8005ec8:	e618      	b.n	8005afc <_strtod_l+0x63c>
 8005eca:	f1ba 0f01 	cmp.w	sl, #1
 8005ece:	d103      	bne.n	8005ed8 <_strtod_l+0xa18>
 8005ed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f43f ada5 	beq.w	8005a22 <_strtod_l+0x562>
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4b36      	ldr	r3, [pc, #216]	@ (8005fb4 <_strtod_l+0xaf4>)
 8005edc:	2600      	movs	r6, #0
 8005ede:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ee2:	4f30      	ldr	r7, [pc, #192]	@ (8005fa4 <_strtod_l+0xae4>)
 8005ee4:	e7b3      	b.n	8005e4e <_strtod_l+0x98e>
 8005ee6:	2600      	movs	r6, #0
 8005ee8:	4f2f      	ldr	r7, [pc, #188]	@ (8005fa8 <_strtod_l+0xae8>)
 8005eea:	e7ac      	b.n	8005e46 <_strtod_l+0x986>
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8005fa8 <_strtod_l+0xae8>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f7fa faf0 	bl	80004d8 <__aeabi_dmul>
 8005ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005efa:	4606      	mov	r6, r0
 8005efc:	460f      	mov	r7, r1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0a1      	beq.n	8005e46 <_strtod_l+0x986>
 8005f02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005f06:	e7a2      	b.n	8005e4e <_strtod_l+0x98e>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4b26      	ldr	r3, [pc, #152]	@ (8005fa4 <_strtod_l+0xae4>)
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	461f      	mov	r7, r3
 8005f10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f14:	e79b      	b.n	8005e4e <_strtod_l+0x98e>
 8005f16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005f1a:	9b08      	ldr	r3, [sp, #32]
 8005f1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1c1      	bne.n	8005ea8 <_strtod_l+0x9e8>
 8005f24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f28:	0d1b      	lsrs	r3, r3, #20
 8005f2a:	051b      	lsls	r3, r3, #20
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	d1bb      	bne.n	8005ea8 <_strtod_l+0x9e8>
 8005f30:	4630      	mov	r0, r6
 8005f32:	4639      	mov	r1, r7
 8005f34:	f7fa fe18 	bl	8000b68 <__aeabi_d2lz>
 8005f38:	f7fa faa0 	bl	800047c <__aeabi_l2d>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4630      	mov	r0, r6
 8005f42:	4639      	mov	r1, r7
 8005f44:	f7fa f910 	bl	8000168 <__aeabi_dsub>
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005f50:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f56:	ea46 060a 	orr.w	r6, r6, sl
 8005f5a:	431e      	orrs	r6, r3
 8005f5c:	d069      	beq.n	8006032 <_strtod_l+0xb72>
 8005f5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8005f88 <_strtod_l+0xac8>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa fd2a 	bl	80009bc <__aeabi_dcmplt>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f47f accf 	bne.w	800590c <_strtod_l+0x44c>
 8005f6e:	a308      	add	r3, pc, #32	@ (adr r3, 8005f90 <_strtod_l+0xad0>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f78:	f7fa fd3e 	bl	80009f8 <__aeabi_dcmpgt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d093      	beq.n	8005ea8 <_strtod_l+0x9e8>
 8005f80:	e4c4      	b.n	800590c <_strtod_l+0x44c>
 8005f82:	bf00      	nop
 8005f84:	f3af 8000 	nop.w
 8005f88:	94a03595 	.word	0x94a03595
 8005f8c:	3fdfffff 	.word	0x3fdfffff
 8005f90:	35afe535 	.word	0x35afe535
 8005f94:	3fe00000 	.word	0x3fe00000
 8005f98:	000fffff 	.word	0x000fffff
 8005f9c:	7ff00000 	.word	0x7ff00000
 8005fa0:	7fefffff 	.word	0x7fefffff
 8005fa4:	3ff00000 	.word	0x3ff00000
 8005fa8:	3fe00000 	.word	0x3fe00000
 8005fac:	7fe00000 	.word	0x7fe00000
 8005fb0:	7c9fffff 	.word	0x7c9fffff
 8005fb4:	bff00000 	.word	0xbff00000
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	b323      	cbz	r3, 8006006 <_strtod_l+0xb46>
 8005fbc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005fc0:	d821      	bhi.n	8006006 <_strtod_l+0xb46>
 8005fc2:	a327      	add	r3, pc, #156	@ (adr r3, 8006060 <_strtod_l+0xba0>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	4630      	mov	r0, r6
 8005fca:	4639      	mov	r1, r7
 8005fcc:	f7fa fd00 	bl	80009d0 <__aeabi_dcmple>
 8005fd0:	b1a0      	cbz	r0, 8005ffc <_strtod_l+0xb3c>
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7fa fd57 	bl	8000a88 <__aeabi_d2uiz>
 8005fda:	2801      	cmp	r0, #1
 8005fdc:	bf38      	it	cc
 8005fde:	2001      	movcc	r0, #1
 8005fe0:	f7fa fa00 	bl	80003e4 <__aeabi_ui2d>
 8005fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	b9fb      	cbnz	r3, 800602c <_strtod_l+0xb6c>
 8005fec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ff0:	9014      	str	r0, [sp, #80]	@ 0x50
 8005ff2:	9315      	str	r3, [sp, #84]	@ 0x54
 8005ff4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005ff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005ffc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ffe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006002:	1b5b      	subs	r3, r3, r5
 8006004:	9311      	str	r3, [sp, #68]	@ 0x44
 8006006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800600a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800600e:	f7ff f8ff 	bl	8005210 <__ulp>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4650      	mov	r0, sl
 8006018:	4659      	mov	r1, fp
 800601a:	f7fa fa5d 	bl	80004d8 <__aeabi_dmul>
 800601e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006022:	f7fa f8a3 	bl	800016c <__adddf3>
 8006026:	4682      	mov	sl, r0
 8006028:	468b      	mov	fp, r1
 800602a:	e776      	b.n	8005f1a <_strtod_l+0xa5a>
 800602c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006030:	e7e0      	b.n	8005ff4 <_strtod_l+0xb34>
 8006032:	a30d      	add	r3, pc, #52	@ (adr r3, 8006068 <_strtod_l+0xba8>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa fcc0 	bl	80009bc <__aeabi_dcmplt>
 800603c:	e79e      	b.n	8005f7c <_strtod_l+0xabc>
 800603e:	2300      	movs	r3, #0
 8006040:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006044:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	f7ff ba77 	b.w	800553a <_strtod_l+0x7a>
 800604c:	2a65      	cmp	r2, #101	@ 0x65
 800604e:	f43f ab6e 	beq.w	800572e <_strtod_l+0x26e>
 8006052:	2a45      	cmp	r2, #69	@ 0x45
 8006054:	f43f ab6b 	beq.w	800572e <_strtod_l+0x26e>
 8006058:	2301      	movs	r3, #1
 800605a:	f7ff bba6 	b.w	80057aa <_strtod_l+0x2ea>
 800605e:	bf00      	nop
 8006060:	ffc00000 	.word	0xffc00000
 8006064:	41dfffff 	.word	0x41dfffff
 8006068:	94a03595 	.word	0x94a03595
 800606c:	3fcfffff 	.word	0x3fcfffff

08006070 <_strtod_r>:
 8006070:	4b01      	ldr	r3, [pc, #4]	@ (8006078 <_strtod_r+0x8>)
 8006072:	f7ff ba25 	b.w	80054c0 <_strtod_l>
 8006076:	bf00      	nop
 8006078:	20000078 	.word	0x20000078

0800607c <_strtol_l.constprop.0>:
 800607c:	2b24      	cmp	r3, #36	@ 0x24
 800607e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006082:	4686      	mov	lr, r0
 8006084:	4690      	mov	r8, r2
 8006086:	d801      	bhi.n	800608c <_strtol_l.constprop.0+0x10>
 8006088:	2b01      	cmp	r3, #1
 800608a:	d106      	bne.n	800609a <_strtol_l.constprop.0+0x1e>
 800608c:	f7fd fdbe 	bl	8003c0c <__errno>
 8006090:	2316      	movs	r3, #22
 8006092:	6003      	str	r3, [r0, #0]
 8006094:	2000      	movs	r0, #0
 8006096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609a:	460d      	mov	r5, r1
 800609c:	4833      	ldr	r0, [pc, #204]	@ (800616c <_strtol_l.constprop.0+0xf0>)
 800609e:	462a      	mov	r2, r5
 80060a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060a4:	5d06      	ldrb	r6, [r0, r4]
 80060a6:	f016 0608 	ands.w	r6, r6, #8
 80060aa:	d1f8      	bne.n	800609e <_strtol_l.constprop.0+0x22>
 80060ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80060ae:	d12d      	bne.n	800610c <_strtol_l.constprop.0+0x90>
 80060b0:	2601      	movs	r6, #1
 80060b2:	782c      	ldrb	r4, [r5, #0]
 80060b4:	1c95      	adds	r5, r2, #2
 80060b6:	f033 0210 	bics.w	r2, r3, #16
 80060ba:	d109      	bne.n	80060d0 <_strtol_l.constprop.0+0x54>
 80060bc:	2c30      	cmp	r4, #48	@ 0x30
 80060be:	d12a      	bne.n	8006116 <_strtol_l.constprop.0+0x9a>
 80060c0:	782a      	ldrb	r2, [r5, #0]
 80060c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80060c6:	2a58      	cmp	r2, #88	@ 0x58
 80060c8:	d125      	bne.n	8006116 <_strtol_l.constprop.0+0x9a>
 80060ca:	2310      	movs	r3, #16
 80060cc:	786c      	ldrb	r4, [r5, #1]
 80060ce:	3502      	adds	r5, #2
 80060d0:	2200      	movs	r2, #0
 80060d2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80060d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80060da:	fbbc f9f3 	udiv	r9, ip, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80060e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80060e8:	2f09      	cmp	r7, #9
 80060ea:	d81b      	bhi.n	8006124 <_strtol_l.constprop.0+0xa8>
 80060ec:	463c      	mov	r4, r7
 80060ee:	42a3      	cmp	r3, r4
 80060f0:	dd27      	ble.n	8006142 <_strtol_l.constprop.0+0xc6>
 80060f2:	1c57      	adds	r7, r2, #1
 80060f4:	d007      	beq.n	8006106 <_strtol_l.constprop.0+0x8a>
 80060f6:	4581      	cmp	r9, r0
 80060f8:	d320      	bcc.n	800613c <_strtol_l.constprop.0+0xc0>
 80060fa:	d101      	bne.n	8006100 <_strtol_l.constprop.0+0x84>
 80060fc:	45a2      	cmp	sl, r4
 80060fe:	db1d      	blt.n	800613c <_strtol_l.constprop.0+0xc0>
 8006100:	2201      	movs	r2, #1
 8006102:	fb00 4003 	mla	r0, r0, r3, r4
 8006106:	f815 4b01 	ldrb.w	r4, [r5], #1
 800610a:	e7eb      	b.n	80060e4 <_strtol_l.constprop.0+0x68>
 800610c:	2c2b      	cmp	r4, #43	@ 0x2b
 800610e:	bf04      	itt	eq
 8006110:	782c      	ldrbeq	r4, [r5, #0]
 8006112:	1c95      	addeq	r5, r2, #2
 8006114:	e7cf      	b.n	80060b6 <_strtol_l.constprop.0+0x3a>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1da      	bne.n	80060d0 <_strtol_l.constprop.0+0x54>
 800611a:	2c30      	cmp	r4, #48	@ 0x30
 800611c:	bf0c      	ite	eq
 800611e:	2308      	moveq	r3, #8
 8006120:	230a      	movne	r3, #10
 8006122:	e7d5      	b.n	80060d0 <_strtol_l.constprop.0+0x54>
 8006124:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006128:	2f19      	cmp	r7, #25
 800612a:	d801      	bhi.n	8006130 <_strtol_l.constprop.0+0xb4>
 800612c:	3c37      	subs	r4, #55	@ 0x37
 800612e:	e7de      	b.n	80060ee <_strtol_l.constprop.0+0x72>
 8006130:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006134:	2f19      	cmp	r7, #25
 8006136:	d804      	bhi.n	8006142 <_strtol_l.constprop.0+0xc6>
 8006138:	3c57      	subs	r4, #87	@ 0x57
 800613a:	e7d8      	b.n	80060ee <_strtol_l.constprop.0+0x72>
 800613c:	f04f 32ff 	mov.w	r2, #4294967295
 8006140:	e7e1      	b.n	8006106 <_strtol_l.constprop.0+0x8a>
 8006142:	1c53      	adds	r3, r2, #1
 8006144:	d108      	bne.n	8006158 <_strtol_l.constprop.0+0xdc>
 8006146:	2322      	movs	r3, #34	@ 0x22
 8006148:	4660      	mov	r0, ip
 800614a:	f8ce 3000 	str.w	r3, [lr]
 800614e:	f1b8 0f00 	cmp.w	r8, #0
 8006152:	d0a0      	beq.n	8006096 <_strtol_l.constprop.0+0x1a>
 8006154:	1e69      	subs	r1, r5, #1
 8006156:	e006      	b.n	8006166 <_strtol_l.constprop.0+0xea>
 8006158:	b106      	cbz	r6, 800615c <_strtol_l.constprop.0+0xe0>
 800615a:	4240      	negs	r0, r0
 800615c:	f1b8 0f00 	cmp.w	r8, #0
 8006160:	d099      	beq.n	8006096 <_strtol_l.constprop.0+0x1a>
 8006162:	2a00      	cmp	r2, #0
 8006164:	d1f6      	bne.n	8006154 <_strtol_l.constprop.0+0xd8>
 8006166:	f8c8 1000 	str.w	r1, [r8]
 800616a:	e794      	b.n	8006096 <_strtol_l.constprop.0+0x1a>
 800616c:	080075f1 	.word	0x080075f1

08006170 <_strtol_r>:
 8006170:	f7ff bf84 	b.w	800607c <_strtol_l.constprop.0>

08006174 <__ssputs_r>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	461f      	mov	r7, r3
 800617a:	688e      	ldr	r6, [r1, #8]
 800617c:	4682      	mov	sl, r0
 800617e:	42be      	cmp	r6, r7
 8006180:	460c      	mov	r4, r1
 8006182:	4690      	mov	r8, r2
 8006184:	680b      	ldr	r3, [r1, #0]
 8006186:	d82d      	bhi.n	80061e4 <__ssputs_r+0x70>
 8006188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800618c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006190:	d026      	beq.n	80061e0 <__ssputs_r+0x6c>
 8006192:	6965      	ldr	r5, [r4, #20]
 8006194:	6909      	ldr	r1, [r1, #16]
 8006196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800619a:	eba3 0901 	sub.w	r9, r3, r1
 800619e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061a2:	1c7b      	adds	r3, r7, #1
 80061a4:	444b      	add	r3, r9
 80061a6:	106d      	asrs	r5, r5, #1
 80061a8:	429d      	cmp	r5, r3
 80061aa:	bf38      	it	cc
 80061ac:	461d      	movcc	r5, r3
 80061ae:	0553      	lsls	r3, r2, #21
 80061b0:	d527      	bpl.n	8006202 <__ssputs_r+0x8e>
 80061b2:	4629      	mov	r1, r5
 80061b4:	f7fe fc2e 	bl	8004a14 <_malloc_r>
 80061b8:	4606      	mov	r6, r0
 80061ba:	b360      	cbz	r0, 8006216 <__ssputs_r+0xa2>
 80061bc:	464a      	mov	r2, r9
 80061be:	6921      	ldr	r1, [r4, #16]
 80061c0:	f000 fa14 	bl	80065ec <memcpy>
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	6126      	str	r6, [r4, #16]
 80061d2:	444e      	add	r6, r9
 80061d4:	6026      	str	r6, [r4, #0]
 80061d6:	463e      	mov	r6, r7
 80061d8:	6165      	str	r5, [r4, #20]
 80061da:	eba5 0509 	sub.w	r5, r5, r9
 80061de:	60a5      	str	r5, [r4, #8]
 80061e0:	42be      	cmp	r6, r7
 80061e2:	d900      	bls.n	80061e6 <__ssputs_r+0x72>
 80061e4:	463e      	mov	r6, r7
 80061e6:	4632      	mov	r2, r6
 80061e8:	4641      	mov	r1, r8
 80061ea:	6820      	ldr	r0, [r4, #0]
 80061ec:	f000 f9c2 	bl	8006574 <memmove>
 80061f0:	2000      	movs	r0, #0
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	1b9b      	subs	r3, r3, r6
 80061f6:	60a3      	str	r3, [r4, #8]
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	4433      	add	r3, r6
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006202:	462a      	mov	r2, r5
 8006204:	f000 fd83 	bl	8006d0e <_realloc_r>
 8006208:	4606      	mov	r6, r0
 800620a:	2800      	cmp	r0, #0
 800620c:	d1e0      	bne.n	80061d0 <__ssputs_r+0x5c>
 800620e:	4650      	mov	r0, sl
 8006210:	6921      	ldr	r1, [r4, #16]
 8006212:	f7fe fb8d 	bl	8004930 <_free_r>
 8006216:	230c      	movs	r3, #12
 8006218:	f8ca 3000 	str.w	r3, [sl]
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	f04f 30ff 	mov.w	r0, #4294967295
 8006222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	e7e9      	b.n	80061fe <__ssputs_r+0x8a>
	...

0800622c <_svfiprintf_r>:
 800622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	4698      	mov	r8, r3
 8006232:	898b      	ldrh	r3, [r1, #12]
 8006234:	4607      	mov	r7, r0
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	460d      	mov	r5, r1
 800623a:	4614      	mov	r4, r2
 800623c:	b09d      	sub	sp, #116	@ 0x74
 800623e:	d510      	bpl.n	8006262 <_svfiprintf_r+0x36>
 8006240:	690b      	ldr	r3, [r1, #16]
 8006242:	b973      	cbnz	r3, 8006262 <_svfiprintf_r+0x36>
 8006244:	2140      	movs	r1, #64	@ 0x40
 8006246:	f7fe fbe5 	bl	8004a14 <_malloc_r>
 800624a:	6028      	str	r0, [r5, #0]
 800624c:	6128      	str	r0, [r5, #16]
 800624e:	b930      	cbnz	r0, 800625e <_svfiprintf_r+0x32>
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	b01d      	add	sp, #116	@ 0x74
 800625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	2340      	movs	r3, #64	@ 0x40
 8006260:	616b      	str	r3, [r5, #20]
 8006262:	2300      	movs	r3, #0
 8006264:	9309      	str	r3, [sp, #36]	@ 0x24
 8006266:	2320      	movs	r3, #32
 8006268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800626c:	2330      	movs	r3, #48	@ 0x30
 800626e:	f04f 0901 	mov.w	r9, #1
 8006272:	f8cd 800c 	str.w	r8, [sp, #12]
 8006276:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006410 <_svfiprintf_r+0x1e4>
 800627a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800627e:	4623      	mov	r3, r4
 8006280:	469a      	mov	sl, r3
 8006282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006286:	b10a      	cbz	r2, 800628c <_svfiprintf_r+0x60>
 8006288:	2a25      	cmp	r2, #37	@ 0x25
 800628a:	d1f9      	bne.n	8006280 <_svfiprintf_r+0x54>
 800628c:	ebba 0b04 	subs.w	fp, sl, r4
 8006290:	d00b      	beq.n	80062aa <_svfiprintf_r+0x7e>
 8006292:	465b      	mov	r3, fp
 8006294:	4622      	mov	r2, r4
 8006296:	4629      	mov	r1, r5
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff ff6b 	bl	8006174 <__ssputs_r>
 800629e:	3001      	adds	r0, #1
 80062a0:	f000 80a7 	beq.w	80063f2 <_svfiprintf_r+0x1c6>
 80062a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062a6:	445a      	add	r2, fp
 80062a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80062aa:	f89a 3000 	ldrb.w	r3, [sl]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 809f 	beq.w	80063f2 <_svfiprintf_r+0x1c6>
 80062b4:	2300      	movs	r3, #0
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062be:	f10a 0a01 	add.w	sl, sl, #1
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	9307      	str	r3, [sp, #28]
 80062c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80062cc:	4654      	mov	r4, sl
 80062ce:	2205      	movs	r2, #5
 80062d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d4:	484e      	ldr	r0, [pc, #312]	@ (8006410 <_svfiprintf_r+0x1e4>)
 80062d6:	f7fd fcc6 	bl	8003c66 <memchr>
 80062da:	9a04      	ldr	r2, [sp, #16]
 80062dc:	b9d8      	cbnz	r0, 8006316 <_svfiprintf_r+0xea>
 80062de:	06d0      	lsls	r0, r2, #27
 80062e0:	bf44      	itt	mi
 80062e2:	2320      	movmi	r3, #32
 80062e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e8:	0711      	lsls	r1, r2, #28
 80062ea:	bf44      	itt	mi
 80062ec:	232b      	movmi	r3, #43	@ 0x2b
 80062ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062f2:	f89a 3000 	ldrb.w	r3, [sl]
 80062f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80062f8:	d015      	beq.n	8006326 <_svfiprintf_r+0xfa>
 80062fa:	4654      	mov	r4, sl
 80062fc:	2000      	movs	r0, #0
 80062fe:	f04f 0c0a 	mov.w	ip, #10
 8006302:	9a07      	ldr	r2, [sp, #28]
 8006304:	4621      	mov	r1, r4
 8006306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800630a:	3b30      	subs	r3, #48	@ 0x30
 800630c:	2b09      	cmp	r3, #9
 800630e:	d94b      	bls.n	80063a8 <_svfiprintf_r+0x17c>
 8006310:	b1b0      	cbz	r0, 8006340 <_svfiprintf_r+0x114>
 8006312:	9207      	str	r2, [sp, #28]
 8006314:	e014      	b.n	8006340 <_svfiprintf_r+0x114>
 8006316:	eba0 0308 	sub.w	r3, r0, r8
 800631a:	fa09 f303 	lsl.w	r3, r9, r3
 800631e:	4313      	orrs	r3, r2
 8006320:	46a2      	mov	sl, r4
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	e7d2      	b.n	80062cc <_svfiprintf_r+0xa0>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	1d19      	adds	r1, r3, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	9103      	str	r1, [sp, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfbb      	ittet	lt
 8006332:	425b      	neglt	r3, r3
 8006334:	f042 0202 	orrlt.w	r2, r2, #2
 8006338:	9307      	strge	r3, [sp, #28]
 800633a:	9307      	strlt	r3, [sp, #28]
 800633c:	bfb8      	it	lt
 800633e:	9204      	strlt	r2, [sp, #16]
 8006340:	7823      	ldrb	r3, [r4, #0]
 8006342:	2b2e      	cmp	r3, #46	@ 0x2e
 8006344:	d10a      	bne.n	800635c <_svfiprintf_r+0x130>
 8006346:	7863      	ldrb	r3, [r4, #1]
 8006348:	2b2a      	cmp	r3, #42	@ 0x2a
 800634a:	d132      	bne.n	80063b2 <_svfiprintf_r+0x186>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	3402      	adds	r4, #2
 8006350:	1d1a      	adds	r2, r3, #4
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	9203      	str	r2, [sp, #12]
 8006356:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800635a:	9305      	str	r3, [sp, #20]
 800635c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006414 <_svfiprintf_r+0x1e8>
 8006360:	2203      	movs	r2, #3
 8006362:	4650      	mov	r0, sl
 8006364:	7821      	ldrb	r1, [r4, #0]
 8006366:	f7fd fc7e 	bl	8003c66 <memchr>
 800636a:	b138      	cbz	r0, 800637c <_svfiprintf_r+0x150>
 800636c:	2240      	movs	r2, #64	@ 0x40
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	eba0 000a 	sub.w	r0, r0, sl
 8006374:	4082      	lsls	r2, r0
 8006376:	4313      	orrs	r3, r2
 8006378:	3401      	adds	r4, #1
 800637a:	9304      	str	r3, [sp, #16]
 800637c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006380:	2206      	movs	r2, #6
 8006382:	4825      	ldr	r0, [pc, #148]	@ (8006418 <_svfiprintf_r+0x1ec>)
 8006384:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006388:	f7fd fc6d 	bl	8003c66 <memchr>
 800638c:	2800      	cmp	r0, #0
 800638e:	d036      	beq.n	80063fe <_svfiprintf_r+0x1d2>
 8006390:	4b22      	ldr	r3, [pc, #136]	@ (800641c <_svfiprintf_r+0x1f0>)
 8006392:	bb1b      	cbnz	r3, 80063dc <_svfiprintf_r+0x1b0>
 8006394:	9b03      	ldr	r3, [sp, #12]
 8006396:	3307      	adds	r3, #7
 8006398:	f023 0307 	bic.w	r3, r3, #7
 800639c:	3308      	adds	r3, #8
 800639e:	9303      	str	r3, [sp, #12]
 80063a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a2:	4433      	add	r3, r6
 80063a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a6:	e76a      	b.n	800627e <_svfiprintf_r+0x52>
 80063a8:	460c      	mov	r4, r1
 80063aa:	2001      	movs	r0, #1
 80063ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b0:	e7a8      	b.n	8006304 <_svfiprintf_r+0xd8>
 80063b2:	2300      	movs	r3, #0
 80063b4:	f04f 0c0a 	mov.w	ip, #10
 80063b8:	4619      	mov	r1, r3
 80063ba:	3401      	adds	r4, #1
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	4620      	mov	r0, r4
 80063c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c4:	3a30      	subs	r2, #48	@ 0x30
 80063c6:	2a09      	cmp	r2, #9
 80063c8:	d903      	bls.n	80063d2 <_svfiprintf_r+0x1a6>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0c6      	beq.n	800635c <_svfiprintf_r+0x130>
 80063ce:	9105      	str	r1, [sp, #20]
 80063d0:	e7c4      	b.n	800635c <_svfiprintf_r+0x130>
 80063d2:	4604      	mov	r4, r0
 80063d4:	2301      	movs	r3, #1
 80063d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063da:	e7f0      	b.n	80063be <_svfiprintf_r+0x192>
 80063dc:	ab03      	add	r3, sp, #12
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	462a      	mov	r2, r5
 80063e2:	4638      	mov	r0, r7
 80063e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006420 <_svfiprintf_r+0x1f4>)
 80063e6:	a904      	add	r1, sp, #16
 80063e8:	f7fc fc96 	bl	8002d18 <_printf_float>
 80063ec:	1c42      	adds	r2, r0, #1
 80063ee:	4606      	mov	r6, r0
 80063f0:	d1d6      	bne.n	80063a0 <_svfiprintf_r+0x174>
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	065b      	lsls	r3, r3, #25
 80063f6:	f53f af2d 	bmi.w	8006254 <_svfiprintf_r+0x28>
 80063fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063fc:	e72c      	b.n	8006258 <_svfiprintf_r+0x2c>
 80063fe:	ab03      	add	r3, sp, #12
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	462a      	mov	r2, r5
 8006404:	4638      	mov	r0, r7
 8006406:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <_svfiprintf_r+0x1f4>)
 8006408:	a904      	add	r1, sp, #16
 800640a:	f7fc ff23 	bl	8003254 <_printf_i>
 800640e:	e7ed      	b.n	80063ec <_svfiprintf_r+0x1c0>
 8006410:	080076f1 	.word	0x080076f1
 8006414:	080076f7 	.word	0x080076f7
 8006418:	080076fb 	.word	0x080076fb
 800641c:	08002d19 	.word	0x08002d19
 8006420:	08006175 	.word	0x08006175

08006424 <__sflush_r>:
 8006424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	0716      	lsls	r6, r2, #28
 800642c:	4605      	mov	r5, r0
 800642e:	460c      	mov	r4, r1
 8006430:	d454      	bmi.n	80064dc <__sflush_r+0xb8>
 8006432:	684b      	ldr	r3, [r1, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dc02      	bgt.n	800643e <__sflush_r+0x1a>
 8006438:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	dd48      	ble.n	80064d0 <__sflush_r+0xac>
 800643e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006440:	2e00      	cmp	r6, #0
 8006442:	d045      	beq.n	80064d0 <__sflush_r+0xac>
 8006444:	2300      	movs	r3, #0
 8006446:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800644a:	682f      	ldr	r7, [r5, #0]
 800644c:	6a21      	ldr	r1, [r4, #32]
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	d030      	beq.n	80064b4 <__sflush_r+0x90>
 8006452:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	0759      	lsls	r1, r3, #29
 8006458:	d505      	bpl.n	8006466 <__sflush_r+0x42>
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	1ad2      	subs	r2, r2, r3
 800645e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006460:	b10b      	cbz	r3, 8006466 <__sflush_r+0x42>
 8006462:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	2300      	movs	r3, #0
 8006468:	4628      	mov	r0, r5
 800646a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800646c:	6a21      	ldr	r1, [r4, #32]
 800646e:	47b0      	blx	r6
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	d106      	bne.n	8006484 <__sflush_r+0x60>
 8006476:	6829      	ldr	r1, [r5, #0]
 8006478:	291d      	cmp	r1, #29
 800647a:	d82b      	bhi.n	80064d4 <__sflush_r+0xb0>
 800647c:	4a28      	ldr	r2, [pc, #160]	@ (8006520 <__sflush_r+0xfc>)
 800647e:	410a      	asrs	r2, r1
 8006480:	07d6      	lsls	r6, r2, #31
 8006482:	d427      	bmi.n	80064d4 <__sflush_r+0xb0>
 8006484:	2200      	movs	r2, #0
 8006486:	6062      	str	r2, [r4, #4]
 8006488:	6922      	ldr	r2, [r4, #16]
 800648a:	04d9      	lsls	r1, r3, #19
 800648c:	6022      	str	r2, [r4, #0]
 800648e:	d504      	bpl.n	800649a <__sflush_r+0x76>
 8006490:	1c42      	adds	r2, r0, #1
 8006492:	d101      	bne.n	8006498 <__sflush_r+0x74>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b903      	cbnz	r3, 800649a <__sflush_r+0x76>
 8006498:	6560      	str	r0, [r4, #84]	@ 0x54
 800649a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800649c:	602f      	str	r7, [r5, #0]
 800649e:	b1b9      	cbz	r1, 80064d0 <__sflush_r+0xac>
 80064a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064a4:	4299      	cmp	r1, r3
 80064a6:	d002      	beq.n	80064ae <__sflush_r+0x8a>
 80064a8:	4628      	mov	r0, r5
 80064aa:	f7fe fa41 	bl	8004930 <_free_r>
 80064ae:	2300      	movs	r3, #0
 80064b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064b2:	e00d      	b.n	80064d0 <__sflush_r+0xac>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b0      	blx	r6
 80064ba:	4602      	mov	r2, r0
 80064bc:	1c50      	adds	r0, r2, #1
 80064be:	d1c9      	bne.n	8006454 <__sflush_r+0x30>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0c6      	beq.n	8006454 <__sflush_r+0x30>
 80064c6:	2b1d      	cmp	r3, #29
 80064c8:	d001      	beq.n	80064ce <__sflush_r+0xaa>
 80064ca:	2b16      	cmp	r3, #22
 80064cc:	d11d      	bne.n	800650a <__sflush_r+0xe6>
 80064ce:	602f      	str	r7, [r5, #0]
 80064d0:	2000      	movs	r0, #0
 80064d2:	e021      	b.n	8006518 <__sflush_r+0xf4>
 80064d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d8:	b21b      	sxth	r3, r3
 80064da:	e01a      	b.n	8006512 <__sflush_r+0xee>
 80064dc:	690f      	ldr	r7, [r1, #16]
 80064de:	2f00      	cmp	r7, #0
 80064e0:	d0f6      	beq.n	80064d0 <__sflush_r+0xac>
 80064e2:	0793      	lsls	r3, r2, #30
 80064e4:	bf18      	it	ne
 80064e6:	2300      	movne	r3, #0
 80064e8:	680e      	ldr	r6, [r1, #0]
 80064ea:	bf08      	it	eq
 80064ec:	694b      	ldreq	r3, [r1, #20]
 80064ee:	1bf6      	subs	r6, r6, r7
 80064f0:	600f      	str	r7, [r1, #0]
 80064f2:	608b      	str	r3, [r1, #8]
 80064f4:	2e00      	cmp	r6, #0
 80064f6:	ddeb      	ble.n	80064d0 <__sflush_r+0xac>
 80064f8:	4633      	mov	r3, r6
 80064fa:	463a      	mov	r2, r7
 80064fc:	4628      	mov	r0, r5
 80064fe:	6a21      	ldr	r1, [r4, #32]
 8006500:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006504:	47e0      	blx	ip
 8006506:	2800      	cmp	r0, #0
 8006508:	dc07      	bgt.n	800651a <__sflush_r+0xf6>
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006512:	f04f 30ff 	mov.w	r0, #4294967295
 8006516:	81a3      	strh	r3, [r4, #12]
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651a:	4407      	add	r7, r0
 800651c:	1a36      	subs	r6, r6, r0
 800651e:	e7e9      	b.n	80064f4 <__sflush_r+0xd0>
 8006520:	dfbffffe 	.word	0xdfbffffe

08006524 <_fflush_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	690b      	ldr	r3, [r1, #16]
 8006528:	4605      	mov	r5, r0
 800652a:	460c      	mov	r4, r1
 800652c:	b913      	cbnz	r3, 8006534 <_fflush_r+0x10>
 800652e:	2500      	movs	r5, #0
 8006530:	4628      	mov	r0, r5
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	b118      	cbz	r0, 800653e <_fflush_r+0x1a>
 8006536:	6a03      	ldr	r3, [r0, #32]
 8006538:	b90b      	cbnz	r3, 800653e <_fflush_r+0x1a>
 800653a:	f7fd fa47 	bl	80039cc <__sinit>
 800653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f3      	beq.n	800652e <_fflush_r+0xa>
 8006546:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006548:	07d0      	lsls	r0, r2, #31
 800654a:	d404      	bmi.n	8006556 <_fflush_r+0x32>
 800654c:	0599      	lsls	r1, r3, #22
 800654e:	d402      	bmi.n	8006556 <_fflush_r+0x32>
 8006550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006552:	f7fd fb86 	bl	8003c62 <__retarget_lock_acquire_recursive>
 8006556:	4628      	mov	r0, r5
 8006558:	4621      	mov	r1, r4
 800655a:	f7ff ff63 	bl	8006424 <__sflush_r>
 800655e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006560:	4605      	mov	r5, r0
 8006562:	07da      	lsls	r2, r3, #31
 8006564:	d4e4      	bmi.n	8006530 <_fflush_r+0xc>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	059b      	lsls	r3, r3, #22
 800656a:	d4e1      	bmi.n	8006530 <_fflush_r+0xc>
 800656c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800656e:	f7fd fb79 	bl	8003c64 <__retarget_lock_release_recursive>
 8006572:	e7dd      	b.n	8006530 <_fflush_r+0xc>

08006574 <memmove>:
 8006574:	4288      	cmp	r0, r1
 8006576:	b510      	push	{r4, lr}
 8006578:	eb01 0402 	add.w	r4, r1, r2
 800657c:	d902      	bls.n	8006584 <memmove+0x10>
 800657e:	4284      	cmp	r4, r0
 8006580:	4623      	mov	r3, r4
 8006582:	d807      	bhi.n	8006594 <memmove+0x20>
 8006584:	1e43      	subs	r3, r0, #1
 8006586:	42a1      	cmp	r1, r4
 8006588:	d008      	beq.n	800659c <memmove+0x28>
 800658a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006592:	e7f8      	b.n	8006586 <memmove+0x12>
 8006594:	4601      	mov	r1, r0
 8006596:	4402      	add	r2, r0
 8006598:	428a      	cmp	r2, r1
 800659a:	d100      	bne.n	800659e <memmove+0x2a>
 800659c:	bd10      	pop	{r4, pc}
 800659e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065a6:	e7f7      	b.n	8006598 <memmove+0x24>

080065a8 <strncmp>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	b16a      	cbz	r2, 80065c8 <strncmp+0x20>
 80065ac:	3901      	subs	r1, #1
 80065ae:	1884      	adds	r4, r0, r2
 80065b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d103      	bne.n	80065c4 <strncmp+0x1c>
 80065bc:	42a0      	cmp	r0, r4
 80065be:	d001      	beq.n	80065c4 <strncmp+0x1c>
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d1f5      	bne.n	80065b0 <strncmp+0x8>
 80065c4:	1ad0      	subs	r0, r2, r3
 80065c6:	bd10      	pop	{r4, pc}
 80065c8:	4610      	mov	r0, r2
 80065ca:	e7fc      	b.n	80065c6 <strncmp+0x1e>

080065cc <_sbrk_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	2300      	movs	r3, #0
 80065d0:	4d05      	ldr	r5, [pc, #20]	@ (80065e8 <_sbrk_r+0x1c>)
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa ff3c 	bl	8001454 <_sbrk>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_sbrk_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_sbrk_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	2000039c 	.word	0x2000039c

080065ec <memcpy>:
 80065ec:	440a      	add	r2, r1
 80065ee:	4291      	cmp	r1, r2
 80065f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065f4:	d100      	bne.n	80065f8 <memcpy+0xc>
 80065f6:	4770      	bx	lr
 80065f8:	b510      	push	{r4, lr}
 80065fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065fe:	4291      	cmp	r1, r2
 8006600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006604:	d1f9      	bne.n	80065fa <memcpy+0xe>
 8006606:	bd10      	pop	{r4, pc}

08006608 <nan>:
 8006608:	2000      	movs	r0, #0
 800660a:	4901      	ldr	r1, [pc, #4]	@ (8006610 <nan+0x8>)
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	7ff80000 	.word	0x7ff80000

08006614 <__assert_func>:
 8006614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006616:	4614      	mov	r4, r2
 8006618:	461a      	mov	r2, r3
 800661a:	4b09      	ldr	r3, [pc, #36]	@ (8006640 <__assert_func+0x2c>)
 800661c:	4605      	mov	r5, r0
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68d8      	ldr	r0, [r3, #12]
 8006622:	b954      	cbnz	r4, 800663a <__assert_func+0x26>
 8006624:	4b07      	ldr	r3, [pc, #28]	@ (8006644 <__assert_func+0x30>)
 8006626:	461c      	mov	r4, r3
 8006628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800662c:	9100      	str	r1, [sp, #0]
 800662e:	462b      	mov	r3, r5
 8006630:	4905      	ldr	r1, [pc, #20]	@ (8006648 <__assert_func+0x34>)
 8006632:	f000 fba7 	bl	8006d84 <fiprintf>
 8006636:	f000 fbb7 	bl	8006da8 <abort>
 800663a:	4b04      	ldr	r3, [pc, #16]	@ (800664c <__assert_func+0x38>)
 800663c:	e7f4      	b.n	8006628 <__assert_func+0x14>
 800663e:	bf00      	nop
 8006640:	20000028 	.word	0x20000028
 8006644:	08007745 	.word	0x08007745
 8006648:	08007717 	.word	0x08007717
 800664c:	0800770a 	.word	0x0800770a

08006650 <_calloc_r>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	fba1 5402 	umull	r5, r4, r1, r2
 8006656:	b93c      	cbnz	r4, 8006668 <_calloc_r+0x18>
 8006658:	4629      	mov	r1, r5
 800665a:	f7fe f9db 	bl	8004a14 <_malloc_r>
 800665e:	4606      	mov	r6, r0
 8006660:	b928      	cbnz	r0, 800666e <_calloc_r+0x1e>
 8006662:	2600      	movs	r6, #0
 8006664:	4630      	mov	r0, r6
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	220c      	movs	r2, #12
 800666a:	6002      	str	r2, [r0, #0]
 800666c:	e7f9      	b.n	8006662 <_calloc_r+0x12>
 800666e:	462a      	mov	r2, r5
 8006670:	4621      	mov	r1, r4
 8006672:	f7fd fa78 	bl	8003b66 <memset>
 8006676:	e7f5      	b.n	8006664 <_calloc_r+0x14>

08006678 <rshift>:
 8006678:	6903      	ldr	r3, [r0, #16]
 800667a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800667e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006682:	f100 0414 	add.w	r4, r0, #20
 8006686:	ea4f 1261 	mov.w	r2, r1, asr #5
 800668a:	dd46      	ble.n	800671a <rshift+0xa2>
 800668c:	f011 011f 	ands.w	r1, r1, #31
 8006690:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006694:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006698:	d10c      	bne.n	80066b4 <rshift+0x3c>
 800669a:	4629      	mov	r1, r5
 800669c:	f100 0710 	add.w	r7, r0, #16
 80066a0:	42b1      	cmp	r1, r6
 80066a2:	d335      	bcc.n	8006710 <rshift+0x98>
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	1eea      	subs	r2, r5, #3
 80066aa:	4296      	cmp	r6, r2
 80066ac:	bf38      	it	cc
 80066ae:	2300      	movcc	r3, #0
 80066b0:	4423      	add	r3, r4
 80066b2:	e015      	b.n	80066e0 <rshift+0x68>
 80066b4:	46a1      	mov	r9, r4
 80066b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80066ba:	f1c1 0820 	rsb	r8, r1, #32
 80066be:	40cf      	lsrs	r7, r1
 80066c0:	f105 0e04 	add.w	lr, r5, #4
 80066c4:	4576      	cmp	r6, lr
 80066c6:	46f4      	mov	ip, lr
 80066c8:	d816      	bhi.n	80066f8 <rshift+0x80>
 80066ca:	1a9a      	subs	r2, r3, r2
 80066cc:	0092      	lsls	r2, r2, #2
 80066ce:	3a04      	subs	r2, #4
 80066d0:	3501      	adds	r5, #1
 80066d2:	42ae      	cmp	r6, r5
 80066d4:	bf38      	it	cc
 80066d6:	2200      	movcc	r2, #0
 80066d8:	18a3      	adds	r3, r4, r2
 80066da:	50a7      	str	r7, [r4, r2]
 80066dc:	b107      	cbz	r7, 80066e0 <rshift+0x68>
 80066de:	3304      	adds	r3, #4
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	eba3 0204 	sub.w	r2, r3, r4
 80066e6:	bf08      	it	eq
 80066e8:	2300      	moveq	r3, #0
 80066ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80066ee:	6102      	str	r2, [r0, #16]
 80066f0:	bf08      	it	eq
 80066f2:	6143      	streq	r3, [r0, #20]
 80066f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066f8:	f8dc c000 	ldr.w	ip, [ip]
 80066fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8006700:	ea4c 0707 	orr.w	r7, ip, r7
 8006704:	f849 7b04 	str.w	r7, [r9], #4
 8006708:	f85e 7b04 	ldr.w	r7, [lr], #4
 800670c:	40cf      	lsrs	r7, r1
 800670e:	e7d9      	b.n	80066c4 <rshift+0x4c>
 8006710:	f851 cb04 	ldr.w	ip, [r1], #4
 8006714:	f847 cf04 	str.w	ip, [r7, #4]!
 8006718:	e7c2      	b.n	80066a0 <rshift+0x28>
 800671a:	4623      	mov	r3, r4
 800671c:	e7e0      	b.n	80066e0 <rshift+0x68>

0800671e <__hexdig_fun>:
 800671e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006722:	2b09      	cmp	r3, #9
 8006724:	d802      	bhi.n	800672c <__hexdig_fun+0xe>
 8006726:	3820      	subs	r0, #32
 8006728:	b2c0      	uxtb	r0, r0
 800672a:	4770      	bx	lr
 800672c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006730:	2b05      	cmp	r3, #5
 8006732:	d801      	bhi.n	8006738 <__hexdig_fun+0x1a>
 8006734:	3847      	subs	r0, #71	@ 0x47
 8006736:	e7f7      	b.n	8006728 <__hexdig_fun+0xa>
 8006738:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800673c:	2b05      	cmp	r3, #5
 800673e:	d801      	bhi.n	8006744 <__hexdig_fun+0x26>
 8006740:	3827      	subs	r0, #39	@ 0x27
 8006742:	e7f1      	b.n	8006728 <__hexdig_fun+0xa>
 8006744:	2000      	movs	r0, #0
 8006746:	4770      	bx	lr

08006748 <__gethex>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	468a      	mov	sl, r1
 800674e:	4690      	mov	r8, r2
 8006750:	b085      	sub	sp, #20
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	680b      	ldr	r3, [r1, #0]
 8006756:	9001      	str	r0, [sp, #4]
 8006758:	1c9c      	adds	r4, r3, #2
 800675a:	46a1      	mov	r9, r4
 800675c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006760:	2830      	cmp	r0, #48	@ 0x30
 8006762:	d0fa      	beq.n	800675a <__gethex+0x12>
 8006764:	eba9 0303 	sub.w	r3, r9, r3
 8006768:	f1a3 0b02 	sub.w	fp, r3, #2
 800676c:	f7ff ffd7 	bl	800671e <__hexdig_fun>
 8006770:	4605      	mov	r5, r0
 8006772:	2800      	cmp	r0, #0
 8006774:	d168      	bne.n	8006848 <__gethex+0x100>
 8006776:	2201      	movs	r2, #1
 8006778:	4648      	mov	r0, r9
 800677a:	499f      	ldr	r1, [pc, #636]	@ (80069f8 <__gethex+0x2b0>)
 800677c:	f7ff ff14 	bl	80065a8 <strncmp>
 8006780:	4607      	mov	r7, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d167      	bne.n	8006856 <__gethex+0x10e>
 8006786:	f899 0001 	ldrb.w	r0, [r9, #1]
 800678a:	4626      	mov	r6, r4
 800678c:	f7ff ffc7 	bl	800671e <__hexdig_fun>
 8006790:	2800      	cmp	r0, #0
 8006792:	d062      	beq.n	800685a <__gethex+0x112>
 8006794:	4623      	mov	r3, r4
 8006796:	7818      	ldrb	r0, [r3, #0]
 8006798:	4699      	mov	r9, r3
 800679a:	2830      	cmp	r0, #48	@ 0x30
 800679c:	f103 0301 	add.w	r3, r3, #1
 80067a0:	d0f9      	beq.n	8006796 <__gethex+0x4e>
 80067a2:	f7ff ffbc 	bl	800671e <__hexdig_fun>
 80067a6:	fab0 f580 	clz	r5, r0
 80067aa:	f04f 0b01 	mov.w	fp, #1
 80067ae:	096d      	lsrs	r5, r5, #5
 80067b0:	464a      	mov	r2, r9
 80067b2:	4616      	mov	r6, r2
 80067b4:	7830      	ldrb	r0, [r6, #0]
 80067b6:	3201      	adds	r2, #1
 80067b8:	f7ff ffb1 	bl	800671e <__hexdig_fun>
 80067bc:	2800      	cmp	r0, #0
 80067be:	d1f8      	bne.n	80067b2 <__gethex+0x6a>
 80067c0:	2201      	movs	r2, #1
 80067c2:	4630      	mov	r0, r6
 80067c4:	498c      	ldr	r1, [pc, #560]	@ (80069f8 <__gethex+0x2b0>)
 80067c6:	f7ff feef 	bl	80065a8 <strncmp>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d13f      	bne.n	800684e <__gethex+0x106>
 80067ce:	b944      	cbnz	r4, 80067e2 <__gethex+0x9a>
 80067d0:	1c74      	adds	r4, r6, #1
 80067d2:	4622      	mov	r2, r4
 80067d4:	4616      	mov	r6, r2
 80067d6:	7830      	ldrb	r0, [r6, #0]
 80067d8:	3201      	adds	r2, #1
 80067da:	f7ff ffa0 	bl	800671e <__hexdig_fun>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d1f8      	bne.n	80067d4 <__gethex+0x8c>
 80067e2:	1ba4      	subs	r4, r4, r6
 80067e4:	00a7      	lsls	r7, r4, #2
 80067e6:	7833      	ldrb	r3, [r6, #0]
 80067e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80067ec:	2b50      	cmp	r3, #80	@ 0x50
 80067ee:	d13e      	bne.n	800686e <__gethex+0x126>
 80067f0:	7873      	ldrb	r3, [r6, #1]
 80067f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80067f4:	d033      	beq.n	800685e <__gethex+0x116>
 80067f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80067f8:	d034      	beq.n	8006864 <__gethex+0x11c>
 80067fa:	2400      	movs	r4, #0
 80067fc:	1c71      	adds	r1, r6, #1
 80067fe:	7808      	ldrb	r0, [r1, #0]
 8006800:	f7ff ff8d 	bl	800671e <__hexdig_fun>
 8006804:	1e43      	subs	r3, r0, #1
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b18      	cmp	r3, #24
 800680a:	d830      	bhi.n	800686e <__gethex+0x126>
 800680c:	f1a0 0210 	sub.w	r2, r0, #16
 8006810:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006814:	f7ff ff83 	bl	800671e <__hexdig_fun>
 8006818:	f100 3cff 	add.w	ip, r0, #4294967295
 800681c:	fa5f fc8c 	uxtb.w	ip, ip
 8006820:	f1bc 0f18 	cmp.w	ip, #24
 8006824:	f04f 030a 	mov.w	r3, #10
 8006828:	d91e      	bls.n	8006868 <__gethex+0x120>
 800682a:	b104      	cbz	r4, 800682e <__gethex+0xe6>
 800682c:	4252      	negs	r2, r2
 800682e:	4417      	add	r7, r2
 8006830:	f8ca 1000 	str.w	r1, [sl]
 8006834:	b1ed      	cbz	r5, 8006872 <__gethex+0x12a>
 8006836:	f1bb 0f00 	cmp.w	fp, #0
 800683a:	bf0c      	ite	eq
 800683c:	2506      	moveq	r5, #6
 800683e:	2500      	movne	r5, #0
 8006840:	4628      	mov	r0, r5
 8006842:	b005      	add	sp, #20
 8006844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006848:	2500      	movs	r5, #0
 800684a:	462c      	mov	r4, r5
 800684c:	e7b0      	b.n	80067b0 <__gethex+0x68>
 800684e:	2c00      	cmp	r4, #0
 8006850:	d1c7      	bne.n	80067e2 <__gethex+0x9a>
 8006852:	4627      	mov	r7, r4
 8006854:	e7c7      	b.n	80067e6 <__gethex+0x9e>
 8006856:	464e      	mov	r6, r9
 8006858:	462f      	mov	r7, r5
 800685a:	2501      	movs	r5, #1
 800685c:	e7c3      	b.n	80067e6 <__gethex+0x9e>
 800685e:	2400      	movs	r4, #0
 8006860:	1cb1      	adds	r1, r6, #2
 8006862:	e7cc      	b.n	80067fe <__gethex+0xb6>
 8006864:	2401      	movs	r4, #1
 8006866:	e7fb      	b.n	8006860 <__gethex+0x118>
 8006868:	fb03 0002 	mla	r0, r3, r2, r0
 800686c:	e7ce      	b.n	800680c <__gethex+0xc4>
 800686e:	4631      	mov	r1, r6
 8006870:	e7de      	b.n	8006830 <__gethex+0xe8>
 8006872:	4629      	mov	r1, r5
 8006874:	eba6 0309 	sub.w	r3, r6, r9
 8006878:	3b01      	subs	r3, #1
 800687a:	2b07      	cmp	r3, #7
 800687c:	dc0a      	bgt.n	8006894 <__gethex+0x14c>
 800687e:	9801      	ldr	r0, [sp, #4]
 8006880:	f7fe f954 	bl	8004b2c <_Balloc>
 8006884:	4604      	mov	r4, r0
 8006886:	b940      	cbnz	r0, 800689a <__gethex+0x152>
 8006888:	4602      	mov	r2, r0
 800688a:	21e4      	movs	r1, #228	@ 0xe4
 800688c:	4b5b      	ldr	r3, [pc, #364]	@ (80069fc <__gethex+0x2b4>)
 800688e:	485c      	ldr	r0, [pc, #368]	@ (8006a00 <__gethex+0x2b8>)
 8006890:	f7ff fec0 	bl	8006614 <__assert_func>
 8006894:	3101      	adds	r1, #1
 8006896:	105b      	asrs	r3, r3, #1
 8006898:	e7ef      	b.n	800687a <__gethex+0x132>
 800689a:	2300      	movs	r3, #0
 800689c:	f100 0a14 	add.w	sl, r0, #20
 80068a0:	4655      	mov	r5, sl
 80068a2:	469b      	mov	fp, r3
 80068a4:	45b1      	cmp	r9, r6
 80068a6:	d337      	bcc.n	8006918 <__gethex+0x1d0>
 80068a8:	f845 bb04 	str.w	fp, [r5], #4
 80068ac:	eba5 050a 	sub.w	r5, r5, sl
 80068b0:	10ad      	asrs	r5, r5, #2
 80068b2:	6125      	str	r5, [r4, #16]
 80068b4:	4658      	mov	r0, fp
 80068b6:	f7fe fa2b 	bl	8004d10 <__hi0bits>
 80068ba:	016d      	lsls	r5, r5, #5
 80068bc:	f8d8 6000 	ldr.w	r6, [r8]
 80068c0:	1a2d      	subs	r5, r5, r0
 80068c2:	42b5      	cmp	r5, r6
 80068c4:	dd54      	ble.n	8006970 <__gethex+0x228>
 80068c6:	1bad      	subs	r5, r5, r6
 80068c8:	4629      	mov	r1, r5
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7fe fdb3 	bl	8005436 <__any_on>
 80068d0:	4681      	mov	r9, r0
 80068d2:	b178      	cbz	r0, 80068f4 <__gethex+0x1ac>
 80068d4:	f04f 0901 	mov.w	r9, #1
 80068d8:	1e6b      	subs	r3, r5, #1
 80068da:	1159      	asrs	r1, r3, #5
 80068dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80068e0:	f003 021f 	and.w	r2, r3, #31
 80068e4:	fa09 f202 	lsl.w	r2, r9, r2
 80068e8:	420a      	tst	r2, r1
 80068ea:	d003      	beq.n	80068f4 <__gethex+0x1ac>
 80068ec:	454b      	cmp	r3, r9
 80068ee:	dc36      	bgt.n	800695e <__gethex+0x216>
 80068f0:	f04f 0902 	mov.w	r9, #2
 80068f4:	4629      	mov	r1, r5
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff febe 	bl	8006678 <rshift>
 80068fc:	442f      	add	r7, r5
 80068fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006902:	42bb      	cmp	r3, r7
 8006904:	da42      	bge.n	800698c <__gethex+0x244>
 8006906:	4621      	mov	r1, r4
 8006908:	9801      	ldr	r0, [sp, #4]
 800690a:	f7fe f94f 	bl	8004bac <_Bfree>
 800690e:	2300      	movs	r3, #0
 8006910:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006912:	25a3      	movs	r5, #163	@ 0xa3
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e793      	b.n	8006840 <__gethex+0xf8>
 8006918:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800691c:	2a2e      	cmp	r2, #46	@ 0x2e
 800691e:	d012      	beq.n	8006946 <__gethex+0x1fe>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d104      	bne.n	800692e <__gethex+0x1e6>
 8006924:	f845 bb04 	str.w	fp, [r5], #4
 8006928:	f04f 0b00 	mov.w	fp, #0
 800692c:	465b      	mov	r3, fp
 800692e:	7830      	ldrb	r0, [r6, #0]
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	f7ff fef4 	bl	800671e <__hexdig_fun>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	f000 000f 	and.w	r0, r0, #15
 800693c:	4098      	lsls	r0, r3
 800693e:	ea4b 0b00 	orr.w	fp, fp, r0
 8006942:	3304      	adds	r3, #4
 8006944:	e7ae      	b.n	80068a4 <__gethex+0x15c>
 8006946:	45b1      	cmp	r9, r6
 8006948:	d8ea      	bhi.n	8006920 <__gethex+0x1d8>
 800694a:	2201      	movs	r2, #1
 800694c:	4630      	mov	r0, r6
 800694e:	492a      	ldr	r1, [pc, #168]	@ (80069f8 <__gethex+0x2b0>)
 8006950:	9303      	str	r3, [sp, #12]
 8006952:	f7ff fe29 	bl	80065a8 <strncmp>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	2800      	cmp	r0, #0
 800695a:	d1e1      	bne.n	8006920 <__gethex+0x1d8>
 800695c:	e7a2      	b.n	80068a4 <__gethex+0x15c>
 800695e:	4620      	mov	r0, r4
 8006960:	1ea9      	subs	r1, r5, #2
 8006962:	f7fe fd68 	bl	8005436 <__any_on>
 8006966:	2800      	cmp	r0, #0
 8006968:	d0c2      	beq.n	80068f0 <__gethex+0x1a8>
 800696a:	f04f 0903 	mov.w	r9, #3
 800696e:	e7c1      	b.n	80068f4 <__gethex+0x1ac>
 8006970:	da09      	bge.n	8006986 <__gethex+0x23e>
 8006972:	1b75      	subs	r5, r6, r5
 8006974:	4621      	mov	r1, r4
 8006976:	462a      	mov	r2, r5
 8006978:	9801      	ldr	r0, [sp, #4]
 800697a:	f7fe fb2d 	bl	8004fd8 <__lshift>
 800697e:	4604      	mov	r4, r0
 8006980:	1b7f      	subs	r7, r7, r5
 8006982:	f100 0a14 	add.w	sl, r0, #20
 8006986:	f04f 0900 	mov.w	r9, #0
 800698a:	e7b8      	b.n	80068fe <__gethex+0x1b6>
 800698c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006990:	42bd      	cmp	r5, r7
 8006992:	dd6f      	ble.n	8006a74 <__gethex+0x32c>
 8006994:	1bed      	subs	r5, r5, r7
 8006996:	42ae      	cmp	r6, r5
 8006998:	dc34      	bgt.n	8006a04 <__gethex+0x2bc>
 800699a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d022      	beq.n	80069e8 <__gethex+0x2a0>
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d024      	beq.n	80069f0 <__gethex+0x2a8>
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d115      	bne.n	80069d6 <__gethex+0x28e>
 80069aa:	42ae      	cmp	r6, r5
 80069ac:	d113      	bne.n	80069d6 <__gethex+0x28e>
 80069ae:	2e01      	cmp	r6, #1
 80069b0:	d10b      	bne.n	80069ca <__gethex+0x282>
 80069b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069b6:	9a02      	ldr	r2, [sp, #8]
 80069b8:	2562      	movs	r5, #98	@ 0x62
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	2301      	movs	r3, #1
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	f8ca 3000 	str.w	r3, [sl]
 80069c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069c6:	601c      	str	r4, [r3, #0]
 80069c8:	e73a      	b.n	8006840 <__gethex+0xf8>
 80069ca:	4620      	mov	r0, r4
 80069cc:	1e71      	subs	r1, r6, #1
 80069ce:	f7fe fd32 	bl	8005436 <__any_on>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d1ed      	bne.n	80069b2 <__gethex+0x26a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	9801      	ldr	r0, [sp, #4]
 80069da:	f7fe f8e7 	bl	8004bac <_Bfree>
 80069de:	2300      	movs	r3, #0
 80069e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069e2:	2550      	movs	r5, #80	@ 0x50
 80069e4:	6013      	str	r3, [r2, #0]
 80069e6:	e72b      	b.n	8006840 <__gethex+0xf8>
 80069e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f3      	bne.n	80069d6 <__gethex+0x28e>
 80069ee:	e7e0      	b.n	80069b2 <__gethex+0x26a>
 80069f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1dd      	bne.n	80069b2 <__gethex+0x26a>
 80069f6:	e7ee      	b.n	80069d6 <__gethex+0x28e>
 80069f8:	08007598 	.word	0x08007598
 80069fc:	0800742f 	.word	0x0800742f
 8006a00:	08007746 	.word	0x08007746
 8006a04:	1e6f      	subs	r7, r5, #1
 8006a06:	f1b9 0f00 	cmp.w	r9, #0
 8006a0a:	d130      	bne.n	8006a6e <__gethex+0x326>
 8006a0c:	b127      	cbz	r7, 8006a18 <__gethex+0x2d0>
 8006a0e:	4639      	mov	r1, r7
 8006a10:	4620      	mov	r0, r4
 8006a12:	f7fe fd10 	bl	8005436 <__any_on>
 8006a16:	4681      	mov	r9, r0
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	1b76      	subs	r6, r6, r5
 8006a1e:	2502      	movs	r5, #2
 8006a20:	117a      	asrs	r2, r7, #5
 8006a22:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006a26:	f007 071f 	and.w	r7, r7, #31
 8006a2a:	40bb      	lsls	r3, r7
 8006a2c:	4213      	tst	r3, r2
 8006a2e:	4620      	mov	r0, r4
 8006a30:	bf18      	it	ne
 8006a32:	f049 0902 	orrne.w	r9, r9, #2
 8006a36:	f7ff fe1f 	bl	8006678 <rshift>
 8006a3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	d047      	beq.n	8006ad4 <__gethex+0x38c>
 8006a44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d015      	beq.n	8006a78 <__gethex+0x330>
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d017      	beq.n	8006a80 <__gethex+0x338>
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d109      	bne.n	8006a68 <__gethex+0x320>
 8006a54:	f019 0f02 	tst.w	r9, #2
 8006a58:	d006      	beq.n	8006a68 <__gethex+0x320>
 8006a5a:	f8da 3000 	ldr.w	r3, [sl]
 8006a5e:	ea49 0903 	orr.w	r9, r9, r3
 8006a62:	f019 0f01 	tst.w	r9, #1
 8006a66:	d10e      	bne.n	8006a86 <__gethex+0x33e>
 8006a68:	f045 0510 	orr.w	r5, r5, #16
 8006a6c:	e032      	b.n	8006ad4 <__gethex+0x38c>
 8006a6e:	f04f 0901 	mov.w	r9, #1
 8006a72:	e7d1      	b.n	8006a18 <__gethex+0x2d0>
 8006a74:	2501      	movs	r5, #1
 8006a76:	e7e2      	b.n	8006a3e <__gethex+0x2f6>
 8006a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a7a:	f1c3 0301 	rsb	r3, r3, #1
 8006a7e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <__gethex+0x320>
 8006a86:	f04f 0c00 	mov.w	ip, #0
 8006a8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006a8e:	f104 0314 	add.w	r3, r4, #20
 8006a92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006a96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aa0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006aa4:	d01b      	beq.n	8006ade <__gethex+0x396>
 8006aa6:	3201      	adds	r2, #1
 8006aa8:	6002      	str	r2, [r0, #0]
 8006aaa:	2d02      	cmp	r5, #2
 8006aac:	f104 0314 	add.w	r3, r4, #20
 8006ab0:	d13c      	bne.n	8006b2c <__gethex+0x3e4>
 8006ab2:	f8d8 2000 	ldr.w	r2, [r8]
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	42b2      	cmp	r2, r6
 8006aba:	d109      	bne.n	8006ad0 <__gethex+0x388>
 8006abc:	2201      	movs	r2, #1
 8006abe:	1171      	asrs	r1, r6, #5
 8006ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ac4:	f006 061f 	and.w	r6, r6, #31
 8006ac8:	fa02 f606 	lsl.w	r6, r2, r6
 8006acc:	421e      	tst	r6, r3
 8006ace:	d13a      	bne.n	8006b46 <__gethex+0x3fe>
 8006ad0:	f045 0520 	orr.w	r5, r5, #32
 8006ad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ad6:	601c      	str	r4, [r3, #0]
 8006ad8:	9b02      	ldr	r3, [sp, #8]
 8006ada:	601f      	str	r7, [r3, #0]
 8006adc:	e6b0      	b.n	8006840 <__gethex+0xf8>
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	f843 cc04 	str.w	ip, [r3, #-4]
 8006ae4:	d8d9      	bhi.n	8006a9a <__gethex+0x352>
 8006ae6:	68a3      	ldr	r3, [r4, #8]
 8006ae8:	459b      	cmp	fp, r3
 8006aea:	db17      	blt.n	8006b1c <__gethex+0x3d4>
 8006aec:	6861      	ldr	r1, [r4, #4]
 8006aee:	9801      	ldr	r0, [sp, #4]
 8006af0:	3101      	adds	r1, #1
 8006af2:	f7fe f81b 	bl	8004b2c <_Balloc>
 8006af6:	4681      	mov	r9, r0
 8006af8:	b918      	cbnz	r0, 8006b02 <__gethex+0x3ba>
 8006afa:	4602      	mov	r2, r0
 8006afc:	2184      	movs	r1, #132	@ 0x84
 8006afe:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <__gethex+0x41c>)
 8006b00:	e6c5      	b.n	800688e <__gethex+0x146>
 8006b02:	6922      	ldr	r2, [r4, #16]
 8006b04:	f104 010c 	add.w	r1, r4, #12
 8006b08:	3202      	adds	r2, #2
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	300c      	adds	r0, #12
 8006b0e:	f7ff fd6d 	bl	80065ec <memcpy>
 8006b12:	4621      	mov	r1, r4
 8006b14:	9801      	ldr	r0, [sp, #4]
 8006b16:	f7fe f849 	bl	8004bac <_Bfree>
 8006b1a:	464c      	mov	r4, r9
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	6122      	str	r2, [r4, #16]
 8006b22:	2201      	movs	r2, #1
 8006b24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b28:	615a      	str	r2, [r3, #20]
 8006b2a:	e7be      	b.n	8006aaa <__gethex+0x362>
 8006b2c:	6922      	ldr	r2, [r4, #16]
 8006b2e:	455a      	cmp	r2, fp
 8006b30:	dd0b      	ble.n	8006b4a <__gethex+0x402>
 8006b32:	2101      	movs	r1, #1
 8006b34:	4620      	mov	r0, r4
 8006b36:	f7ff fd9f 	bl	8006678 <rshift>
 8006b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b3e:	3701      	adds	r7, #1
 8006b40:	42bb      	cmp	r3, r7
 8006b42:	f6ff aee0 	blt.w	8006906 <__gethex+0x1be>
 8006b46:	2501      	movs	r5, #1
 8006b48:	e7c2      	b.n	8006ad0 <__gethex+0x388>
 8006b4a:	f016 061f 	ands.w	r6, r6, #31
 8006b4e:	d0fa      	beq.n	8006b46 <__gethex+0x3fe>
 8006b50:	4453      	add	r3, sl
 8006b52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006b56:	f7fe f8db 	bl	8004d10 <__hi0bits>
 8006b5a:	f1c6 0620 	rsb	r6, r6, #32
 8006b5e:	42b0      	cmp	r0, r6
 8006b60:	dbe7      	blt.n	8006b32 <__gethex+0x3ea>
 8006b62:	e7f0      	b.n	8006b46 <__gethex+0x3fe>
 8006b64:	0800742f 	.word	0x0800742f

08006b68 <L_shift>:
 8006b68:	f1c2 0208 	rsb	r2, r2, #8
 8006b6c:	0092      	lsls	r2, r2, #2
 8006b6e:	b570      	push	{r4, r5, r6, lr}
 8006b70:	f1c2 0620 	rsb	r6, r2, #32
 8006b74:	6843      	ldr	r3, [r0, #4]
 8006b76:	6804      	ldr	r4, [r0, #0]
 8006b78:	fa03 f506 	lsl.w	r5, r3, r6
 8006b7c:	432c      	orrs	r4, r5
 8006b7e:	40d3      	lsrs	r3, r2
 8006b80:	6004      	str	r4, [r0, #0]
 8006b82:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b86:	4288      	cmp	r0, r1
 8006b88:	d3f4      	bcc.n	8006b74 <L_shift+0xc>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}

08006b8c <__match>:
 8006b8c:	b530      	push	{r4, r5, lr}
 8006b8e:	6803      	ldr	r3, [r0, #0]
 8006b90:	3301      	adds	r3, #1
 8006b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b96:	b914      	cbnz	r4, 8006b9e <__match+0x12>
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	bd30      	pop	{r4, r5, pc}
 8006b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ba2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006ba6:	2d19      	cmp	r5, #25
 8006ba8:	bf98      	it	ls
 8006baa:	3220      	addls	r2, #32
 8006bac:	42a2      	cmp	r2, r4
 8006bae:	d0f0      	beq.n	8006b92 <__match+0x6>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e7f3      	b.n	8006b9c <__match+0x10>

08006bb4 <__hexnan>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	2500      	movs	r5, #0
 8006bba:	680b      	ldr	r3, [r1, #0]
 8006bbc:	4682      	mov	sl, r0
 8006bbe:	115e      	asrs	r6, r3, #5
 8006bc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006bc4:	f013 031f 	ands.w	r3, r3, #31
 8006bc8:	bf18      	it	ne
 8006bca:	3604      	addne	r6, #4
 8006bcc:	1f37      	subs	r7, r6, #4
 8006bce:	4690      	mov	r8, r2
 8006bd0:	46b9      	mov	r9, r7
 8006bd2:	463c      	mov	r4, r7
 8006bd4:	46ab      	mov	fp, r5
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	6801      	ldr	r1, [r0, #0]
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	f846 5c04 	str.w	r5, [r6, #-4]
 8006be0:	9502      	str	r5, [sp, #8]
 8006be2:	784a      	ldrb	r2, [r1, #1]
 8006be4:	1c4b      	adds	r3, r1, #1
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	b342      	cbz	r2, 8006c3c <__hexnan+0x88>
 8006bea:	4610      	mov	r0, r2
 8006bec:	9105      	str	r1, [sp, #20]
 8006bee:	9204      	str	r2, [sp, #16]
 8006bf0:	f7ff fd95 	bl	800671e <__hexdig_fun>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d151      	bne.n	8006c9c <__hexnan+0xe8>
 8006bf8:	9a04      	ldr	r2, [sp, #16]
 8006bfa:	9905      	ldr	r1, [sp, #20]
 8006bfc:	2a20      	cmp	r2, #32
 8006bfe:	d818      	bhi.n	8006c32 <__hexnan+0x7e>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	459b      	cmp	fp, r3
 8006c04:	dd13      	ble.n	8006c2e <__hexnan+0x7a>
 8006c06:	454c      	cmp	r4, r9
 8006c08:	d206      	bcs.n	8006c18 <__hexnan+0x64>
 8006c0a:	2d07      	cmp	r5, #7
 8006c0c:	dc04      	bgt.n	8006c18 <__hexnan+0x64>
 8006c0e:	462a      	mov	r2, r5
 8006c10:	4649      	mov	r1, r9
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff ffa8 	bl	8006b68 <L_shift>
 8006c18:	4544      	cmp	r4, r8
 8006c1a:	d952      	bls.n	8006cc2 <__hexnan+0x10e>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f1a4 0904 	sub.w	r9, r4, #4
 8006c22:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c26:	461d      	mov	r5, r3
 8006c28:	464c      	mov	r4, r9
 8006c2a:	f8cd b008 	str.w	fp, [sp, #8]
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	e7d7      	b.n	8006be2 <__hexnan+0x2e>
 8006c32:	2a29      	cmp	r2, #41	@ 0x29
 8006c34:	d157      	bne.n	8006ce6 <__hexnan+0x132>
 8006c36:	3102      	adds	r1, #2
 8006c38:	f8ca 1000 	str.w	r1, [sl]
 8006c3c:	f1bb 0f00 	cmp.w	fp, #0
 8006c40:	d051      	beq.n	8006ce6 <__hexnan+0x132>
 8006c42:	454c      	cmp	r4, r9
 8006c44:	d206      	bcs.n	8006c54 <__hexnan+0xa0>
 8006c46:	2d07      	cmp	r5, #7
 8006c48:	dc04      	bgt.n	8006c54 <__hexnan+0xa0>
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7ff ff8a 	bl	8006b68 <L_shift>
 8006c54:	4544      	cmp	r4, r8
 8006c56:	d936      	bls.n	8006cc6 <__hexnan+0x112>
 8006c58:	4623      	mov	r3, r4
 8006c5a:	f1a8 0204 	sub.w	r2, r8, #4
 8006c5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c62:	429f      	cmp	r7, r3
 8006c64:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c68:	d2f9      	bcs.n	8006c5e <__hexnan+0xaa>
 8006c6a:	1b3b      	subs	r3, r7, r4
 8006c6c:	f023 0303 	bic.w	r3, r3, #3
 8006c70:	3304      	adds	r3, #4
 8006c72:	3401      	adds	r4, #1
 8006c74:	3e03      	subs	r6, #3
 8006c76:	42b4      	cmp	r4, r6
 8006c78:	bf88      	it	hi
 8006c7a:	2304      	movhi	r3, #4
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4443      	add	r3, r8
 8006c80:	f843 2b04 	str.w	r2, [r3], #4
 8006c84:	429f      	cmp	r7, r3
 8006c86:	d2fb      	bcs.n	8006c80 <__hexnan+0xcc>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	b91b      	cbnz	r3, 8006c94 <__hexnan+0xe0>
 8006c8c:	4547      	cmp	r7, r8
 8006c8e:	d128      	bne.n	8006ce2 <__hexnan+0x12e>
 8006c90:	2301      	movs	r3, #1
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	2005      	movs	r0, #5
 8006c96:	b007      	add	sp, #28
 8006c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	2d08      	cmp	r5, #8
 8006ca0:	f10b 0b01 	add.w	fp, fp, #1
 8006ca4:	dd06      	ble.n	8006cb4 <__hexnan+0x100>
 8006ca6:	4544      	cmp	r4, r8
 8006ca8:	d9c1      	bls.n	8006c2e <__hexnan+0x7a>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2501      	movs	r5, #1
 8006cae:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cb2:	3c04      	subs	r4, #4
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	f000 000f 	and.w	r0, r0, #15
 8006cba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006cbe:	6020      	str	r0, [r4, #0]
 8006cc0:	e7b5      	b.n	8006c2e <__hexnan+0x7a>
 8006cc2:	2508      	movs	r5, #8
 8006cc4:	e7b3      	b.n	8006c2e <__hexnan+0x7a>
 8006cc6:	9b01      	ldr	r3, [sp, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d0dd      	beq.n	8006c88 <__hexnan+0xd4>
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd0:	f1c3 0320 	rsb	r3, r3, #32
 8006cd4:	40da      	lsrs	r2, r3
 8006cd6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	f846 3c04 	str.w	r3, [r6, #-4]
 8006ce0:	e7d2      	b.n	8006c88 <__hexnan+0xd4>
 8006ce2:	3f04      	subs	r7, #4
 8006ce4:	e7d0      	b.n	8006c88 <__hexnan+0xd4>
 8006ce6:	2004      	movs	r0, #4
 8006ce8:	e7d5      	b.n	8006c96 <__hexnan+0xe2>

08006cea <__ascii_mbtowc>:
 8006cea:	b082      	sub	sp, #8
 8006cec:	b901      	cbnz	r1, 8006cf0 <__ascii_mbtowc+0x6>
 8006cee:	a901      	add	r1, sp, #4
 8006cf0:	b142      	cbz	r2, 8006d04 <__ascii_mbtowc+0x1a>
 8006cf2:	b14b      	cbz	r3, 8006d08 <__ascii_mbtowc+0x1e>
 8006cf4:	7813      	ldrb	r3, [r2, #0]
 8006cf6:	600b      	str	r3, [r1, #0]
 8006cf8:	7812      	ldrb	r2, [r2, #0]
 8006cfa:	1e10      	subs	r0, r2, #0
 8006cfc:	bf18      	it	ne
 8006cfe:	2001      	movne	r0, #1
 8006d00:	b002      	add	sp, #8
 8006d02:	4770      	bx	lr
 8006d04:	4610      	mov	r0, r2
 8006d06:	e7fb      	b.n	8006d00 <__ascii_mbtowc+0x16>
 8006d08:	f06f 0001 	mvn.w	r0, #1
 8006d0c:	e7f8      	b.n	8006d00 <__ascii_mbtowc+0x16>

08006d0e <_realloc_r>:
 8006d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	4680      	mov	r8, r0
 8006d14:	4615      	mov	r5, r2
 8006d16:	460c      	mov	r4, r1
 8006d18:	b921      	cbnz	r1, 8006d24 <_realloc_r+0x16>
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d20:	f7fd be78 	b.w	8004a14 <_malloc_r>
 8006d24:	b92a      	cbnz	r2, 8006d32 <_realloc_r+0x24>
 8006d26:	f7fd fe03 	bl	8004930 <_free_r>
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d32:	f000 f840 	bl	8006db6 <_malloc_usable_size_r>
 8006d36:	4285      	cmp	r5, r0
 8006d38:	4606      	mov	r6, r0
 8006d3a:	d802      	bhi.n	8006d42 <_realloc_r+0x34>
 8006d3c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d40:	d8f4      	bhi.n	8006d2c <_realloc_r+0x1e>
 8006d42:	4629      	mov	r1, r5
 8006d44:	4640      	mov	r0, r8
 8006d46:	f7fd fe65 	bl	8004a14 <_malloc_r>
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d0ec      	beq.n	8006d2a <_realloc_r+0x1c>
 8006d50:	42b5      	cmp	r5, r6
 8006d52:	462a      	mov	r2, r5
 8006d54:	4621      	mov	r1, r4
 8006d56:	bf28      	it	cs
 8006d58:	4632      	movcs	r2, r6
 8006d5a:	f7ff fc47 	bl	80065ec <memcpy>
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4640      	mov	r0, r8
 8006d62:	f7fd fde5 	bl	8004930 <_free_r>
 8006d66:	463c      	mov	r4, r7
 8006d68:	e7e0      	b.n	8006d2c <_realloc_r+0x1e>

08006d6a <__ascii_wctomb>:
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	b141      	cbz	r1, 8006d82 <__ascii_wctomb+0x18>
 8006d70:	2aff      	cmp	r2, #255	@ 0xff
 8006d72:	d904      	bls.n	8006d7e <__ascii_wctomb+0x14>
 8006d74:	228a      	movs	r2, #138	@ 0x8a
 8006d76:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	4770      	bx	lr
 8006d7e:	2001      	movs	r0, #1
 8006d80:	700a      	strb	r2, [r1, #0]
 8006d82:	4770      	bx	lr

08006d84 <fiprintf>:
 8006d84:	b40e      	push	{r1, r2, r3}
 8006d86:	b503      	push	{r0, r1, lr}
 8006d88:	4601      	mov	r1, r0
 8006d8a:	ab03      	add	r3, sp, #12
 8006d8c:	4805      	ldr	r0, [pc, #20]	@ (8006da4 <fiprintf+0x20>)
 8006d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d92:	6800      	ldr	r0, [r0, #0]
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	f000 f83d 	bl	8006e14 <_vfiprintf_r>
 8006d9a:	b002      	add	sp, #8
 8006d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006da0:	b003      	add	sp, #12
 8006da2:	4770      	bx	lr
 8006da4:	20000028 	.word	0x20000028

08006da8 <abort>:
 8006da8:	2006      	movs	r0, #6
 8006daa:	b508      	push	{r3, lr}
 8006dac:	f000 fa06 	bl	80071bc <raise>
 8006db0:	2001      	movs	r0, #1
 8006db2:	f7fa fada 	bl	800136a <_exit>

08006db6 <_malloc_usable_size_r>:
 8006db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dba:	1f18      	subs	r0, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbc      	itt	lt
 8006dc0:	580b      	ldrlt	r3, [r1, r0]
 8006dc2:	18c0      	addlt	r0, r0, r3
 8006dc4:	4770      	bx	lr

08006dc6 <__sfputc_r>:
 8006dc6:	6893      	ldr	r3, [r2, #8]
 8006dc8:	b410      	push	{r4}
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	6093      	str	r3, [r2, #8]
 8006dd0:	da07      	bge.n	8006de2 <__sfputc_r+0x1c>
 8006dd2:	6994      	ldr	r4, [r2, #24]
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	db01      	blt.n	8006ddc <__sfputc_r+0x16>
 8006dd8:	290a      	cmp	r1, #10
 8006dda:	d102      	bne.n	8006de2 <__sfputc_r+0x1c>
 8006ddc:	bc10      	pop	{r4}
 8006dde:	f000 b931 	b.w	8007044 <__swbuf_r>
 8006de2:	6813      	ldr	r3, [r2, #0]
 8006de4:	1c58      	adds	r0, r3, #1
 8006de6:	6010      	str	r0, [r2, #0]
 8006de8:	7019      	strb	r1, [r3, #0]
 8006dea:	4608      	mov	r0, r1
 8006dec:	bc10      	pop	{r4}
 8006dee:	4770      	bx	lr

08006df0 <__sfputs_r>:
 8006df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df2:	4606      	mov	r6, r0
 8006df4:	460f      	mov	r7, r1
 8006df6:	4614      	mov	r4, r2
 8006df8:	18d5      	adds	r5, r2, r3
 8006dfa:	42ac      	cmp	r4, r5
 8006dfc:	d101      	bne.n	8006e02 <__sfputs_r+0x12>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	e007      	b.n	8006e12 <__sfputs_r+0x22>
 8006e02:	463a      	mov	r2, r7
 8006e04:	4630      	mov	r0, r6
 8006e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0a:	f7ff ffdc 	bl	8006dc6 <__sfputc_r>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d1f3      	bne.n	8006dfa <__sfputs_r+0xa>
 8006e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e14 <_vfiprintf_r>:
 8006e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e18:	460d      	mov	r5, r1
 8006e1a:	4614      	mov	r4, r2
 8006e1c:	4698      	mov	r8, r3
 8006e1e:	4606      	mov	r6, r0
 8006e20:	b09d      	sub	sp, #116	@ 0x74
 8006e22:	b118      	cbz	r0, 8006e2c <_vfiprintf_r+0x18>
 8006e24:	6a03      	ldr	r3, [r0, #32]
 8006e26:	b90b      	cbnz	r3, 8006e2c <_vfiprintf_r+0x18>
 8006e28:	f7fc fdd0 	bl	80039cc <__sinit>
 8006e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e2e:	07d9      	lsls	r1, r3, #31
 8006e30:	d405      	bmi.n	8006e3e <_vfiprintf_r+0x2a>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	059a      	lsls	r2, r3, #22
 8006e36:	d402      	bmi.n	8006e3e <_vfiprintf_r+0x2a>
 8006e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e3a:	f7fc ff12 	bl	8003c62 <__retarget_lock_acquire_recursive>
 8006e3e:	89ab      	ldrh	r3, [r5, #12]
 8006e40:	071b      	lsls	r3, r3, #28
 8006e42:	d501      	bpl.n	8006e48 <_vfiprintf_r+0x34>
 8006e44:	692b      	ldr	r3, [r5, #16]
 8006e46:	b99b      	cbnz	r3, 8006e70 <_vfiprintf_r+0x5c>
 8006e48:	4629      	mov	r1, r5
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f000 f938 	bl	80070c0 <__swsetup_r>
 8006e50:	b170      	cbz	r0, 8006e70 <_vfiprintf_r+0x5c>
 8006e52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e54:	07dc      	lsls	r4, r3, #31
 8006e56:	d504      	bpl.n	8006e62 <_vfiprintf_r+0x4e>
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	b01d      	add	sp, #116	@ 0x74
 8006e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	0598      	lsls	r0, r3, #22
 8006e66:	d4f7      	bmi.n	8006e58 <_vfiprintf_r+0x44>
 8006e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e6a:	f7fc fefb 	bl	8003c64 <__retarget_lock_release_recursive>
 8006e6e:	e7f3      	b.n	8006e58 <_vfiprintf_r+0x44>
 8006e70:	2300      	movs	r3, #0
 8006e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e74:	2320      	movs	r3, #32
 8006e76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e7a:	2330      	movs	r3, #48	@ 0x30
 8006e7c:	f04f 0901 	mov.w	r9, #1
 8006e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007030 <_vfiprintf_r+0x21c>
 8006e88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	469a      	mov	sl, r3
 8006e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e94:	b10a      	cbz	r2, 8006e9a <_vfiprintf_r+0x86>
 8006e96:	2a25      	cmp	r2, #37	@ 0x25
 8006e98:	d1f9      	bne.n	8006e8e <_vfiprintf_r+0x7a>
 8006e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e9e:	d00b      	beq.n	8006eb8 <_vfiprintf_r+0xa4>
 8006ea0:	465b      	mov	r3, fp
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7ff ffa2 	bl	8006df0 <__sfputs_r>
 8006eac:	3001      	adds	r0, #1
 8006eae:	f000 80a7 	beq.w	8007000 <_vfiprintf_r+0x1ec>
 8006eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eb4:	445a      	add	r2, fp
 8006eb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 809f 	beq.w	8007000 <_vfiprintf_r+0x1ec>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ecc:	f10a 0a01 	add.w	sl, sl, #1
 8006ed0:	9304      	str	r3, [sp, #16]
 8006ed2:	9307      	str	r3, [sp, #28]
 8006ed4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ed8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eda:	4654      	mov	r4, sl
 8006edc:	2205      	movs	r2, #5
 8006ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee2:	4853      	ldr	r0, [pc, #332]	@ (8007030 <_vfiprintf_r+0x21c>)
 8006ee4:	f7fc febf 	bl	8003c66 <memchr>
 8006ee8:	9a04      	ldr	r2, [sp, #16]
 8006eea:	b9d8      	cbnz	r0, 8006f24 <_vfiprintf_r+0x110>
 8006eec:	06d1      	lsls	r1, r2, #27
 8006eee:	bf44      	itt	mi
 8006ef0:	2320      	movmi	r3, #32
 8006ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ef6:	0713      	lsls	r3, r2, #28
 8006ef8:	bf44      	itt	mi
 8006efa:	232b      	movmi	r3, #43	@ 0x2b
 8006efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f00:	f89a 3000 	ldrb.w	r3, [sl]
 8006f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f06:	d015      	beq.n	8006f34 <_vfiprintf_r+0x120>
 8006f08:	4654      	mov	r4, sl
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f04f 0c0a 	mov.w	ip, #10
 8006f10:	9a07      	ldr	r2, [sp, #28]
 8006f12:	4621      	mov	r1, r4
 8006f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f18:	3b30      	subs	r3, #48	@ 0x30
 8006f1a:	2b09      	cmp	r3, #9
 8006f1c:	d94b      	bls.n	8006fb6 <_vfiprintf_r+0x1a2>
 8006f1e:	b1b0      	cbz	r0, 8006f4e <_vfiprintf_r+0x13a>
 8006f20:	9207      	str	r2, [sp, #28]
 8006f22:	e014      	b.n	8006f4e <_vfiprintf_r+0x13a>
 8006f24:	eba0 0308 	sub.w	r3, r0, r8
 8006f28:	fa09 f303 	lsl.w	r3, r9, r3
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	46a2      	mov	sl, r4
 8006f30:	9304      	str	r3, [sp, #16]
 8006f32:	e7d2      	b.n	8006eda <_vfiprintf_r+0xc6>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	1d19      	adds	r1, r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	9103      	str	r1, [sp, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bfbb      	ittet	lt
 8006f40:	425b      	neglt	r3, r3
 8006f42:	f042 0202 	orrlt.w	r2, r2, #2
 8006f46:	9307      	strge	r3, [sp, #28]
 8006f48:	9307      	strlt	r3, [sp, #28]
 8006f4a:	bfb8      	it	lt
 8006f4c:	9204      	strlt	r2, [sp, #16]
 8006f4e:	7823      	ldrb	r3, [r4, #0]
 8006f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f52:	d10a      	bne.n	8006f6a <_vfiprintf_r+0x156>
 8006f54:	7863      	ldrb	r3, [r4, #1]
 8006f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f58:	d132      	bne.n	8006fc0 <_vfiprintf_r+0x1ac>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	3402      	adds	r4, #2
 8006f5e:	1d1a      	adds	r2, r3, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	9203      	str	r2, [sp, #12]
 8006f64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f68:	9305      	str	r3, [sp, #20]
 8006f6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007034 <_vfiprintf_r+0x220>
 8006f6e:	2203      	movs	r2, #3
 8006f70:	4650      	mov	r0, sl
 8006f72:	7821      	ldrb	r1, [r4, #0]
 8006f74:	f7fc fe77 	bl	8003c66 <memchr>
 8006f78:	b138      	cbz	r0, 8006f8a <_vfiprintf_r+0x176>
 8006f7a:	2240      	movs	r2, #64	@ 0x40
 8006f7c:	9b04      	ldr	r3, [sp, #16]
 8006f7e:	eba0 000a 	sub.w	r0, r0, sl
 8006f82:	4082      	lsls	r2, r0
 8006f84:	4313      	orrs	r3, r2
 8006f86:	3401      	adds	r4, #1
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8e:	2206      	movs	r2, #6
 8006f90:	4829      	ldr	r0, [pc, #164]	@ (8007038 <_vfiprintf_r+0x224>)
 8006f92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f96:	f7fc fe66 	bl	8003c66 <memchr>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d03f      	beq.n	800701e <_vfiprintf_r+0x20a>
 8006f9e:	4b27      	ldr	r3, [pc, #156]	@ (800703c <_vfiprintf_r+0x228>)
 8006fa0:	bb1b      	cbnz	r3, 8006fea <_vfiprintf_r+0x1d6>
 8006fa2:	9b03      	ldr	r3, [sp, #12]
 8006fa4:	3307      	adds	r3, #7
 8006fa6:	f023 0307 	bic.w	r3, r3, #7
 8006faa:	3308      	adds	r3, #8
 8006fac:	9303      	str	r3, [sp, #12]
 8006fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb0:	443b      	add	r3, r7
 8006fb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fb4:	e76a      	b.n	8006e8c <_vfiprintf_r+0x78>
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	2001      	movs	r0, #1
 8006fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fbe:	e7a8      	b.n	8006f12 <_vfiprintf_r+0xfe>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f04f 0c0a 	mov.w	ip, #10
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	3401      	adds	r4, #1
 8006fca:	9305      	str	r3, [sp, #20]
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd2:	3a30      	subs	r2, #48	@ 0x30
 8006fd4:	2a09      	cmp	r2, #9
 8006fd6:	d903      	bls.n	8006fe0 <_vfiprintf_r+0x1cc>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0c6      	beq.n	8006f6a <_vfiprintf_r+0x156>
 8006fdc:	9105      	str	r1, [sp, #20]
 8006fde:	e7c4      	b.n	8006f6a <_vfiprintf_r+0x156>
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe8:	e7f0      	b.n	8006fcc <_vfiprintf_r+0x1b8>
 8006fea:	ab03      	add	r3, sp, #12
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	4b13      	ldr	r3, [pc, #76]	@ (8007040 <_vfiprintf_r+0x22c>)
 8006ff4:	a904      	add	r1, sp, #16
 8006ff6:	f7fb fe8f 	bl	8002d18 <_printf_float>
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	1c78      	adds	r0, r7, #1
 8006ffe:	d1d6      	bne.n	8006fae <_vfiprintf_r+0x19a>
 8007000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007002:	07d9      	lsls	r1, r3, #31
 8007004:	d405      	bmi.n	8007012 <_vfiprintf_r+0x1fe>
 8007006:	89ab      	ldrh	r3, [r5, #12]
 8007008:	059a      	lsls	r2, r3, #22
 800700a:	d402      	bmi.n	8007012 <_vfiprintf_r+0x1fe>
 800700c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800700e:	f7fc fe29 	bl	8003c64 <__retarget_lock_release_recursive>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	065b      	lsls	r3, r3, #25
 8007016:	f53f af1f 	bmi.w	8006e58 <_vfiprintf_r+0x44>
 800701a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800701c:	e71e      	b.n	8006e5c <_vfiprintf_r+0x48>
 800701e:	ab03      	add	r3, sp, #12
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	462a      	mov	r2, r5
 8007024:	4630      	mov	r0, r6
 8007026:	4b06      	ldr	r3, [pc, #24]	@ (8007040 <_vfiprintf_r+0x22c>)
 8007028:	a904      	add	r1, sp, #16
 800702a:	f7fc f913 	bl	8003254 <_printf_i>
 800702e:	e7e4      	b.n	8006ffa <_vfiprintf_r+0x1e6>
 8007030:	080076f1 	.word	0x080076f1
 8007034:	080076f7 	.word	0x080076f7
 8007038:	080076fb 	.word	0x080076fb
 800703c:	08002d19 	.word	0x08002d19
 8007040:	08006df1 	.word	0x08006df1

08007044 <__swbuf_r>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	460e      	mov	r6, r1
 8007048:	4614      	mov	r4, r2
 800704a:	4605      	mov	r5, r0
 800704c:	b118      	cbz	r0, 8007056 <__swbuf_r+0x12>
 800704e:	6a03      	ldr	r3, [r0, #32]
 8007050:	b90b      	cbnz	r3, 8007056 <__swbuf_r+0x12>
 8007052:	f7fc fcbb 	bl	80039cc <__sinit>
 8007056:	69a3      	ldr	r3, [r4, #24]
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	071a      	lsls	r2, r3, #28
 800705e:	d501      	bpl.n	8007064 <__swbuf_r+0x20>
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	b943      	cbnz	r3, 8007076 <__swbuf_r+0x32>
 8007064:	4621      	mov	r1, r4
 8007066:	4628      	mov	r0, r5
 8007068:	f000 f82a 	bl	80070c0 <__swsetup_r>
 800706c:	b118      	cbz	r0, 8007076 <__swbuf_r+0x32>
 800706e:	f04f 37ff 	mov.w	r7, #4294967295
 8007072:	4638      	mov	r0, r7
 8007074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	6922      	ldr	r2, [r4, #16]
 800707a:	b2f6      	uxtb	r6, r6
 800707c:	1a98      	subs	r0, r3, r2
 800707e:	6963      	ldr	r3, [r4, #20]
 8007080:	4637      	mov	r7, r6
 8007082:	4283      	cmp	r3, r0
 8007084:	dc05      	bgt.n	8007092 <__swbuf_r+0x4e>
 8007086:	4621      	mov	r1, r4
 8007088:	4628      	mov	r0, r5
 800708a:	f7ff fa4b 	bl	8006524 <_fflush_r>
 800708e:	2800      	cmp	r0, #0
 8007090:	d1ed      	bne.n	800706e <__swbuf_r+0x2a>
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	3b01      	subs	r3, #1
 8007096:	60a3      	str	r3, [r4, #8]
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	6022      	str	r2, [r4, #0]
 800709e:	701e      	strb	r6, [r3, #0]
 80070a0:	6962      	ldr	r2, [r4, #20]
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d004      	beq.n	80070b2 <__swbuf_r+0x6e>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	07db      	lsls	r3, r3, #31
 80070ac:	d5e1      	bpl.n	8007072 <__swbuf_r+0x2e>
 80070ae:	2e0a      	cmp	r6, #10
 80070b0:	d1df      	bne.n	8007072 <__swbuf_r+0x2e>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	f7ff fa35 	bl	8006524 <_fflush_r>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d0d9      	beq.n	8007072 <__swbuf_r+0x2e>
 80070be:	e7d6      	b.n	800706e <__swbuf_r+0x2a>

080070c0 <__swsetup_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4b29      	ldr	r3, [pc, #164]	@ (8007168 <__swsetup_r+0xa8>)
 80070c4:	4605      	mov	r5, r0
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	460c      	mov	r4, r1
 80070ca:	b118      	cbz	r0, 80070d4 <__swsetup_r+0x14>
 80070cc:	6a03      	ldr	r3, [r0, #32]
 80070ce:	b90b      	cbnz	r3, 80070d4 <__swsetup_r+0x14>
 80070d0:	f7fc fc7c 	bl	80039cc <__sinit>
 80070d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d8:	0719      	lsls	r1, r3, #28
 80070da:	d422      	bmi.n	8007122 <__swsetup_r+0x62>
 80070dc:	06da      	lsls	r2, r3, #27
 80070de:	d407      	bmi.n	80070f0 <__swsetup_r+0x30>
 80070e0:	2209      	movs	r2, #9
 80070e2:	602a      	str	r2, [r5, #0]
 80070e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	e033      	b.n	8007158 <__swsetup_r+0x98>
 80070f0:	0758      	lsls	r0, r3, #29
 80070f2:	d512      	bpl.n	800711a <__swsetup_r+0x5a>
 80070f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070f6:	b141      	cbz	r1, 800710a <__swsetup_r+0x4a>
 80070f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070fc:	4299      	cmp	r1, r3
 80070fe:	d002      	beq.n	8007106 <__swsetup_r+0x46>
 8007100:	4628      	mov	r0, r5
 8007102:	f7fd fc15 	bl	8004930 <_free_r>
 8007106:	2300      	movs	r3, #0
 8007108:	6363      	str	r3, [r4, #52]	@ 0x34
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	2300      	movs	r3, #0
 8007114:	6063      	str	r3, [r4, #4]
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f043 0308 	orr.w	r3, r3, #8
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	6923      	ldr	r3, [r4, #16]
 8007124:	b94b      	cbnz	r3, 800713a <__swsetup_r+0x7a>
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800712c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007130:	d003      	beq.n	800713a <__swsetup_r+0x7a>
 8007132:	4621      	mov	r1, r4
 8007134:	4628      	mov	r0, r5
 8007136:	f000 f882 	bl	800723e <__smakebuf_r>
 800713a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713e:	f013 0201 	ands.w	r2, r3, #1
 8007142:	d00a      	beq.n	800715a <__swsetup_r+0x9a>
 8007144:	2200      	movs	r2, #0
 8007146:	60a2      	str	r2, [r4, #8]
 8007148:	6962      	ldr	r2, [r4, #20]
 800714a:	4252      	negs	r2, r2
 800714c:	61a2      	str	r2, [r4, #24]
 800714e:	6922      	ldr	r2, [r4, #16]
 8007150:	b942      	cbnz	r2, 8007164 <__swsetup_r+0xa4>
 8007152:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007156:	d1c5      	bne.n	80070e4 <__swsetup_r+0x24>
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	0799      	lsls	r1, r3, #30
 800715c:	bf58      	it	pl
 800715e:	6962      	ldrpl	r2, [r4, #20]
 8007160:	60a2      	str	r2, [r4, #8]
 8007162:	e7f4      	b.n	800714e <__swsetup_r+0x8e>
 8007164:	2000      	movs	r0, #0
 8007166:	e7f7      	b.n	8007158 <__swsetup_r+0x98>
 8007168:	20000028 	.word	0x20000028

0800716c <_raise_r>:
 800716c:	291f      	cmp	r1, #31
 800716e:	b538      	push	{r3, r4, r5, lr}
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	d904      	bls.n	8007180 <_raise_r+0x14>
 8007176:	2316      	movs	r3, #22
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007182:	b112      	cbz	r2, 800718a <_raise_r+0x1e>
 8007184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007188:	b94b      	cbnz	r3, 800719e <_raise_r+0x32>
 800718a:	4628      	mov	r0, r5
 800718c:	f000 f830 	bl	80071f0 <_getpid_r>
 8007190:	4622      	mov	r2, r4
 8007192:	4601      	mov	r1, r0
 8007194:	4628      	mov	r0, r5
 8007196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719a:	f000 b817 	b.w	80071cc <_kill_r>
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d00a      	beq.n	80071b8 <_raise_r+0x4c>
 80071a2:	1c59      	adds	r1, r3, #1
 80071a4:	d103      	bne.n	80071ae <_raise_r+0x42>
 80071a6:	2316      	movs	r3, #22
 80071a8:	6003      	str	r3, [r0, #0]
 80071aa:	2001      	movs	r0, #1
 80071ac:	e7e7      	b.n	800717e <_raise_r+0x12>
 80071ae:	2100      	movs	r1, #0
 80071b0:	4620      	mov	r0, r4
 80071b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071b6:	4798      	blx	r3
 80071b8:	2000      	movs	r0, #0
 80071ba:	e7e0      	b.n	800717e <_raise_r+0x12>

080071bc <raise>:
 80071bc:	4b02      	ldr	r3, [pc, #8]	@ (80071c8 <raise+0xc>)
 80071be:	4601      	mov	r1, r0
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	f7ff bfd3 	b.w	800716c <_raise_r>
 80071c6:	bf00      	nop
 80071c8:	20000028 	.word	0x20000028

080071cc <_kill_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	2300      	movs	r3, #0
 80071d0:	4d06      	ldr	r5, [pc, #24]	@ (80071ec <_kill_r+0x20>)
 80071d2:	4604      	mov	r4, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	4611      	mov	r1, r2
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	f7fa f8b6 	bl	800134a <_kill>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d102      	bne.n	80071e8 <_kill_r+0x1c>
 80071e2:	682b      	ldr	r3, [r5, #0]
 80071e4:	b103      	cbz	r3, 80071e8 <_kill_r+0x1c>
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	bf00      	nop
 80071ec:	2000039c 	.word	0x2000039c

080071f0 <_getpid_r>:
 80071f0:	f7fa b8a4 	b.w	800133c <_getpid>

080071f4 <__swhatbuf_r>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	460c      	mov	r4, r1
 80071f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fc:	4615      	mov	r5, r2
 80071fe:	2900      	cmp	r1, #0
 8007200:	461e      	mov	r6, r3
 8007202:	b096      	sub	sp, #88	@ 0x58
 8007204:	da0c      	bge.n	8007220 <__swhatbuf_r+0x2c>
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	2100      	movs	r1, #0
 800720a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800720e:	bf14      	ite	ne
 8007210:	2340      	movne	r3, #64	@ 0x40
 8007212:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007216:	2000      	movs	r0, #0
 8007218:	6031      	str	r1, [r6, #0]
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	b016      	add	sp, #88	@ 0x58
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	466a      	mov	r2, sp
 8007222:	f000 f849 	bl	80072b8 <_fstat_r>
 8007226:	2800      	cmp	r0, #0
 8007228:	dbed      	blt.n	8007206 <__swhatbuf_r+0x12>
 800722a:	9901      	ldr	r1, [sp, #4]
 800722c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007230:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007234:	4259      	negs	r1, r3
 8007236:	4159      	adcs	r1, r3
 8007238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800723c:	e7eb      	b.n	8007216 <__swhatbuf_r+0x22>

0800723e <__smakebuf_r>:
 800723e:	898b      	ldrh	r3, [r1, #12]
 8007240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007242:	079d      	lsls	r5, r3, #30
 8007244:	4606      	mov	r6, r0
 8007246:	460c      	mov	r4, r1
 8007248:	d507      	bpl.n	800725a <__smakebuf_r+0x1c>
 800724a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	2301      	movs	r3, #1
 8007254:	6163      	str	r3, [r4, #20]
 8007256:	b003      	add	sp, #12
 8007258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725a:	466a      	mov	r2, sp
 800725c:	ab01      	add	r3, sp, #4
 800725e:	f7ff ffc9 	bl	80071f4 <__swhatbuf_r>
 8007262:	9f00      	ldr	r7, [sp, #0]
 8007264:	4605      	mov	r5, r0
 8007266:	4639      	mov	r1, r7
 8007268:	4630      	mov	r0, r6
 800726a:	f7fd fbd3 	bl	8004a14 <_malloc_r>
 800726e:	b948      	cbnz	r0, 8007284 <__smakebuf_r+0x46>
 8007270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007274:	059a      	lsls	r2, r3, #22
 8007276:	d4ee      	bmi.n	8007256 <__smakebuf_r+0x18>
 8007278:	f023 0303 	bic.w	r3, r3, #3
 800727c:	f043 0302 	orr.w	r3, r3, #2
 8007280:	81a3      	strh	r3, [r4, #12]
 8007282:	e7e2      	b.n	800724a <__smakebuf_r+0xc>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800728a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	9b01      	ldr	r3, [sp, #4]
 8007292:	6020      	str	r0, [r4, #0]
 8007294:	b15b      	cbz	r3, 80072ae <__smakebuf_r+0x70>
 8007296:	4630      	mov	r0, r6
 8007298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800729c:	f000 f81e 	bl	80072dc <_isatty_r>
 80072a0:	b128      	cbz	r0, 80072ae <__smakebuf_r+0x70>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	f023 0303 	bic.w	r3, r3, #3
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	431d      	orrs	r5, r3
 80072b2:	81a5      	strh	r5, [r4, #12]
 80072b4:	e7cf      	b.n	8007256 <__smakebuf_r+0x18>
	...

080072b8 <_fstat_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	2300      	movs	r3, #0
 80072bc:	4d06      	ldr	r5, [pc, #24]	@ (80072d8 <_fstat_r+0x20>)
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	4611      	mov	r1, r2
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	f7fa f89f 	bl	8001408 <_fstat>
 80072ca:	1c43      	adds	r3, r0, #1
 80072cc:	d102      	bne.n	80072d4 <_fstat_r+0x1c>
 80072ce:	682b      	ldr	r3, [r5, #0]
 80072d0:	b103      	cbz	r3, 80072d4 <_fstat_r+0x1c>
 80072d2:	6023      	str	r3, [r4, #0]
 80072d4:	bd38      	pop	{r3, r4, r5, pc}
 80072d6:	bf00      	nop
 80072d8:	2000039c 	.word	0x2000039c

080072dc <_isatty_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	2300      	movs	r3, #0
 80072e0:	4d05      	ldr	r5, [pc, #20]	@ (80072f8 <_isatty_r+0x1c>)
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fa f89d 	bl	8001426 <_isatty>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_isatty_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_isatty_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	2000039c 	.word	0x2000039c

080072fc <_init>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr

08007308 <_fini>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr
